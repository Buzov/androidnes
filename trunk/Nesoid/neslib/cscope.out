cscope 15 $HOME/src/android/packages/apps/Nesoid/jni               0001483082
	@banksw.h

22 
	$FASTAPASS
(2Ë
	$VRAM_BANK1
(
uöt32
 
A
, 
uöt8
 
V
)

24 
V
&=7;

25 
PPUCHRRAM
|=(1<<(
A
>>10));

26 
CHRB™kLi°
[(
A
)>>10]=
V
;

27 
VPage
[(
A
)>>10]=&
CHRRAM
[
V
<<10]-(A);

28 
	}
}

30 
	$FASTAPASS
(2Ë
	$VRAM_BANK4
(
uöt32
 
A
, uöt32 
V
)

32 
V
&=1;

33 
PPUCHRRAM
|=(0xF<<(
A
>>10));

34 
CHRB™kLi°
[(
A
)>>10]=(
V
<<2);

35 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<2)+1;

36 
CHRB™kLi°
[((
A
)>>10)+2]=(
V
<<2)+2;

37 
CHRB™kLi°
[((
A
)>>10)+3]=(
V
<<2)+3;

38 
VPage
[(
A
)>>10]=&
CHRRAM
[
V
<<10]-(A);

39 
	}
}

41 
	$FASTAPASS
(2Ë
	$VROM_BANK1
(
uöt32
 
A
,uöt32 
V
)

43 
	`£tchr1
(
A
,
V
);

44 
CHRB™kLi°
[(
A
)>>10]=
V
;

45 
	}
}

47 
	$FASTAPASS
(2Ë
	$VROM_BANK2
(
uöt32
 
A
,uöt32 
V
)

49 
	`£tchr2
(
A
,
V
);

50 
CHRB™kLi°
[(
A
)>>10]=(
V
<<1);

51 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<1)+1;

52 
	}
}

54 
	$FASTAPASS
(2Ë
	$VROM_BANK4
(
uöt32
 
A
, uöt32 
V
)

56 
	`£tchr4
(
A
,
V
);

57 
CHRB™kLi°
[(
A
)>>10]=(
V
<<2);

58 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<2)+1;

59 
CHRB™kLi°
[((
A
)>>10)+2]=(
V
<<2)+2;

60 
CHRB™kLi°
[((
A
)>>10)+3]=(
V
<<2)+3;

61 
	}
}

63 
	$FASTAPASS
(1Ë
	$VROM_BANK8
(
uöt32
 
V
)

65 
	`£tchr8
(
V
);

66 
CHRB™kLi°
[0]=(
V
<<3);

67 
CHRB™kLi°
[1]=(
V
<<3)+1;

68 
CHRB™kLi°
[2]=(
V
<<3)+2;

69 
CHRB™kLi°
[3]=(
V
<<3)+3;

70 
CHRB™kLi°
[4]=(
V
<<3)+4;

71 
CHRB™kLi°
[5]=(
V
<<3)+5;

72 
CHRB™kLi°
[6]=(
V
<<3)+6;

73 
CHRB™kLi°
[7]=(
V
<<3)+7;

74 
	}
}

76 
	$FASTAPASS
(2Ë
	$ROM_BANK8
(
uöt32
 
A
, uöt32 
V
)

78 
	`£çrg8
(
A
,
V
);

79 if(
A
>=0x8000)

80 
PRGB™kLi°
[((
A
-0x8000)>>13)]=
V
;

81 
	}
}

83 
	$FASTAPASS
(2Ë
	$ROM_BANK16
(
uöt32
 
A
, uöt32 
V
)

85 
	`£çrg16
(
A
,
V
);

86 if(
A
>=0x8000)

88 
PRGB™kLi°
[((
A
-0x8000)>>13)]=
V
<<1;

89 
PRGB™kLi°
[((
A
-0x8000)>>13)+1]=(
V
<<1)+1;

91 
	}
}

93 
	$FASTAPASS
(2Ë
	$ROM_BANK32
(
uöt32
 
V
)

95 
	`£çrg32
(0x8000,
V
);

96 
PRGB™kLi°
[0]=
V
<<2;

97 
PRGB™kLi°
[1]=(
V
<<2)+1;

98 
PRGB™kLi°
[2]=(
V
<<2)+2;

99 
PRGB™kLi°
[3]=(
V
<<2)+3;

100 
	}
}

	@boards/112.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gªg
[8];

24 
uöt8
 
	gmúr‹
, 
	gcmd
;

25 
uöt8
 *
	gWRAM
=
NULL
;

27 
SFORMAT
 
	gSèãRegs
[]=

29 {&
cmd
, 1, "CMD"},

30 {&
múr‹
, 1, "MIRR"},

31 {
ªg
, 8, "REGS"},

35 
	$Sync
()

37 
	`£tmúr‹
(
múr‹
^1);

38 
	`£çrg8
(0x8000,
ªg
[0]);

39 
	`£çrg8
(0xA000,
ªg
[1]);

40 
	`£tchr2
(0x0000,
ªg
[2]>>1);

41 
	`£tchr2
(0x0800,
ªg
[3]>>1);

42 
	`£tchr1
(0x1000,
ªg
[4]);

43 
	`£tchr1
(0x1400,
ªg
[5]);

44 
	`£tchr1
(0x1800,
ªg
[6]);

45 
	`£tchr1
(0x1C00,
ªg
[7]);

46 
	}
}

48 
	$DECLFW
(
M112Wrôe
)

50 
A
)

52 0xe000: 
múr‹
=
V
&1; 
	`Sync
(); ;;

53 0x8000: 
cmd
=
V
&7; ;

54 0xa000: 
ªg
[
cmd
]=
V
; 
	`Sync
(); ;

56 
	`FCEU_¥ötf
("%04x:%04x %d\n",
A
,
V
,
sˇ∆öe
);

57 
	}
}

59 
	$M112Clo£
()

61 if(
WRAM
)

62 
	`FCEU_g‰ì
(
WRAM
);

63 
WRAM
 = 
NULL
;

64 
	}
}

66 
	$M112Powî
()

68 
	`£çrg16
(0xC000,~0);

69 
	`£çrg8r
(0x10,0x6000,0);

70 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

71 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M112Wrôe
);

72 
	`SëRódH™dÀr
(0x6000,0x7FFF,
C¨tBR
);

73 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
C¨tBW
);

74 
	}
}

76 
	$SèãRe°‹e
(
vîsi⁄
)

78 
	`Sync
();

79 
	}
}

81 
	$M≠≥r112_Inô
(
C¨tInfo
 *
öfo
)

83 
öfo
->
Powî
=
M112Powî
;

84 
öfo
->
Clo£
=
M112Clo£
;

85 
GameSèãRe°‹e
=
SèãRe°‹e
;

86 
WRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

87 
	`SëupC¨tPRGM≠pög
(0x10,
WRAM
,8192,1);

88 
	`AddExSèã
(
WRAM
, 8192, 0, "WRAM");

89 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

90 
	}
}

	@boards/117.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	g¥gªg
[4], 
	gchºeg
[8];

24 
uöt8
 
	gIRQa
, 
	gIRQCou¡
, 
	gIRQL©ch
;

26 
SFORMAT
 
	gSèãRegs
[]=

28 {&
IRQa
, 1, "IRQA"},

29 {&
IRQCou¡
, 1, "IRQC"},

30 {&
IRQL©ch
, 1, "IRQL"},

31 {
¥gªg
, 4, "PREGS"},

32 {
chºeg
, 8, "CREGS"},

36 
	$Sync
()

38 
	`£çrg8
(0x8000,
¥gªg
[0]);

39 
	`£çrg8
(0xa000,
¥gªg
[1]);

40 
	`£çrg8
(0xc000,
¥gªg
[2]);

41 
	`£çrg8
(0xe000,
¥gªg
[3]);

42 
i
;

43 
i
=0; i<8; i++)

44 
	`£tchr1
(
i
<<10,
chºeg
[i]);

45 
	}
}

47 
	$DECLFW
(
M117Wrôe
)

49 if(
A
<0x8004)

51 
¥gªg
[
A
&3]=
V
;

52 
	`Sync
();

54 if((
A
>=0xA000)&&(A<=0xA007))

56 
chºeg
[
A
&7]=
V
;

57 
	`Sync
();

59 
A
)

61 0xc001: 
IRQL©ch
=
V
; ;

62 0xc003: 
IRQCou¡
=
IRQL©ch
; 
IRQa
|=2; ;

63 0xe000: 
IRQa
&=~1; IRQa|=
V
&1; 
	`X6502_IRQEnd
(
FCEU_IQEXT
); ;

64 0xc002: 
	`X6502_IRQEnd
(
FCEU_IQEXT
); ;

66 
	}
}

68 
	$M117Powî
()

70 
¥gªg
[0]=~3;Örgreg[1]=~2;Örgreg[2]=~1;Örgreg[3]=~0;

71 
	`Sync
();

72 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

73 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M117Wrôe
);

74 
	}
}

76 
	$M117IRQHook
()

78 if(
IRQa
==3&&
IRQCou¡
)

80 
IRQCou¡
--;

81 if(!
IRQCou¡
)

83 
IRQa
&=1;

84 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

87 
	}
}

89 
	$SèãRe°‹e
(
vîsi⁄
)

91 
	`Sync
();

92 
	}
}

94 
	$M≠≥r117_Inô
(
C¨tInfo
 *
öfo
)

96 
öfo
->
Powî
=
M117Powî
;

97 
GameHBIRQHook
=
M117IRQHook
;

98 
GameSèãRe°‹e
=
SèãRe°‹e
;

99 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

100 
	}
}

	@boards/164.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gcmd
;

24 
uöt8
 
	gDRegs
[8];

25 
SFORMAT
 
	gSèãRegs
[]=

27 {&
cmd
, 1, "CMD"},

28 {
DRegs
, 8, "DREG"},

32 
	$Sync
()

34 
	`£çrg32
(0x8000,(
DRegs
[0]<<4)|(DRegs[1]&0xF));

35 
	`£tchr8
(0);

36 
	}
}

38 
	$SèãRe°‹e
(
vîsi⁄
)

40 
	`Sync
();

41 
	}
}

43 
	$DECLFW
(
Wrôe
)

45 
A
&0x7300)

47 0x5100: 
DRegs
[0]=
V
; 
	`Sync
(); ;

48 0x5000: 
DRegs
[1]=
V
; 
	`Sync
(); ;

50 
	}
}

52 
	$DECLFW
(
Wrôe2
)

54 
A
&0x7300)

56 0x5200: 
DRegs
[0]=
V
; 
	`Sync
(); ;

57 0x5000: 
DRegs
[1]=
V
; 
	`Sync
(); ;

59 
	}
}

61 
uöt8
 
	gWRAM
[8192];

62 
	$DECLFR
(
AWRAM
)

64 (
WRAM
[
A
-0x6000]);

65 
	}
}

67 
	$DECLFW
(
BWRAM
)

69 
WRAM
[
A
-0x6000]=
V
;

70 
	}
}

72 
	$Powî
()

74 
	`mem£t
(
DRegs
,0,8);

75 
DRegs
[1]=0xFF;

76 
cmd
=0;

77 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

78 
	`SëWrôeH™dÀr
(0x4020,0xFFFF,
Wrôe
);

79 
	`SëRódH™dÀr
(0x6000,0x7FFF,
AWRAM
);

80 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
BWRAM
);

81 
	`Sync
();

82 
	}
}

84 
	$M163HB
()

86 if(
sˇ∆öe
==127&&
DRegs
[1]&0x80)

87 
	`£tchr4
(0x0000,1);

88 
	}
}

91 
	$Powî2
()

93 
	`mem£t
(
DRegs
,0,8);

94 
DRegs
[1]=0xFF;

95 
cmd
=0;

96 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

97 
	`SëWrôeH™dÀr
(0x4020,0xFFFF,
Wrôe2
);

98 
	`SëRódH™dÀr
(0x6000,0x7FFF,
AWRAM
);

99 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
BWRAM
);

100 
	`Sync
();

101 
	}
}

103 
	$M≠≥r164_Inô
(
C¨tInfo
 *
öfo
)

105 
öfo
->
Powî
=Power;

106 
GameSèãRe°‹e
=
SèãRe°‹e
;

107 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

108 
	}
}

110 
	$M≠≥r163_Inô
(
C¨tInfo
 *
öfo
)

112 
öfo
->
Powî
=
Powî2
;

113 
GameHBIRQHook
=
M163HB
;

114 
GameSèãRe°‹e
=
SèãRe°‹e
;

115 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

116 
	}
}

	@boards/183.c

23 
	~"m≠öc.h
"

25 
uöt8
 
	g¥g
[4];

26 
uöt8
 
	gchr
[8];

27 
uöt8
 
	gIRQCou¡
;

28 
uöt8
 
	gIRQPª
;

29 
uöt8
 
	gIRQa
;

31 
SFORMAT
 
	gSèãRegs
[]=

33 {
¥g
, 4, "PRG"},

34 {
chr
, 8, "CHR"},

35 {&
IRQCou¡
, 1, "IRQCOUNT"},

36 {&
IRQPª
, 1, "IRQPRE"},

37 {&
IRQa
, 1, "IRQA"},

41 
	$SyncPrg
()

43 
	`£çrg8
(0x6000,0);

44 
	`£çrg8
(0x8000,
¥g
[0]);

45 
	`£çrg8
(0xA000,
¥g
[1]);

46 
	`£çrg8
(0xC000,
¥g
[2]);

47 
	`£çrg8
(0xE000,~0);

48 
	}
}

50 
	$SyncChr
()

52 
i
;

53 
i
=0; i<8; i++)

54 
	`£tchr1
(
i
<<10,
chr
[i]);

55 
	}
}

57 
	$SèãRe°‹e
(
vîsi⁄
)

59 
	`SyncPrg
();

60 
	`SyncChr
();

61 
	}
}

63 
	$DECLFW
(
M183Wrôe
)

65 if(((
A
&0xF80C)>=0xB000)&&((A&0xF80C)<=0xE00C))

67 
uöt8
 
ödex
=(((
A
&0x7000)>>11)-6)|((A&8)>>3);

68 
chr
[
ödex
]=(chr[ödex]&(0xF0>>(
A
&4)))|((
V
&0x0F)<<(A&4));

69 
	`SyncChr
();

71 
A
&0xF80C)

73 0x8800: 
¥g
[0]=
V
; 
	`SyncPrg
(); ;

74 0xA800: 
¥g
[1]=
V
; 
	`SyncPrg
(); ;

75 0xA000: 
¥g
[2]=
V
; 
	`SyncPrg
(); ;

76 0x9800: 
V
&3)

78 0: 
	`£tmúr‹
(
MI_V
); ;

79 1: 
	`£tmúr‹
(
MI_H
); ;

80 2: 
	`£tmúr‹
(
MI_0
); ;

81 3: 
	`£tmúr‹
(
MI_1
); ;

84 0xF000: 
IRQCou¡
=((IRQCou¡&0xF0)|(
V
&0xF)); ;

85 0xF004: 
IRQCou¡
=((IRQCou¡&0x0F)|((
V
&0xF)<<4)); ;

86 0xF008: 
IRQa
=
V
; if(!V)
IRQPª
=0; 
	`X6502_IRQEnd
(
FCEU_IQEXT
); ;

87 0xF00C: 
IRQPª
=16; ;

89 
	}
}

91 
	$M183IRQCou¡î
()

93 if(
IRQa
)

95 
IRQCou¡
++;

96 if((
IRQCou¡
-
IRQPª
)==238)

97 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

99 
	}
}

101 
	$M183Powî
()

103 
IRQPª
=
IRQCou¡
=
IRQa
=0;

104 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

105 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M183Wrôe
);

106 
	`SëRódH™dÀr
(0x6000,0x7FFF,
C¨tBR
);

107 
	`SyncPrg
();

108 
	`SyncChr
();

109 
	}
}

111 
	$M≠≥r183_Inô
(
C¨tInfo
 *
öfo
)

113 
öfo
->
Powî
=
M183Powî
;

114 
GameHBIRQHook
=
M183IRQCou¡î
;

115 
GameSèãRe°‹e
=
SèãRe°‹e
;

116 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

117 
	}
}

	@boards/185.c

23 
	~"m≠öc.h
"

25 
uöt8
 *
	gDummyCHR
=
NULL
;

26 
uöt8
 
	gd©¨eg
;

27 (*
Sync
)();

30 
SFORMAT
 
SèãRegs
[]=

32 {&
d©¨eg
, 1, "DREG"},

34 
	}
};

45 
	$Sync185
()

48 if((
d©¨eg
&3)&&(datareg!=0x13))

49 
	`£tchr8
(0);

51 
	`£tchr8r
(0x10,0);

52 
	}
}

54 
	$Sync181
()

56 if(!(
d©¨eg
&1))

57 
	`£tchr8
(0);

59 
	`£tchr8r
(0x10,0);

60 
	}
}

62 
	$DECLFW
(
MWrôe
)

64 
d©¨eg
=
V
;

65 
	`Sync
();

66 
	}
}

68 
	$MPowî
()

70 
d©¨eg
=0;

71 
	`Sync
();

72 
	`£çrg16
(0x8000,0);

73 
	`£çrg16
(0xC000,~0);

74 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
MWrôe
);

75 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

76 
	}
}

78 
	$MClo£
()

80 if(
DummyCHR
)

81 
	`FCEU_g‰ì
(
DummyCHR
);

82 
DummyCHR
=
NULL
;

83 
	}
}

85 
	$MRe°‹e
(
vîsi⁄
)

87 
	`Sync
();

88 
	}
}

90 
	$M≠≥r185_Inô
(
C¨tInfo
 *
öfo
)

92 
Sync
=
Sync185
;

93 
öfo
->
Powî
=
MPowî
;

94 
öfo
->
Clo£
=
MClo£
;

95 
GameSèãRe°‹e
=
MRe°‹e
;

96 
DummyCHR
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

97 
x
;

98 
x
=0;x<8192;x++)

99 
DummyCHR
[
x
]=0xff;

100 
	`SëupC¨tCHRM≠pög
(0x10,
DummyCHR
,8192,0);

101 
	`AddExSèã
(
SèãRegs
, ~0, 0, 0);

102 
	}
}

104 
	$M≠≥r181_Inô
(
C¨tInfo
 *
öfo
)

106 
Sync
=
Sync181
;

107 
öfo
->
Powî
=
MPowî
;

108 
öfo
->
Clo£
=
MClo£
;

109 
GameSèãRe°‹e
=
MRe°‹e
;

110 
DummyCHR
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

111 
x
;

112 
x
=0;x<8192;x++)

113 
DummyCHR
[
x
]=0xff;

114 
	`SëupC¨tCHRM≠pög
(0x10,
DummyCHR
,8192,0);

115 
	`AddExSèã
(
SèãRegs
, ~0, 0, 0);

116 
	}
}

	@boards/186.c

23 
	~"m≠öc.h
"

25 
uöt8
 
	gSWRAM
[2816];

26 
uöt8
 *
	gWRAM
=
NULL
;

27 
uöt8
 
	gªgs
[4];

29 
SFORMAT
 
	gSèãRegs
[]=

31 {
ªgs
, 4, "DREG"},

32 {
SWRAM
, 2816, "SWRAM"},

36 
	$Sync
()

38 
	`£çrg8r
(0x10,0x6000,
ªgs
[0]>>6);

39 
	`£çrg16
(0x8000,
ªgs
[1]);

40 
	`£çrg16
(0xc000,0);

41 
	}
}

43 
	$DECLFW
(
M186Wrôe
)

45 if(
A
&0x4203Ë
ªgs
[A&3]=
V
;

46 
	`Sync
();

47 
	}
}

49 
	$DECLFR
(
M186Ród
)

51 
A
)

59 
	}
}

61 
	$DECLFR
(
ASWRAM
)

63 (
SWRAM
[
A
-0x4400]);

64 
	}
}

65 
	$DECLFW
(
BSWRAM
)

67 
SWRAM
[
A
-0x4400]=
V
;

68 
	}
}

70 
	$M186Powî
()

72 
	`£tchr8
(0);

73 
	`SëRódH™dÀr
(0x6000,0xFFFF,
C¨tBR
);

74 
	`SëWrôeH™dÀr
(0x6000,0xFFFF,
C¨tBW
);

75 
	`SëRódH™dÀr
(0x4200,0x43FF,
M186Ród
);

76 
	`SëWrôeH™dÀr
(0x4200,0x43FF,
M186Wrôe
);

77 
	`SëRódH™dÀr
(0x4400,0x4EFF,
ASWRAM
);

78 
	`SëWrôeH™dÀr
(0x4400,0x4EFF,
BSWRAM
);

79 
ªgs
[0]=regs[1]=regs[2]=regs[3];

80 
	`Sync
();

81 
	}
}

83 
	$M186Clo£
()

85 if(
WRAM
)

86 
	`FCEU_g‰ì
(
WRAM
);

87 
WRAM
=
NULL
;

88 
	}
}

90 
	$M186Re°‹e
(
vîsi⁄
)

92 
	`Sync
();

93 
	}
}

95 
	$M≠≥r186_Inô
(
C¨tInfo
 *
öfo
)

97 
öfo
->
Powî
=
M186Powî
;

98 
öfo
->
Clo£
=
M186Clo£
;

99 
GameSèãRe°‹e
=
M186Re°‹e
;

100 
WRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(32384);

101 
	`SëupC¨tPRGM≠pög
(0x10,
WRAM
,32384,1);

102 
	`AddExSèã
(
WRAM
, 32384, 0, "WRAM");

103 
	`AddExSèã
(
SèãRegs
, ~0, 0, 0);

104 
	}
}

	@boards/187.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
	$M187CW
(
uöt32
 
A
, 
uöt8
 
V
)

26 if((
A
&0x1000)==((
MMC3_cmd
&0x80)<<5))

27 
	`£tchr1
(
A
,
V
|0x100);

29 
	`£tchr1
(
A
,
V
);

30 
	}
}

32 
	$M187PW
(
uöt32
 
A
, 
uöt8
 
V
)

34 if(
EXPREGS
[0]&0x80)

36 
uöt8
 
b™k
=
EXPREGS
[0]&0x1F;

37 if(
EXPREGS
[0]&0x20)

38 
	`£çrg32
(0x8000,
b™k
>>2);

41 
	`£çrg16
(0x8000,
b™k
);

42 
	`£çrg16
(0xC000,
b™k
);

46 
	`£çrg8
(
A
,
V
&0x3F);

47 
	}
}

49 
	$DECLFW
(
M187Wrôe8000
)

51 
EXPREGS
[2]=1;

52 
	`MMC3_CMDWrôe
(
A
,
V
);

53 
	}
}

55 
	$DECLFW
(
M187Wrôe8001
)

57 if(
EXPREGS
[2])

58 
	`MMC3_CMDWrôe
(
A
,
V
);

59 
	}
}

61 
	$DECLFW
(
M187Wrôe8003
)

63 
EXPREGS
[2]=0;

64 if(
V
==0x28)
	`£çrg8
(0xC000,0x17);

65 if(
V
==0x2A)
	`£çrg8
(0xA000,0x0F);

66 
	}
}

69 
	$DECLFW
(
M187WrôeLo
)

71 
EXPREGS
[1]=
V
;

72 if(
A
==0x5000)

74 
EXPREGS
[0]=
V
;

75 
	`FixMMC3PRG
(
MMC3_cmd
);

77 
	}
}

79 
uöt8
 
	g¥Ÿ_d©a
[4] = { 0x83, 0x83, 0x42, 0x00 };

80 
	$DECLFR
(
M187Ród
)

82  
¥Ÿ_d©a
[
EXPREGS
[1]&3];

83 
	}
}

85 
	$M187Powî
()

87 
EXPREGS
[0]=EXPREGS[1]=EXPREGS[2]=0;

88 
	`GíMMC3Powî
();

89 
	`Wrôe_IRQFM
(0x4017,0x40);

90 
	`SëRódH™dÀr
(0x5000,0x5FFF,
M187Ród
);

91 
	`SëWrôeH™dÀr
(0x5000,0x5FFF,
M187WrôeLo
);

92 
	`SëWrôeH™dÀr
(0x8000,0x8000,
M187Wrôe8000
);

93 
	`SëWrôeH™dÀr
(0x8001,0x8001,
M187Wrôe8001
);

94 
	`SëWrôeH™dÀr
(0x8003,0x8003,
M187Wrôe8003
);

95 
	}
}

97 
	$M≠≥r187_Inô
(
C¨tInfo
 *
öfo
)

99 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

100 
pwøp
=
M187PW
;

101 
cwøp
=
M187CW
;

102 
öfo
->
Powî
=
M187Powî
;

103 
	`AddExSèã
(
EXPREGS
, 3, 0, "EXPR");

104 
	}
}

	@boards/189.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
	$M189PW
(
uöt32
 
A
, 
uöt8
 
V
)

26 
	`£çrg32
(0x8000,
EXPREGS
[0]&3);

27 
	}
}

29 
	$DECLFW
(
M189Wrôe
)

31 
EXPREGS
[0]=
V
|(V>>4);

32 
	`FixMMC3PRG
(
MMC3_cmd
);

33 
	}
}

35 
	$M189Powî
()

37 
EXPREGS
[0]=EXPREGS[1]=0;

38 
	`GíMMC3Powî
();

39 
	`SëWrôeH™dÀr
(0x4120,0x7FFF,
M189Wrôe
);

40 
	}
}

42 
	$M≠≥r189_Inô
(
C¨tInfo
 *
öfo
)

44 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

45 
pwøp
=
M189PW
;

46 
öfo
->
Powî
=
M189Powî
;

47 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

48 
	}
}

	@boards/208.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
uöt8
 
	glut
[256]={

43 
	$M208PW
(
uöt32
 
A
, 
uöt8
 
V
)

45 
	`£çrg32
(0x8000,
EXPREGS
[5]);

46 
	}
}

48 
	$DECLFW
(
M208Wrôe
)

50 
EXPREGS
[5]=(
V
&0x1)|((V>>3)&0x2);

51 
	`FixMMC3PRG
(
MMC3_cmd
);

52 
	}
}

54 
	$DECLFW
(
M208PrŸWrôe
)

56 if(
A
<=0x57FF)

57 
EXPREGS
[4]=
V
;

59 
EXPREGS
[(
A
&0x03)]=
V
^
lut
[EXPREGS[4]];

60 
	}
}

62 
	$DECLFR
(
M208PrŸRód
)

64 (
EXPREGS
[(
A
&0x3)]);

65 
	}
}

67 
	$M208Powî
()

69 
EXPREGS
[5]=3;

70 
	`GíMMC3Powî
();

71 
	`SëWrôeH™dÀr
(0x4800,0x4FFF,
M208Wrôe
);

72 
	`SëWrôeH™dÀr
(0x5000,0x5fff,
M208PrŸWrôe
);

73 
	`SëRódH™dÀr
(0x5800,0x5FFF,
M208PrŸRód
);

74 
	`SëRódH™dÀr
(0x8000,0xffff,
C¨tBR
);

75 
	}
}

77 
	$M≠≥r208_Inô
(
C¨tInfo
 *
öfo
)

79 
	`GíMMC3_Inô
(
öfo
, 128, 256, 0, 0);

80 
pwøp
=
M208PW
;

81 
öfo
->
Powî
=
M208Powî
;

82 
	`AddExSèã
(
EXPREGS
, 6, 0, "EXPR");

83 
	}
}

	@boards/222.c

22 
	~"m≠öc.h
"

24 
uöt16
 
	gIRQCou¡
;

25 
uöt8
 
	gIRQa
;

26 
uöt8
 
	g¥g_ªg
[2];

27 
uöt8
 
	gchr_ªg
[8];

29 
SFORMAT
 
	gSèãRegs
[]=

31 {&
IRQCou¡
, 2, "IRQC"},

32 {&
IRQa
, 2, "IRQA"},

33 {
¥g_ªg
, 2, "PRG"},

34 {
chr_ªg
, 8, "CHR"},

38 
	$M222IRQ
()

40 if(
IRQa
)

42 
IRQCou¡
++;

43 if(
IRQCou¡
>=240)

45 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

46 
IRQa
=0;

49 
	}
}

51 
	$Sync
()

53 
	`£çrg8
(0x8000,
¥g_ªg
[0]);

54 
	`£çrg8
(0xA000,
¥g_ªg
[1]);

55 
i
;

56 
i
=0; i<8; i++)

57 
	`£tchr1
(
i
<<10,
chr_ªg
[i]);

58 
	}
}

60 
	$DECLFW
(
M222Wrôe
)

62 
A
&0xF003)

64 0x8000: 
¥g_ªg
[0]=
V
; ;

65 0xA000: 
¥g_ªg
[1]=
V
; ;

66 0xB000: 
chr_ªg
[0]=
V
; ;

67 0xB002: 
chr_ªg
[1]=
V
; ;

68 0xC000: 
chr_ªg
[2]=
V
; ;

69 0xC002: 
chr_ªg
[3]=
V
; ;

70 0xD000: 
chr_ªg
[4]=
V
; ;

71 0xD002: 
chr_ªg
[5]=
V
; ;

72 0xE000: 
chr_ªg
[6]=
V
; ;

73 0xE002: 
chr_ªg
[7]=
V
; ;

74 0xF000: 
IRQCou¡
=
IRQa
=
V
;

75 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

78 
	`Sync
();

79 
	}
}

81 
	$M222Powî
()

83 
	`£çrg16
(0xC000,~0);

84 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

85 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M222Wrôe
);

86 
	}
}

88 
	$SèãRe°‹e
(
vîsi⁄
)

90 
	`Sync
();

91 
	}
}

93 
	$M≠≥r222_Inô
(
C¨tInfo
 *
öfo
)

95 
öfo
->
Powî
=
M222Powî
;

96 
GameHBIRQHook
=
M222IRQ
;

97 
GameSèãRe°‹e
=
SèãRe°‹e
;

98 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

99 
	}
}

	@boards/235.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gcmdªg
;

24 
SFORMAT
 
	gSèãRegs
[]=

26 {&
cmdªg
, 2, "CMDREG"},

30 
	$Sync
()

32 if(
cmdªg
&0x400)

33 
	`£tmúr‹
(
MI_0
);

35 
	`£tmúr‹
(((
cmdªg
>>13)&1)^1);

36 if(
cmdªg
&0x800)

38 
	`£çrg16
(0x8000,((
cmdªg
&0x300)>>3)|((cmdreg&0x1F)<<1)|((cmdreg>>12)&1));

39 
	`£çrg16
(0xC000,((
cmdªg
&0x300)>>3)|((cmdreg&0x1F)<<1)|((cmdreg>>12)&1));

42 
	`£çrg32
(0x8000,((
cmdªg
&0x300)>>4)|(cmdreg&0x1F));

43 
	}
}

45 
	$DECLFW
(
M235Wrôe
)

47 
cmdªg
=
A
;

48 
	`Sync
();

49 
	}
}

51 
	$M235Powî
()

53 
	`£tchr8
(0);

54 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M235Wrôe
);

55 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

56 
cmdªg
=0;

57 
	`Sync
();

58 
	}
}

60 
	$M235Re°‹e
(
vîsi⁄
)

62 
	`Sync
();

63 
	}
}

65 
	$M≠≥r235_Inô
(
C¨tInfo
 *
öfo
)

67 
öfo
->
Powî
=
M235Powî
;

68 
GameSèãRe°‹e
=
M235Re°‹e
;

69 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

70 
	}
}

	@boards/57.c

22 
	~"m≠öc.h
"

24 
uöt8
 
	g¥g_ªg
;

25 
uöt8
 
	gchr_ªg
;

26 
uöt8
 
	ghrd_Êag
;

28 
SFORMAT
 
	gSèãRegs
[]=

30 {&
¥g_ªg
, 1, "PRG"},

31 {&
chr_ªg
, 1, "CHR"},

35 
	$Sync
()

37 if(
¥g_ªg
&0x80)

38 
	`£çrg32
(0x8000,
¥g_ªg
>>6);

41 
	`£çrg16
(0x8000,(
¥g_ªg
>>5)&3);

42 
	`£çrg16
(0xC000,(
¥g_ªg
>>5)&3);

44 
	`£tmúr‹
((
¥g_ªg
&8)>>3);

45 
	`£tchr8
((
chr_ªg
&3)|(
¥g_ªg
&7)|((prg_reg&0x10)>>1));

46 
	}
}

48 
	$DECLFR
(
M57Ród
)

50  
hrd_Êag
;

51 
	}
}

53 
	$DECLFW
(
M57Wrôe
)

55 if((
A
&0x8800)==0x8800)

56 
¥g_ªg
=
V
;

58 
chr_ªg
=
V
;

59 
	`Sync
();

60 
	}
}

62 
	$M57Powî
()

64 
¥g_ªg
=0;

65 
chr_ªg
=0;

66 
hrd_Êag
=0;

67 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

68 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M57Wrôe
);

69 
	`SëRódH™dÀr
(0x6000,0x6000,
M57Ród
);

70 
	`Sync
();

71 
	}
}

73 
	$M57Re£t
()

75 if(
hrd_Êag
==3)

76 
hrd_Êag
=0;

78 
hrd_Êag
++;

79 
	`FCEU_¥ötf
("Sñe˘ Regi°î = %02x\n",
hrd_Êag
);

80 
	}
}

82 
	$SèãRe°‹e
(
vîsi⁄
)

84 
	`Sync
();

85 
	}
}

87 
	$M≠≥r57_Inô
(
C¨tInfo
 *
öfo
)

89 
öfo
->
Powî
=
M57Powî
;

90 
öfo
->
Re£t
=
M57Re£t
;

91 
GameSèãRe°‹e
=
SèãRe°‹e
;

92 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

93 
	}
}

	@boards/8157.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gcmdªg
;

24 
uöt8
 
	gövÆid_d©a
;

25 
SFORMAT
 
	gSèãRegs
[]=

27 {&
cmdªg
, 2, "CMDREG"},

31 
	$Sync
()

33 
	`£çrg16r
((
cmdªg
&0x060)>>5,0x8000,(cmdreg&0x01C)>>2);

34 
	`£çrg16r
((
cmdªg
&0x060)>>5,0xC000,(cmdreg&0x200)?(~0):0);

35 
	`£tmúr‹
(((
cmdªg
&2)>>1)^1);

36 
	}
}

38 
	$DECLFR
(
UNL8157Ród
)

40 if(
övÆid_d©a
&&
cmdªg
&0x100)

43  
	`C¨tBR
(
A
);

44 
	}
}

46 
	$DECLFW
(
UNL8157Wrôe
)

48 
cmdªg
=
A
;

49 
	`Sync
();

50 
	}
}

52 
	$UNL8157Powî
()

54 
	`£tchr8
(0);

55 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
UNL8157Wrôe
);

56 
	`SëRódH™dÀr
(0x8000,0xFFFF,
UNL8157Ród
);

57 
cmdªg
=0x200;

58 
övÆid_d©a
=1;

59 
	`Sync
();

60 
	}
}

62 
	$UNL8157Re£t
()

64 
cmdªg
=0;

65 
övÆid_d©a
^=1;

66 
	`Sync
();

67 
	}
}

69 
	$UNL8157Re°‹e
(
vîsi⁄
)

71 
	`Sync
();

72 
	}
}

74 
	$UNL8157_Inô
(
C¨tInfo
 *
öfo
)

76 
öfo
->
Powî
=
UNL8157Powî
;

77 
öfo
->
Re£t
=
UNL8157Re£t
;

78 
GameSèãRe°‹e
=
UNL8157Re°‹e
;

79 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

80 
	}
}

	@boards/8237.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
uöt8
 
	gcmdö
;

25 
uöt8
 
	gUNL8237_≥rm
[8] = {0, 2, 6, 1, 7, 3, 4, 5};

27 
	$UNL8237CW
(
uöt32
 
A
, 
uöt8
 
V
)

29 
	`£tchr1
(
A
,((
EXPREGS
[1]&4)<<6)|
V
);

30 
	}
}

32 
	$UNL8237PW
(
uöt32
 
A
, 
uöt8
 
V
)

34 if(
EXPREGS
[0]&0x80)

36 if(
EXPREGS
[0]&0x20)

37 
	`£çrg32
(0x8000,(
EXPREGS
[0]&0xF)>>1);

40 
	`£çrg16
(0x8000,(
EXPREGS
[0]&0x1F));

41 
	`£çrg16
(0xC000,(
EXPREGS
[0]&0x1F));

45 
	`£çrg8
(
A
,
V
&0x3F);

46 
	}
}

48 
	$DECLFW
(
UNL8237Wrôe
)

50 if((
A
&0xF000)==0xF000)

51 
IRQCou¡
=
V
;

52 if((
A
&0xF000)==0xE000)

53 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

54 
A
&0xE001)

56 0x8000: 
	`£tmúr‹
(((
V
|(V>>7))&1)^1); ;

57 0xA000: 
	`MMC3_CMDWrôe
(0x8000,(
V
&0xC0)|(
UNL8237_≥rm
[V&7])); 
cmdö
=1; ;

58 0xC000: if(
cmdö
)

60 
	`MMC3_CMDWrôe
(0x8001,
V
);

61 
cmdö
=0;

65 
	}
}

67 
	$DECLFW
(
UNL8237ExWrôe
)

69 
A
)

71 0x5000: 
EXPREGS
[0]=
V
; 
	`FixMMC3PRG
(
MMC3_cmd
); ;

72 0x5001: 
EXPREGS
[1]=
V
; 
	`FixMMC3CHR
(
MMC3_cmd
); ;

74 
	}
}

76 
	$UNL8237Powî
()

78 
IRQa
=1;

79 
EXPREGS
[0]=EXPREGS[1]=0;

80 
	`GíMMC3Powî
();

81 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
UNL8237Wrôe
);

82 
	`SëWrôeH™dÀr
(0x5000,0x7FFF,
UNL8237ExWrôe
);

83 
	}
}

85 
	$UNL8237_Inô
(
C¨tInfo
 *
öfo
)

87 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

88 
cwøp
=
UNL8237CW
;

89 
pwøp
=
UNL8237PW
;

90 
öfo
->
Powî
=
UNL8237Powî
;

91 
	`AddExSèã
(
EXPREGS
, 3, 0, "EXPR");

92 
	`AddExSèã
(&
cmdö
, 1, 0, "CMDIN");

93 
	}
}

	@boards/88.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gªg
[8];

24 
uöt8
 
	gmúr‹
, 
	gcmd
, 
	gis154
;

26 
SFORMAT
 
	gSèãRegs
[]=

28 {&
cmd
, 1, "CMD"},

29 {&
múr‹
, 1, "MIRR"},

30 {
ªg
, 8, "REGS"},

34 
	$Sync
()

36 
	`£tchr2
(0x0000,
ªg
[0]>>1);

37 
	`£tchr2
(0x0800,
ªg
[1]>>1);

38 
	`£tchr1
(0x1000,
ªg
[2]|0x40);

39 
	`£tchr1
(0x1400,
ªg
[3]|0x40);

40 
	`£tchr1
(0x1800,
ªg
[4]|0x40);

41 
	`£tchr1
(0x1C00,
ªg
[5]|0x40);

42 
	`£çrg8
(0x8000,
ªg
[6]);

43 
	`£çrg8
(0xA000,
ªg
[7]);

44 
	}
}

46 
	$MSync
()

48 if(
is154
)
	`£tmúr‹
(
MI_0
+(
múr‹
&1));

49 
	}
}

51 
	$DECLFW
(
M88Wrôe
)

53 
A
&0x8001)

55 0x8000: 
cmd
=
V
&7; 
múr‹
=V>>6; 
	`MSync
(); ;

56 0x8001: 
ªg
[
cmd
]=
V
; 
	`Sync
(); ;

58 
	}
}

60 
	$M88Powî
()

62 
	`£çrg16
(0xC000,~0);

63 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

64 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M88Wrôe
);

65 
	}
}

67 
	$SèãRe°‹e
(
vîsi⁄
)

69 
	`Sync
();

70 
	`MSync
();

71 
	}
}

73 
	$M≠≥r88_Inô
(
C¨tInfo
 *
öfo
)

75 
is154
=0;

76 
öfo
->
Powî
=
M88Powî
;

77 
GameSèãRe°‹e
=
SèãRe°‹e
;

78 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

79 
	}
}

81 
	$M≠≥r154_Inô
(
C¨tInfo
 *
öfo
)

83 
is154
=1;

84 
öfo
->
Powî
=
M88Powî
;

85 
GameSèãRe°‹e
=
SèãRe°‹e
;

86 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

87 
	}
}

	@boards/90.c

22 
	~"m≠öc.h
"

25 
	gis209
;

26 
	gis211
;

28 
uöt8
 
	gIRQMode
;

29 
uöt8
 
	gIRQPª
;

30 
uöt8
 
	gIRQPªSize
;

31 
uöt8
 
	gIRQCou¡
;

32 
uöt8
 
	gIRQXOR
;

33 
uöt8
 
	gIRQa
;

35 
uöt8
 
	gmul
[2];

36 
uöt8
 
	gªgõ
;

38 
uöt8
 
	gtkcom
[4];

39 
uöt8
 
	g¥gb
[4];

40 
uöt8
 
	gchæow
[8];

41 
uöt8
 
	gchrhigh
[8];

43 
uöt16
 
	g«mes
[4];

44 
uöt8
 
	gãkkî
;

46 
SFORMAT
 
	gTek_SèãRegs
[]={

47 {&
IRQMode
, 1, "IRQMODE"},

48 {&
IRQPª
, 1, "IRQPRE"},

49 {&
IRQPªSize
, 1, "IRQPRESIZE"},

50 {&
IRQCou¡
, 1, "IRQC"},

51 {&
IRQXOR
, 1, "IRQXOR"},

52 {&
IRQa
, 1, "IRQa"},

53 {
mul
, 2, "MUL"},

54 {&
ªgõ
, 1, "REGI"},

55 {
tkcom
, 4, "TKCO"},

56 {
¥gb
, 4, "PRGB"},

57 {
chæow
, 4, "CHRL"},

58 {
chrhigh
, 8, "CHRH"},

59 {&
«mes
[0], 2|
FCEUSTATE_RLSB
, "NMS0"},

60 {&
«mes
[1], 2|
FCEUSTATE_RLSB
, "NMS1"},

61 {&
«mes
[2], 2|
FCEUSTATE_RLSB
, "NMS2"},

62 {&
«mes
[3], 2|
FCEUSTATE_RLSB
, "NMS3"},

63 {&
ãkkî
, 1, "TEKR"},

67 
	$múa
()

69 if((
tkcom
[0]&0x20&&
is209
)||
is211
)

71 
x
;

72 if(
tkcom
[0]&0x40)

74 
x
=0;x<4;x++)

75 
	`£äèmem
(
CHR±r
[0]+(((
«mes
[
x
])&
CHRmask1
[0])<<10),0,x);

79 
x
=0;x<4;x++)

81 if((
tkcom
[1]&0x80)==(
«mes
[
x
]&0x80))

82 
	`£äèmem
(
NTARAM
+((
«mes
[
x
]&0x1)<<10),1,x);

84 
	`£äèmem
(
CHR±r
[0]+(((
«mes
[
x
])&
CHRmask1
[0])<<10),0,x);

90 
tkcom
[1]&3)

92 0: 
	`£tmúr‹
(
MI_V
); ;

93 1: 
	`£tmúr‹
(
MI_H
); ;

94 2: 
	`£tmúr‹
(
MI_0
); ;

95 3: 
	`£tmúr‹
(
MI_1
); ;

98 
	}
}

100 
	$ãk¥om
()

102 
uöt32
 
b™kmode
=((
tkcom
[3]&6)<<5);

103 
tkcom
[0]&7)

105 00: if(
tkcom
[0]&0x80)

106 
	`£çrg8
(0x6000,(((
¥gb
[3]<<2)+3)&0x3F)|
b™kmode
);

107 
	`£çrg32
(0x8000,0x0F|((
tkcom
[3]&6)<<3));

109 01: if(
tkcom
[0]&0x80)

110 
	`£çrg8
(0x6000,(((
¥gb
[3]<<1)+1)&0x3F)|
b™kmode
);

111 
	`£çrg16
(0x8000,(
¥gb
[1]&0x1F)|((
tkcom
[3]&6)<<4));

112 
	`£çrg16
(0xC000,0x1F|((
tkcom
[3]&6)<<4));

115 02: if(
tkcom
[0]&0x80)

116 
	`£çrg8
(0x6000,(
¥gb
[3]&0x3F)|
b™kmode
);

117 
	`£çrg8
(0x8000,(
¥gb
[0]&0x3F)|
b™kmode
);

118 
	`£çrg8
(0xa000,(
¥gb
[1]&0x3F)|
b™kmode
);

119 
	`£çrg8
(0xc000,(
¥gb
[2]&0x3F)|
b™kmode
);

120 
	`£çrg8
(0xe000,0x3F|
b™kmode
);

122 04: if(
tkcom
[0]&0x80)

123 
	`£çrg8
(0x6000,(((
¥gb
[3]<<2)+3)&0x3F)|
b™kmode
);

124 
	`£çrg32
(0x8000,(
¥gb
[3]&0x0F)|((
tkcom
[3]&6)<<3));

126 05: if(
tkcom
[0]&0x80)

127 
	`£çrg8
(0x6000,(((
¥gb
[3]<<1)+1)&0x3F)|
b™kmode
);

128 
	`£çrg16
(0x8000,(
¥gb
[1]&0x1F)|((
tkcom
[3]&6)<<4));

129 
	`£çrg16
(0xC000,(
¥gb
[3]&0x1F)|((
tkcom
[3]&6)<<4));

132 06: if(
tkcom
[0]&0x80)

133 
	`£çrg8
(0x6000,(
¥gb
[3]&0x3F)|
b™kmode
);

134 
	`£çrg8
(0x8000,(
¥gb
[0]&0x3F)|
b™kmode
);

135 
	`£çrg8
(0xa000,(
¥gb
[1]&0x3F)|
b™kmode
);

136 
	`£çrg8
(0xc000,(
¥gb
[2]&0x3F)|
b™kmode
);

137 
	`£çrg8
(0xe000,(
¥gb
[3]&0x3F)|
b™kmode
);

140 
	}
}

142 
	$ãkvrom
()

144 
x
, 
b™k
=0, 
mask
=0xFFFF;

145 if(!(
tkcom
[3]&0x20))

147 
b™k
=(
tkcom
[3]&1)|((tkcom[3]&0x18)>>2);

148 
tkcom
[0]&0x18)

150 0x00: 
b™k
<<=5; 
mask
=0x1F; ;

151 0x08: 
b™k
<<=6; 
mask
=0x3F; ;

152 0x10: 
b™k
<<=7; 
mask
=0x7F; ;

153 0x18: 
b™k
<<=8; 
mask
=0xFF; ;

156 
tkcom
[0]&0x18)

159 
	`£tchr8
(((
chæow
[0]|(
chrhigh
[0]<<8))&
mask
)|
b™k
);

162 
x
=0;x<8;x+=4)

163 
	`£tchr4
(
x
<<10,((
chæow
[x]|(
chrhigh
[x]<<8))&
mask
)|
b™k
);

166 
x
=0;x<8;x+=2)

167 
	`£tchr2
(
x
<<10,((
chæow
[x]|(
chrhigh
[x]<<8))&
mask
)|
b™k
);

170 
x
=0;x<8;x++)

171 
	`£tchr1
(
x
<<10,((
chæow
[x]|(
chrhigh
[x]<<8))&
mask
)|
b™k
);

174 
	}
}

176 
	$DECLFW
(
M90TekWrôe
)

178 
A
)

180 0x5800: 
mul
[0]=
V
; ;

181 0x5801: 
mul
[1]=
V
; ;

182 0x5803: 
ªgõ
=
V
; ;

184 
	}
}

186 
	$DECLFR
(
M90TekRód
)

188 
A
)

190 0x5800:  (
mul
[0]*mul[1]);

191 0x5801: ((
mul
[0]*mul[1])>>8);

192 0x5803:  (
ªgõ
);

194 (
ãkkî
);

195 
	}
}

197 
	$DECLFW
(
M90PRGWrôe
)

199 
¥gb
[
A
&3]=
V
;

200 
	`ãk¥om
();

201 
	}
}

203 
	$DECLFW
(
M90CHRlowWrôe
)

205 
chæow
[
A
&7]=
V
;

206 
	`ãkvrom
();

207 
	}
}

209 
	$DECLFW
(
M90CHRhiWrôe
)

211 
chrhigh
[
A
&7]=
V
;

212 
	`ãkvrom
();

213 
	}
}

215 
	$DECLFW
(
M90NTWrôe
)

217 if(
A
&4)

219 
«mes
[
A
&3]&=0x00FF;

220 
«mes
[
A
&3]|=
V
<<8;

224 
«mes
[
A
&3]&=0xFF00;

225 
«mes
[
A
&3]|=
V
;

227 
	`múa
();

228 
	}
}

230 
	$DECLFW
(
M90IRQWrôe
)

232 
A
&7)

235 
IRQa
=
V
&1;if(!(V&1)Ë
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

237 
IRQa
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

239 
IRQa
=1;;

240 01: 
IRQMode
=
V
;

256 
IRQPª
=
V
^
IRQXOR
;;

258 
IRQCou¡
=
V
^
IRQXOR
;;

260 
IRQXOR
=
V
;;

264 
IRQPªSize
=
V
;;

266 
	}
}

268 
	$DECLFW
(
M90ModeWrôe
)

270 
tkcom
[
A
&3]=
V
;

271 
	`ãk¥om
();

272 
	`ãkvrom
();

273 
	`múa
();

275 #ifde‡
DEBUG90


276 
A
&3)

278 00: 
	`FCEU_¥ötf
("Main Control Register:\n");

279 
	`FCEU_¥ötf
(" PGR B™kög mode: %d\n",
V
&7);

280 
	`FCEU_¥ötf
(" CHR B™kög mode: %d\n",(
V
>>3)&3);

281 
	`FCEU_¥ötf
(" 6000-7FFFáddªs£†m≠pög: %s\n",(
V
&0x80)?"Yes":"No");

282 
	`FCEU_¥ötf
(" NamëabÀ c⁄åﬁ: %s\n",(
V
&0x20)?"Enabled":"Disabled");

283 if(
V
&0x20)

284 
	`FCEU_¥ötf
(" NamëabÀ c™ be: %s\n",(
V
&0x40)?"ROM Only":"RAM or ROM");

286 01: 
	`FCEU_¥ötf
("Mirroring mode: ");

287 
V
&3)

289 0: 
	`FCEU_¥ötf
("Vertical\n");;

290 1: 
	`FCEU_¥ötf
("Horizontal\n");;

291 2: 
	`FCEU_¥ötf
("Nametable 0 only\n");;

292 3: 
	`FCEU_¥ötf
("Nametable 1 only\n");;

294 
	`FCEU_¥ötf
("Múr‹ög fœg: %s\n",(
V
&0x80)?"On":"Off");

296 02: if((((
tkcom
[0])>>5)&3)==1)

297 
	`FCEU_¥ötf
("NamëabÀ ROM/RAM sñe˘ mode: %d\n",
V
>>7);

300 
	`FCEU_¥ötf
("CHR B™kög mode: %s\n",(
V
&0x20)?"Entire CHR ROM":"256Kb Switching mode");

301 if(!(
V
&0x20)Ë
	`FCEU_¥ötf
("256K CHR bankÇumber: %02x\n",(V&1)|((V&0x18)>>2));

302 
	`FCEU_¥ötf
("512K PRG b™kÇumbî: %d\n",(
V
&6)>>1);

303 
	`FCEU_¥ötf
("CHR B™k múr‹ög: %s\n",(
V
&0x80)?"Swapped":"Normal operate");

306 
	}
}

308 
	$CCL
()

310 if((
IRQMode
>>6) == 1)

312 
IRQCou¡
++;

313 if((
IRQCou¡
 =0Ë&& 
IRQa
)

315 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

318 if((
IRQMode
>>6) == 2)

320 
IRQCou¡
--;

321 if((
IRQCou¡
 =0xFFË&& 
IRQa
)

323 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

326 
	}
}

328 
	$ClockCou¡î
()

330 
uöt8
 
¥emask
;

332 if(
IRQMode
 & 0x4)

333 
¥emask
 = 0x7;

335 
¥emask
 = 0xFF;

336 if((
IRQMode
>>6) == 1)

338 
IRQPª
++;

339 if((
IRQPª
 & 
¥emask
Ë=0Ë
	`CCL
();

341 if((
IRQMode
>>6) == 2)

343 
IRQPª
--;

344 if((
IRQPª
 & 
¥emask
Ë=¥emaskË
	`CCL
();

346 
	}
}

348 
	$FP_FASTAPASS
(1Ë
	$CPUWøp
(
a
)

350 
x
;

351 if((
IRQMode
&3)==0Ë
x
=0;x<
a
;x++Ë
	`ClockCou¡î
();

352 
	}
}

354 
	$SLWøp
()

356 
x
;

357 if((
IRQMode
&3)==1Ë
x
=0;x<8;x++Ë
	`ClockCou¡î
();

358 
	}
}

360 
uöt32
 
	gœ°ªad
;

361 
	$FP_FASTAPASS
(1Ë
	$M90PPU
(
uöt32
 
A
)

363 if((
IRQMode
&3)==2)

365 if(
œ°ªad
!=
A
)

367 
	`ClockCou¡î
();

368 
	`ClockCou¡î
();

370 
œ°ªad
=
A
;

379 
	}
}

381 
	$togglõ
()

383 
ãkkî
>>=6;

384 if(
ãkkî
>3)

385 
ãkkî
=0;

387 
ãkkî
++;

388 
ãkkî
<<=6;

389 
	`FCEU_¥ötf
("ãkkî=%04x\n",
ãkkî
);

390 
	`mem£t
(
tkcom
,0x00,(tkcom));

391 
	`mem£t
(
¥gb
,0xff,(prgb));

392 
	`ãk¥om
();

393 
	`ãkvrom
();

394 
	}
}

396 
	$M90Re°‹e
(
vîsi⁄
)

398 
	`ãk¥om
();

399 
	`ãkvrom
();

400 
	`múa
();

401 
	}
}

403 
	$M90Powî
()

405 
	`SëWrôeH™dÀr
(0x5000,0x5fff,
M90TekWrôe
);

406 
	`SëWrôeH™dÀr
(0x8000,0x8fff,
M90PRGWrôe
);

407 
	`SëWrôeH™dÀr
(0x9000,0x9fff,
M90CHRlowWrôe
);

408 
	`SëWrôeH™dÀr
(0xA000,0xAfff,
M90CHRhiWrôe
);

409 
	`SëWrôeH™dÀr
(0xB000,0xBfff,
M90NTWrôe
);

410 
	`SëWrôeH™dÀr
(0xC000,0xCfff,
M90IRQWrôe
);

411 
	`SëWrôeH™dÀr
(0xD000,0xDfff,
M90ModeWrôe
);

413 
	`SëRódH™dÀr
(0x5000,0x5fff,
M90TekRód
);

414 
	`SëRódH™dÀr
(0x6000,0xffff,
C¨tBR
);

416 
mul
[0]=mul[1]=
ªgõ
=0xFF;

418 
	`mem£t
(
tkcom
,0x00,(tkcom));

419 
	`mem£t
(
¥gb
,0xff,(prgb));

420 
	`mem£t
(
chæow
,0xff,(chrlow));

421 
	`mem£t
(
chrhigh
,0xff,(chrhigh));

422 
	`mem£t
(
«mes
,0x00,(names));

424 if(
is211
)

425 
ãkkî
=0xC0;

427 
ãkkî
=0x00;

429 
	`ãk¥om
();

430 
	`ãkvrom
();

431 
	}
}

434 
	$M≠≥r90_Inô
(
C¨tInfo
 *
öfo
)

436 
is211
=0;

437 
is209
=0;

438 
öfo
->
Re£t
=
togglõ
;

439 
öfo
->
Powî
=
M90Powî
;

440 
PPU_hook
=
M90PPU
;

441 
GameHBIRQHook2
=
SLWøp
;

442 
M≠IRQHook
=
CPUWøp
;

443 
GameSèãRe°‹e
=
M90Re°‹e
;

444 
	`AddExSèã
(
Tek_SèãRegs
, ~0, 0, 0);

445 
	}
}

447 
	$M≠≥r209_Inô
(
C¨tInfo
 *
öfo
)

449 
is211
=0;

450 
is209
=1;

451 
öfo
->
Re£t
=
togglõ
;

452 
öfo
->
Powî
=
M90Powî
;

453 
GameHBIRQHook2
=
SLWøp
;

454 
GameSèãRe°‹e
=
M90Re°‹e
;

455 
	`AddExSèã
(
Tek_SèãRegs
, ~0, 0, 0);

456 
	}
}

458 
	$M≠≥r211_Inô
(
C¨tInfo
 *
öfo
)

460 
is211
=1;

461 
öfo
->
Re£t
=
togglõ
;

462 
öfo
->
Powî
=
M90Powî
;

463 
GameHBIRQHook2
=
SLWøp
;

464 
GameSèãRe°‹e
=
M90Re°‹e
;

465 
	`AddExSèã
(
Tek_SèãRegs
, ~0, 0, 0);

466 
	}
}

	@boards/95.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gœ°A
;

24 
uöt8
 
	gDRegs
[8];

25 
uöt8
 
	gcmd
;

26 
uöt8
 
	gMúCache
[8];

28 
SFORMAT
 
	gDB_SèãRegs
[]={

29 {
DRegs
, 8, "DREG"},

30 {&
cmd
, 1, "CMD"},

31 {&
œ°A
, 1, "LAST"},

35 
	$toŸ
()

37 
x
;

39 
MúCache
[0]=MúCache[1]=(
DRegs
[0]>>4)&1;

40 
MúCache
[2]=MúCache[3]=(
DRegs
[1]>>4)&1;

42 
x
=0;x<4;x++)

43 
MúCache
[4+
x
]=(
DRegs
[2+x]>>5)&1;

44 
	`⁄emú
(
MúCache
[
œ°A
]);

45 
	}
}

47 
	$Sync
()

49 
	`£tchr2
(0x0000,
DRegs
[0]&0x1F);

50 
	`£tchr2
(0x0800,
DRegs
[1]&0x1F);

51 
	`£tchr1
(0x1000,
DRegs
[2]&0x1F);

52 
	`£tchr1
(0x1400,
DRegs
[3]&0x1F);

53 
	`£tchr1
(0x1800,
DRegs
[4]&0x1F);

54 
	`£tchr1
(0x1C00,
DRegs
[5]&0x1F);

55 
	`£çrg8
(0x8000,
DRegs
[6]&0x1F);

56 
	`£çrg8
(0xa000,
DRegs
[7]&0x1F);

57 
	`toŸ
();

58 
	}
}

60 
	$DECLFW
(
M≠≥r95_wrôe
)

62 
A
&0xF001)

64 0x8000: 
cmd
 = 
V
; ;

66 
cmd
&0x07)

68 0: 
DRegs
[0]=(
V
&0x3F)>>1; ;

69 1: 
DRegs
[1]=(
V
&0x3F)>>1; ;

70 2: 
DRegs
[2]=
V
&0x3F; ;

71 3: 
DRegs
[3]=
V
&0x3F; ;

72 4: 
DRegs
[4]=
V
&0x3F; ;

73 5: 
DRegs
[5]=
V
&0x3F; ;

74 6: 
DRegs
[6]=
V
&0x3F; ;

75 7: 
DRegs
[7]=
V
&0x3F; ;

77 
	`Sync
();

79 
	}
}

81 
	$FP_FASTAPASS
(1Ë
	$døg⁄bu°_µu
(
uöt32
 
A
)

83 
œ°
=-1;

84 
uöt8
 
z
;

86 if(
A
>=0x2000) ;

88 
A
>>=10;

89 
œ°A
=
A
;

90 
z
=
MúCache
[
A
];

91 if(
z
!=
œ°
)

93 
	`⁄emú
(
z
);

94 
œ°
=
z
;

96 
	}
}

98 
	$DBPowî
()

100 
	`mem£t
(
DRegs
,0x3F,8);

101 
DRegs
[0]=DRegs[1]=0x1F;

103 
	`Sync
();

105 
	`£çrg8
(0xc000,0x3E);

106 
	`£çrg8
(0xe000,0x3F);

108 
	`SëRódH™dÀr
(0x8000,0xffff,
C¨tBR
);

109 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r95_wrôe
);

110 
	}
}

112 
	$SèãRe°‹e
(
vîsi⁄
)

114 
	`Sync
();

115 
	}
}

117 
	$M≠≥r95_Inô
(
C¨tInfo
 *
öfo
)

119 
öfo
->
Powî
=
DBPowî
;

120 
	`AddExSèã
(
DB_SèãRegs
, ~0, 0, 0);

121 
PPU_hook
=
døg⁄bu°_µu
;

122 
GameSèãRe°‹e
=
SèãRe°‹e
;

123 
	}
}

	@boards/__dummy_mapper.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gªg
[8];

31 
SFORMAT
 
	gSèãRegs
[]=

33 {
ªg
, 8, "REGS"},

37 
	$Sync
()

39 
	}
}

41 
	$DECLFW
(
MNNNWrôe
)

43 
	}
}

45 
	$MNNNPowî
()

47 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

48 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
MNNNWrôe
);

49 
	}
}

51 
	$MNNNRe£t
()

53 
	}
}

66 
	$MNNNIRQHook
()

68 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

69 
	}
}

71 
	$SèãRe°‹e
(
vîsi⁄
)

73 
	`Sync
();

74 
	}
}

76 
	$M≠≥rNNN_Inô
(
C¨tInfo
 *
öfo
)

78 
öfo
->
Re£t
=
MNNNRe£t
;

79 
öfo
->
Powî
=
MNNNPowî
;

81 
GameHBIRQHook
=
MNNNIRQHook
;

82 
GameSèãRe°‹e
=
SèãRe°‹e
;

95 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

96 
	}
}

	@boards/bmc13in1jy110.c

23 
	~"m≠öc.h
"

25 
uöt8
 
	gb™k_mode
;

26 
uöt8
 
	gb™k_vÆue
;

27 
uöt8
 
	g¥gb
[4];

28 
SFORMAT
 
	gSèãRegs
[]=

33 
	$Sync
()

35 
	`FCEU_¥ötf
("%02x: %02x %02x\n", 
b™k_mode
, 
b™k_vÆue
, 
¥gb
[0]);

36 
b™k_mode
&7)

39 
	`£çrg32
(0x8000,
b™k_vÆue
&7); ;

41 
	`£çrg16
(0x8000,((8+(
b™k_vÆue
&7))>>1)+
¥gb
[1]);

42 
	`£çrg16
(0xC000,(
b™k_vÆue
&7)>>1);

44 
	`£çrg32
(0x8000,8+(
b™k_vÆue
&7)); ;

46 
	`£çrg16
(0x8000,((8+(
b™k_vÆue
&7))>>1)+
¥gb
[1]);

47 
	`£çrg16
(0xC000,((8+(
b™k_vÆue
&7))>>1)+
¥gb
[3]);

49 
	`£çrg8
(0x8000,
¥gb
[0]>>2);

50 
	`£çrg8
(0xa000,
¥gb
[1]);

51 
	`£çrg8
(0xc000,
¥gb
[2]);

52 
	`£çrg8
(0xe000,~0);

55 
	`£çrg8
(0x8000,
¥gb
[0]);

56 
	`£çrg8
(0xa000,
¥gb
[1]);

57 
	`£çrg8
(0xc000,
¥gb
[2]);

58 
	`£çrg8
(0xe000,
¥gb
[3]);

61 
	}
}

63 
	$DECLFW
(
BMC13ö1JY110Wrôe
)

65 
	`FCEU_¥ötf
("%04x:%04x\n",
A
,
V
);

66 
A
)

71 0x8003: 
¥gb
[
A
&3]=
V
; ;

72 0xD000: 
b™k_mode
=
V
; ;

73 0xD001: 
	`£tmúr‹
(
V
&3);

75 0xD003: 
b™k_vÆue
=
V
; ;

77 
	`Sync
();

78 
	}
}

80 
	$BMC13ö1JY110Powî
()

82 
¥gb
[0]=prgb[1]=prgb[2]=prgb[3]=0;

83 
b™k_mode
=0;

84 
b™k_vÆue
=0;

85 
	`£çrg32
(0x8000,0);

86 
	`£tchr8
(0);

87 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
BMC13ö1JY110Wrôe
);

88 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

89 
	}
}

91 
	$SèãRe°‹e
(
vîsi⁄
)

93 
	`Sync
();

94 
	}
}

96 
	$BMC13ö1JY110_Inô
(
C¨tInfo
 *
öfo
)

98 
öfo
->
Powî
=
BMC13ö1JY110Powî
;

99 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

100 
GameSèãRe°‹e
=
SèãRe°‹e
;

101 
	}
}

	@boards/bmc42in1r.c

23 
	~"m≠öc.h
"

25 
uöt8
 
	ghrd_sw
;

26 
uöt8
 
	gœtche
;

27 
SFORMAT
 
	gSèãRegs
[]=

29 {&
œtche
, 1, "LATCHE"},

30 {&
hrd_sw
, 1, "HRDSW"},

34 
	$Sync
()

36 if(!(
œtche
&0x20))

37 
	`£çrg32r
(
hrd_sw
,0x8000,(
œtche
>>1)&0x0f);

40 
	`£çrg16r
(
hrd_sw
,0x8000,
œtche
&0x1f);

41 
	`£çrg16r
(
hrd_sw
,0xC000,
œtche
&0x1f);

43 (
œtche
>>6)&3)

45 0: 
	`£tmúr‹w
(0,0,0,1); ;

46 1: 
	`£tmúr‹
(
MI_V
); ;

47 2: 
	`£tmúr‹
(
MI_H
); ;

48 3: 
	`£tmúr‹
(
MI_1
); ;

50 
	}
}

52 
	$DECLFW
(
BMC42ö1rWrôe
)

54 
œtche
=
V
;

55 
	`Sync
();

56 
	}
}

58 
	$BMC42ö1rRe£t
()

60 
hrd_sw
^=1;

61 
	`Sync
();

62 
	}
}

64 
	$BMC42ö1rPowî
()

66 
œtche
=0x00;

67 
hrd_sw
=0;

68 
	`£tchr8
(0);

69 
	`Sync
();

70 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
BMC42ö1rWrôe
);

71 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

72 
	}
}

74 
	$SèãRe°‹e
(
vîsi⁄
)

76 
	`Sync
();

77 
	}
}

79 
	$BMC42ö1r_Inô
(
C¨tInfo
 *
öfo
)

81 
öfo
->
Powî
=
BMC42ö1rPowî
;

82 
öfo
->
Re£t
=
BMC42ö1rRe£t
;

83 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

84 
GameSèãRe°‹e
=
SèãRe°‹e
;

85 
	}
}

	@boards/bmc64in1nr.c

23 
	~"m≠öc.h
"

25 
uöt8
 
	gªgs
[4];

27 
SFORMAT
 
	gSèãRegs
[]=

29 {
ªgs
, 4, "REGS"},

33 
	$Sync
()

35 if(
ªgs
[0]&0x80)

37 if(
ªgs
[1]&0x80)

38 
	`£çrg32
(0x8000,
ªgs
[1]&0x1F);

41 
b™k
=((
ªgs
[1]&0x1f)<<1)|((regs[1]>>6)&1);

42 
	`£çrg16
(0x8000,
b™k
);

43 
	`£çrg16
(0xC000,
b™k
);

48 
b™k
=((
ªgs
[1]&0x1f)<<1)|((regs[1]>>6)&1);

49 
	`£çrg16
(0xC000,
b™k
);

51 if(
ªgs
[0]&0x20)

52 
	`£tmúr‹
(
MI_H
);

54 
	`£tmúr‹
(
MI_V
);

55 
	`£tchr8
((
ªgs
[2]<<2)|((regs[0]>>1)&3));

56 
	}
}

58 
	$DECLFW
(
BMC64ö1ƒWrôeLo
)

60 
ªgs
[
A
&3]=
V
;

61 
	`Sync
();

62 
	}
}

64 
	$DECLFW
(
BMC64ö1ƒWrôeHi
)

66 
ªgs
[3]=
V
;

67 
	`Sync
();

68 
	}
}

70 
	$BMC64ö1ƒPowî
()

72 
ªgs
[0]=0x80;

73 
ªgs
[1]=0x43;

74 
ªgs
[2]=regs[3]=0;

75 
	`Sync
();

76 
	`SëWrôeH™dÀr
(0x5000,0x5003,
BMC64ö1ƒWrôeLo
);

77 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
BMC64ö1ƒWrôeHi
);

78 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

79 
	}
}

81 
	$SèãRe°‹e
(
vîsi⁄
)

83 
	`Sync
();

84 
	}
}

86 
	$BMC64ö1ƒ_Inô
(
C¨tInfo
 *
öfo
)

88 
öfo
->
Powî
=
BMC64ö1ƒPowî
;

89 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

90 
GameSèãRe°‹e
=
SèãRe°‹e
;

91 
	}
}

	@boards/bmc70in1.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gis_œrge_b™ks
;

24 
uöt8
 
	gœrge_b™k
;

25 
uöt8
 
	g¥g_b™k
;

26 
uöt8
 
	gchr_b™k
;

27 
uöt8
 
	gb™k_mode
;

28 
uöt8
 
	gmúr‹ög
;

29 
SFORMAT
 
	gSèãRegs
[]=

31 {&
œrge_b™k
, 1, "LB"},

32 {&
¥g_b™k
, 1, "PRG"},

33 {&
chr_b™k
, 1, "CHR"},

34 {&
b™k_mode
, 1, "BM"},

35 {&
múr‹ög
, 1, "MIRR"},

39 
	$Sync
()

41 
b™k_mode
)

44 0x10: 
	`£çrg16
(0x8000,
œrge_b™k
|
¥g_b™k
);

45 
	`£çrg16
(0xC000,
œrge_b™k
|7);

47 0x20: 
	`£çrg32
(0x8000,(
œrge_b™k
|
¥g_b™k
)>>1);

49 0x30: 
	`£çrg16
(0x8000,
œrge_b™k
|
¥g_b™k
);

50 
	`£çrg16
(0xC000,
œrge_b™k
|
¥g_b™k
);

53 
	`£tmúr‹
(
múr‹ög
);

54 if(!
is_œrge_b™ks
)

55 
	`£tchr8
(
chr_b™k
);

56 
	}
}

58 
	$DECLFR
(
BMC70ö1Ród
)

60 if(
b™k_mode
==0x10)

61 if(
is_œrge_b™ks
)

62  
	`C¨tBR
((
A
&0xFFF0)|0x06);

64  
	`C¨tBR
((
A
&0xFFF0)|0x0d);

66  
	`C¨tBR
(
A
);

67 
	}
}

69 
	$DECLFW
(
BMC70ö1Wrôe
)

71 if(
A
&0x4000)

73 
b™k_mode
=
A
&0x30;

74 
¥g_b™k
=
A
&7;

78 
múr‹ög
=((
A
&0x20)>>5)^1;

79 if(
is_œrge_b™ks
)

80 
œrge_b™k
=(
A
&3)<<3;

82 
chr_b™k
=
A
&7;

84 
	`Sync
();

85 
	}
}

87 
	$BMC70ö1Powî
()

89 
	`£tchr8
(0);

90 
b™k_mode
=0;

91 
œrge_b™k
=0;

92 
	`Sync
();

93 
	`SëRódH™dÀr
(0x8000,0xFFFF,
BMC70ö1Ród
);

94 
	`SëWrôeH™dÀr
(0x8000,0xffff,
BMC70ö1Wrôe
);

95 
	}
}

97 
	$SèãRe°‹e
(
vîsi⁄
)

99 
	`Sync
();

100 
	}
}

102 
	$BMC70ö1_Inô
(
C¨tInfo
 *
öfo
)

104 
is_œrge_b™ks
=0;

105 
öfo
->
Powî
=
BMC70ö1Powî
;

106 
GameSèãRe°‹e
=
SèãRe°‹e
;

107 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

108 
	}
}

110 
	$BMC70ö1B_Inô
(
C¨tInfo
 *
öfo
)

112 
is_œrge_b™ks
=1;

113 
öfo
->
Powî
=
BMC70ö1Powî
;

114 
GameSèãRe°‹e
=
SèãRe°‹e
;

115 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

116 
	}
}

	@boards/bmcgk192.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gaddæ©che
;

25 
	$Sync
()

27 if(
addæ©che
&0x40)

29 
	`£çrg16
(0x8000,
addæ©che
&7);

30 
	`£çrg16
(0xC000,
addæ©che
&7);

33 
	`£çrg32
(0x8000,(
addæ©che
>>1)&3);

34 
	`£tchr8
((
addæ©che
>>3)&7);

35 
	`£tmúr‹
(((
addæ©che
&0x80)>>7)^1);

36 
	}
}

38 
	$DECLFW
(
BMCGK192Wrôe
)

40 
addæ©che
=
A
;

41 
	`Sync
();

42 
	}
}

44 
	$BMCGK192Re£t
()

46 
	`£çrg32
(0x8000,0);

47 
	}
}

49 
	$BMCGK192Powî
()

51 
	`£çrg32
(0x8000,0);

52 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

53 
	`SëWrôeH™dÀr
(0x8000,0xffff,
BMCGK192Wrôe
);

54 
	}
}

56 
	$SèãRe°‹e
(
vîsi⁄
)

58 
	`Sync
();

59 
	}
}

61 
	$M≠≥r58_Inô
(
C¨tInfo
 *
öfo
)

63 
öfo
->
Powî
=
BMCGK192Powî
;

64 
öfo
->
Re£t
=
BMCGK192Re£t
;

65 
GameSèãRe°‹e
=
SèãRe°‹e
;

66 
	`AddExSèã
(&
addæ©che
, 2, 0, "ALATC");

67 
	}
}

	@boards/bonza.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	g¥g_ªg
;

24 
uöt8
 
	gchr_ªg
;

26 
uöt8
 
	gsim0ªg
, 
	gsim0bô
, 
	gsim0byã
, 
	gsim0∑rôy
, 
	gsim0b˙t
;

27 
uöt16
 
	gsim0d©a
;

28 
uöt8
 
	gsim0¨øy
[128] =

40 
SFORMAT
 
	gSèãRegs
[]=

42 {&
¥g_ªg
, 1, "PREG"},

43 {&
chr_ªg
, 1, "CREG"},

47 
	$Sync
()

49 
	`£çrg32
(0x8000, 
¥g_ªg
);

50 
	`£tchr8
(
chr_ªg
);

51 
	}
}

53 
	$SèãRe°‹e
(
vîsi⁄
)

55 
	`Sync
();

56 
	}
}

58 
	$DECLFW
(
M216WrôeHi
)

61 
¥g_ªg
=
A
&1;

62 
chr_ªg
=(
A
&0x0E)>>1;

63 
	`Sync
();

64 
	}
}

66 
	$DECLFW
(
M216Wrôe5000
)

69 
sim0ªg
=
V
;

70 if(!
sim0ªg
)

72 
sim0bô
=
sim0byã
=
sim0∑rôy
=0;

73 
sim0d©a
=
sim0¨øy
[0];

74 
sim0b˙t
=0x80;

76 if(
sim0ªg
&0x20)

78 
sim0b˙t
=0x20;

80 
	}
}

82 
	$DECLFR
(
M216Ród5000
)

84 if(
sim0ªg
&0x60)

86 
sim0ªg
=(sim0reg^(sim0reg<<1))&0x40;

87  
sim0ªg
;

91 
uöt8
 
sim0out
=0;

92 if(
sim0bô
<8)

95 
sim0out
=(
sim0d©a
&1)<<6;

96 
sim0d©a
>>=1;

97 
sim0bô
++;

98 
sim0∑rôy
+=
sim0d©a
;

100 if(
sim0bô
==8)

102 
sim0bô
++;

103 
sim0out
=
sim0∑rôy
&1;

105 if(
sim0bô
==9)

107 if(
sim0byã
==
sim0b˙t
)

108 
sim0out
=0x60;

111 
sim0bô
=0;

112 
sim0byã
++;

113 
sim0d©a
=
sim0¨øy
[
sim0byã
];

114 
sim0out
=0;

118  
sim0out
;

120 
	}
}

122 
	$Powî
()

124 
¥g_ªg
 = 0;

125 
chr_ªg
 = 0;

126 
	`Sync
();

127 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

128 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M216WrôeHi
);

129 
	`SëWrôeH™dÀr
(0x5000,0x5000,
M216Wrôe5000
);

130 
	`SëRódH™dÀr
(0x5000,0x5000,
M216Ród5000
);

131 
	}
}

134 
	$M≠≥r216_Inô
(
C¨tInfo
 *
öfo
)

136 
öfo
->
Powî
=Power;

137 
GameSèãRe°‹e
=
SèãRe°‹e
;

138 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

139 
	}
}

	@boards/cc21.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gaddæ©che
;

27 
	$UNLCC21Sync
()

29 
	`£tchr8
(
addæ©che
&1);

30 
	`£tmúr‹
(
MI_0
+((
addæ©che
&2)>>1));

31 
	}
}

33 
	$DECLFW
(
UNLCC21Wrôe
)

35 
addæ©che
=
A
;

36 
	`UNLCC21Sync
();

37 
	}
}

39 
	$UNLCC21Powî
()

41 
	`£çrg32
(0x8000,0);

42 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

43 
	`SëWrôeH™dÀr
(0x8000,0xffff,
UNLCC21Wrôe
);

44 
	}
}

46 
	$UNLCC21Re°‹e
(
vîsi⁄
)

48 
	`UNLCC21Sync
();

49 
	}
}

51 
	$UNLCC21_Inô
(
C¨tInfo
 *
öfo
)

53 
öfo
->
Powî
=
UNLCC21Powî
;

54 
GameSèãRe°‹e
=
UNLCC21Re°‹e
;

55 
	`AddExSèã
(&
addæ©che
, 2, 0, "ALATC");

56 
	}
}

	@boards/datalatch.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gœtche
, 
	gœtcheöô
;

24 
uöt16
 
	gaddºeg0
, 
	gaddºeg1
;

25 (*
WSync
)();

27 
	$DECLFW
(
L©chWrôe
)

29 
œtche
=
V
;

30 
	`WSync
();

31 
	}
}

33 
	$L©chPowî
()

35 
œtche
=
œtcheöô
;

36 
	`WSync
();

37 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

38 
	`SëWrôeH™dÀr
(
addºeg0
,
addºeg1
,
L©chWrôe
);

39 
	}
}

41 
	$SèãRe°‹e
(
vîsi⁄
)

43 
	`WSync
();

44 
	}
}

46 
L©ch_Inô
(
C¨tInfo
 *
öfo
, (*
¥oc
)(), 
uöt8
 
öô
, 
uöt16
 
adr0
, uöt16 
adr1
)

48 
œtcheöô
=
öô
;

49 
addºeg0
=
adr0
;

50 
addºeg1
=
adr1
;

51 
WSync
=
¥oc
;

52 
öfo
->
Powî
=
L©chPowî
;

53 
GameSèãRe°‹e
=
SèãRe°‹e
;

54 
	`AddExSèã
(&
œtche
, 1, 0, "LATC");

55 
	}
}

59 
	$CPROMSync
()

61 
	`£tchr4
(0x0000,0);

62 
	`£tchr4
(0x1000,
œtche
&3);

63 
	`£çrg16
(0x8000,0);

64 
	`£çrg16
(0xC000,1);

65 
	}
}

67 
	$CPROM_Inô
(
C¨tInfo
 *
öfo
)

69 
	`L©ch_Inô
(
öfo
, 
CPROMSync
, 0, 0x8000, 0xFFFF);

70 
	}
}

74 
	$CNROMSync
()

76 
	`£tchr8
(
œtche
&3);

77 
	`£çrg16
(0x8000,0);

78 
	`£çrg16
(0xC000,1);

79 
	}
}

81 
	$CNROM_Inô
(
C¨tInfo
 *
öfo
)

83 
	`L©ch_Inô
(
öfo
, 
CNROMSync
, 0, 0x8000, 0xFFFF);

84 
	}
}

88 
	$ANROMSync
()

90 
	`£çrg32
(0x8000,
œtche
&0xf);

91 
	`£tmúr‹
(
MI_0
+((
œtche
>>4)&1));

92 
	`£tchr8
(0);

93 
	}
}

95 
	$ANROM_Inô
(
C¨tInfo
 *
öfo
)

97 
	`L©ch_Inô
(
öfo
, 
ANROMSync
, 0, 0x8000, 0xFFFF);

98 
	}
}

102 
	$M70Sync
()

104 
	`£çrg16
(0x8000,
œtche
>>4);

105 
	`£çrg16
(0xc000,~0);

106 
	`£tchr8
(
œtche
&0xf);

107 
	}
}

109 
	$M≠≥r70_Inô
(
C¨tInfo
 *
öfo
)

111 
	`L©ch_Inô
(
öfo
, 
M70Sync
, 0, 0x8000, 0xFFFF);

112 
	}
}

116 
	$M152Sync
()

118 
	`£çrg16
(0x8000,(
œtche
>>4)&7);

119 
	`£çrg16
(0xc000,~0);

120 
	`£tchr8
(
œtche
&0xf);

121 
	`£tmúr‹
(
MI_0
+((
œtche
>>7)&1));

122 
	}
}

124 
	$M≠≥r152_Inô
(
C¨tInfo
 *
öfo
)

126 
	`L©ch_Inô
(
öfo
, 
M152Sync
, 0, 0x8000, 0xFFFF);

127 
	}
}

131 
	$M78Sync
()

133 
	`£çrg16
(0x8000,(
œtche
&7));

134 
	`£çrg16
(0xc000,~0);

135 
	`£tchr8
(
œtche
>>4);

136 
	`£tmúr‹
(
MI_0
+((
œtche
>>3)&1));

137 
	}
}

139 
	$M≠≥r78_Inô
(
C¨tInfo
 *
öfo
)

141 
	`L©ch_Inô
(
öfo
, 
M78Sync
, 0, 0x8000, 0xFFFF);

142 
	}
}

146 
	$MHROMSync
()

148 
	`£çrg32
(0x8000,
œtche
>>4);

149 
	`£tchr8
(
œtche
&0xf);

150 
	}
}

152 
	$MHROM_Inô
(
C¨tInfo
 *
öfo
)

154 
	`L©ch_Inô
(
öfo
, 
MHROMSync
, 0, 0x8000, 0xFFFF);

155 
	}
}

157 
	$M≠≥r140_Inô
(
C¨tInfo
 *
öfo
)

159 
	`L©ch_Inô
(
öfo
, 
MHROMSync
, 0, 0x6000, 0x7FFF);

160 
	}
}

164 
	$M87Sync
()

166 
	`£çrg16
(0x8000,0);

167 
	`£çrg16
(0xC000,1);

168 
	`£tchr8
(
œtche
>>1);

169 
	}
}

171 
	$M≠≥r87_Inô
(
C¨tInfo
 *
öfo
)

173 
	`L©ch_Inô
(
öfo
, 
M87Sync
, ~0, 0x6000, 0xFFFF);

174 
	}
}

178 
	$M11Sync
()

180 
	`£çrg32
(0x8000,
œtche
&0xf);

181 
	`£tchr8
(
œtche
>>4);

182 
	}
}

184 
	$M≠≥r11_Inô
(
C¨tInfo
 *
öfo
)

186 
	`L©ch_Inô
(
öfo
, 
M11Sync
, 0, 0x8000, 0xFFFF);

187 
	}
}

189 
	$M≠≥r144_Inô
(
C¨tInfo
 *
öfo
)

191 
	`L©ch_Inô
(
öfo
, 
M11Sync
, 0, 0x8001, 0xFFFF);

192 
	}
}

196 
	$UNROMSync
()

198 
	`£çrg16
(0x8000,
œtche
);

199 
	`£çrg16
(0xc000,~0);

200 
	`£tchr8
(0);

201 
	}
}

203 
	$UNROM_Inô
(
C¨tInfo
 *
öfo
)

205 
	`L©ch_Inô
(
öfo
, 
UNROMSync
, 0, 0x8000, 0xFFFF);

206 
	}
}

210 
	$SSUNROMSync
()

212 
	`£çrg16
(0x8000,
œtche
>>4);

213 
	`£çrg16
(0xc000,~0);

214 
	`£tchr8
(0);

215 
	}
}

217 
	$SUNSOFT_UNROM_Inô
(
C¨tInfo
 *
öfo
)

219 
	`L©ch_Inô
(
öfo
, 
SSUNROMSync
, 0, 0x8000, 0xFFFF);

220 
	}
}

224 
	$M94Sync
()

226 
	`£çrg16
(0x8000,
œtche
>>2);

227 
	`£çrg16
(0xc000,~0);

228 
	`£tchr8
(0);

229 
	}
}

231 
	$M≠≥r94_Inô
(
C¨tInfo
 *
öfo
)

233 
	`L©ch_Inô
(
öfo
, 
M94Sync
, 0, 0x8000, 0xFFFF);

234 
	}
}

238 
	$M107Sync
()

240 
	`£çrg32
(0x8000,(
œtche
>>1)&3);

241 
	`£tchr8
(
œtche
&7);

242 
	}
}

244 
	$M≠≥r107_Inô
(
C¨tInfo
 *
öfo
)

246 
	`L©ch_Inô
(
öfo
, 
M107Sync
, ~0, 0x8000, 0xFFFF);

247 
	}
}

251 #ifde‡
DEBUG_MAPPER


252 
	$DECLFW
(
WrôeH™dÀr
)

254 
	`FCEU_¥ötf
("$%04x:$%02x\n",
A
,
V
);

255 
	}
}

258 
	$NROMPowî
()

260 
	`£çrg16
(0x8000,0);

261 
	`£çrg16
(0xC000,~0);

262 
	`£tchr8
(0);

263 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

264 #ifde‡
DEBUG_MAPPER


265 
	`SëWrôeH™dÀr
(0x4020,0xFFFF,
WrôeH™dÀr
);

267 
	}
}

269 
	$NROM_Inô
(
C¨tInfo
 *
öfo
)

271 
öfo
->
Powî
=
NROMPowî
;

272 
	}
}

	@boards/deirom.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gcmd
;

24 
uöt8
 
	gDRegs
[8];

26 
SFORMAT
 
	gDEI_SèãRegs
[]=

28 {&
cmd
, 1, "CMD"},

29 {
DRegs
, 8, "DREG"},

33 
	$Sync
()

35 
	`£tchr2
(0x0000,
DRegs
[0]);

36 
	`£tchr2
(0x0800,
DRegs
[1]);

37 
x
;

38 
x
=0;x<4;x++)

39 
	`£tchr1
(0x1000+(
x
<<10),
DRegs
[2+x]);

40 
	`£çrg8
(0x8000,
DRegs
[6]);

41 
	`£çrg8
(0xa000,
DRegs
[7]);

42 
	}
}

44 
	$SèãRe°‹e
(
vîsi⁄
)

46 
	`Sync
();

47 
	}
}

49 
	$DECLFW
(
DEIWrôe
)

51 
A
&0x8001)

53 0x8000: 
cmd
=
V
&0x07; ;

54 0x8001: if(
cmd
<=0x05)

55 
V
&=0x3F;

57 
V
&=0x0F;

58 if(
cmd
<=0x01Ë
V
>>=1;

59 
DRegs
[
cmd
&0x07]=
V
;

60 
	`Sync
();

63 
	}
}

65 
	$DEIPowî
()

67 
	`£çrg8
(0xc000,0xE);

68 
	`£çrg8
(0xe000,0xF);

69 
cmd
=0;

70 
	`mem£t
(
DRegs
,0,8);

71 
	`Sync
();

72 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

73 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
DEIWrôe
);

74 
	}
}

77 
	$DEIROM_Inô
(
C¨tInfo
 *
öfo
)

79 
öfo
->
Powî
=
DEIPowî
;

80 
GameSèãRe°‹e
=
SèãRe°‹e
;

81 
	`AddExSèã
(&
DEI_SèãRegs
, ~0, 0, 0);

82 
	}
}

	@boards/dream.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gœtche
;

25 
	$Sync
()

27 
	`£çrg16
(0x8000,
œtche
);

28 
	`£çrg16
(0xC000,8);

29 
	}
}

31 
	$DECLFW
(
DREAMWrôe
)

33 
œtche
=
V
&7;

34 
	`Sync
();

35 
	}
}

37 
	$DREAMPowî
()

39 
œtche
=0;

40 
	`Sync
();

41 
	`£tchr8
(0);

42 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

43 
	`SëWrôeH™dÀr
(0x5020,0x5020,
DREAMWrôe
);

44 
	}
}

46 
	$Re°‹e
(
vîsi⁄
)

48 
	`Sync
();

49 
	}
}

51 
	$DªamTech01_Inô
(
C¨tInfo
 *
öfo
)

53 
GameSèãRe°‹e
=
Re°‹e
;

54 
öfo
->
Powî
=
DREAMPowî
;

55 
	`AddExSèã
(&
œtche
, 1, 0, "LATCH");

56 
	}
}

	@boards/fk23c.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
uöt8
 
	guƒomchr
;

26 
	$BMCFK23CCW
(
uöt32
 
A
, 
uöt8
 
V
)

28 if(
EXPREGS
[0]&0x40)

29 
	`£tchr8
((
EXPREGS
[2]&0xFC)|
uƒomchr
);

32 
uöt16
 
ba£
=(
EXPREGS
[2]&0x7F)<<3;

33 
	`£tchr1
(
A
,
V
|
ba£
);

34 if(
EXPREGS
[3]&2)

36 
	`£tchr1
(0x0400,
EXPREGS
[6]|
ba£
);

37 
	`£tchr1
(0x0C00,
EXPREGS
[7]|
ba£
);

40 
	}
}

42 
	$BMCFK23CPW
(
uöt32
 
A
, 
uöt8
 
V
)

44 if(
EXPREGS
[0]&4)

45 
	`£çrg32
(0x8000,
EXPREGS
[1]>>1);

48 if(
EXPREGS
[0]&2)

49 
	`£çrg8
(
A
,(
V
&(0x3F>>(
EXPREGS
[0]&3)))|(EXPREGS[1]<<1));

51 
	`£çrg8
(
A
,
V
);

52 if(
EXPREGS
[3]&2)

54 
	`£çrg8
(0xC000,
EXPREGS
[4]);

55 
	`£çrg8
(0xE000,
EXPREGS
[5]);

58 
	}
}

60 
	$DECLFW
(
BMCFK23C8003Wrôe
)

62 if(
EXPREGS
[0]&0x40)

64 
uƒomchr
=
V
&3;

65 
	`FixMMC3CHR
(
MMC3_cmd
);

69 if((
A
==0x8001)&&(
EXPREGS
[3]&2&&
MMC3_cmd
&8))

71 
EXPREGS
[4|(
MMC3_cmd
&3)]=
V
;

72 
	`FixMMC3PRG
(
MMC3_cmd
);

73 
	`FixMMC3CHR
(
MMC3_cmd
);

76 
	`MMC3_CMDWrôe
(
A
,
V
);

78 
	}
}

80 
	$DECLFW
(
BMCFK23CWrôe
)

82 
EXPREGS
[
A
&3]=
V
;

83 
	`FixMMC3PRG
(
MMC3_cmd
);

84 
	`FixMMC3CHR
(
MMC3_cmd
);

85 
	}
}

87 
	$BMCFK23CRe£t
()

89 
EXPREGS
[0]=EXPREGS[1]=EXPREGS[2]=EXPREGS[3]=0;

90 
EXPREGS
[4]=EXPREGS[5]=EXPREGS[6]=EXPREGS[7]=0xFF;

91 
	`MMC3RegRe£t
();

92 
	}
}

94 
	$BMCFK23CPowî
()

96 
EXPREGS
[0]=EXPREGS[1]=EXPREGS[2]=EXPREGS[3]=0;

97 
EXPREGS
[4]=EXPREGS[5]=EXPREGS[6]=EXPREGS[7]=0xFF;

98 
	`GíMMC3Powî
();

99 
	`SëWrôeH™dÀr
(0x5ff0,0x5fff,
BMCFK23CWrôe
);

100 
	`SëWrôeH™dÀr
(0x8000,0x8003,
BMCFK23C8003Wrôe
);

101 
	}
}

103 
	$BMCFK23C_Inô
(
C¨tInfo
 *
öfo
)

105 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, 0);

106 
cwøp
=
BMCFK23CCW
;

107 
pwøp
=
BMCFK23CPW
;

108 
öfo
->
Powî
=
BMCFK23CPowî
;

109 
öfo
->
Re£t
=
BMCFK23CRe£t
;

110 
	`AddExSèã
(
EXPREGS
, 8, 0, "EXPR");

111 
	`AddExSèã
(&
uƒomchr
, 1, 0, "UNCHR");

112 
	}
}

	@boards/h2288.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
uöt8
 
m114_≥rm
[8];

26 
	$H2288PW
(
uöt32
 
A
, 
uöt8
 
V
)

28 if(
EXPREGS
[0]&0x40)

30 
uöt8
 
b™k
=(
EXPREGS
[0]&5)|((EXPREGS[0]&8)>>2)|((EXPREGS[0]&0x20)>>2);

31 if(
EXPREGS
[0]&2)

32 
	`£çrg32
(0x8000,
b™k
>>1);

35 
	`£çrg16
(0x8000,
b™k
);

36 
	`£çrg16
(0xC000,
b™k
);

40 
	`£çrg8
(
A
,
V
&0x3F);

41 
	}
}

43 
	$DECLFW
(
H2288WrôeHi
)

45 
A
&0x8001)

47 0x8000: 
	`MMC3_CMDWrôe
(0x8000,(
V
&0xC0)|(
m114_≥rm
[V&7])); ;

48 0x8001: 
	`MMC3_CMDWrôe
(0x8001,
V
); ;

50 
	}
}

52 
	$DECLFW
(
H2288WrôeLo
)

54 if(
A
&0x800)

56 if(
A
&1)

57 
EXPREGS
[1]=
V
;

59 
EXPREGS
[0]=
V
;

60 
	`FixMMC3PRG
(
MMC3_cmd
);

62 
	}
}

64 
	$DECLFR
(
H2288Ród
)

66 
bô
;

67 
bô
=(
A
&1)^1;

68 
bô
&=((
A
>>8)&1);

69 
bô
^=1;

70 ((
X
.
DB
&0xFE)|
bô
);

71 
	}
}

73 
	$H2288Powî
()

75 
EXPREGS
[0]=EXPREGS[1]=0;

76 
	`GíMMC3Powî
();

77 
	`SëRódH™dÀr
(0x5000,0x5FFF,
H2288Ród
);

78 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

79 
	`SëWrôeH™dÀr
(0x5000,0x5FFF,
H2288WrôeLo
);

80 
	`SëWrôeH™dÀr
(0x8000,0x8FFF,
H2288WrôeHi
);

81 
	}
}

83 
	$UNLH2288_Inô
(
C¨tInfo
 *
öfo
)

85 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

86 
pwøp
=
H2288PW
;

87 
öfo
->
Powî
=
H2288Powî
;

88 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

89 
	}
}

	@boards/karaoke.c

21 
	~"m≠öc.h
"

23 
uöt32
 
ROM_size
;

24 
uöt8
 
	gœtche
;

26 
	$Sync
()

28 if(
œtche
)

30 if(
œtche
&0x10)

31 
	`£çrg16
(0x8000,(
œtche
&7));

33 
	`£çrg16
(0x8000,(
œtche
&7)|8);

36 
	`£çrg16
(0x8000,7+(
ROM_size
>>4));

37 
	}
}

39 
	$DECLFW
(
M188Wrôe
)

41 
œtche
=
V
;

42 
	`Sync
();

43 
	}
}

45 
	$DECLFR
(
ExtDev
)

48 
	}
}

50 
	$Powî
()

52 
œtche
=0;

53 
	`Sync
();

54 
	`£tchr8
(0);

55 
	`£çrg16
(0xc000,0x7);

56 
	`SëRódH™dÀr
(0x6000,0x7FFF,
ExtDev
);

57 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

58 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M188Wrôe
);

59 
	}
}

61 
	$SèãRe°‹e
(
vîsi⁄
)

63 
	`Sync
();

64 
	}
}

66 
	$M≠≥r188_Inô
(
C¨tInfo
 *
öfo
)

68 
öfo
->
Powî
=Power;

69 
GameSèãRe°‹e
=
SèãRe°‹e
;

70 
	`AddExSèã
(&
œtche
, 1, 0, "LATCH");

71 
	}
}

	@boards/kof97.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

24 
	$DECLFW
(
UNLKOF97CMDWrôe
)

26 
V
=(V&0xD8)|((V&0x20)>>4)|((V&4)<<3)|((V&2)>>1)|((V&1)<<2);

27 if(
A
==0x9000) A=0x8001;

28 
	`MMC3_CMDWrôe
(
A
,
V
);

29 
	}
}

31 
	$DECLFW
(
UNLKOF97IRQWrôe
)

33 
V
=(V&0xD8)|((V&0x20)>>4)|((V&4)<<3)|((V&2)>>1)|((V&1)<<2);

34 if(
A
==0xD000) A=0xC001;

35 if(
A
==0xF000) A=0xE001;

36 
	`MMC3_IRQWrôe
(
A
,
V
);

37 
	}
}

39 
	$UNLKOF97Powî
()

41 
	`GíMMC3Powî
();

42 
	`SëWrôeH™dÀr
(0x8000,0xA000,
UNLKOF97CMDWrôe
);

43 
	`SëWrôeH™dÀr
(0xC000,0xF000,
UNLKOF97IRQWrôe
);

44 
	}
}

46 
	$UNLKOF97_Inô
(
C¨tInfo
 *
öfo
)

48 
	`GíMMC3_Inô
(
öfo
, 128, 256, 0, 0);

49 
öfo
->
Powî
=
UNLKOF97Powî
;

50 
	}
}

	@boards/konami-qtai.c

23 
	~"m≠öc.h
"

25 
uöt8
 *
	gCHRRAM
=
NULL
;

26 
uöt8
 
	gSWRAM
[4096];

28 
uöt8
 
	gªgs
[16];

29 
uöt8
 
	gWRAM
[4096];

30 
SFORMAT
 
	gSèãRegs
[]=

32 {&
ªgs
, 16, "REGS"},

33 {
WRAM
, 4096, "WRAM"},

37 
	$Sync
()

39 if(
ªgs
[5]&0x40)

41 
	`£tchr4r
(0,0x1000,
ªgs
[5]&0x3F);

45 
	`£tchr4r
(0x10,0x0000,
ªgs
[5]);

46 
	`£tchr4r
(0x10,0x1000,
ªgs
[5]^1);

48 
	`£çrg8r
((
ªgs
[2]>>6)&1,0x8000,(regs[2]&0x3F));

49 
	`£çrg8r
((
ªgs
[3]>>6)&1,0xA000,(regs[3]&0x3F));

50 
	`£çrg8r
((
ªgs
[4]>>6)&1,0xC000,(regs[4]&0x3F));

51 
	`£çrg8r
(1,0xE000,~0);

52 
	`£tmúr‹
((
ªgs
[0xA]&3));

53 
	}
}

55 
	$DECLFW
(
M190Wrôe
)

58 
ªgs
[(
A
&0x0F00)>>8]=
V
;

59 
	`Sync
();

60 
	}
}

62 
	$DECLFR
(
M190Ród
)

65  
ªgs
[(
A
&0x0F00)>>8];

66 
	}
}

68 
	$DECLFR
(
AWRAM
)

70 (
WRAM
[
A
-0x7000]);

71 
	}
}

72 
	$DECLFW
(
BWRAM
)

74 
WRAM
[
A
-0x7000]=
V
;

75 
	}
}

77 
	$DECLFR
(
ASWRAM
)

79 (
SWRAM
[
A
-0x6000]);

80 
	}
}

81 
	$DECLFW
(
BSWRAM
)

83 
SWRAM
[
A
-0x6000]=
V
;

84 
	}
}

86 
	$M190Powî
()

88 
	`£tvøm8
(
CHRRAM
);

89 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

90 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M190Wrôe
);

93 
	`SëRódH™dÀr
(0xDC00,0xDC00,
M190Ród
);

94 
	`SëRódH™dÀr
(0xDD00,0xDD00,
M190Ród
);

95 
	`SëRódH™dÀr
(0x7000,0x7FFF,
AWRAM
);

96 
	`SëWrôeH™dÀr
(0x7000,0x7FFF,
BWRAM
);

97 
	`SëRódH™dÀr
(0x6000,0x6FFF,
ASWRAM
);

98 
	`SëWrôeH™dÀr
(0x6000,0x6FFF,
BSWRAM
);

99 #ifde‡
ASM_6502


100 
Page
[14]=Page[15]=
WRAM
-0x7000;

101 
Page
[12]=Page[13]=
SWRAM
-0x6000;

103 
	`Sync
();

104 
	}
}

106 
	$M190Clo£
()

108 if(
CHRRAM
)

109 
	`FCEU_g‰ì
(
CHRRAM
);

110 
CHRRAM
=
NULL
;

111 
	}
}

113 
	$SèãRe°‹e
(
vîsi⁄
)

115 
	`Sync
();

116 
	}
}

118 
	$M≠≥r190_Inô
(
C¨tInfo
 *
öfo
)

120 
öfo
->
Powî
=
M190Powî
;

121 
öfo
->
Clo£
=
M190Clo£
;

122 if(
öfo
->
b©ãry
)

124 
öfo
->
SaveGame
[0]=
SWRAM
;

125 
öfo
->
SaveGameLí
[0]=4096;

127 
GameSèãRe°‹e
=
SèãRe°‹e
;

128 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

129 
	`SëupC¨tCHRM≠pög
(0x10,
CHRRAM
,8192,1);

130 
	`AddExSèã
(
CHRRAM
, 8192, 0, "CHRRAM");

131 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

132 
	}
}

	@boards/malee.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gWRAM
[2048];

25 
	$MALEERe£t
()

27 
	`£çrg2r
(0x10,0x7000,0);

28 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

29 
	`SëRódH™dÀr
(0x6000,0x67FF,
C¨tBR
);

30 
	`SëRódH™dÀr
(0x7000,0x77FF,
C¨tBR
);

31 
	`£çrg2r
(1,0x6000,0);

32 
	`£çrg32
(0x8000,0);

33 
	`£tchr8
(0);

34 
	}
}

36 
	$MALEE_Inô
(
C¨tInfo
 *
öfo
)

38 
öfo
->
Powî
=
MALEERe£t
;

39 
	`SëupC¨tPRGM≠pög
(0x10, 
WRAM
, 2048, 1);

40 
	`AddExSèã
(
WRAM
, 2048, 0,"RAM");

41 
	}
}

	@boards/mapinc.h

1 
	~"../ty≥s.h
"

2 
	~"../x6502.h
"

3 
	~"../f˚.h
"

4 
	~"../µu.h
"

5 
	~"../mem‹y.h
"

6 
	~"../sound.h
"

7 
	~"../°©e.h
"

8 
	~"../ˇπ.h
"

9 
	~"../öes.h
"

10 
	~"../chót.h
"

11 
	~"../unif.h
"

12 
	~"../svga.h
"

13 
	~<°rög.h
>

	@boards/mmc1.c

22 
	~"m≠öc.h
"

24 
GíMMC1Powî
();

25 
GíMMC1Inô
(
C¨tInfo
 *
öfo
, 
¥g
, 
chr
, 
wøm
, 
b©ãry
);

27 
uöt8
 
	gDRegs
[4];

28 
uöt8
 
	gBuf„r
,
	gBuf„rShi·
;

30 
	gmmc1›ts
;

32 (*
MMC1CHRHook4
)(
uöt32
 
A
, 
uöt8
 
V
);

33 (*
MMC1PRGHook16
)(
uöt32
 
A
, 
uöt8
 
V
);

35 
uöt8
 *
WRAM
=
NULL
;

36 
uöt8
 *
CHRRAM
=
NULL
;

37 
is155
;

39 
	$DECLFW
(
MBWRAM
)

41 if(!(
DRegs
[3]&0x10)||
is155
)

42 
Page
[
A
>>11][A]=
V
;

43 
	}
}

45 
	$DECLFR
(
MAWRAM
)

47 if((
DRegs
[3]&0x10)&&!
is155
)

48  
X
.
DB
;

49 (
Page
[
A
>>11][A]);

50 
	}
}

52 
	$MMC1CHR
()

54 if(
mmc1›ts
&4)

56 if(
DRegs
[0]&0x10)

57 
	`£çrg8r
(0x10,0x6000,(
DRegs
[1]>>4)&1);

59 
	`£çrg8r
(0x10,0x6000,(
DRegs
[1]>>3)&1);

61 if(
MMC1CHRHook4
)

63 if(
DRegs
[0]&0x10)

65 
	`MMC1CHRHook4
(0x0000,
DRegs
[1]);

66 
	`MMC1CHRHook4
(0x1000,
DRegs
[2]);

70 
	`MMC1CHRHook4
(0x0000,(
DRegs
[1]&0xFE));

71 
	`MMC1CHRHook4
(0x1000,
DRegs
[1]|1);

76 if(
DRegs
[0]&0x10)

78 
	`£tchr4
(0x0000,
DRegs
[1]);

79 
	`£tchr4
(0x1000,
DRegs
[2]);

82 
	`£tchr8
(
DRegs
[1]>>1);

84 
	}
}

86 
	$MMC1PRG
()

88 
uöt8
 
offs
=
DRegs
[1]&0x10;

89 if(
MMC1PRGHook16
)

91 
DRegs
[0]&0xC)

93 0xC: 
	`MMC1PRGHook16
(0x8000,(
DRegs
[3]+
offs
));

94 
	`MMC1PRGHook16
(0xC000,0xF+
offs
);

96 0x8: 
	`MMC1PRGHook16
(0xC000,(
DRegs
[3]+
offs
));

97 
	`MMC1PRGHook16
(0x8000,
offs
);

101 
	`MMC1PRGHook16
(0x8000,((
DRegs
[3]&~1)+
offs
));

102 
	`MMC1PRGHook16
(0xc000,((
DRegs
[3]&~1)+
offs
+1));

106 
DRegs
[0]&0xC)

108 0xC: 
	`£çrg16
(0x8000,(
DRegs
[3]+
offs
));

109 
	`£çrg16
(0xC000,0xF+
offs
);

111 0x8: 
	`£çrg16
(0xC000,(
DRegs
[3]+
offs
));

112 
	`£çrg16
(0x8000,
offs
);

116 
	`£çrg16
(0x8000,((
DRegs
[3]&~1)+
offs
));

117 
	`£çrg16
(0xc000,((
DRegs
[3]&~1)+
offs
+1));

120 
	}
}

122 
	$MMC1MIRROR
()

124 
DRegs
[0]&3)

126 2: 
	`£tmúr‹
(
MI_V
); ;

127 3: 
	`£tmúr‹
(
MI_H
); ;

128 0: 
	`£tmúr‹
(
MI_0
); ;

129 1: 
	`£tmúr‹
(
MI_1
); ;

131 
	}
}

133 
uöt64
 
	gÃe£t
;

134 
	$DECLFW
(
MMC1_wrôe
)

136 
n
=(
A
>>13)-4;

146 if((
time°ampba£
+
time°amp
)<(
Ãe£t
+2)) ;

147 if(
V
&0x80)

149 
DRegs
[0]|=0xC;

150 
Buf„rShi·
=
Buf„r
=0;

151 
	`MMC1PRG
();

152 
Ãe£t
=
time°ampba£
+
time°amp
;

155 
Buf„r
|=(
V
&1)<<(
Buf„rShi·
++);

156 if(
Buf„rShi·
==5)

158 
DRegs
[
n
] = 
Buf„r
;

159 
Buf„rShi·
 = 
Buf„r
 = 0;

160 
n
)

162 0: 
	`MMC1MIRROR
(); 
	`MMC1CHR
(); 
	`MMC1PRG
(); ;

163 1: 
	`MMC1CHR
(); 
	`MMC1PRG
(); ;

164 2: 
	`MMC1CHR
(); ;

165 3: 
	`MMC1PRG
(); ;

168 
	}
}

170 
	$MMC1_Re°‹e
(
vîsi⁄
)

172 
	`MMC1MIRROR
();

173 
	`MMC1CHR
();

174 
	`MMC1PRG
();

175 
Ãe£t
=0;

176 
	}
}

178 
	$MMC1CMRe£t
()

180 
i
;

181 
i
=0;i<4;i++)

182 
DRegs
[
i
]=0;

183 
Buf„r
 = 
Buf„rShi·
 = 0;

184 
DRegs
[0]=0x1F;

185 
DRegs
[1]=0;

186 
DRegs
[2]=0;

187 
DRegs
[3]=0;

189 
	`MMC1MIRROR
();

190 
	`MMC1CHR
();

191 
	`MMC1PRG
();

192 
	}
}

194 
	$Dëe˘MMC1WRAMSize
(
uöt32
 
¸c32
)

196 
¸c32
)

205 
	`FCEU_¥ötf
(" >8KBÉxternal WRAMÖresent. Use UNIF if you hackÅhe ROM image.\n");

210 
	}
}

212 
uöt32
 
	gNWCIRQCou¡
;

213 
uöt8
 
	gNWCRec
;

214 
	#NWCDIP
 0xE

	)

216 
	$FP_FASTAPASS
(1Ë
	$NWCIRQHook
(
a
)

218 if(!(
NWCRec
&0x10))

220 
NWCIRQCou¡
+=
a
;

221 if((
NWCIRQCou¡
|(
NWCDIP
<<25))>=0x3e000000)

223 
NWCIRQCou¡
=0;

224 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

227 
	}
}

229 
	$NWCCHRHook
(
uöt32
 
A
, 
uöt8
 
V
)

231 if((
V
&0x10))

233 
NWCIRQCou¡
=0;

234 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

236 
NWCRec
=
V
;

237 if(
V
&0x08)

238 
	`MMC1PRG
();

240 
	`£çrg32
(0x8000,(
V
>>1)&3);

241 
	}
}

243 
	$NWCPRGHook
(
uöt32
 
A
, 
uöt8
 
V
)

245 if(
NWCRec
&0x8)

246 
	`£çrg16
(
A
,8|(
V
&0x7));

248 
	`£çrg32
(0x8000,(
NWCRec
>>1)&3);

249 
	}
}

251 
	$NWCPowî
()

253 
	`GíMMC1Powî
();

254 
	`£tchr8r
(0,0);

255 
	}
}

257 
	$M≠≥r105_Inô
(
C¨tInfo
 *
öfo
)

259 
	`GíMMC1Inô
(
öfo
, 256, 256, 8, 0);

260 
MMC1CHRHook4
=
NWCCHRHook
;

261 
MMC1PRGHook16
=
NWCPRGHook
;

262 
M≠IRQHook
=
NWCIRQHook
;

263 
öfo
->
Powî
=
NWCPowî
;

264 
	}
}

266 
	$GíMMC1Powî
()

268 
Ãe£t
=0;

269 if(
mmc1›ts
&1)

271 
	`FCEU_ChótAddRAM
(8,0x6000,
WRAM
);

272 if(
mmc1›ts
&4)

273 
	`FCEU_dwmem£t
(
WRAM
,0,8192)

274 if(!(
mmc1›ts
&2))

275 
	`FCEU_dwmem£t
(
WRAM
,0,8192);

277 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
MMC1_wrôe
);

278 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

280 if(
mmc1›ts
&1)

282 
	`SëRódH™dÀr
(0x6000,0x7FFF,
MAWRAM
);

283 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
MBWRAM
);

284 
	`£çrg8r
(0x10,0x6000,0);

287 
	`MMC1CMRe£t
();

288 
	}
}

290 
	$GíMMC1Clo£
()

292 if(
CHRRAM
)

293 
	`FCEU_g‰ì
(
CHRRAM
);

294 if(
WRAM
)

295 
	`FCEU_g‰ì
(
WRAM
);

296 
CHRRAM
=
WRAM
=
NULL
;

297 
	}
}

299 
	$GíMMC1Inô
(
C¨tInfo
 *
öfo
, 
¥g
, 
chr
, 
wøm
, 
b©ãry
)

301 
is155
=0;

303 
öfo
->
Clo£
=
GíMMC1Clo£
;

304 
MMC1PRGHook16
=
MMC1CHRHook4
=0;

305 
mmc1›ts
=0;

306 
PRGmask16
[0]&=(
¥g
>>14)-1;

307 
CHRmask4
[0]&=(
chr
>>12)-1;

308 
CHRmask8
[0]&=(
chr
>>13)-1;

310 if(
wøm
)

312 
WRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
wøm
*1024);

313 
mmc1›ts
|=1;

314 if(
wøm
>8Ë
mmc1›ts
|=4;

315 
	`SëupC¨tPRGM≠pög
(0x10,
WRAM
,
wøm
*1024,1);

316 
	`AddExSèã
(
WRAM
, 
wøm
*1024, 0, "WRAM");

317 if(
b©ãry
)

319 
mmc1›ts
|=2;

320 
öfo
->
SaveGame
[0]=
WRAM
+((
mmc1›ts
&4)?8192:0);

321 
öfo
->
SaveGameLí
[0]=8192;

324 if(!
chr
)

326 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

327 
	`SëupC¨tCHRM≠pög
(0, 
CHRRAM
, 8192, 1);

328 
	`AddExSèã
(
CHRRAM
, 8192, 0, "CHRR");

330 
	`AddExSèã
(
DRegs
, 4, 0, "DREG");

332 
öfo
->
Powî
=
GíMMC1Powî
;

333 
GameSèãRe°‹e
=
MMC1_Re°‹e
;

334 
	`AddExSèã
(&
Ãe£t
, 8, 1, "LRST");

335 
	}
}

337 
	$M≠≥r1_Inô
(
C¨tInfo
 *
öfo
)

339 
ws
=
	`Dëe˘MMC1WRAMSize
(
öfo
->
CRC32
);

340 
	`GíMMC1Inô
(
öfo
, 512, 256, 
ws
, info->
b©ãry
);

341 
	}
}

344 
	$M≠≥r155_Inô
(
C¨tInfo
 *
öfo
)

346 
	`GíMMC1Inô
(
öfo
,512,256,8,öfo->
b©ãry
);

347 
is155
=1;

348 
	}
}

350 
	$SAROM_Inô
(
C¨tInfo
 *
öfo
)

352 
	`GíMMC1Inô
(
öfo
, 128, 64, 8, info->
b©ãry
);

353 
	}
}

355 
	$SBROM_Inô
(
C¨tInfo
 *
öfo
)

357 
	`GíMMC1Inô
(
öfo
, 128, 64, 0, 0);

358 
	}
}

360 
	$SCROM_Inô
(
C¨tInfo
 *
öfo
)

362 
	`GíMMC1Inô
(
öfo
, 128, 128, 0, 0);

363 
	}
}

365 
	$SEROM_Inô
(
C¨tInfo
 *
öfo
)

367 
	`GíMMC1Inô
(
öfo
, 32, 64, 0, 0);

368 
	}
}

370 
	$SGROM_Inô
(
C¨tInfo
 *
öfo
)

372 
	`GíMMC1Inô
(
öfo
, 256, 0, 0, 0);

373 
	}
}

375 
	$SKROM_Inô
(
C¨tInfo
 *
öfo
)

377 
	`GíMMC1Inô
(
öfo
, 256, 64, 8, info->
b©ãry
);

378 
	}
}

380 
	$SLROM_Inô
(
C¨tInfo
 *
öfo
)

382 
	`GíMMC1Inô
(
öfo
, 256, 128, 0, 0);

383 
	}
}

385 
	$SL1ROM_Inô
(
C¨tInfo
 *
öfo
)

387 
	`GíMMC1Inô
(
öfo
, 128, 128, 0, 0);

388 
	}
}

394 
	$SL2ROM_Inô
(
C¨tInfo
 *
öfo
)

396 
	`GíMMC1Inô
(
öfo
, 256, 256, 0, 0);

397 
	}
}

399 
	$SFROM_Inô
(
C¨tInfo
 *
öfo
)

401 
	`GíMMC1Inô
(
öfo
, 256, 256, 0, 0);

402 
	}
}

404 
	$SHROM_Inô
(
C¨tInfo
 *
öfo
)

406 
	`GíMMC1Inô
(
öfo
, 256, 256, 0, 0);

407 
	}
}

413 
	$SNROM_Inô
(
C¨tInfo
 *
öfo
)

415 
	`GíMMC1Inô
(
öfo
, 256, 0, 8, info->
b©ãry
);

416 
	}
}

418 
	$SOROM_Inô
(
C¨tInfo
 *
öfo
)

420 
	`GíMMC1Inô
(
öfo
, 256, 0, 16, info->
b©ãry
);

421 
	}
}

	@boards/mmc3.c

27 
	~"m≠öc.h
"

28 
	~"mmc3.h
"

30 
uöt8
 
	gMMC3_cmd
;

31 
uöt8
 *
	gWRAM
;

32 
uöt8
 *
	gCHRRAM
;

33 
uöt32
 
	gCHRRAMSize
;

34 
uöt8
 
	gEXPREGS
[8];

36 
uöt8
 
	gA000B
,
	gA001B
;

37 
uöt8
 
	gDRegBuf
[8];

39 #unde‡
IRQCou¡


40 #unde‡
IRQL©ch


41 #unde‡
IRQa


42 
uöt8
 
	gIRQCou¡
,
	gIRQL©ch
,
	gIRQa
;

43 
uöt8
 
	gIRQRñﬂd
;

45 
SFORMAT
 
	gMMC3_SèãRegs
[]=

47 {
DRegBuf
, 8, "REGS"},

48 {&
MMC3_cmd
, 1, "CMD"},

49 {&
A000B
, 1, "A000"},

50 {&
A001B
, 1, "A001"},

51 {&
IRQRñﬂd
, 1, "IRQR"},

52 {&
IRQCou¡
, 1, "IRQC"},

53 {&
IRQL©ch
, 1, "IRQL"},

54 {&
IRQa
, 1, "IRQA"},

58 
	gmmc3›ts
=0;

59 
	gwøms
;

60 
	gisRevB
=1;

62 (*
pwøp
)(
uöt32
 
A
, 
uöt8
 
V
);

63 (*
cwøp
)(
uöt32
 
A
, 
uöt8
 
V
);

64 (*
mwøp
)(
uöt8
 
V
);

66 
	`GíMMC3Powî
();

67 
	`FixMMC3PRG
(
V
);

68 
	`FixMMC3CHR
(
V
);

70 
	`GíMMC3_Inô
(
C¨tInfo
 *
öfo
, 
¥g
, 
chr
, 
wøm
, 
b©ãry
);

76 
	$FixMMC3PRG
(
V
)

78 if(
V
&0x40)

80 
	`pwøp
(0xC000,
DRegBuf
[6]);

81 
	`pwøp
(0x8000,~1);

85 
	`pwøp
(0x8000,
DRegBuf
[6]);

86 
	`pwøp
(0xC000,~1);

88 
	`pwøp
(0xA000,
DRegBuf
[7]);

89 
	`pwøp
(0xE000,~0);

90 
	}
}

92 
	$FixMMC3CHR
(
V
)

94 
cba£
=(
V
&0x80)<<5;

96 
	`cwøp
((
cba£
^0x000),
DRegBuf
[0]&(~1));

97 
	`cwøp
((
cba£
^0x400),
DRegBuf
[0]|1);

98 
	`cwøp
((
cba£
^0x800),
DRegBuf
[1]&(~1));

99 
	`cwøp
((
cba£
^0xC00),
DRegBuf
[1]|1);

101 
	`cwøp
(
cba£
^0x1000,
DRegBuf
[2]);

102 
	`cwøp
(
cba£
^0x1400,
DRegBuf
[3]);

103 
	`cwøp
(
cba£
^0x1800,
DRegBuf
[4]);

104 
	`cwøp
(
cba£
^0x1c00,
DRegBuf
[5]);

105 
	}
}

107 
	$MMC3RegRe£t
()

109 
IRQCou¡
=
IRQL©ch
=
IRQa
=
MMC3_cmd
=0;

111 
DRegBuf
[0]=0;

112 
DRegBuf
[1]=2;

113 
DRegBuf
[2]=4;

114 
DRegBuf
[3]=5;

115 
DRegBuf
[4]=6;

116 
DRegBuf
[5]=7;

117 
DRegBuf
[6]=0;

118 
DRegBuf
[7]=1;

120 
	`FixMMC3PRG
(0);

121 
	`FixMMC3CHR
(0);

122 
	}
}

124 
	$DECLFW
(
MMC3_CMDWrôe
)

127 
A
&0xE001)

130 if((
V
&0x40Ë!(
MMC3_cmd
&0x40))

131 
	`FixMMC3PRG
(
V
);

132 if((
V
&0x80Ë!(
MMC3_cmd
&0x80))

133 
	`FixMMC3CHR
(
V
);

134 
MMC3_cmd
 = 
V
;

138 
cba£
=(
MMC3_cmd
&0x80)<<5;

139 
DRegBuf
[
MMC3_cmd
&0x7]=
V
;

140 
MMC3_cmd
&0x07)

142 0: 
	`cwøp
((
cba£
^0x000),
V
&(~1));

143 
	`cwøp
((
cba£
^0x400),
V
|1);

145 1: 
	`cwøp
((
cba£
^0x800),
V
&(~1));

146 
	`cwøp
((
cba£
^0xC00),
V
|1);

148 2: 
	`cwøp
(
cba£
^0x1000,
V
);

150 3: 
	`cwøp
(
cba£
^0x1400,
V
);

152 4: 
	`cwøp
(
cba£
^0x1800,
V
);

154 5: 
	`cwøp
(
cba£
^0x1C00,
V
);

157 if(
MMC3_cmd
&0x40)

158 
	`pwøp
(0xC000,
V
);

160 
	`pwøp
(0x8000,
V
);

163 
	`pwøp
(0xA000,
V
);

169 if(
mwøp
Ë
	`mwøp
(
V
&1);

172 
A001B
=
V
;

173 
	`Wrôe_IRQFM
(0x4017,0x40);

176 
	}
}

178 
	$DECLFW
(
MMC3_IRQWrôe
)

181 
A
&0xE001)

183 0xC000:
IRQL©ch
=
V
;;

184 0xC001:
IRQRñﬂd
=1;;

185 0xE000:
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQa
=0;;

186 0xE001:
IRQa
=1;;

188 
	}
}

190 
	$ClockMMC3Cou¡î
()

192 
cou¡
 = 
IRQCou¡
;

193 if(!
cou¡
 || 
IRQRñﬂd
)

195 
IRQCou¡
 = 
IRQL©ch
;

196 
IRQRñﬂd
 = 0;

199 
IRQCou¡
--;

200 if((
cou¡
|
isRevB
Ë&& !
IRQCou¡
)

202 if(
IRQa
)

204 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

207 
	}
}

209 
	$MMC3_hb
()

211 
	`ClockMMC3Cou¡î
();

212 
	}
}

214 
	$MMC3_hb_KickMa°îHack
()

216 if(
sˇ∆öe
==238Ë
	`ClockMMC3Cou¡î
();

217 
	`ClockMMC3Cou¡î
();

218 
	}
}

220 
	$MMC3_hb_PALSèrW¨sHack
()

222 if(
sˇ∆öe
==240Ë
	`ClockMMC3Cou¡î
();

223 
	`ClockMMC3Cou¡î
();

224 
	}
}

226 
	$GíMMC3Re°‹e
(
vîsi⁄
)

228 if(
mwøp
Ë
	`mwøp
(
A000B
&1);

229 
	`FixMMC3PRG
(
MMC3_cmd
);

230 
	`FixMMC3CHR
(
MMC3_cmd
);

231 
	}
}

233 
	$GENCWRAP
(
uöt32
 
A
, 
uöt8
 
V
)

235 if(!
UNIFchºama
Ë
	`£tchr1
(
A
,
V
);

236 
	}
}

238 
	$GENPWRAP
(
uöt32
 
A
, 
uöt8
 
V
)

240 
	`£çrg8
(
A
,
V
&0x3F);

241 
	}
}

243 
	$GENMWRAP
(
uöt8
 
V
)

245 
A000B
=
V
;

246 
	`£tmúr‹
(
V
^1);

247 
	}
}

249 
	$GENNOMWRAP
(
uöt8
 
V
)

251 
A000B
=
V
;

252 
	}
}

254 
	$DECLFW
(
MBWRAM
)

256 
WRAM
[
A
-0x6000]=
V
;

257 
	}
}

259 
	$DECLFR
(
MAWRAM
)

261 (
WRAM
[
A
-0x6000]);

262 
	}
}

264 
	$DECLFW
(
MBWRAMMMC6
)

266 
WRAM
[
A
&0x3ff]=
V
;

267 
	}
}

269 
	$DECLFR
(
MAWRAMMMC6
)

271 (
WRAM
[
A
&0x3ff]);

272 
	}
}

274 
	$GíMMC3Powî
()

276 if(
UNIFchºama
Ë
	`£tchr8
(0);

278 
	`SëWrôeH™dÀr
(0x8000,0xBFFF,
MMC3_CMDWrôe
);

279 
	`SëWrôeH™dÀr
(0xC000,0xFFFF,
MMC3_IRQWrôe
);

280 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

281 
A001B
=
A000B
=0;

282 
	`£tmúr‹
(1);

283 if(
mmc3›ts
&1)

285 if(
wøms
==1024)

287 
	`FCEU_ChótAddRAM
(1,0x7000,
WRAM
);

288 
	`SëRódH™dÀr
(0x7000,0x7FFF,
MAWRAMMMC6
);

289 
	`SëWrôeH™dÀr
(0x7000,0x7FFF,
MBWRAMMMC6
);

290 #ifde‡
ASM_6502


292 
Page
[14]=Page[15]=
WRAM
-0x7000;

297 
	`FCEU_ChótAddRAM
(
wøms
>>10,0x6000,
WRAM
);

298 
	`SëRódH™dÀr
(0x6000,0x6000+
wøms
-1,
MAWRAM
);

299 
	`SëWrôeH™dÀr
(0x6000,0x6000+
wøms
-1,
MBWRAM
);

300 #ifde‡
ASM_6502


302 
addr
;

303 
addr
=0x6000;ádd∏< 0x6000+
wøms
-0x7ff;áddr += 0x800)

305 
Page
[
addr
>>11]=
WRAM
 - 0x6000;

310 if(!(
mmc3›ts
&2))

311 
	`FCEU_dwmem£t
(
WRAM
,0,
wøms
);

313 
	`MMC3RegRe£t
();

314 if(
CHRRAM
)

315 
	`FCEU_dwmem£t
(
CHRRAM
,0,
CHRRAMSize
);

316 
	}
}

318 
	$GíMMC3Clo£
()

320 if(
CHRRAM
)

321 
	`FCEU_g‰ì
(
CHRRAM
);

322 if(
WRAM
)

323 
	`FCEU_g‰ì
(
WRAM
);

324 
CHRRAM
=
WRAM
=
NULL
;

325 
	}
}

336 
	$GíMMC3_Inô
(
C¨tInfo
 *
öfo
, 
¥g
, 
chr
, 
wøm
, 
b©ãry
)

338 
pwøp
=
GENPWRAP
;

339 
cwøp
=
GENCWRAP
;

340 
mwøp
=
GENMWRAP
;

342 
wøms
=
wøm
<<10;

344 
PRGmask8
[0]&=(
¥g
>>13)-1;

345 
CHRmask1
[0]&=(
chr
>>10)-1;

346 
CHRmask2
[0]&=(
chr
>>11)-1;

348 if(
wøm
)

350 
mmc3›ts
|=1;

351 
WRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
wøms
);

352 
	`AddExSèã
(
WRAM
, 
wøms
, 0, "WRAM");

355 if(
b©ãry
)

357 
mmc3›ts
|=2;

358 
öfo
->
SaveGame
[0]=
WRAM
;

359 
öfo
->
SaveGameLí
[0]=
wøms
;

370 
	`AddExSèã
(
MMC3_SèãRegs
, ~0, 0, 0);

372 
öfo
->
Powî
=
GíMMC3Powî
;

373 
öfo
->
Re£t
=
MMC3RegRe£t
;

374 
öfo
->
Clo£
=
GíMMC3Clo£
;

376 if(
öfo
->
CRC32
 == 0x5104833e)

377 
GameHBIRQHook
 = 
MMC3_hb_KickMa°îHack
;

378 if(
öfo
->
CRC32
 == 0x5a6860f1 || info->CRC32 == 0xae280e20)

379 
GameHBIRQHook
 = 
MMC3_hb_KickMa°îHack
;

380 if(
öfo
->
CRC32
 == 0xfcd772eb)

381 
GameHBIRQHook
 = 
MMC3_hb_PALSèrW¨sHack
;

383 
GameHBIRQHook
=
MMC3_hb
;

385 
GameSèãRe°‹e
=
GíMMC3Re°‹e
;

386 
	}
}

394 
	ghackm4
=0;

396 
	$M4Powî
()

398 
	`GíMMC3Powî
();

399 
A000B
=(
hackm4
^1)&1;

400 
	`£tmúr‹
(
hackm4
);

401 
	}
}

403 
	$M≠≥r4_Inô
(
C¨tInfo
 *
öfo
)

405 
ws
=8;

407 if((
öfo
->
CRC32
==0x93991433 || info->CRC32==0xaf65aa84))

409 
	`FCEU_¥ötf
("Low-G-Man canÇot workÇormally inÅhe iNES format.\nThis game has beenÑecognized by its CRC32 value,ándÅheáppropriate changes will be made so it willÑun.\nIf you wishÅo hackÅhis game, you should useÅhe UNIF format for your hack.\n\n");

410 
ws
=0;

412 
	`GíMMC3_Inô
(
öfo
,512,256,
ws
,öfo->
b©ãry
);

413 
öfo
->
Powî
=
M4Powî
;

414 
hackm4
=
öfo
->
múr‹
;

415 
	}
}

419 
	$M12CW
(
uöt32
 
A
, 
uöt8
 
V
)

421 
	`£tchr1
(
A
,(
EXPREGS
[(A&0x1000)>>12]<<8)+
V
);

422 
	}
}

424 
	$DECLFW
(
M12Wrôe
)

426 
EXPREGS
[0]=
V
&0x01;

427 
EXPREGS
[1]=(
V
&0x10)>>4;

428 
	}
}

430 
	$M12Powî
()

432 
EXPREGS
[0]=EXPREGS[1]=0;

433 
	`GíMMC3Powî
();

434 
	`SëWrôeH™dÀr
(0x4100,0x5FFF,
M12Wrôe
);

435 
	}
}

437 
	$M≠≥r12_Inô
(
C¨tInfo
 *
öfo
)

439 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

440 
cwøp
=
M12CW
;

441 
öfo
->
Powî
=
M12Powî
;

442 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

443 
	}
}

447 
	$M37PW
(
uöt32
 
A
, 
uöt8
 
V
)

449 if(
EXPREGS
[0]!=2)

450 
V
&=0x7;

452 
V
&=0xF;

453 
V
|=
EXPREGS
[0]<<3;

454 
	`£çrg8
(
A
,
V
);

455 
	}
}

457 
	$M37CW
(
uöt32
 
A
, 
uöt8
 
V
)

459 
uöt32
 
NV
=
V
;

460 
NV
&=0x7F;

461 
NV
|=
EXPREGS
[0]<<6;

462 
	`£tchr1
(
A
,
NV
);

463 
	}
}

465 
	$DECLFW
(
M37Wrôe
)

467 
EXPREGS
[0]=(
V
&6)>>1;

468 
	`FixMMC3PRG
(
MMC3_cmd
);

469 
	`FixMMC3CHR
(
MMC3_cmd
);

470 
	}
}

472 
	$M37Re£t
()

474 
EXPREGS
[0]=0;

475 
	`MMC3RegRe£t
();

476 
	}
}

478 
	$M37Powî
()

480 
EXPREGS
[0]=0;

481 
	`GíMMC3Powî
();

482 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
M37Wrôe
);

483 
	}
}

485 
	$M≠≥r37_Inô
(
C¨tInfo
 *
öfo
)

487 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

488 
pwøp
=
M37PW
;

489 
cwøp
=
M37CW
;

490 
öfo
->
Powî
=
M37Powî
;

491 
öfo
->
Re£t
=
M37Re£t
;

492 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

493 
	}
}

497 
	$M44PW
(
uöt32
 
A
, 
uöt8
 
V
)

499 
uöt32
 
NV
=
V
;

500 if(
EXPREGS
[0]>=6Ë
NV
&=0x1F;

501 
NV
&=0x0F;

502 
NV
|=
EXPREGS
[0]<<4;

503 
	`£çrg8
(
A
,
NV
);

504 
	}
}

506 
	$M44CW
(
uöt32
 
A
, 
uöt8
 
V
)

508 
uöt32
 
NV
=
V
;

509 if(
EXPREGS
[0]<6Ë
NV
&=0x7F;

510 
NV
|=
EXPREGS
[0]<<7;

511 
	`£tchr1
(
A
,
NV
);

512 
	}
}

514 
	$DECLFW
(
M44Wrôe
)

516 if(
A
&1)

518 
EXPREGS
[0]=
V
&7;

519 
	`FixMMC3PRG
(
MMC3_cmd
);

520 
	`FixMMC3CHR
(
MMC3_cmd
);

523 
	`MMC3_CMDWrôe
(
A
,
V
);

524 
	}
}

526 
	$M44Powî
()

528 
EXPREGS
[0]=0;

529 
	`GíMMC3Powî
();

530 
	`SëWrôeH™dÀr
(0xA000,0xBFFF,
M44Wrôe
);

531 
	}
}

533 
	$M≠≥r44_Inô
(
C¨tInfo
 *
öfo
)

535 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

536 
cwøp
=
M44CW
;

537 
pwøp
=
M44PW
;

538 
öfo
->
Powî
=
M44Powî
;

539 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

540 
	}
}

544 
	$M45CW
(
uöt32
 
A
, 
uöt8
 
V
)

546 if(!
UNIFchºama
)

548 
uöt32
 
NV
=
V
;

549 if(
EXPREGS
[2]&8)

550 
NV
&=(1<<((
EXPREGS
[2]&7)+1))-1;

553 
NV
|=
EXPREGS
[0]|((EXPREGS[2]&0xF0)<<4);

554 
	`£tchr1
(
A
,
NV
);

556 
	}
}

558 
	$M45PW
(
uöt32
 
A
, 
uöt8
 
V
)

560 
V
&=(
EXPREGS
[3]&0x3F)^0x3F;

561 
V
|=
EXPREGS
[1];

562 
	`£çrg8
(
A
,
V
);

563 
	}
}

565 
	$DECLFW
(
M45Wrôe
)

567 if(
EXPREGS
[3]&0x40)

569 
WRAM
[
A
-0x6000]=
V
;

572 
EXPREGS
[EXPREGS[4]]=
V
;

573 
EXPREGS
[4]=(EXPREGS[4]+1)&3;

574 if(!
EXPREGS
[4])

576 
	`FCEU_¥ötf
("CHROR %02x, PRGOR %02x, CHRAND %02x, PRGAND %02x\n",
EXPREGS
[0],EXPREGS[1],EXPREGS[2],EXPREGS[3]);

577 
	`FCEU_¥ötf
("CHR0 %03x, CHR1 %03x, PRG0 %03x, PRG1 %03x\n",

578 (0x00&((1<<((
EXPREGS
[2]&7)+1))-1))|(EXPREGS[0]|((EXPREGS[2]&0xF0)<<4)),

579 (0xFF&((1<<((
EXPREGS
[2]&7)+1))-1))|(EXPREGS[0]|((EXPREGS[2]&0xF0)<<4)),

580 (0x00&((
EXPREGS
[3]&0x3F)^0x3F))|(EXPREGS[1]),

581 (0xFF&((
EXPREGS
[3]&0x3F)^0x3F))|(EXPREGS[1]));

583 
	`FixMMC3PRG
(
MMC3_cmd
);

584 
	`FixMMC3CHR
(
MMC3_cmd
);

585 
	}
}

587 
	$M45Re£t
()

589 
EXPREGS
[0]=EXPREGS[1]=EXPREGS[2]=EXPREGS[3]=EXPREGS[4]=0;

590 
	`MMC3RegRe£t
();

591 
	}
}

593 
	$M45Powî
()

595 
	`£tchr8
(0);

596 
	`GíMMC3Powî
();

597 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
M45Wrôe
);

598 
	}
}

600 
	$M≠≥r45_Inô
(
C¨tInfo
 *
öfo
)

602 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

603 
cwøp
=
M45CW
;

604 
pwøp
=
M45PW
;

605 
öfo
->
Re£t
=
M45Re£t
;

606 
öfo
->
Powî
=
M45Powî
;

607 
	`AddExSèã
(
EXPREGS
, 5, 0, "EXPR");

608 
	}
}

612 
	$M47PW
(
uöt32
 
A
, 
uöt8
 
V
)

614 
V
&=0xF;

615 
V
|=
EXPREGS
[0]<<4;

616 
	`£çrg8
(
A
,
V
);

617 
	}
}

619 
	$M47CW
(
uöt32
 
A
, 
uöt8
 
V
)

621 
uöt32
 
NV
=
V
;

622 
NV
&=0x7F;

623 
NV
|=
EXPREGS
[0]<<7;

624 
	`£tchr1
(
A
,
NV
);

625 
	}
}

627 
	$DECLFW
(
M47Wrôe
)

629 
EXPREGS
[0]=
V
&1;

630 
	`FixMMC3PRG
(
MMC3_cmd
);

631 
	`FixMMC3CHR
(
MMC3_cmd
);

632 
	}
}

634 
	$M47Powî
()

636 
EXPREGS
[0]=0;

637 
	`GíMMC3Powî
();

638 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
M47Wrôe
);

640 
	}
}

642 
	$M≠≥r47_Inô
(
C¨tInfo
 *
öfo
)

644 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

645 
pwøp
=
M47PW
;

646 
cwøp
=
M47CW
;

647 
öfo
->
Powî
=
M47Powî
;

648 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

649 
	}
}

653 
	$M49PW
(
uöt32
 
A
, 
uöt8
 
V
)

655 if(
EXPREGS
[0]&1)

657 
V
&=0xF;

658 
V
|=(
EXPREGS
[0]&0xC0)>>2;

659 
	`£çrg8
(
A
,
V
);

662 
	`£çrg32
(0x8000,(
EXPREGS
[0]>>4)&3);

663 
	}
}

665 
	$M49CW
(
uöt32
 
A
, 
uöt8
 
V
)

667 
uöt32
 
NV
=
V
;

668 
NV
&=0x7F;

669 
NV
|=(
EXPREGS
[0]&0xC0)<<1;

670 
	`£tchr1
(
A
,
NV
);

671 
	}
}

673 
	$DECLFW
(
M49Wrôe
)

675 if(
A001B
&0x80)

677 
EXPREGS
[0]=
V
;

678 
	`FixMMC3PRG
(
MMC3_cmd
);

679 
	`FixMMC3CHR
(
MMC3_cmd
);

681 
	}
}

683 
	$M49Re£t
()

685 
EXPREGS
[0]=0;

686 
	`MMC3RegRe£t
();

687 
	}
}

689 
	$M49Powî
()

691 
	`M49Re£t
();

692 
	`GíMMC3Powî
();

693 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
M49Wrôe
);

694 
	`SëRódH™dÀr
(0x6000,0x7FFF,0);

695 
	}
}

697 
	$M≠≥r49_Inô
(
C¨tInfo
 *
öfo
)

699 
	`GíMMC3_Inô
(
öfo
, 512, 256, 0, 0);

700 
cwøp
=
M49CW
;

701 
pwøp
=
M49PW
;

702 
öfo
->
Re£t
=
M49Re£t
;

703 
öfo
->
Powî
=
M49Powî
;

704 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

705 
	}
}

709 
	$M52PW
(
uöt32
 
A
, 
uöt8
 
V
)

711 
uöt32
 
NV
=
V
;

712 
NV
&=0x1F^((
EXPREGS
[0]&8)<<1);

713 
NV
|=((
EXPREGS
[0]&6)|((EXPREGS[0]>>3)&EXPREGS[0]&1))<<4;

714 
	`£çrg8
(
A
,
NV
);

715 
	}
}

717 
	$M52CW
(
uöt32
 
A
, 
uöt8
 
V
)

719 
uöt32
 
NV
=
V
;

720 
NV
&=0xFF^((
EXPREGS
[0]&0x40)<<1);

721 
NV
|=(((
EXPREGS
[0]>>3)&4)|((EXPREGS[0]>>1)&2)|((EXPREGS[0]>>6)&(EXPREGS[0]>>4)&1))<<7;

722 
	`£tchr1
(
A
,
NV
);

723 
	}
}

725 
	$DECLFW
(
M52Wrôe
)

727 if(
EXPREGS
[1])

729 
WRAM
[
A
-0x6000]=
V
;

732 
EXPREGS
[1]=1;

733 
EXPREGS
[0]=
V
;

734 
	`FixMMC3PRG
(
MMC3_cmd
);

735 
	`FixMMC3CHR
(
MMC3_cmd
);

736 
	}
}

738 
	$M52Re£t
()

740 
EXPREGS
[0]=EXPREGS[1]=0;

741 
	`MMC3RegRe£t
();

742 
	}
}

744 
	$M52Powî
()

746 
	`M52Re£t
();

747 
	`GíMMC3Powî
();

748 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
M52Wrôe
);

749 
	}
}

751 
	$M≠≥r52_Inô
(
C¨tInfo
 *
öfo
)

753 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

754 
cwøp
=
M52CW
;

755 
pwøp
=
M52PW
;

756 
öfo
->
Re£t
=
M52Re£t
;

757 
öfo
->
Powî
=
M52Powî
;

758 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

759 
	}
}

763 
	$M74CW
(
uöt32
 
A
, 
uöt8
 
V
)

765 if((
V
==8)||(V==9))

766 
	`£tchr1r
(0x10,
A
,
V
);

768 
	`£tchr1r
(0,
A
,
V
);

769 
	}
}

771 
	$M≠≥r74_Inô
(
C¨tInfo
 *
öfo
)

773 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

774 
cwøp
=
M74CW
;

775 
CHRRAMSize
=2048;

776 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

777 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

778 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

779 
	}
}

783 
uöt8
 
	gcmdö
;

784 
uöt8
 
	gm114_≥rm
[8] = {0, 3, 1, 5, 6, 7, 2, 4};

786 
	$M114PWRAP
(
uöt32
 
A
, 
uöt8
 
V
)

788 if(
EXPREGS
[0]&0x80)

790 
	`£çrg16
(0x8000,
EXPREGS
[0]&0xF);

791 
	`£çrg16
(0xC000,
EXPREGS
[0]&0xF);

794 
	`£çrg8
(
A
,
V
&0x3F);

795 
	}
}

797 
	$DECLFW
(
M114Wrôe
)

799 if(
A
==0xE003)

801 
IRQa
=1;

802 
IRQL©ch
=
V
;

803 
IRQRñﬂd
=1;

805 if(
A
==0xE002)

807 
IRQa
=0;

808 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

810 
A
&0xE000)

812 0x8000: 
	`£tmúr‹
((
V
&1)^1); ;

813 0xA000: 
	`MMC3_CMDWrôe
(0x8000,(
V
&0xC0)|(
m114_≥rm
[V&7])); 
cmdö
=1; ;

814 0xC000: if(!
cmdö
) ;

815 
	`MMC3_CMDWrôe
(0x8001,
V
);

816 
cmdö
=0;

819 
	}
}

821 
	$DECLFW
(
M114ExWrôe
)

823 if(
A
<=0x7FFF)

825 
EXPREGS
[0]=
V
;

826 
	`FixMMC3PRG
(
MMC3_cmd
);

828 
	}
}

830 
	$M114Powî
()

832 
	`GíMMC3Powî
();

833 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M114Wrôe
);

834 
	`SëWrôeH™dÀr
(0x5000,0x7FFF,
M114ExWrôe
);

835 
	}
}

837 
	$M114Re£t
()

839 
EXPREGS
[0]=0;

840 
	`MMC3RegRe£t
();

841 
	}
}

843 
	$M≠≥r114_Inô
(
C¨tInfo
 *
öfo
)

845 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

846 
pwøp
=
M114PWRAP
;

847 
öfo
->
Powî
=
M114Powî
;

848 
öfo
->
Re£t
=
M114Re£t
;

849 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

850 
	`AddExSèã
(&
cmdö
, 1, 0, "CMDIN");

851 
	}
}

855 
	$M115PW
(
uöt32
 
A
, 
uöt8
 
V
)

857 if(
EXPREGS
[0]&0x80)

858 
	`£çrg32
(0x8000,(
EXPREGS
[0]&7)>>1);

860 
	`£çrg8
(
A
,
V
);

861 
	}
}

863 
	$M115CW
(
uöt32
 
A
, 
uöt8
 
V
)

865 
	`£tchr1
(
A
,(
uöt32
)
V
|((
EXPREGS
[1]&1)<<8));

866 
	}
}

868 
	$DECLFW
(
M115Wrôe
)

870 if(
A
==0x6000)

871 
EXPREGS
[0]=
V
;

872 if(
A
==0x6001)

873 
EXPREGS
[1]=
V
;

874 
	`FixMMC3PRG
(
MMC3_cmd
);

875 
	}
}

877 
	$M115Powî
()

879 
	`GíMMC3Powî
();

880 
	`SëWrôeH™dÀr
(0x4100,0x7FFF,
M115Wrôe
);

881 
	`SëRódH™dÀr
(0x4100,0x7FFF,0);

882 
	}
}

884 
	$M≠≥r115_Inô
(
C¨tInfo
 *
öfo
)

886 
	`GíMMC3_Inô
(
öfo
, 128, 512, 0, 0);

887 
cwøp
=
M115CW
;

888 
pwøp
=
M115PW
;

889 
öfo
->
Powî
=
M115Powî
;

890 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

891 
	}
}

895 
	$M116CW
(
uöt32
 
A
, 
uöt8
 
V
)

898 if(
EXPREGS
[0]&2)

899 
	`£tchr8r
(0x10,0);

901 
	`£tchr1
(
A
,
V
);

902 
	}
}

904 
	$DECLFW
(
M116Wrôe
)

906 
EXPREGS
[0]=
V
;

907 
	`FixMMC3CHR
(
MMC3_cmd
);

908 
	}
}

910 
	$M116Powî
()

912 
	`GíMMC3Powî
();

913 
	`SëWrôeH™dÀr
(0x4100,0x4100,
M116Wrôe
);

914 
	}
}

916 
	$M≠≥r116_Inô
(
C¨tInfo
 *
öfo
)

918 
	`GíMMC3_Inô
(
öfo
, 128, 512, 0, 0);

919 
cwøp
=
M116CW
;

920 
öfo
->
Powî
=
M116Powî
;

921 
CHRRAM
 = (
uöt8
*)
	`FCEU_gmÆloc
(8192);

922 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 8192, 1);

923 
	`AddExSèã
(
EXPREGS
, 4, 0, "EXPR");

924 
	}
}

928 
uöt8
 
	gPPUCHRBus
;

929 
uöt8
 
	gTKSMIR
[8];

931 
	$FP_FASTAPASS
(1Ë
	$TKSPPU
(
uöt32
 
A
)

933 
A
&=0x1FFF;

934 
A
>>=10;

935 
PPUCHRBus
=
A
;

936 
	`£tmúr‹
(
MI_0
+
TKSMIR
[
A
]);

937 
	}
}

939 
	$TKSWRAP
(
uöt32
 
A
, 
uöt8
 
V
)

941 
TKSMIR
[
A
>>10]=
V
>>7;

942 
	`£tchr1
(
A
,
V
&0x7F);

943 if(
PPUCHRBus
==(
A
>>10))

944 
	`£tmúr‹
(
MI_0
+(
V
>>7));

945 
	}
}

947 
	$M≠≥r118_Inô
(
C¨tInfo
 *
öfo
)

949 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

950 
cwøp
=
TKSWRAP
;

951 
mwøp
=
GENNOMWRAP
;

952 
PPU_hook
=
TKSPPU
;

953 
	`AddExSèã
(&
PPUCHRBus
, 1, 0, "PPUC");

954 
	}
}

958 
	$TQWRAP
(
uöt32
 
A
, 
uöt8
 
V
)

960 
	`£tchr1r
((
V
&0x40)>>2,
A
,V&0x3F);

961 
	}
}

963 
	$M≠≥r119_Inô
(
C¨tInfo
 *
öfo
)

965 
	`GíMMC3_Inô
(
öfo
, 512, 64, 0, 0);

966 
cwøp
=
TQWRAP
;

967 
CHRRAMSize
=8192;

968 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

969 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

970 
	}
}

974 
	$M165CW
(
uöt32
 
A
, 
uöt8
 
V
)

976 if(
V
==0)

977 
	`£tchr4r
(0x10,
A
,0);

979 
	`£tchr4
(
A
,
V
>>2);

980 
	}
}

982 
	$M165PPUFD
()

984 if(
EXPREGS
[0]==0xFD)

986 
	`M165CW
(0x0000,
DRegBuf
[0]);

987 
	`M165CW
(0x1000,
DRegBuf
[2]);

989 
	}
}

991 
	$M165PPUFE
()

993 if(
EXPREGS
[0]==0xFE)

995 
	`M165CW
(0x0000,
DRegBuf
[1]);

996 
	`M165CW
(0x1000,
DRegBuf
[4]);

998 
	}
}

1000 
	$M165CWM
(
uöt32
 
A
, 
uöt8
 
V
)

1002 if(((
MMC3_cmd
&0x7)==0)||((MMC3_cmd&0x7)==2))

1003 
	`M165PPUFD
();

1004 if(((
MMC3_cmd
&0x7)==1)||((MMC3_cmd&0x7)==4))

1005 
	`M165PPUFE
();

1006 
	}
}

1008 
	$FP_FASTAPASS
(1Ë
	$M165PPU
(
uöt32
 
A
)

1010 if((
A
&0x1FF0)==0x1FD0)

1012 
EXPREGS
[0]=0xFD;

1013 
	`M165PPUFD
();

1014 } if((
A
&0x1FF0)==0x1FE0)

1016 
EXPREGS
[0]=0xFE;

1017 
	`M165PPUFE
();

1019 
	}
}

1021 
	$M165Powî
()

1023 
EXPREGS
[0]=0xFD;

1024 
	`GíMMC3Powî
();

1025 
	}
}

1027 
	$M≠≥r165_Inô
(
C¨tInfo
 *
öfo
)

1029 
	`GíMMC3_Inô
(
öfo
, 512, 128, 8, info->
b©ãry
);

1030 
cwøp
=
M165CWM
;

1031 
PPU_hook
=
M165PPU
;

1032 
öfo
->
Powî
=
M165Powî
;

1033 
CHRRAMSize
 = 4096;

1034 
CHRRAM
 = (
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1035 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1036 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1037 
	`AddExSèã
(
EXPREGS
, 4, 0, "EXPR");

1038 
	}
}

1045 
	$DECLFW
(
M182Wrôe
)

1047 
A
&0xF003)

1049 0x8001: 
	`£tmúr‹
((
V
&1)^1); ;

1050 0xA000: 
	`MMC3_CMDWrôe
(0x8000,
m114_≥rm
[
V
&7]); ;

1051 0xC000: 
	`MMC3_CMDWrôe
(0x8001,
V
); ;

1052 0xE003: if(
V
)

1054 
IRQL©ch
=
V
;

1055 
IRQRñﬂd
=1;

1056 
IRQa
=1;

1058 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

1061 
	}
}

1063 
	$M182Powî
()

1065 
	`GíMMC3Powî
();

1066 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M182Wrôe
);

1067 
	}
}

1069 
	$M≠≥r182_Inô
(
C¨tInfo
 *
öfo
)

1071 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

1072 
öfo
->
Powî
=
M182Powî
;

1073 
	}
}

1077 
	$M191CW
(
uöt32
 
A
, 
uöt8
 
V
)

1079 
	`£tchr1r
((
V
&0x80)>>3,
A
,V);

1080 
	}
}

1082 
	$M≠≥r191_Inô
(
C¨tInfo
 *
öfo
)

1084 
	`GíMMC3_Inô
(
öfo
, 256, 256, 8, info->
b©ãry
);

1085 
cwøp
=
M191CW
;

1086 
CHRRAMSize
=2048;

1087 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1088 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1089 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1090 
	}
}

1094 
	$M192CW
(
uöt32
 
A
, 
uöt8
 
V
)

1096 if((
V
==8)||(V==9)||(V==0xA)||(V==0xB))

1097 
	`£tchr1r
(0x10,
A
,
V
);

1099 
	`£tchr1r
(0,
A
,
V
);

1100 
	}
}

1102 
	$M≠≥r192_Inô
(
C¨tInfo
 *
öfo
)

1104 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1105 
cwøp
=
M192CW
;

1106 
CHRRAMSize
=4096;

1107 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1108 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1109 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1110 
	}
}

1114 
	$M194CW
(
uöt32
 
A
, 
uöt8
 
V
)

1116 if(
V
<=1)

1117 
	`£tchr1r
(0x10,
A
,
V
);

1119 
	`£tchr1r
(0,
A
,
V
);

1120 
	}
}

1122 
	$M≠≥r194_Inô
(
C¨tInfo
 *
öfo
)

1124 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1125 
cwøp
=
M194CW
;

1126 
CHRRAMSize
=2048;

1127 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1128 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1129 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1130 
	}
}

1134 
uöt8
 *
	gwømtw
;

1135 
uöt16
 
	gwømsize
;

1136 
	$M198CW
(
uöt32
 
A
, 
uöt8
 
V
)

1138 if(
V
<=3)

1139 
	`£tchr1r
(0x10,
A
,
V
);

1141 
	`£tchr1r
(0,
A
,
V
);

1142 
	}
}

1144 
	$M198Powî
()

1146 
	`GíMMC3Powî
();

1147 
	`£çrg4r
(0x10,0x5000,0);

1148 
	`SëWrôeH™dÀr
(0x5000,0x5fff,
C¨tBW
);

1149 
	`SëRódH™dÀr
(0x5000,0x5fff,
C¨tBR
);

1150 
	}
}

1152 
	$M198Clo£
()

1154 if(
wømtw
)

1155 
	`FCEU_g‰ì
(
wømtw
);

1156 
wømtw
=
NULL
;

1157 
	}
}

1159 
	$M≠≥r198_Inô
(
C¨tInfo
 *
öfo
)

1161 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1162 
cwøp
=
M198CW
;

1163 
öfo
->
Powî
=
M198Powî
;

1164 
öfo
->
Clo£
=
M198Clo£
;

1165 
CHRRAMSize
=4096;

1166 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1167 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1168 
wømsize
=4096;

1169 
wømtw
=(
uöt8
*)
	`FCEU_gmÆloc
(
wømsize
);

1170 
	`SëupC¨tPRGM≠pög
(0x10, 
wømtw
, 
wømsize
, 1);

1171 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1172 
	`AddExSèã
(
wømtw
, 
wømsize
, 0, "WRAMTW");

1173 
	}
}

1177 
uöt8
 *
	gwømtw
;

1178 
uöt16
 
	gwømsize
;

1179 
	$M199PW
(
uöt32
 
A
, 
uöt8
 
V
)

1181 if(
V
>=0x50)

1182 
	`£çrg8
(
A
,
V
&0x4F);

1184 
	`£çrg8
(
A
,
V
);

1185 
	}
}

1187 
	$M≠≥r199_Inô
(
C¨tInfo
 *
öfo
)

1189 
	`GíMMC3_Inô
(
öfo
, 1024, 256, 8, info->
b©ãry
);

1190 
pwøp
=
M199PW
;

1191 
öfo
->
Powî
=
M198Powî
;

1192 
öfo
->
Clo£
=
M198Clo£
;

1193 
wømsize
=4096;

1194 
wømtw
=(
uöt8
*)
	`FCEU_gmÆloc
(
wømsize
);

1195 
	`SëupC¨tPRGM≠pög
(0x10, 
wømtw
, 
wømsize
, 1);

1196 
	`AddExSèã
(
CHRRAM
, 
CHRRAMSize
, 0, "CHRR");

1197 
	`AddExSèã
(
wømtw
, 
wømsize
, 0, "WRAMTW");

1198 
	}
}

1202 
	$M205PW
(
uöt32
 
A
, 
uöt8
 
V
)

1204 if(
EXPREGS
[0]&2)

1205 
	`£çrg8
(
A
,(
V
&0x0f)|((
EXPREGS
[0]&3)<<4));

1207 
	`£çrg8
(
A
,(
V
&0x1f)|((
EXPREGS
[0]&3)<<4));

1208 
	}
}

1210 
	$M205CW
(
uöt32
 
A
, 
uöt8
 
V
)

1212 
	`£tchr1
(
A
,
V
|((
EXPREGS
[0]&3)<<7));

1213 
	}
}

1215 
	$DECLFW
(
M205Wrôe
)

1217 if((
A
&0x6800)==0x6800Ë
EXPREGS
[0]
V
;

1218 
	`FixMMC3PRG
(
MMC3_cmd
);

1219 
	`FixMMC3CHR
(
MMC3_cmd
);

1220 
	}
}

1222 
	$M205Re£t
()

1224 
EXPREGS
[0]=0;

1225 
	`MMC3RegRe£t
();

1226 
	}
}

1228 
	$M205Powî
()

1230 
	`GíMMC3Powî
();

1231 
	`SëWrôeH™dÀr
(0x4020,0x7FFF,
M205Wrôe
);

1232 
	}
}

1234 
	$M≠≥r205_Inô
(
C¨tInfo
 *
öfo
)

1236 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, 0);

1237 
pwøp
=
M205PW
;

1238 
cwøp
=
M205CW
;

1239 
öfo
->
Powî
=
M205Powî
;

1240 
öfo
->
Re£t
=
M205Re£t
;

1241 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

1242 
	}
}

1246 
uöt8
 
	gm215_≥rm
[8] = {0, 2, 5, 3, 6, 1, 7, 4};

1248 
	$M215CW
(
uöt32
 
A
, 
uöt8
 
V
)

1250 if(
EXPREGS
[1]&0x04)

1251 
	`£tchr1
(
A
,
V
|0x100);

1253 
	`£tchr1
(
A
,(
V
&0x7F)|((
EXPREGS
[1]&0x10)<<3));

1254 
	}
}

1256 
	$M215PW
(
uöt32
 
A
, 
uöt8
 
V
)

1258 if(
EXPREGS
[0]&0x80)

1260 
	`£çrg16
(0x8000,(
EXPREGS
[0]&0x0F)|(EXPREGS[1]&0x10));

1261 
	`£çrg16
(0xC000,(
EXPREGS
[0]&0x0F)|(EXPREGS[1]&0x10));

1263 if(
EXPREGS
[1]&0x08)

1264 
	`£çrg8
(
A
,(
V
&0x1F)|0x20);

1266 
	`£çrg8
(
A
,(
V
&0x0F)|(
EXPREGS
[1]&0x10));

1267 
	}
}

1269 
	$DECLFW
(
M215Wrôe
)

1271 if(!(
EXPREGS
[2]))

1273 if(
A
 >= 0xc000)

1274 
	`MMC3_IRQWrôe
(
A
,
V
);

1276 
	`MMC3_CMDWrôe
(
A
,
V
);

1278 
A
&0xE001)

1280 0xC001: 
IRQL©ch
=
V
; ;

1281 0xA001: 
IRQRñﬂd
=1; ;

1282 0xE001: 
IRQa
=1; ;

1283 0xE000: 
	`X6502_IRQEnd
(
FCEU_IQEXT
); 
IRQa
=0; ;

1284 0xC000: 
	`£tmúr‹
(((
V
|(V>>7))&1)^1); ;

1285 0xA000: 
	`MMC3_CMDWrôe
(0x8000,(
V
&0xC0)|(
m215_≥rm
[V&7])); 
cmdö
=1; ;

1286 0x8001: if(!
cmdö
) ;

1287 
	`MMC3_CMDWrôe
(0x8001,
V
);

1288 
cmdö
=0;

1291 
	}
}

1293 
	$DECLFW
(
M215ExWrôe
)

1295 
A
)

1298 
EXPREGS
[0]=
V
;

1299 
	`FixMMC3PRG
(
MMC3_cmd
);

1302 
EXPREGS
[1]=
V
;

1303 
	`FixMMC3CHR
(
MMC3_cmd
);

1306 
EXPREGS
[2]=
V
;

1307 
	`MMC3RegRe£t
();

1310 
	}
}

1312 
	$M215Powî
()

1314 
EXPREGS
[0]=0;

1315 
EXPREGS
[1]=0xFF;

1316 
EXPREGS
[2]=4;

1317 
	`GíMMC3Powî
();

1318 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M215Wrôe
);

1319 
	`SëWrôeH™dÀr
(0x5000,0x7FFF,
M215ExWrôe
);

1320 
	}
}

1322 
	$M≠≥r215_Inô
(
C¨tInfo
 *
öfo
)

1324 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

1325 
cwøp
=
M215CW
;

1326 
pwøp
=
M215PW
;

1327 
öfo
->
Powî
=
M215Powî
;

1328 
	`AddExSèã
(
EXPREGS
, 3, 0, "EXPR");

1329 
	`AddExSèã
(&
cmdö
, 1, 0, "CMDIN");

1330 
	}
}

1334 
uöt8
 
	gm217_≥rm
[8] = {0, 6, 3, 7, 5, 2, 4, 1};

1336 
	$M217CW
(
uöt32
 
A
, 
uöt8
 
V
)

1338 if(
EXPREGS
[1]&0x08)

1339 
	`£tchr1
(
A
,
V
|((
EXPREGS
[1]&3)<<8));

1341 
	`£tchr1
(
A
,(
V
&0x7F)|((
EXPREGS
[1]&3)<<8)|((EXPREGS[1]&0x10)<<3));

1342 
	}
}

1344 
	$M217PW
(
uöt32
 
A
, 
uöt8
 
V
)

1346 if(
EXPREGS
[0]&0x80)

1348 
	`£çrg16
(0x8000,(
EXPREGS
[0]&0x0F)|((EXPREGS[1]&3)<<4));

1349 
	`£çrg16
(0xC000,(
EXPREGS
[0]&0x0F)|((EXPREGS[1]&3)<<4));

1351 if(
EXPREGS
[1]&0x08)

1352 
	`£çrg8
(
A
,(
V
&0x1F)|((
EXPREGS
[1]&3)<<5));

1354 
	`£çrg8
(
A
,(
V
&0x0F)|((
EXPREGS
[1]&3)<<5)|(EXPREGS[1]&0x10));

1355 
	}
}

1357 
	$DECLFW
(
M217Wrôe
)

1359 if(!
EXPREGS
[2])

1361 if(
A
 >= 0xc000)

1362 
	`MMC3_IRQWrôe
(
A
, 
V
);

1364 
	`MMC3_CMDWrôe
(
A
,
V
);

1366 
A
&0xE001)

1368 0x8000: 
IRQCou¡
=
V
; ;

1369 0xE000: 
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQa
=0; ;

1370 0xC001: 
IRQa
=1; ;

1371 0xA001: 
	`£tmúr‹
((
V
&1)^1); ;

1372 0x8001: 
	`MMC3_CMDWrôe
(0x8000,(
V
&0xC0)|(
m217_≥rm
[V&7])); 
cmdö
=1; ;

1373 0xA000: if(!
cmdö
) ;

1374 
	`MMC3_CMDWrôe
(0x8001,
V
);

1375 
cmdö
=0;

1378 
	}
}

1380 
	$DECLFW
(
M217ExWrôe
)

1382 
A
)

1385 
EXPREGS
[0]=
V
;

1386 
	`FixMMC3PRG
(
MMC3_cmd
);

1389 
EXPREGS
[1]=
V
;

1390 
	`FixMMC3PRG
(
MMC3_cmd
);

1393 
EXPREGS
[2]=
V
;

1396 
	}
}

1398 
	$M217Powî
()

1400 
EXPREGS
[0]=0;

1401 
EXPREGS
[1]=0xFF;

1402 
EXPREGS
[2]=3;

1403 
	`GíMMC3Powî
();

1404 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M217Wrôe
);

1405 
	`SëWrôeH™dÀr
(0x5000,0x7FFF,
M217ExWrôe
);

1406 
	}
}

1408 
	$M≠≥r217_Inô
(
C¨tInfo
 *
öfo
)

1410 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

1411 
cwøp
=
M217CW
;

1412 
pwøp
=
M217PW
;

1413 
öfo
->
Powî
=
M217Powî
;

1414 
	`AddExSèã
(
EXPREGS
, 3, 0, "EXPR");

1415 
	`AddExSèã
(&
cmdö
, 1, 0, "CMDIN");

1416 
	}
}

1420 
	$M245CW
(
uöt32
 
A
, 
uöt8
 
V
)

1422 
	`£tchr1
(
A
,
V
&7);

1423 
EXPREGS
[0]=
V
;

1424 
	`FixMMC3PRG
(
MMC3_cmd
);

1425 
	}
}

1427 
	$M245PW
(
uöt32
 
A
, 
uöt8
 
V
)

1429 
	`£çrg8
(
A
,(
V
&0x3F)|((
EXPREGS
[0]&2)<<5));

1430 
	}
}

1432 
	$M245Powî
()

1434 
EXPREGS
[0]=0;

1435 
	`GíMMC3Powî
();

1436 
	}
}

1438 
	$M≠≥r245_Inô
(
C¨tInfo
 *
öfo
)

1440 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1441 
cwøp
=
M245CW
;

1442 
pwøp
=
M245PW
;

1443 
öfo
->
Powî
=
M245Powî
;

1444 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

1445 
	}
}

1449 
	$M249PW
(
uöt32
 
A
, 
uöt8
 
V
)

1451 if(
EXPREGS
[0]&0x2)

1453 if(
V
<0x20)

1454 
V
=(V&1)|((V>>3)&2)|((V>>1)&4)|((V<<2)&8)|((V<<2)&0x10);

1457 
V
-=0x20;

1458 
V
=(V&3)|((V>>1)&4)|((V>>4)&8)|((V>>2)&0x10)|((V<<3)&0x20)|((V<<2)&0xC0);

1461 
	`£çrg8
(
A
,
V
);

1462 
	}
}

1464 
	$M249CW
(
uöt32
 
A
, 
uöt8
 
V
)

1466 if(
EXPREGS
[0]&0x2)

1467 
V
=(V&3)|((V>>1)&4)|((V>>4)&8)|((V>>2)&0x10)|((V<<3)&0x20)|((V<<2)&0xC0);

1468 
	`£tchr1
(
A
,
V
);

1469 
	}
}

1471 
	$DECLFW
(
M249Wrôe
)

1473 
EXPREGS
[0]=
V
;

1474 
	`FixMMC3PRG
(
MMC3_cmd
);

1475 
	`FixMMC3CHR
(
MMC3_cmd
);

1476 
	}
}

1478 
	$M249Powî
()

1480 
EXPREGS
[0]=0;

1481 
	`GíMMC3Powî
();

1482 
	`SëWrôeH™dÀr
(0x5000,0x5000,
M249Wrôe
);

1483 
	}
}

1485 
	$M≠≥r249_Inô
(
C¨tInfo
 *
öfo
)

1487 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1488 
cwøp
=
M249CW
;

1489 
pwøp
=
M249PW
;

1490 
öfo
->
Powî
=
M249Powî
;

1491 
	`AddExSèã
(
EXPREGS
, 1, 0, "EXPR");

1492 
	}
}

1496 
	$DECLFW
(
M250Wrôe
)

1498 
	`MMC3_CMDWrôe
((
A
&0xE000)|((A&0x400)>>10),A&0xFF);

1499 
	}
}

1501 
	$DECLFW
(
M250IRQWrôe
)

1503 
	`MMC3_IRQWrôe
((
A
&0xE000)|((A&0x400)>>10),A&0xFF);

1504 
	}
}

1506 
	$M250_Powî
()

1508 
	`GíMMC3Powî
();

1509 
	`SëWrôeH™dÀr
(0x8000,0xBFFF,
M250Wrôe
);

1510 
	`SëWrôeH™dÀr
(0xC000,0xFFFF,
M250IRQWrôe
);

1511 
	}
}

1513 
	$M≠≥r250_Inô
(
C¨tInfo
 *
öfo
)

1515 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1516 
öfo
->
Powî
=
M250_Powî
;

1517 
	}
}

1521 
	$DECLFR
(
MR254WRAM
)

1523 if(
EXPREGS
[0])

1524  
WRAM
[
A
-0x6000];

1526  
WRAM
[
A
-0x6000]^
EXPREGS
[1];

1527 
	}
}

1529 
	$DECLFW
(
M254Wrôe
)

1531 
A
) {

1532 0x8000: 
EXPREGS
[0]=0xff;

1534 0xA001: 
EXPREGS
[1]=
V
;

1536 
	`MMC3_CMDWrôe
(
A
,
V
);

1537 
	}
}

1539 
	$M254_Powî
()

1541 
	`GíMMC3Powî
();

1542 
	`SëWrôeH™dÀr
(0x8000,0xBFFF,
M254Wrôe
);

1543 
	`SëRódH™dÀr
(0x6000,0x7FFF,
MR254WRAM
);

1544 #ifde‡
ASM_6502


1546 
Page
[12]=Page[13]=Page[14]=Page[15]=
WRAM
-0x6000;

1548 
	}
}

1550 
	$M≠≥r254_Inô
(
C¨tInfo
 *
öfo
)

1552 
	`GíMMC3_Inô
(
öfo
, 128, 128, 8, info->
b©ãry
);

1553 
öfo
->
Powî
=
M254_Powî
;

1554 
	`AddExSèã
(
EXPREGS
, 2, 0, "EXPR");

1555 
	}
}

1559 
	$TEROM_Inô
(
C¨tInfo
 *
öfo
)

1561 
	`GíMMC3_Inô
(
öfo
, 32, 32, 0, 0);

1562 
	}
}

1564 
	$TFROM_Inô
(
C¨tInfo
 *
öfo
)

1566 
	`GíMMC3_Inô
(
öfo
, 512, 64, 0, 0);

1567 
	}
}

1569 
	$TGROM_Inô
(
C¨tInfo
 *
öfo
)

1571 
	`GíMMC3_Inô
(
öfo
, 512, 0, 0, 0);

1572 
	}
}

1574 
	$TKROM_Inô
(
C¨tInfo
 *
öfo
)

1576 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1577 
	}
}

1579 
	$TLROM_Inô
(
C¨tInfo
 *
öfo
)

1581 
	`GíMMC3_Inô
(
öfo
, 512, 256, 0, 0);

1582 
	}
}

1584 
	$TSROM_Inô
(
C¨tInfo
 *
öfo
)

1586 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, 0);

1587 
	}
}

1589 
	$TLSROM_Inô
(
C¨tInfo
 *
öfo
)

1591 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, 0);

1592 
cwøp
=
TKSWRAP
;

1593 
mwøp
=
GENNOMWRAP
;

1594 
PPU_hook
=
TKSPPU
;

1595 
	`AddExSèã
(&
PPUCHRBus
, 1, 0, "PPUC");

1596 
	}
}

1598 
	$TKSROM_Inô
(
C¨tInfo
 *
öfo
)

1600 
	`GíMMC3_Inô
(
öfo
, 512, 256, 8, info->
b©ãry
);

1601 
cwøp
=
TKSWRAP
;

1602 
mwøp
=
GENNOMWRAP
;

1603 
PPU_hook
=
TKSPPU
;

1604 
	`AddExSèã
(&
PPUCHRBus
, 1, 0, "PPUC");

1605 
	}
}

1607 
	$TQROM_Inô
(
C¨tInfo
 *
öfo
)

1609 
	`GíMMC3_Inô
(
öfo
, 512, 64, 0, 0);

1610 
cwøp
=
TQWRAP
;

1611 
CHRRAMSize
=8192;

1612 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
CHRRAMSize
);

1613 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 
CHRRAMSize
, 1);

1614 
	}
}

1616 
	$HKROM_Inô
(
C¨tInfo
 *
öfo
)

1618 
	`GíMMC3_Inô
(
öfo
, 512, 512, 1, info->
b©ãry
);

1619 
	}
}

	@boards/mmc3.h

1 
uöt8
 
MMC3_cmd
;

2 
uöt8
 *
WRAM
;

3 
uöt8
 *
CHRRAM
;

4 
uöt8
 
EXPREGS
[8];

5 #unde‡
IRQCou¡


6 #unde‡
IRQL©ch


7 #unde‡
IRQa


8 
uöt8
 
IRQCou¡
,
IRQL©ch
,
IRQa
;

9 
uöt8
 
IRQRñﬂd
;

11 (*
pwøp
)(
uöt32
 
A
, 
uöt8
 
V
);

12 (*
cwøp
)(
uöt32
 
A
, 
uöt8
 
V
);

13 (*
mwøp
)(
uöt8
 
V
);

15 
	`GíMMC3Powî
();

16 
	`GíMMC3Re°‹e
(
vîsi⁄
);

17 
	`MMC3RegRe£t
();

18 
	`FixMMC3PRG
(
V
);

19 
	`FixMMC3CHR
(
V
);

20 
	`DECLFW
(
MMC3_CMDWrôe
);

21 
	`DECLFW
(
MMC3_IRQWrôe
);

23 
	`GíMMC3_Inô
(
C¨tInfo
 *
öfo
, 
¥g
, 
chr
, 
wøm
, 
b©ãry
);

	@boards/mmc5.c

23 
	~"m≠öc.h
"

25 (*
sfun
)(
P
);

26 (*
psfun
)();

28 
	`MMC5RunSound
(
Cou¡
);

31 
INLINE
 
	$MMC5SPRVROM_BANK1
(
uöt32
 
A
,uöt32 
V
)

33 if(
CHR±r
[0])

35 
V
&=
CHRmask1
[0];

36 
MMC5SPRVPage
[(
A
)>>10]=&
CHR±r
[0][(
V
)<<10]-(A);

38 
	}
}

40 
INLINE
 
	$MMC5BGVROM_BANK1
(
uöt32
 
A
,uöt32 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask1
[0];
MMC5BGVPage
[(A)>>10]=&CHR±r[0][(V)<<10]-(A);}
	}
}

42 
INLINE
 
	$MMC5SPRVROM_BANK2
(
uöt32
 
A
,uöt32 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask2
[0];
MMC5SPRVPage
[(A)>>10]=MMC5SPRVPage[((A)>>10)+1]=&CHR±r[0][(V)<<11]-(A);}
	}
}

43 
INLINE
 
	$MMC5BGVROM_BANK2
(
uöt32
 
A
,uöt32 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask2
[0];
MMC5BGVPage
[(A)>>10]=MMC5BGVPage[((A)>>10)+1]=&CHR±r[0][(V)<<11]-(A);}
	}
}

45 
INLINE
 
	$MMC5SPRVROM_BANK4
(
uöt32
 
A
,uöt32 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask4
[0];
MMC5SPRVPage
[(A)>>10]=MMC5SPRVPage[((A)>>10)+1]MMC5SPRVPage[((A)>>10)+2]=MMC5SPRVPage[((A)>>10)+3]=&CHR±r[0][(V)<<12]-(A);}
	}
}

46 
INLINE
 
	$MMC5BGVROM_BANK4
(
uöt32
 
A
,uöt32 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask4
[0];
MMC5BGVPage
[(A)>>10]=MMC5BGVPage[((A)>>10)+1]=MMC5BGVPage[((A)>>10)+2]=MMC5BGVPage[((A)>>10)+3]=&CHR±r[0][(V)<<12]-(A);}
	}
}

48 
INLINE
 
	$MMC5SPRVROM_BANK8
(
uöt32
 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask8
[0];
MMC5SPRVPage
[0]=MMC5SPRVPage[1]=MMC5SPRVPage[2]=MMC5SPRVPage[3]=MMC5SPRVPage[4]=MMC5SPRVPage[5]=MMC5SPRVPage[6]=MMC5SPRVPage[7]=&CHR±r[0][(V)<<13];}
	}
}

49 
INLINE
 
	$MMC5BGVROM_BANK8
(
uöt32
 
V
Ë{if(
CHR±r
[0]){V&=
CHRmask8
[0];
MMC5BGVPage
[0]=MMC5BGVPage[1]=MMC5BGVPage[2]=MMC5BGVPage[3]=MMC5BGVPage[4]=MMC5BGVPage[5]=MMC5BGVPage[6]=MMC5BGVPage[7]=&CHR±r[0][(V)<<13];}
	}
}

51 
uöt8
 
	gPRGB™ks
[4];

52 
uöt8
 
	gWRAMPage
;

53 
uöt8
 
	gCHRB™ksA
[8], 
	gCHRB™ksB
[4];

54 
uöt8
 
	gWRAMMaskE«bÀ
[2];

55 
uöt8
 
	gABMode
;

57 
uöt8
 
	gIRQSˇ∆öe
,
	gIRQE«bÀ
;

58 
uöt8
 
	gCHRMode
, 
	gNTAMúr‹ög
, 
	gNTFûl
, 
	gATFûl
;

60 
uöt8
 
	gMMC5IRQR
;

61 
uöt8
 
	gMMC5LöeCou¡î
;

62 
uöt8
 
	gmmc5psize
, 
	gmmc5vsize
;

63 
uöt8
 
	gmul
[2];

65 
uöt8
 *
	gWRAM
=
NULL
;

66 
uöt8
 *
	gMMC5fûl
=
NULL
;

67 
uöt8
 *
	gExRAM
=
NULL
;

69 
uöt8
 
	gMMC5WRAMsize
;

70 
uöt8
 
	gMMC5WRAMIndex
[8];

72 
uöt8
 
	gMMC5ROMWrPrŸe˘
[4];

73 
uöt8
 
	gMMC5MemIn
[5];

75 
MMC5CHRA
();

76 
MMC5CHRB
();

78 
	s__ˇπd©a
 {

79 
uöt32
 
	m¸c32
;

80 
uöt8
 
	msize
;

81 } 
	tˇπd©a
;

87 
	#MMC5_NOCARTS
 14

	)

88 
ˇπd©a
 
	gMMC5C¨tLi°
[
MMC5_NOCARTS
]=

114 
	$Dëe˘MMC5WRAMSize
(
uöt32
 
¸c32
)

116 
x
;

117 
x
=0;x<
MMC5_NOCARTS
;x++)

118 if(
¸c32
==
MMC5C¨tLi°
[
x
].crc32)

120 
	`FCEU_¥ötf
(" >8KBÉxternal WRAMÖresent. Use UNIF if you hackÅhe ROM image.\n");

121 (
MMC5C¨tLi°
[
x
].
size
*8);

124 
	}
}

126 
	$BuûdWRAMSizeTabÀ
()

128 
x
;

129 
x
=0;x<8;x++)

131 
MMC5WRAMsize
)

133 0: 
MMC5WRAMIndex
[
x
]=255; ;

134 1: 
MMC5WRAMIndex
[
x
]=(x>3)?255:0; ;

135 2: 
MMC5WRAMIndex
[
x
]=(x&4)>>2; ;

136 4: 
MMC5WRAMIndex
[
x
]=(x>3)?255:(x&3); ;

139 
	}
}

141 
	$MMC5CHRA
()

143 
x
;

144 
mmc5vsize
&3)

146 0: 
	`£tchr8
(
CHRB™ksA
[7]);

147 
	`MMC5SPRVROM_BANK8
(
CHRB™ksA
[7]);

149 1: 
	`£tchr4
(0x0000,
CHRB™ksA
[3]);

150 
	`£tchr4
(0x1000,
CHRB™ksA
[7]);

151 
	`MMC5SPRVROM_BANK4
(0x0000,
CHRB™ksA
[3]);

152 
	`MMC5SPRVROM_BANK4
(0x1000,
CHRB™ksA
[7]);

154 2: 
	`£tchr2
(0x0000,
CHRB™ksA
[1]);

155 
	`£tchr2
(0x0800,
CHRB™ksA
[3]);

156 
	`£tchr2
(0x1000,
CHRB™ksA
[5]);

157 
	`£tchr2
(0x1800,
CHRB™ksA
[7]);

158 
	`MMC5SPRVROM_BANK2
(0x0000,
CHRB™ksA
[1]);

159 
	`MMC5SPRVROM_BANK2
(0x0800,
CHRB™ksA
[3]);

160 
	`MMC5SPRVROM_BANK2
(0x1000,
CHRB™ksA
[5]);

161 
	`MMC5SPRVROM_BANK2
(0x1800,
CHRB™ksA
[7]);

163 3: 
x
=0;x<8;x++)

165 
	`£tchr1
(
x
<<10,
CHRB™ksA
[x]);

166 
	`MMC5SPRVROM_BANK1
(
x
<<10,
CHRB™ksA
[x]);

170 
	}
}

172 
	$MMC5CHRB
()

174 
x
;

175 
mmc5vsize
&3)

177 0: 
	`£tchr8
(
CHRB™ksB
[3]);

178 
	`MMC5BGVROM_BANK8
(
CHRB™ksB
[3]);

180 1: 
	`£tchr4
(0x0000,
CHRB™ksB
[3]);

181 
	`£tchr4
(0x1000,
CHRB™ksB
[3]);

182 
	`MMC5BGVROM_BANK4
(0x0000,
CHRB™ksB
[3]);

183 
	`MMC5BGVROM_BANK4
(0x1000,
CHRB™ksB
[3]);

185 2: 
	`£tchr2
(0x0000,
CHRB™ksB
[1]);

186 
	`£tchr2
(0x0800,
CHRB™ksB
[3]);

187 
	`£tchr2
(0x1000,
CHRB™ksB
[1]);

188 
	`£tchr2
(0x1800,
CHRB™ksB
[3]);

189 
	`MMC5BGVROM_BANK2
(0x0000,
CHRB™ksB
[1]);

190 
	`MMC5BGVROM_BANK2
(0x0800,
CHRB™ksB
[3]);

191 
	`MMC5BGVROM_BANK2
(0x1000,
CHRB™ksB
[1]);

192 
	`MMC5BGVROM_BANK2
(0x1800,
CHRB™ksB
[3]);

194 3: 
x
=0;x<8;x++)

196 
	`£tchr1
(
x
<<10,
CHRB™ksB
[x&3]);

197 
	`MMC5BGVROM_BANK1
(
x
<<10,
CHRB™ksB
[x&3]);

201 
	}
}

203 
	$FASTAPASS
(2Ë
	$MMC5WRAM
(
uöt32
 
A
, uöt32 
V
)

206 
V
=
MMC5WRAMIndex
[V&7];

207 if(
V
!=255)

209 
	`£çrg8r
(0x10,
A
,
V
);

210 
MMC5MemIn
[(
A
-0x6000)>>13]=1;

213 
MMC5MemIn
[(
A
-0x6000)>>13]=0;

214 
	}
}

216 
	$MMC5PRG
()

218 
x
;

219 
mmc5psize
&3)

221 0: 
MMC5ROMWrPrŸe˘
[0]=MMC5ROMWrProtect[1]=

222 
MMC5ROMWrPrŸe˘
[2]=MMC5ROMWrProtect[3]=1;

223 
	`£çrg32
(0x8000,((
PRGB™ks
[1]&0x7F)>>2));

224 
x
=0;x<4;x++)

225 
MMC5MemIn
[1+
x
]=1;

227 1: if(
PRGB™ks
[1]&0x80)

229 
MMC5ROMWrPrŸe˘
[0]=MMC5ROMWrProtect[1]=1;

230 
	`£çrg16
(0x8000,(
PRGB™ks
[1]>>1));

231 
MMC5MemIn
[1]=MMC5MemIn[2]=1;

235 
MMC5ROMWrPrŸe˘
[0]=MMC5ROMWrProtect[1]=0;

236 
	`MMC5WRAM
(0x8000,
PRGB™ks
[1]&7&0xFE);

237 
	`MMC5WRAM
(0xA000,(
PRGB™ks
[1]&7&0xFE)+1);

239 
MMC5MemIn
[3]=MMC5MemIn[4]=1;

240 
MMC5ROMWrPrŸe˘
[2]=MMC5ROMWrProtect[3]=1;

241 
	`£çrg16
(0xC000,(
PRGB™ks
[3]&0x7F)>>1);

243 2: if(
PRGB™ks
[1]&0x80)

245 
MMC5MemIn
[1]=MMC5MemIn[2]=1;

246 
MMC5ROMWrPrŸe˘
[0]=MMC5ROMWrProtect[1]=1;

247 
	`£çrg16
(0x8000,(
PRGB™ks
[1]&0x7F)>>1);

251 
MMC5ROMWrPrŸe˘
[0]=MMC5ROMWrProtect[1]=0;

252 
	`MMC5WRAM
(0x8000,
PRGB™ks
[1]&7&0xFE);

253 
	`MMC5WRAM
(0xA000,(
PRGB™ks
[1]&7&0xFE)+1);

255 if(
PRGB™ks
[2]&0x80)

257 
MMC5ROMWrPrŸe˘
[2]=1;

258 
MMC5MemIn
[3]=1;

259 
	`£çrg8
(0xC000,
PRGB™ks
[2]&0x7F);

263 
MMC5ROMWrPrŸe˘
[2]=0;

264 
	`MMC5WRAM
(0xC000,
PRGB™ks
[2]&7);

266 
MMC5MemIn
[4]=1;

267 
MMC5ROMWrPrŸe˘
[3]=1;

268 
	`£çrg8
(0xE000,
PRGB™ks
[3]&0x7F);

270 3: 
x
=0;x<3;x++)

271 if(
PRGB™ks
[
x
]&0x80)

273 
MMC5ROMWrPrŸe˘
[
x
]=1;

274 
	`£çrg8
(0x8000+(
x
<<13),
PRGB™ks
[x]&0x7F);

275 
MMC5MemIn
[1+
x
]=1;

279 
MMC5ROMWrPrŸe˘
[
x
]=0;

280 
	`MMC5WRAM
(0x8000+(
x
<<13),
PRGB™ks
[x]&7);

282 
MMC5MemIn
[4]=1;

283 
MMC5ROMWrPrŸe˘
[3]=1;

284 
	`£çrg8
(0xE000,
PRGB™ks
[3]&0x7F);

287 
	}
}

289 
	$DECLFW
(
M≠≥r5_wrôe
)

291 if(
A
>=0x5120&&A<=0x5127)

293 
ABMode
 = 0;

294 
CHRB™ksA
[
A
&7]=
V
;

295 
	`MMC5CHRA
();

297 
A
)

300 
x
;

301 
x
=0;x<4;x++)

303 (
V
>>(
x
<<1))&3)

305 0:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
NTARAM
;;

306 1:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
NTARAM
+0x400;;

307 2:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
ExRAM
;;

308 3:
PPUNTARAM
&=~(1<<
x
);
v«∑ge
[x]=
MMC5fûl
;;

312 
NTAMúr‹ög
=
V
;

314 0x5113: 
WRAMPage
=
V
;
	`MMC5WRAM
(0x6000,V&7);;

315 0x5100: 
mmc5psize
=
V
;
	`MMC5PRG
();;

316 0x5101: 
mmc5vsize
=
V
;

317 if(!
ABMode
)

318 { 
	`MMC5CHRB
();
	`MMC5CHRA
();}

320 { 
	`MMC5CHRA
();
	`MMC5CHRB
();}

325 0x5117: 
PRGB™ks
[
A
&3]=
V
;
	`MMC5PRG
();;

329 0x512b: 
ABMode
=1;

330 
CHRB™ksB
[
A
&3]=
V
;

331 
	`MMC5CHRB
();

333 0x5102: 
WRAMMaskE«bÀ
[0]=
V
;;

334 0x5103: 
WRAMMaskE«bÀ
[1]=
V
;;

335 0x5104: 
CHRMode
=
V
;
MMC5HackCHRMode
=V&3;;

336 0x5106: if(
V
!=
NTFûl
)

338 
uöt32
 
t
;

339 
t
=
V
|(V<<8)|(V<<16)|(V<<24);

340 
	`FCEU_dwmem£t
(
MMC5fûl
,
t
,0x3c0);

342 
NTFûl
=
V
;

344 0x5107: if(
V
!=
ATFûl
)

346 
mo›
;

347 
uöt32
 
t
;

348 
mo›
=
V
|(V<<2)|(V<<4)|(V<<6);

349 
t
=
mo›
|(moop<<8)|(moop<<16)|(moop<<24);

350 
	`FCEU_dwmem£t
(
MMC5fûl
+0x3c0,
t
,0x40);

352 
ATFûl
=
V
;

354 0x5200: 
MMC5HackSPMode
=
V
;;

355 0x5201: 
MMC5HackSPS¸ﬁl
=(
V
>>3)&0x1F;;

356 0x5202: 
MMC5HackSPPage
=
V
&0x3F;;

357 0x5203: 
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQSˇ∆öe
=
V
;;

358 0x5204: 
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQE«bÀ
=
V
&0x80;;

359 0x5205: 
mul
[0]=
V
;;

360 0x5206: 
mul
[1]=
V
;;

362 
	}
}

364 
	$DECLFR
(
MMC5_RódROMRAM
)

366 if(
MMC5MemIn
[(
A
-0x6000)>>13])

367  
Page
[
A
>>11][A];

369  
X
.
DB
;

370 
	}
}

372 
	$DECLFW
(
MMC5_WrôeROMRAM
)

374 if(
A
>=0x8000)

375 if(
MMC5ROMWrPrŸe˘
[(
A
-0x8000)>>13]) ;

376 if(
MMC5MemIn
[(
A
-0x6000)>>13])

377 if(((
WRAMMaskE«bÀ
[0]&3)|((WRAMMaskE«bÀ[1]&3)<<2)Ë=6Ë
Page
[
A
>>11][A]=
V
;

378 
	}
}

380 
	$DECLFW
(
MMC5_ExRAMWr
)

382 if(
MMC5HackCHRMode
!=3)

383 
ExRAM
[
A
&0x3ff]=
V
;

384 
	}
}

386 
	$DECLFR
(
MMC5_ExRAMRd
)

390  
ExRAM
[
A
&0x3ff];

393 
	}
}

395 
	$DECLFR
(
MMC5_ªad
)

397 
A
)

399 0x5204: 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

401 
uöt8
 
x
;

402 
x
=
MMC5IRQR
;

403 if(!
f˚uödbg
)

404 
MMC5IRQR
&=0x40;

405  
x
;

407 0x5205:  (
mul
[0]*mul[1]);

408 0x5206:  ((
mul
[0]*mul[1])>>8);

410 (
X
.
DB
);

411 
	}
}

413 
	$MMC5Synco
()

415 
x
;

417 
	`MMC5PRG
();

418 
x
=0;x<4;x++)

420 (
NTAMúr‹ög
>>(
x
<<1))&3)

422 0:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
NTARAM
;;

423 1:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
NTARAM
+0x400;;

424 2:
PPUNTARAM
|=1<<
x
;
v«∑ge
[x]=
ExRAM
;;

425 3:
PPUNTARAM
&=~(1<<
x
);
v«∑ge
[x]=
MMC5fûl
;;

428 
	`MMC5WRAM
(0x6000,
WRAMPage
&7);

429 if(!
ABMode
)

431 
	`MMC5CHRB
();

432 
	`MMC5CHRA
();

436 
	`MMC5CHRA
();

437 
	`MMC5CHRB
();

440 
uöt32
 
t
;

441 
t
=
NTFûl
|(NTFill<<8)|(NTFill<<16)|(NTFill<<24);

442 
	`FCEU_dwmem£t
(
MMC5fûl
,
t
,0x3c0);

445 
mo›
;

446 
uöt32
 
t
;

447 
mo›
=
ATFûl
|(ATFill<<2)|(ATFill<<4)|(ATFill<<6);

448 
t
=
mo›
|(moop<<8)|(moop<<16)|(moop<<24);

449 
	`FCEU_dwmem£t
(
MMC5fûl
+0x3c0,
t
,0x40);

451 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

452 
MMC5HackCHRMode
=
CHRMode
&3;

453 
	}
}

455 
	$MMC5_hb
(
sˇ∆öe
)

457 if(
sˇ∆öe
==240)

459 
MMC5LöeCou¡î
=0;

460 
MMC5IRQR
=0x40;

463 if(
MMC5LöeCou¡î
<240)

465 if(
MMC5LöeCou¡î
==
IRQSˇ∆öe
)

467 
MMC5IRQR
|=0x80;

468 if(
IRQE«bÀ
&0x80)

469 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

471 
MMC5LöeCou¡î
++;

473 if(
MMC5LöeCou¡î
==240)

474 
MMC5IRQR
=0;

475 
	}
}

477 
	$MMC5_SèãRe°‹e
(
vîsi⁄
)

479 
	`MMC5Synco
();

480 
	}
}

483 
uöt16
 
	mwl
[2];

484 
uöt8
 
	mív
[2];

485 
uöt8
 
	míabÀ
;

486 
uöt8
 
	mru¬ög
;

487 
uöt8
 
	møw
;

488 
uöt8
 
	møwc⁄åﬁ
;

489 
öt32
 
	mdcou¡
[2];

490 
öt32
 
	mBC
[3];

491 
öt32
 
	mvcou¡
[2];

492 } 
	tMMC5APU
;

494 
MMC5APU
 
	gMMC5Sound
;

497 
	$Do5PCM
()

499 
öt32
 
V
;

500 
öt32
 
°¨t
,
íd
;

502 
°¨t
=
MMC5Sound
.
BC
[2];

503 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

504 if(
íd
<=
°¨t
) ;

505 
MMC5Sound
.
BC
[2]=
íd
;

507 if(!(
MMC5Sound
.
øwc⁄åﬁ
&0x40Ë&& MMC5Sound.
øw
)

508 
V
=
°¨t
;V<
íd
;V++)

509 
Wave
[
V
>>4]+=
MMC5Sound
.
øw
<<1;

510 
	}
}

513 
	$Do5PCMHQ
()

515 
öt32
 
V
;

516 if(!(
MMC5Sound
.
øwc⁄åﬁ
&0x40Ë&& MMC5Sound.
øw
)

517 
V
=
MMC5Sound
.
BC
[2];V<
SOUNDTS
;V++)

518 
WaveHi
[
V
]+=
MMC5Sound
.
øw
<<5;

519 
MMC5Sound
.
BC
[2]=
SOUNDTS
;

520 
	}
}

523 
	$DECLFW
(
M≠≥r5_SW
)

525 
A
&=0x1F;

527 
GameExpSound
.
Fûl
=
MMC5RunSound
;

528 
GameExpSound
.
HiFûl
=0;

530 
A
)

532 0x10:if(
psfun
Ë
	`psfun
();
MMC5Sound
.
øwc⁄åﬁ
=
V
;;

533 0x11:if(
psfun
Ë
	`psfun
();
MMC5Sound
.
øw
=
V
;;

537 if(
sfun
Ë
	`sfun
(
A
>>2);

538 
MMC5Sound
.
ív
[
A
>>2]=
V
;

541 0x6: if(
sfun
Ë
	`sfun
(
A
>>2);

542 
MMC5Sound
.
wl
[
A
>>2]&=~0x00FF;

543 
MMC5Sound
.
wl
[
A
>>2]|=
V
&0xFF;

547 
MMC5Sound
.
wl
[
A
>>2]&=~0x0700;

548 
MMC5Sound
.
wl
[
A
>>2]|=(
V
&0x07)<<8;

549 
MMC5Sound
.
ru¬ög
|=1<<(
A
>>2);

551 0x15:if(
sfun
)

553 
	`sfun
(0);

554 
	`sfun
(1);

556 
MMC5Sound
.
ru¬ög
&=
V
;

557 
MMC5Sound
.
íabÀ
=
V
;

561 
	}
}

563 
	$Do5SQ
(
P
)

565 
èl
[4]={1,2,4,6};

566 
öt32
 
V
,
amp
,
πhªsh
,
wl
;

567 
öt32
 
°¨t
,
íd
;

569 
°¨t
=
MMC5Sound
.
BC
[
P
];

570 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

571 if(
íd
<=
°¨t
) ;

572 
MMC5Sound
.
BC
[
P
]=
íd
;

574 
wl
=
MMC5Sound
.wl[
P
]+1;

575 
amp
=(
MMC5Sound
.
ív
[
P
]&0xF)<<4;

576 
πhªsh
=
èl
[(
MMC5Sound
.
ív
[
P
]&0xC0)>>6];

578 if(
wl
>=8 && (
MMC5Sound
.
ru¬ög
&(
P
+1)))

580 
dc
,
vc
;

582 
wl
<<=18;

583 
dc
=
MMC5Sound
.
dcou¡
[
P
];

584 
vc
=
MMC5Sound
.
vcou¡
[
P
];

586 
V
=
°¨t
;V<
íd
;V++)

588 if(
dc
<
πhªsh
)

589 
Wave
[
V
>>4]+=
amp
;

590 
vc
-=
√söcsize
;

591 
vc
<=0)

593 
vc
+=
wl
;

594 
dc
=(dc+1)&7;

597 
MMC5Sound
.
dcou¡
[
P
]=
dc
;

598 
MMC5Sound
.
vcou¡
[
P
]=
vc
;

600 
	}
}

603 
	$Do5SQHQ
(
P
)

605 
èl
[4]={1,2,4,6};

606 
öt32
 
V
,
amp
,
πhªsh
,
wl
;

608 
wl
=
MMC5Sound
.wl[
P
]+1;

609 
amp
=((
MMC5Sound
.
ív
[
P
]&0xF)<<8);

610 
πhªsh
=
èl
[(
MMC5Sound
.
ív
[
P
]&0xC0)>>6];

612 if(
wl
>=8 && (
MMC5Sound
.
ru¬ög
&(
P
+1)))

614 
dc
,
vc
;

616 
wl
<<=1;

618 
dc
=
MMC5Sound
.
dcou¡
[
P
];

619 
vc
=
MMC5Sound
.
vcou¡
[
P
];

620 
V
=
MMC5Sound
.
BC
[
P
];V<
SOUNDTS
;V++)

622 if(
dc
<
πhªsh
)

623 
WaveHi
[
V
]+=
amp
;

624 
vc
--;

625 if(
vc
<=0)

627 
vc
=
wl
;

628 
dc
=(dc+1)&7;

631 
MMC5Sound
.
dcou¡
[
P
]=
dc
;

632 
MMC5Sound
.
vcou¡
[
P
]=
vc
;

634 
MMC5Sound
.
BC
[
P
]=
SOUNDTS
;

635 
	}
}

637 
	$MMC5RunSoundHQ
()

639 
	`Do5SQHQ
(0);

640 
	`Do5SQHQ
(1);

641 
	`Do5PCMHQ
();

642 
	}
}

644 
	$MMC5HiSync
(
öt32
 
ts
)

646 
x
;

647 
x
=0;x<3;x++Ë
MMC5Sound
.
BC
[x]=
ts
;

648 
	}
}

651 
	$MMC5RunSound
(
Cou¡
)

653 
x
;

654 
	`Do5SQ
(0);

655 
	`Do5SQ
(1);

656 
	`Do5PCM
();

657 
x
=0;x<3;x++)

658 
MMC5Sound
.
BC
[
x
]=
Cou¡
;

659 
	}
}

661 
	$M≠≥r5_ESI
()

663 
GameExpSound
.
RCh™ge
=
M≠≥r5_ESI
;

664 if(
FSëtögs
.
SndR©e
)

667 if(
FSëtögs
.
soundq
>=1)

669 
sfun
=
Do5SQHQ
;

670 
psfun
=
Do5PCMHQ
;

675 
sfun
=
Do5SQ
;

676 
psfun
=
Do5PCM
;

681 
sfun
=0;

682 
psfun
=0;

684 
	`mem£t
(
MMC5Sound
.
BC
,0,(MMC5Sound.BC));

685 
	`mem£t
(
MMC5Sound
.
vcou¡
,0,(MMC5Sound.vcount));

686 
GameExpSound
.
HiSync
=0;

687 
	}
}

689 
	$NSFMMC5_Inô
()

691 
	`mem£t
(&
MMC5Sound
,0,(MMC5Sound));

692 
mul
[0]=mul[1]=0;

693 
ExRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(1024);

694 
	`M≠≥r5_ESI
();

695 
	`SëWrôeH™dÀr
(0x5c00,0x5„f,
MMC5_ExRAMWr
);

696 
	`SëRódH™dÀr
(0x5c00,0x5„f,
MMC5_ExRAMRd
);

697 
MMC5HackCHRMode
=2;

698 
	`SëWrôeH™dÀr
(0x5000,0x5015,
M≠≥r5_SW
);

699 
	`SëWrôeH™dÀr
(0x5205,0x5206,
M≠≥r5_wrôe
);

700 
	`SëRódH™dÀr
(0x5205,0x5206,
MMC5_ªad
);

701 
	}
}

703 
	$NSFMMC5_Clo£
()

705 
	`FCEU_g‰ì
(
ExRAM
);

706 
ExRAM
=0;

707 
	}
}

709 
	$GíMMC5Re£t
()

711 
x
;

713 
x
=0;x<4;x++Ë
PRGB™ks
[x]=~0;

714 
x
=0;x<8;x++Ë
CHRB™ksA
[x]=~0;

715 
x
=0;x<4;x++Ë
CHRB™ksB
[x]=~0;

716 
WRAMMaskE«bÀ
[0]=WRAMMaskEnable[1]=~0;

718 
mmc5psize
=
mmc5vsize
=3;

719 
CHRMode
=0;

721 
NTAMúr‹ög
=
NTFûl
=
ATFûl
=0xFF;

723 
	`MMC5Synco
();

725 
	`SëWrôeH™dÀr
(0x4020,0x5bff,
M≠≥r5_wrôe
);

726 
	`SëRódH™dÀr
(0x4020,0x5bff,
MMC5_ªad
);

728 
	`SëWrôeH™dÀr
(0x5c00,0x5fff,
MMC5_ExRAMWr
);

729 
	`SëRódH™dÀr
(0x5c00,0x5fff,
MMC5_ExRAMRd
);

731 
	`SëWrôeH™dÀr
(0x6000,0xFFFF,
MMC5_WrôeROMRAM
);

732 
	`SëRódH™dÀr
(0x6000,0xFFFF,
MMC5_RódROMRAM
);

734 
	`SëWrôeH™dÀr
(0x5000,0x5015,
M≠≥r5_SW
);

735 
	`SëWrôeH™dÀr
(0x5205,0x5206,
M≠≥r5_wrôe
);

736 
	`SëRódH™dÀr
(0x5205,0x5206,
MMC5_ªad
);

739 
	`FCEU_ChótAddRAM
(8,0x6000,
WRAM
);

740 
	`FCEU_ChótAddRAM
(1,0x5c00,
ExRAM
);

741 
	}
}

743 
SFORMAT
 
	gMMC5_SèãRegs
[]={

744 { 
PRGB™ks
, 4, "PRGB"},

745 { 
CHRB™ksA
, 8, "CHRA"},

746 { 
CHRB™ksB
, 4, "CHRB"},

747 { &
WRAMPage
, 1, "WRMP"},

748 { 
WRAMMaskE«bÀ
, 2, "WRME"},

749 { &
ABMode
, 1, "ABMD"},

750 { &
IRQSˇ∆öe
, 1, "IRQS"},

751 { &
IRQE«bÀ
, 1, "IRQE"},

752 { &
CHRMode
, 1, "CHRM"},

753 { &
NTAMúr‹ög
, 1, "NTAM"},

754 { &
NTFûl
, 1, "NTFL"},

755 { &
ATFûl
, 1, "ATFL"},

757 { &
MMC5Sound
.
wl
[0], 2|
FCEUSTATE_RLSB
, "SDW0"},

758 { &
MMC5Sound
.
wl
[1], 2|
FCEUSTATE_RLSB
, "SDW1"},

759 { 
MMC5Sound
.
ív
, 2, "SDEV"},

760 { &
MMC5Sound
.
íabÀ
, 1, "SDEN"},

761 { &
MMC5Sound
.
ru¬ög
, 1, "SDRU"},

762 { &
MMC5Sound
.
øw
, 1, "SDRW"},

763 { &
MMC5Sound
.
øwc⁄åﬁ
, 1, "SDRC"},

767 
	$GíMMC5_Inô
(
C¨tInfo
 *
öfo
, 
wsize
, 
b©ãry
)

769 if(
wsize
)

771 
WRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(
wsize
*1024);

772 
	`SëupC¨tPRGM≠pög
(0x10,
WRAM
,
wsize
*1024,1);

773 
	`AddExSèã
(
WRAM
, 
wsize
*1024, 0, "WRAM");

776 
MMC5fûl
=(
uöt8
*)
	`FCEU_gmÆloc
(1024);

777 
ExRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(1024);

779 
	`AddExSèã
(
MMC5_SèãRegs
, ~0, 0, 0);

780 
	`AddExSèã
(
WRAM
, 
wsize
*1024, 0, "WRAM");

781 
	`AddExSèã
(
ExRAM
, 1024, 0, "ERAM");

782 
	`AddExSèã
(&
MMC5HackSPMode
, 1, 0, "SPLM");

783 
	`AddExSèã
(&
MMC5HackSPS¸ﬁl
, 1, 0, "SPLS");

784 
	`AddExSèã
(&
MMC5HackSPPage
, 1, 0, "SPLP");

786 
MMC5WRAMsize
=
wsize
/8;

787 
	`BuûdWRAMSizeTabÀ
();

788 
GameSèãRe°‹e
=
MMC5_SèãRe°‹e
;

789 
öfo
->
Powî
=
GíMMC5Re£t
;

791 if(
b©ãry
)

793 
öfo
->
SaveGame
[0]=
WRAM
;

794 if(
wsize
<=16)

795 
öfo
->
SaveGameLí
[0]=8192;

797 
öfo
->
SaveGameLí
[0]=32768;

800 
MMC5HackVROMMask
=
CHRmask4
[0];

801 
MMC5HackExNTARAMPå
=
ExRAM
;

802 
MMC5Hack
=1;

803 
MMC5HackVROMPTR
=
CHR±r
[0];

804 
MMC5HackCHRMode
=0;

805 
MMC5HackSPMode
=
MMC5HackSPS¸ﬁl
=
MMC5HackSPPage
=0;

806 
	`M≠≥r5_ESI
();

807 
	}
}

809 
	$M≠≥r5_Inô
(
C¨tInfo
 *
öfo
)

811 
	`GíMMC5_Inô
(
öfo
, 
	`Dëe˘MMC5WRAMSize
(öfo->
CRC32
), info->
b©ãry
);

812 
	}
}

821 
	$ETROM_Inô
(
C¨tInfo
 *
öfo
)

823 
	`GíMMC5_Inô
(
öfo
, 16,öfo->
b©ãry
);

824 
	}
}

826 
	$ELROM_Inô
(
C¨tInfo
 *
öfo
)

828 
	`GíMMC5_Inô
(
öfo
,0,0);

829 
	}
}

831 
	$EWROM_Inô
(
C¨tInfo
 *
öfo
)

833 
	`GíMMC5_Inô
(
öfo
,32,öfo->
b©ãry
);

834 
	}
}

836 
	$EKROM_Inô
(
C¨tInfo
 *
öfo
)

838 
	`GíMMC5_Inô
(
öfo
,8,öfo->
b©ãry
);

839 
	}
}

	@boards/n106.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gIRQCou¡
;

24 
uöt8
 
	gIRQa
;

26 
uöt8
 
	gWRAM
[8192] 
__©åibuã__
 ((
Æig√d
 (4)));

27 
uöt8
 
	gIRAM
[128] 
__©åibuã__
 ((
Æig√d
 (4)));

29 
	$DECLFR
(
AWRAM
)

31 (
WRAM
[
A
-0x6000]);

32 
	}
}

34 
	$DECLFW
(
BWRAM
)

36 
WRAM
[
A
-0x6000]=
V
;

37 
	}
}

39 
M≠≥r19_ESI
();

41 
uöt8
 
	gNTAPage
[4];

43 
uöt8
 
	gd›ﬁ
;

44 
uöt8
 
	gg‹fus
;

45 
uöt8
 
	gg‹ko
;

47 
NamcoSound
(
Cou¡
);

48 
NamcoSoundHack
();

49 
DoNamcoSound
(
öt32
 *
Wave
, 
Cou¡
);

51 
SyncHQ
(
öt32
 
ts
);

53 
	gis210
;

55 
uöt8
 
	gPRG
[3];

56 
uöt8
 
	gCHR
[8];

58 
SFORMAT
 
	gN106_SèãRegs
[]={

59 {
PRG
,3,"PRG"},

60 {
CHR
,8,"CHR"},

61 {
NTAPage
,4,"NTA"},

65 
	$SyncPRG
()

67 
	`£çrg8
(0x8000,
PRG
[0]);

68 
	`£çrg8
(0xa000,
PRG
[1]);

69 
	`£çrg8
(0xc000,
PRG
[2]);

70 
	`£çrg8
(0xe000,0x3F);

71 
	}
}

73 
	$FP_FASTAPASS
(1Ë
	$NamcoIRQHook
(
a
)

75 if(
IRQa
)

77 
IRQCou¡
+=
a
;

78 if(
IRQCou¡
>=0x7FFF)

80 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

81 
IRQa
=0;

82 
IRQCou¡
=0x7FFF;

85 
	}
}

87 
	$DECLFR
(
Namco_Ród4800
)

89 
uöt8
 
ªt
=
IRAM
[
d›ﬁ
&0x7f];

91 if(!
f˚uödbg
)

92 if(
d›ﬁ
&0x80)

93 
d›ﬁ
=(dopol&0x80)|((dopol+1)&0x7f);

94  
ªt
;

95 
	}
}

97 
	$DECLFR
(
Namco_Ród5000
)

99 (
IRQCou¡
);

100 
	}
}

102 
	$DECLFR
(
Namco_Ród5800
)

104 (
IRQCou¡
>>8);

105 
	}
}

107 
	$FASTAPASS
(2Ë
	$DoNTARAMROM
(
w
, 
uöt8
 
V
)

109 
NTAPage
[
w
]=
V
;

110 if(
V
>=0xE0)

111 
	`£äèmem
(
NTARAM
+((
V
&1)<<10), 1, 
w
);

114 
V
&=
CHRmask1
[0];

115 
	`£äèmem
(
CHR±r
[0]+(
V
<<10), 0, 
w
);

117 
	}
}

119 
	$FixNTAR
()

121 
x
;

122 
x
=0;x<4;x++)

123 
	`DoNTARAMROM
(
x
,
NTAPage
[x]);

124 
	}
}

126 
	$FASTAPASS
(2Ë
	$DoCHRRAMROM
(
x
, 
uöt8
 
V
)

128 
CHR
[
x
]=
V
;

129 if(!
is210
 && !((
g‹fus
>>((
x
>>2)+6))&1Ë&& (
V
>=0xE0))

135 
	`£tchr1
(
x
<<10,
V
);

136 
	}
}

138 
	$FixCRR
()

140 
x
;

141 
x
=0;x<8;x++)

142 
	`DoCHRRAMROM
(
x
,
CHR
[x]);

143 
	}
}

145 
	$DECLFW
(
M≠≥r19C0D8_wrôe
)

147 
	`DoNTARAMROM
((
A
-0xC000)>>11,
V
);

148 
	}
}

150 
uöt32
 
	gFªqCache
[8];

151 
uöt32
 
	gEnvCache
[8];

152 
uöt32
 
	gLígthCache
[8];

154 
	$FixCache
(
a
,
V
)

156 
w
=(
a
>>3)&0x7;

157 
a
&0x07)

159 0x00:
FªqCache
[
w
]&=~0x000000FF;FªqCache[w]|=
V
;;

160 0x02:
FªqCache
[
w
]&=~0x0000FF00;FªqCache[w]|=
V
<<8;;

161 0x04:
FªqCache
[
w
]&=~0x00030000;FªqCache[w]|=(
V
&3)<<16;

162 
LígthCache
[
w
]=(8-((
V
>>2)&7))<<2;

164 0x07:
EnvCache
[
w
]=()(
V
&0xF)*576716;;

166 
	}
}

168 
	$DECLFW
(
M≠≥r19_wrôe
)

170 
A
&=0xF800;

171 if(
A
>=0x8000 && A<=0xb800)

172 
	`DoCHRRAMROM
((
A
-0x8000)>>11,
V
);

173 
A
)

176 if(
d›ﬁ
&0x40)

178 if(
FSëtögs
.
SndR©e
)

180 
	`NamcoSoundHack
();

181 
GameExpSound
.
Fûl
=
NamcoSound
;

182 
GameExpSound
.
HiFûl
=0;

183 
GameExpSound
.
HiSync
=
SyncHQ
;

185 
	`FixCache
(
d›ﬁ
,
V
);

187 
IRAM
[
d›ﬁ
&0x7f]=
V
;

188 if(
d›ﬁ
&0x80)

189 
d›ﬁ
=(dopol&0x80)|((dopol+1)&0x7f);

192 
d›ﬁ
=
V
;;

194 
IRQCou¡
&=0xFF00;IRQCou¡|=
V
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

196 
IRQCou¡
&=0x00ff;IRQCou¡|=(
V
&0x7F)<<8;

197 
IRQa
=
V
&0x80;

198 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

201 
g‹ko
=
V
&0xC0;

202 
PRG
[0]=
V
&0x3F;

203 
	`SyncPRG
();

206 
g‹fus
=
V
&0xC0;

207 
	`FixCRR
();

208 
PRG
[1]=
V
&0x3F;

209 
	`SyncPRG
();

212 
PRG
[2]=
V
&0x3F;

213 
	`SyncPRG
();

216 
	}
}

218 
	gdwave
=0;

220 
	$NamcoSoundHack
()

222 
öt32
 
z
,
a
;

224 if(
FSëtögs
.
soundq
>=1)

226 
	`DoNamcoSoundHQ
();

230 
z
=((
SOUNDTS
<<16)/
soundtsöc
)>>4;

231 
a
=
z
-
dwave
;

232 if(
a
Ë
	`DoNamcoSound
((
öt32
 *)&
Wave
[
dwave
],á);

233 
dwave
+=
a
;

234 
	}
}

236 
	$NamcoSound
(
Cou¡
)

238 
öt32
 
z
,
a
;

239 
z
=((
SOUNDTS
<<16)/
soundtsöc
)>>4;

240 
a
=
z
-
dwave
;

241 if(
a
Ë
	`DoNamcoSound
((
öt32
 *)&
Wave
[
dwave
],á);

242 
dwave
=0;

243 
	}
}

245 
uöt32
 
	gPœyIndex
[8];

246 
öt32
 
	gvcou¡
[8];

247 
öt32
 
	gCVBC
;

249 
	#TOINDEX
 (16+1)

	)

252 
	$SyncHQ
(
öt32
 
ts
)

254 
CVBC
=
ts
;

255 
	}
}

266 
INLINE
 
uöt32
 
	$FëchDuff
(
uöt32
 
P
, uöt32 
ívñ›e
)

268 
uöt32
 
duff
;

269 
duff
=
IRAM
[((IRAM[0x46+(
P
<<3)]+(
PœyIndex
[P]>>
TOINDEX
))&0xFF)>>1];

270 if((
IRAM
[0x46+(
P
<<3)]+(
PœyIndex
[P]>>
TOINDEX
))&1)

271 
duff
>>=4;

272 
duff
&=0xF;

273 
duff
=(duff*
ívñ›e
)>>16;

274 (
duff
);

275 
	}
}

278 
	$DoNamcoSoundHQ
()

280 
öt32
 
P
,
V
;

281 
öt32
 
cy˛esuck
=(((
IRAM
[0x7F]>>4)&7)+1)*15;

283 
P
=7;P>=(7-((
IRAM
[0x7F]>>4)&7));P--)

285 if((
IRAM
[0x44+(
P
<<3)]&0xE0) && (IRAM[0x47+(P<<3)]&0xF))

287 
uöt32
 
‰eq
;

288 
öt32
 
vco
;

289 
uöt32
 
duff2
,
Àngo
,
ívñ›e
;

291 
vco
=
vcou¡
[
P
];

292 
‰eq
=
FªqCache
[
P
];

293 
ívñ›e
=
EnvCache
[
P
];

294 
Àngo
=
LígthCache
[
P
];

296 
duff2
=
	`FëchDuff
(
P
,
ívñ›e
);

297 
V
=
CVBC
<<1;V<
SOUNDTS
<<1;V++)

299 
WaveHi
[
V
>>1]+=
duff2
;

300 if(!
vco
)

302 
PœyIndex
[
P
]+=
‰eq
;

303 (
PœyIndex
[
P
]>>
TOINDEX
)>=
Àngo
) PlayIndex[P]-=lengo<<TOINDEX;

304 
duff2
=
	`FëchDuff
(
P
,
ívñ›e
);

305 
vco
=
cy˛esuck
;

307 
vco
--;

309 
vcou¡
[
P
]=
vco
;

312 
CVBC
=
SOUNDTS
;

313 
	}
}

316 
	$DoNamcoSound
(
öt32
 *
Wave
, 
Cou¡
)

318 
P
,
V
;

319 
P
=7;P>=7-((
IRAM
[0x7F]>>4)&7);P--)

321 if((
IRAM
[0x44+(
P
<<3)]&0xE0) && (IRAM[0x47+(P<<3)]&0xF))

323 
öt32
 
öc
;

324 
uöt32
 
‰eq
;

325 
öt32
 
vco
;

326 
uöt32
 
duff
,
duff2
,
Àngo
,
ívñ›e
;

328 
vco
=
vcou¡
[
P
];

329 
‰eq
=
FªqCache
[
P
];

330 
ívñ›e
=
EnvCache
[
P
];

331 
Àngo
=
LígthCache
[
P
];

333 if(!
‰eq
) { ;}

336 
c
=((
IRAM
[0x7F]>>4)&7)+1;

337 
öc
=()(
FSëtögs
.
SndR©e
<<15)/(()
‰eq
*21477272/(()0x400000*
c
*45));

340 
duff
=
IRAM
[(((IRAM[0x46+(
P
<<3)]+
PœyIndex
[P])&0xFF)>>1)];

341 if((
IRAM
[0x46+(
P
<<3)]+
PœyIndex
[P])&1)

342 
duff
>>=4;

343 
duff
&=0xF;

344 
duff2
=(
duff
*
ívñ›e
)>>19;

345 
V
=0;V<
Cou¡
*16;V++)

347 if(
vco
>=
öc
)

349 
PœyIndex
[
P
]++;

350 if(
PœyIndex
[
P
]>=
Àngo
)

351 
PœyIndex
[
P
]=0;

352 
vco
-=
öc
;

353 
duff
=
IRAM
[(((IRAM[0x46+(
P
<<3)]+
PœyIndex
[P])&0xFF)>>1)];

354 if((
IRAM
[0x46+(
P
<<3)]+
PœyIndex
[P])&1)

355 
duff
>>=4;

356 
duff
&=0xF;

357 
duff2
=(
duff
*
ívñ›e
)>>19;

359 
Wave
[
V
>>4]+=
duff2
;

360 
vco
+=0x8000;

362 
vcou¡
[
P
]=
vco
;

365 
	}
}

367 
	$M≠≥r19_SèãRe°‹e
(
vîsi⁄
)

369 
	`SyncPRG
();

370 
	`FixNTAR
();

371 
	`FixCRR
();

372 
x
;

373 
x
=0x40;x<0x80;x++)

374 
	`FixCache
(
x
,
IRAM
[x]);

375 
	}
}

377 
	$M19SC
()

379 if(
FSëtögs
.
SndR©e
)

380 
	`M≠≥r19_ESI
();

381 
	}
}

383 
	$M≠≥r19_ESI
()

385 
GameExpSound
.
RCh™ge
=
M19SC
;

386 
	`mem£t
(
vcou¡
,0,(vcount));

387 
	`mem£t
(
PœyIndex
,0,(PlayIndex));

388 
CVBC
=0;

389 
	}
}

391 
	$NSFN106_Inô
()

393 
	`SëWrôeH™dÀr
(0xf800,0xffff,
M≠≥r19_wrôe
);

394 
	`SëWrôeH™dÀr
(0x4800,0x4fff,
M≠≥r19_wrôe
);

395 
	`SëRódH™dÀr
(0x4800,0x4fff,
Namco_Ród4800
);

396 
	`M≠≥r19_ESI
();

397 
	}
}

399 
	gb©ãry
=0;

401 
	$N106_Powî
()

403 
x
;

404 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

405 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r19_wrôe
);

406 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M≠≥r19_wrôe
);

407 if(!
is210
)

409 
	`SëWrôeH™dÀr
(0xc000,0xdfff,
M≠≥r19C0D8_wrôe
);

410 
	`SëRódH™dÀr
(0x4800,0x4fff,
Namco_Ród4800
);

411 
	`SëRódH™dÀr
(0x5000,0x57ff,
Namco_Ród5000
);

412 
	`SëRódH™dÀr
(0x5800,0x5fff,
Namco_Ród5800
);

413 
NTAPage
[0]=NTAPage[1]=NTAPage[2]=NTAPage[3]=0xFF;

414 
	`FixNTAR
();

417 
	`SëRódH™dÀr
(0x6000,0x7FFF,
AWRAM
);

418 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
BWRAM
);

419 
	`FCEU_ChótAddRAM
(8,0x6000,
WRAM
);

421 
g‹fus
=0xFF;

422 
	`SyncPRG
();

423 
	`FixCRR
();

425 if(!
b©ãry
)

427 
	`FCEU_dwmem£t
(
WRAM
,0,8192);

428 
	`FCEU_dwmem£t
(
IRAM
,0,128);

430 
x
=0x40;x<0x80;x++)

431 
	`FixCache
(
x
,
IRAM
[x]);

432 
	}
}

434 
	$M≠≥r19_Inô
(
C¨tInfo
 *
öfo
)

436 
is210
=0;

437 
b©ãry
=
öfo
->battery;

438 
öfo
->
Powî
=
N106_Powî
;

440 
M≠IRQHook
=
NamcoIRQHook
;

441 
GameSèãRe°‹e
=
M≠≥r19_SèãRe°‹e
;

442 
GameExpSound
.
RCh™ge
=
M19SC
;

444 if(
FSëtögs
.
SndR©e
)

445 
	`M≠≥r19_ESI
();

447 
	`AddExSèã
(
WRAM
, 8192, 0, "WRAM");

448 
	`AddExSèã
(
IRAM
, 128, 0, "WRAM");

449 
	`AddExSèã
(
N106_SèãRegs
, ~0, 0, 0);

451 if(
öfo
->
b©ãry
)

453 
öfo
->
SaveGame
[0]=
WRAM
;

454 
öfo
->
SaveGameLí
[0]=8192;

455 
öfo
->
SaveGame
[1]=
IRAM
;

456 
öfo
->
SaveGameLí
[1]=128;

458 
	}
}

460 
	$M≠≥r210_SèãRe°‹e
(
vîsi⁄
)

462 
	`SyncPRG
();

463 
	`FixCRR
();

464 
	}
}

466 
	$M≠≥r210_Inô
(
C¨tInfo
 *
öfo
)

468 
is210
=1;

469 
GameSèãRe°‹e
=
M≠≥r210_SèãRe°‹e
;

470 
öfo
->
Powî
=
N106_Powî
;

471 
	`AddExSèã
(
WRAM
, 8192, 0, "WRAM");

472 
	}
}

	@boards/novel.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gœtch
;

25 
	$DoNovñ
()

27 
	`£çrg32
(0x8000,
œtch
&3);

28 
	`£tchr8
(
œtch
&7);

29 
	}
}

31 
	$DECLFW
(
NovñWrôe
)

33 
œtch
=
A
&0xFF;

34 
	`DoNovñ
();

35 
	}
}

37 
	$NovñRe£t
()

39 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
NovñWrôe
);

40 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

41 
	`£çrg32
(0x8000,0);

42 
	`£tchr8
(0);

43 
	}
}

45 
	$NovñRe°‹e
(
vîsi⁄
)

47 
	`DoNovñ
();

48 
	}
}

50 
	$Novñ_Inô
(
C¨tInfo
 *
öfo
)

52 
	`AddExSèã
(&
œtch
, 1, 0,"L1");

53 
öfo
->
Powî
=
NovñRe£t
;

54 
GameSèãRe°‹e
=
NovñRe°‹e
;

55 
	}
}

	@boards/sachen.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gcmd
;

24 
uöt8
 
	gœtch
[8];

26 
	$S74LS374MSync
(
uöt8
 
múr
)

28 
múr
&3)

30 0:
	`£tmúr‹
(
MI_V
);;

31 1:
	`£tmúr‹
(
MI_H
);;

32 2:
	`£tmúr‹w
(0,1,1,1);;

33 3:
	`£tmúr‹
(
MI_0
);;

35 
	}
}

37 
	$S74LS374NSynco
()

39 
	`£çrg32
(0x8000,
œtch
[0]);

40 
	`£tchr8
(
œtch
[1]|latch[3]|latch[4]);

41 
	`S74LS374MSync
(
œtch
[2]);

42 
	}
}

44 
	$DECLFW
(
S74LS374NWrôe
)

46 
A
&=0x4101;

47 if(
A
==0x4100)

48 
cmd
=
V
&7;

51 
cmd
)

53 2:
œtch
[0]=
V
&1;Üatch[3]=(V&1)<<3;;

54 4:
œtch
[4]=(
V
&1)<<2;;

55 5:
œtch
[0]=
V
&7;;

56 6:
œtch
[1]=
V
&3;;

57 7:
œtch
[2]=
V
>>1;;

59 
	`S74LS374NSynco
();

61 
	}
}

63 
	$DECLFR
(
S74LS374NRód
)

65 
uöt8
 
ªt
;

66 if((
A
&0x4100)==0x4100)

67 
ªt
=(
X
.
DB
&0xC0)|((~
cmd
)&0x3F);

69 
ªt
=
X
.
DB
;

70  
ªt
;

71 
	}
}

73 
	$S74LS374NPowî
()

75 
œtch
[0]=latch[1]=latch[2]=latch[3]=latch[4]=0;

76 
	`S74LS374NSynco
();

77 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

78 
	`SëWrôeH™dÀr
(0x4100,0x7FFF,
S74LS374NWrôe
);

79 
	`SëRódH™dÀr
(0x4100,0x5fff,
S74LS374NRód
);

80 
	}
}

82 
	$S74LS374NRe°‹e
(
vîsi⁄
)

84 
	`S74LS374NSynco
();

85 
	}
}

87 
	$S74LS374N_Inô
(
C¨tInfo
 *
öfo
)

89 
öfo
->
Powî
=
S74LS374NPowî
;

90 
GameSèãRe°‹e
=
S74LS374NRe°‹e
;

91 
	`AddExSèã
(
œtch
, 5, 0, "LATC");

92 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

93 
	}
}

95 
	$S74LS374NASynco
()

97 
	`£çrg32
(0x8000,
œtch
[0]);

98 
	`£tchr8
(
œtch
[1]);

99 
	`S74LS374MSync
(
œtch
[2]);

100 
	}
}

102 
	$DECLFW
(
S74LS374NAWrôe
)

104 
A
&=0x4101;

105 if(
A
==0x4100)

106 
cmd
=
V
&7;

109 
cmd
)

111 0:
œtch
[0]=0;latch[1]=3;;

112 2:
œtch
[3]=(
V
&1)<<3;;

113 4:
œtch
[1]=÷©ch[1]&6)|(
V
&3);;

114 5:
œtch
[0]=
V
&1;;

115 6:
œtch
[1]=÷©ch[1]&1)|œtch[3]|((
V
&3)<<1);;

116 7:
œtch
[2]=
V
&1;;

118 
	`S74LS374NASynco
();

120 
	}
}

122 
	$S74LS374NAPowî
()

124 
œtch
[0]=latch[2]=latch[3]=latch[4]=0;

125 
œtch
[1]=3;

126 
	`S74LS374NASynco
();

127 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

128 
	`SëWrôeH™dÀr
(0x4100,0x7FFF,
S74LS374NAWrôe
);

129 
	}
}

131 
	$S74LS374NA_Inô
(
C¨tInfo
 *
öfo
)

133 
öfo
->
Powî
=
S74LS374NAPowî
;

134 
GameSèãRe°‹e
=
S74LS374NRe°‹e
;

135 
	`AddExSèã
(
œtch
, 5, 0, "LATC");

136 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

137 
	}
}

139 
	gty≥
;

140 
	$S8259Synco
()

142 
x
;

143 
	`£çrg32
(0x8000,
œtch
[5]&7);

145 if(!
UNIFchºama
)

147 
x
=0;x<4;x++)

149 
b™k
;

150 if(
œtch
[7]&1)

151 
b™k
=(
œtch
[0]&0x7)|((latch[4]&7)<<3);

153 
b™k
=(
œtch
[
x
]&0x7)|((latch[4]&7)<<3);

154 
ty≥
)

156 00: 
b™k
=(b™k<<1)|(
x
&1); 
	`£tchr2
(0x800*x,bank); ;

157 01: 
	`£tchr2
(0x800*
x
,
b™k
); ;

158 02: 
b™k
=(b™k<<2)|(
x
&3); 
	`£tchr2
(0x800*x,bank); ;

159 03: 
b™k
=
œtch
[
x
]&7;

160 
x
&3)

162 01: 
b™k
|=(
œtch
[4]&1)<<4;;

163 02: 
b™k
|=(
œtch
[4]&2)<<3;;

164 03: 
b™k
|=((
œtch
[4]&4)<<2)|((latch[6]&1)<<3);;

166 
	`£tchr1
(0x400*
x
,
b™k
);

167 
	`£tchr4
(0x1000,~0);

172 if(!(
œtch
[7]&1))

173 
	`S74LS374MSync
(
œtch
[7]>>1);

175 
	`£tmúr‹
(
MI_V
);

176 
	}
}

178 
	$DECLFW
(
S8259Wrôe
)

180 
A
&=0x4101;

181 if(
A
==0x4100)

182 
cmd
=
V
;

185 
œtch
[
cmd
&7]=
V
;

186 
	`S8259Synco
();

188 
	}
}

190 
	$S8259Re£t
()

192 
x
;

193 
cmd
=0;

195 
x
=0;x<8;x++Ë
œtch
[x]=0;

196 
	`£tchr8
(0);

198 
	`S8259Synco
();

199 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

200 
	`SëWrôeH™dÀr
(0x4100,0x7FFF,
S8259Wrôe
);

201 
	}
}

203 
	$S8259Re°‹e
(
vîsi⁄
)

205 
	`S8259Synco
();

206 
	}
}

208 
	$S8259A_Inô
(
C¨tInfo
 *
öfo
)

210 
öfo
->
Powî
=
S8259Re£t
;

211 
GameSèãRe°‹e
=
S8259Re°‹e
;

212 
	`AddExSèã
(
œtch
, 8, 0, "LATC");

213 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

214 
ty≥
=0;

215 
	}
}

217 
	$S8259B_Inô
(
C¨tInfo
 *
öfo
)

219 
öfo
->
Powî
=
S8259Re£t
;

220 
GameSèãRe°‹e
=
S8259Re°‹e
;

221 
	`AddExSèã
(
œtch
, 8, 0, "LATC");

222 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

223 
ty≥
=1;

224 
	}
}

226 
	$S8259C_Inô
(
C¨tInfo
 *
öfo
)

228 
öfo
->
Powî
=
S8259Re£t
;

229 
GameSèãRe°‹e
=
S8259Re°‹e
;

230 
	`AddExSèã
(
œtch
, 8, 0, "LATC");

231 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

232 
ty≥
=2;

233 
	}
}

235 
	$S8259D_Inô
(
C¨tInfo
 *
öfo
)

237 
öfo
->
Powî
=
S8259Re£t
;

238 
GameSèãRe°‹e
=
S8259Re°‹e
;

239 
	`AddExSèã
(
œtch
, 8, 0, "LATC");

240 
	`AddExSèã
(&
cmd
, 1, 0, "CMD");

241 
ty≥
=3;

242 
	}
}

244 (*
WSync
)();

246 
	$DECLFW
(
SAWrôe
)

248 if(
A
&0x100)

250 
œtch
[0]=
V
;

251 
	`WSync
();

253 
	}
}

255 
	$SAPowî
()

257 
œtch
[0]=0;

258 
	`WSync
();

259 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

260 
	`SëWrôeH™dÀr
(0x4100,0x5FFF,
SAWrôe
);

261 
	}
}

263 
	$SARe°‹e
(
vîsi⁄
)

265 
	`WSync
();

266 
	}
}

268 
	$DECLFW
(
SADWrôe
)

270 
œtch
[0]=
V
;

271 
	`WSync
();

272 
	}
}

274 
	$SADPowî
()

276 
œtch
[0]=0;

277 
	`WSync
();

278 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

279 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
SADWrôe
);

280 
	}
}

282 
	$SA0161MSynco
()

284 
	`£çrg32
(0x8000,(
œtch
[0]>>3)&1);

285 
	`£tchr8
(
œtch
[0]&7);

286 
	}
}

288 
	$SA72007Synco
()

290 
	`£çrg32
(0x8000,0);

291 
	`£tchr8
(
œtch
[0]>>7);

292 
	}
}

294 
	$SA72008Synco
()

296 
	`£çrg32
(0x8000,(
œtch
[0]>>2)&1);

297 
	`£tchr8
(
œtch
[0]&3);

298 
	}
}

300 
	$SA0161M_Inô
(
C¨tInfo
 *
öfo
)

302 
WSync
=
SA0161MSynco
;

303 
GameSèãRe°‹e
=
SARe°‹e
;

304 
öfo
->
Powî
=
SAPowî
;

305 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

306 
	}
}

308 
	$SA72007_Inô
(
C¨tInfo
 *
öfo
)

310 
WSync
=
SA72007Synco
;

311 
GameSèãRe°‹e
=
SARe°‹e
;

312 
öfo
->
Powî
=
SAPowî
;

313 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

314 
	}
}

316 
	$SA72008_Inô
(
C¨tInfo
 *
öfo
)

318 
WSync
=
SA72008Synco
;

319 
GameSèãRe°‹e
=
SARe°‹e
;

320 
öfo
->
Powî
=
SAPowî
;

321 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

322 
	}
}

324 
	$SA0036_Inô
(
C¨tInfo
 *
öfo
)

326 
WSync
=
SA72007Synco
;

327 
GameSèãRe°‹e
=
SARe°‹e
;

328 
öfo
->
Powî
=
SADPowî
;

329 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

330 
	}
}

332 
	$SA0037_Inô
(
C¨tInfo
 *
öfo
)

334 
WSync
=
SA0161MSynco
;

335 
GameSèãRe°‹e
=
SARe°‹e
;

336 
öfo
->
Powî
=
SADPowî
;

337 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

338 
	}
}

340 
	$TCU01Synco
()

342 
	`£çrg32
(0x8000,(
œtch
[0]>>2)&1);

343 
	`£tchr8
((
œtch
[0]>>3)&0xF);

344 
	}
}

346 
	$DECLFW
(
TCWrôe
)

348 if((
A
&0x103)==0x102)

350 
œtch
[0]=
V
;

351 
	`TCU01Synco
();

353 
	}
}

355 
	$TCU01Re£t
()

357 
œtch
[0]=0;

358 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

359 
	`SëWrôeH™dÀr
(0x4100,0xFFFF,
TCWrôe
);

360 
	`TCU01Synco
();

361 
	}
}

363 
	$TCU01Re°‹e
(
vîsi⁄
)

365 
	`TCU01Synco
();

366 
	}
}

368 
	$TCU01_Inô
(
C¨tInfo
 *
öfo
)

370 
GameSèãRe°‹e
=
TCU01Re°‹e
;

371 
öfo
->
Powî
=
TCU01Re£t
;

372 
	`AddExSèã
(&
œtch
[0], 1, 0, "LATC");

373 
	}
}

375 
	$DECLFR
(
TCA01Ród
)

377 
uöt8
 
ªt
;

378 if((
A
&0x4100)==0x4100)

379 
ªt
=(
X
.
DB
&0xC0)|((~
A
)&0x3F);

381 
ªt
=
X
.
DB
;

382  
ªt
;

383 
	}
}

385 
	$TCA01Re£t
()

387 
	`£çrg16
(0x8000,0);

388 
	`£çrg16
(0xC000,1);

389 
	`£tchr8
(0);

390 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

391 
	`SëRódH™dÀr
(0x4100,0x5FFF,
TCA01Ród
);

392 
	}
}

394 
	$TCA01_Inô
(
C¨tInfo
 *
öfo
)

396 
öfo
->
Powî
=
TCA01Re£t
;

397 
	}
}

	@boards/sheroes.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

25 
uöt8
 
	gãkkî
;

27 
	$MSHCW
(
uöt32
 
A
, 
uöt8
 
V
)

29 if(
EXPREGS
[0]&0x40)

30 
	`£tchr8r
(0x10,0);

33 if(
A
<0x800)

34 
	`£tchr1
(
A
,
V
|((
EXPREGS
[0]&8)<<5));

35 if(
A
<0x1000)

36 
	`£tchr1
(
A
,
V
|((
EXPREGS
[0]&4)<<6));

37 if(
A
<0x1800)

38 
	`£tchr1
(
A
,
V
|((
EXPREGS
[0]&1)<<8));

40 
	`£tchr1
(
A
,
V
|((
EXPREGS
[0]&2)<<7));

42 
	}
}

44 
	$DECLFW
(
MSHWrôe
)

46 
EXPREGS
[0]=
V
;

47 
	`FixMMC3CHR
(
MMC3_cmd
);

48 
	}
}

50 
	$DECLFR
(
MSHRód
)

52 (
ãkkî
);

53 
	}
}

55 
	$MSHRe£t
()

57 
	`MMC3RegRe£t
();

58 
ãkkî
^=0xFF;

59 
	}
}

61 
	$MSHPowî
()

63 
ãkkî
=0x00;

64 
	`GíMMC3Powî
();

65 
	`SëWrôeH™dÀr
(0x4100,0x4100,
MSHWrôe
);

66 
	`SëRódH™dÀr
(0x4100,0x4100,
MSHRód
);

67 
	}
}

69 
	$MSHClo£
()

71 if(
CHRRAM
)

72 
	`FCEU_g‰ì
(
CHRRAM
);

73 
CHRRAM
=
NULL
;

74 
	}
}

76 
	$UNLSHî€s_Inô
(
C¨tInfo
 *
öfo
)

78 
	`GíMMC3_Inô
(
öfo
, 256, 512, 0, 0);

79 
cwøp
=
MSHCW
;

80 
öfo
->
Powî
=
MSHPowî
;

81 
öfo
->
Re£t
=
MSHRe£t
;

82 
öfo
->
Clo£
=
MSHClo£
;

83 
CHRRAM
 = (
uöt8
*)
	`FCEU_gmÆloc
(8192);

84 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 8192, 1);

85 
	`AddExSèã
(
EXPREGS
, 4, 0, "EXPR");

86 
	}
}

	@boards/sl1632.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gchrcmd
[8], 
	g¥g0
, 
	g¥g1
, 
	gbrk
, 
	gmúr
;

24 
uöt8
 
	gªg
[8], 
	gcmd
;

25 
uöt8
 
	gIRQCou¡
,
	gIRQL©ch
,
	gIRQa
;

26 
uöt8
 
	gIRQRñﬂd
;

27 
SFORMAT
 
	gSèãRegs
[]=

29 {
ªg
, 8, "MMCREG"},

30 {&
cmd
, 1, "MMCCMD"},

31 {
chrcmd
, 8, "CHRCMD"},

32 {&
¥g0
, 1, "PRG0"},

33 {&
¥g1
, 1, "PRG1"},

34 {&
brk
, 1, "BRK"},

35 {&
múr
, 1, "MIRR"},

36 {&
IRQRñﬂd
, 1, "IRQR"},

37 {&
IRQCou¡
, 1, "IRQC"},

38 {&
IRQL©ch
, 1, "IRQL"},

39 {&
IRQa
, 1, "IRQA"},

43 
	$Sync
()

52 
	`£çrg8
(0x8000,
¥g0
);

53 
	`£çrg8
(0xA000,
¥g1
);

55 
i
;

56 
i
=0; i<8; i++)

57 
	`£tchr1
(
i
<<10,
chrcmd
[i]);

58 
	`£tmúr‹
(
múr
^1);

59 
	}
}

61 
	$Sync2
()

63 
	`£çrg8
(0x8000,
ªg
[6]&0x3F);

64 
	`£çrg8
(0xA000,
ªg
[7]&0x3F);

65 
	`£tchr2
(0x0000,
ªg
[0]>>1);

66 
	`£tchr2
(0x8000,
ªg
[1]>>1);

67 
	`£tchr1
(0x1000,
ªg
[2]);

68 
	`£tchr1
(0x1400,
ªg
[3]);

69 
	`£tchr1
(0x1800,
ªg
[4]);

70 
	`£tchr1
(0x1C00,
ªg
[5]);

71 
	`£tmúr‹
(
múr
^1);

72 
	}
}

74 
	$DECLFW
(
UNLSL1632CMDWrôe
)

76 
	`FCEU_¥ötf
("b†%04x %02x\n",
A
,
V
);

78 if((
A
&0xA131)==0xA131Ë
brk
=
V
;

79 if(
brk
==2)

81 
A
&0xE001)

83 0x8000: 
cmd
=
V
&7; ;

84 0x8001: 
ªg
[
cmd
]=
V
; 
	`Sync
(); ;

85 0xA000: 
múr
=
V
&1; ;

86 0xC000: 
IRQL©ch
=
V
; ;

87 0xC001: 
IRQRñﬂd
=1; ;

88 0xE000: 
	`X6502_IRQEnd
(
FCEU_IQEXT
); 
IRQa
=0; ;

89 0xE001: 
IRQa
=1; ;

91 
	`Sync2
();

95 
A
&0xF003)

97 0x8000: 
¥g0
=
V
; ;

98 0xA000: 
¥g1
=
V
; ;

99 0x9000: 
múr
=
V
&1; ;

100 0xB000: 
chrcmd
[0]=(chrcmd[0]&0xF0)|(
V
&0x0F); ;

101 0xB001: 
chrcmd
[0]=(chrcmd[0]&0x0F)|(
V
<<4); ;

102 0xB002: 
chrcmd
[1]=(chrcmd[1]&0xF0)|(
V
&0x0F); ;

103 0xB003: 
chrcmd
[1]=(chrcmd[1]&0x0F)|(
V
<<4); ;

104 0xC000: 
chrcmd
[2]=(chrcmd[2]&0xF0)|(
V
&0x0F); ;

105 0xC001: 
chrcmd
[2]=(chrcmd[2]&0x0F)|(
V
<<4); ;

106 0xC002: 
chrcmd
[3]=(chrcmd[3]&0xF0)|(
V
&0x0F); ;

107 0xC003: 
chrcmd
[3]=(chrcmd[3]&0x0F)|(
V
<<4); ;

108 0xD000: 
chrcmd
[4]=(chrcmd[4]&0xF0)|(
V
&0x0F); ;

109 0xD001: 
chrcmd
[4]=(chrcmd[4]&0x0F)|(
V
<<4); ;

110 0xD002: 
chrcmd
[5]=(chrcmd[5]&0xF0)|(
V
&0x0F); ;

111 0xD003: 
chrcmd
[5]=(chrcmd[5]&0x0F)|(
V
<<4); ;

112 0xE000: 
chrcmd
[6]=(chrcmd[6]&0xF0)|(
V
&0x0F); ;

113 0xE001: 
chrcmd
[6]=(chrcmd[6]&0x0F)|(
V
<<4); ;

114 0xE002: 
chrcmd
[7]=(chrcmd[7]&0xF0)|(
V
&0x0F); ;

115 0xE003: 
chrcmd
[7]=(chrcmd[7]&0x0F)|(
V
<<4); ;

117 
	`Sync
();

119 
	}
}

121 
	$UNLSL1632IRQHook
()

123 
cou¡
 = 
IRQCou¡
;

124 if((
sˇ∆öe
==128)&&
IRQa
)
	`X6502_IRQBegö
(
FCEU_IQEXT
);

125 if(!
cou¡
 || 
IRQRñﬂd
)

127 
IRQCou¡
 = 
IRQL©ch
;

128 
IRQRñﬂd
 = 0;

131 
IRQCou¡
--;

132 if(!
IRQCou¡
)

134 if(
IRQa
)

136 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

139 
	}
}

141 
	$SèãRe°‹e
(
vîsi⁄
)

143 
	`Sync
();

144 
	}
}

146 
	$UNLSL1632Powî
()

148 
	`£çrg16
(0xC000,~0);

149 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

150 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
UNLSL1632CMDWrôe
);

151 
	}
}

153 
	$UNLSL1632_Inô
(
C¨tInfo
 *
öfo
)

155 
öfo
->
Powî
=
UNLSL1632Powî
;

156 
GameHBIRQHook2
=
UNLSL1632IRQHook
;

157 
GameSèãRe°‹e
=
SèãRe°‹e
;

158 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

159 
	}
}

	@boards/sonic5.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

26 
	$UNLS⁄icPW
(
uöt32
 
A
, 
uöt8
 
V
)

28 if(
EXPREGS
[0]&0x80)

30 
uöt8
 
b™k
=
EXPREGS
[0]&0x1F;

31 if(
EXPREGS
[0]&0x20)

32 
	`£çrg32
(0x8000,
b™k
>>2);

35 
	`£çrg16
(0x8000,
b™k
);

36 
	`£çrg16
(0xC000,
b™k
);

40 
	`£çrg8
(
A
,
V
&0x3F);

41 
	}
}

53 
	$DECLFW
(
UNLS⁄icWrôeLo
)

55 
EXPREGS
[0]=
V
;

56 
	`FixMMC3PRG
(
MMC3_cmd
);

57 
	}
}

59 
	$UNLS⁄icPowî
()

61 
EXPREGS
[0]=EXPREGS[1]=EXPREGS[2]=0;

62 
	`GíMMC3Powî
();

63 
	`SëWrôeH™dÀr
(0x5000,0x5FFF,
UNLS⁄icWrôeLo
);

65 
	}
}

67 
	$UNLS⁄ic_Inô
(
C¨tInfo
 *
öfo
)

69 
	`GíMMC3_Inô
(
öfo
, 256, 256, 0, 0);

70 
pwøp
=
UNLS⁄icPW
;

71 
öfo
->
Powî
=
UNLS⁄icPowî
;

72 
	`AddExSèã
(
EXPREGS
, 3, 0, "EXPR");

73 
	}
}

	@boards/subor.c

1 
	~"m≠öc.h
"

3 
uöt8
 
	gmode
;

4 
uöt8
 
	gDRegs
[4];

6 
SFORMAT
 
	gSèãRegs
[]=

8 {
DRegs
, 4, "DREG"},

12 
	$Sync
()

14 
ba£
, 
b™k
;

15 
ba£
 = ((
DRegs
[0]^DRegs[1])&0x10)<<1;

16 
b™k
 = (
DRegs
[2]^DRegs[3])&0x1f;

18 if(
DRegs
[1]&0x08)

20 
b™k
 &= 0xfe;

21 if(
mode
==0)

23 
	`£çrg16
(0x8000,
ba£
+
b™k
+1);

24 
	`£çrg16
(0xC000,
ba£
+
b™k
+0);

28 
	`£çrg16
(0x8000,
ba£
+
b™k
+0);

29 
	`£çrg16
(0xC000,
ba£
+
b™k
+1);

34 if(
DRegs
[1]&0x04)

36 
	`£çrg16
(0x8000,0x1f);

37 
	`£çrg16
(0xC000,
ba£
+
b™k
);

41 
	`£çrg16
(0x8000,
ba£
+
b™k
);

42 if(
mode
==0)

43 
	`£çrg16
(0xC000,0x20);

45 
	`£çrg16
(0xC000,0x07);

48 
	}
}

50 
	$DECLFW
(
M≠≥r167_wrôe
)

52 
DRegs
[(
A
>>13)&0x03]=
V
;

53 
	`Sync
();

54 
	}
}

56 
	$SèãRe°‹e
(
vîsi⁄
)

58 
	`Sync
();

59 
	}
}

61 
	$M≠≥r166_öô
()

63 
mode
=1;

64 
DRegs
[0]=DRegs[1]=DRegs[2]=DRegs[3]=0;

65 
	`Sync
();

66 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r167_wrôe
);

67 
GameSèãRe°‹e
=
SèãRe°‹e
;

68 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

69 
	}
}

71 
	$M≠≥r167_öô
()

73 
mode
=0;

74 
DRegs
[0]=DRegs[1]=DRegs[2]=DRegs[3]=0;

75 
	`Sync
();

76 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r167_wrôe
);

77 
GameSèãRe°‹e
=
SèãRe°‹e
;

78 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

79 
	}
}

	@boards/super24.c

21 
	~"m≠öc.h
"

22 
	~"mmc3.h
"

25 
	gmasko8
[8]={63,31,15,1,3,0,0,0};

27 
	$Su≥r24PW
(
uöt32
 
A
, 
uöt8
 
V
)

29 
uöt32
 
NV
=
V
&
masko8
[
EXPREGS
[0]&7];

30 
NV
|=(
EXPREGS
[1]<<1);

31 
	`£çrg8r
((
NV
>>6)&0xF,
A
,NV);

32 
	}
}

34 
	$Su≥r24CW
(
uöt32
 
A
, 
uöt8
 
V
)

36 if(
EXPREGS
[0]&0x20)

37 
	`£tchr1r
(0x10,
A
,
V
);

40 
uöt32
 
NV
=
V
|(
EXPREGS
[2]<<3);

41 
	`£tchr1r
((
NV
>>9)&0xF,
A
,NV);

43 
	}
}

45 
	$DECLFW
(
Su≥r24Wrôe
)

47 
A
)

49 0x5FF0: 
EXPREGS
[0]=
V
;

50 
	`FixMMC3PRG
(
MMC3_cmd
);

51 
	`FixMMC3CHR
(
MMC3_cmd
);

53 0x5FF1: 
EXPREGS
[1]=
V
;

54 
	`FixMMC3PRG
(
MMC3_cmd
);

56 0x5FF2: 
EXPREGS
[2]=
V
;

57 
	`FixMMC3CHR
(
MMC3_cmd
);

60 
	}
}

62 
	$Su≥r24Powî
()

64 
EXPREGS
[0]=0x24;

65 
EXPREGS
[1]=159;

66 
EXPREGS
[2]=0;

67 
	`GíMMC3Powî
();

68 
	`SëWrôeH™dÀr
(0x5000,0x7FFF,
Su≥r24Wrôe
);

69 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

70 
	}
}

72 
	$Su≥r24Re£t
()

74 
EXPREGS
[0]=0x24;

75 
EXPREGS
[1]=159;

76 
EXPREGS
[2]=0;

77 
	`MMC3RegRe£t
();

78 
	}
}

80 
	$Su≥r24Clo£
()

82 if(
CHRRAM
)

83 
	`FCEU_g‰ì
(
CHRRAM
);

84 
CHRRAM
 = 
NULL
;

85 
	}
}

87 
	$Su≥r24_Inô
(
C¨tInfo
 *
öfo
)

89 
	`GíMMC3_Inô
(
öfo
, 128, 256, 0, 0);

90 
öfo
->
Powî
=
Su≥r24Powî
;

91 
öfo
->
Re£t
=
Su≥r24Re£t
;

92 
öfo
->
Clo£
=
Su≥r24Clo£
;

93 
cwøp
=
Su≥r24CW
;

94 
pwøp
=
Su≥r24PW
;

95 
CHRRAM
=(
uöt8
*)
	`FCEU_gmÆloc
(8192);

96 
	`SëupC¨tCHRM≠pög
(0x10, 
CHRRAM
, 8192, 1);

97 
	`AddExSèã
(
CHRRAM
, 8192, 0, "CHRR");

98 
	`AddExSèã
(
EXPREGS
, 3, 0, "BIG2");

99 
	}
}

	@boards/supervision.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gcmd0
, 
	gcmd1
;

25 
	$DoSu≥r
()

27 
	`£çrg8r
((
cmd0
&0xC)>>2,0x6000,((cmd0&0x3)<<4)|0xF);

28 if(
cmd0
&0x10)

30 
	`£çrg16r
((
cmd0
&0xC)>>2,0x8000,((cmd0&0x3)<<3)|(
cmd1
&7));

31 
	`£çrg16r
((
cmd0
&0xC)>>2,0xc000,((cmd0&0x3)<<3)|7);

34 
	`£çrg32r
(4,0x8000,0);

35 
	`£tmúr‹
(((
cmd0
&0x20)>>5)^1);

36 
	}
}

38 
	$DECLFW
(
Su≥rWrôe
)

40 if(!(
cmd0
&0x10))

42 
cmd0
=
V
;

43 
	`DoSu≥r
();

45 
	}
}

47 
	$DECLFW
(
Su≥rHi
)

49 
cmd1
=
V
;

50 
	`DoSu≥r
();

51 
	}
}

53 
	$Su≥rRe£t
()

55 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
Su≥rWrôe
);

56 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
Su≥rHi
);

57 
	`SëRódH™dÀr
(0x6000,0xFFFF,
C¨tBR
);

58 
cmd0
=
cmd1
=0;

59 
	`£çrg32r
(4,0x8000,0);

60 
	`£tchr8
(0);

61 
	}
}

63 
	$Su≥rRe°‹e
(
vîsi⁄
)

65 
	`DoSu≥r
();

66 
	}
}

68 
	$Su≥rvisi⁄16_Inô
(
C¨tInfo
 *
öfo
)

70 
	`AddExSèã
(&
cmd0
, 1, 0,"L1");

71 
	`AddExSèã
(&
cmd1
, 1, 0,"L2");

72 
öfo
->
Powî
=
Su≥rRe£t
;

73 
GameSèãRe°‹e
=
Su≥rRe°‹e
;

74 
	}
}

	@boards/t-262.c

21 
	~"m≠öc.h
"

23 
uöt16
 
	gaddºeg
;

24 
uöt8
 
	gd©¨eg
;

25 
uöt8
 
	gbusy
;

26 
SFORMAT
 
	gSèãRegs
[]=

28 {&
addºeg
, 2, "ADDRREG"},

29 {&
d©¨eg
, 1, "DATAREG"},

30 {&
busy
, 1, "BUSY"},

34 
	$Sync
()

36 
	`£çrg16
(0x8000,(
d©¨eg
&7)|((
addºeg
&0x60)>>2)|((addrreg&0x100)>>3));

37 
	`£çrg16
(0xC000,7|((
addºeg
&0x60)>>2)|((addrreg&0x100)>>3));

38 
	`£tmúr‹
(((
addºeg
&2)>>1)^1);

39 
	}
}

41 
	$DECLFW
(
BMCT262Wrôe
)

43 if(
busy
||(
A
==0x8000))

44 
d©¨eg
=
V
;

47 
addºeg
=
A
;

48 
busy
=1;

50 
	`Sync
();

51 
	}
}

53 
	$BMCT262Powî
()

55 
	`£tchr8
(0);

56 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
BMCT262Wrôe
);

57 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

58 
busy
=0;

59 
addºeg
=0;

60 
d©¨eg
=0;

61 
	`Sync
();

62 
	}
}

64 
	$BMCT262Re£t
()

66 
busy
=0;

67 
addºeg
=0;

68 
d©¨eg
=0;

69 
	`Sync
();

70 
	}
}

72 
	$BMCT262Re°‹e
(
vîsi⁄
)

74 
	`Sync
();

75 
	}
}

77 
	$BMCT262_Inô
(
C¨tInfo
 *
öfo
)

79 
öfo
->
Powî
=
BMCT262Powî
;

80 
öfo
->
Re£t
=
BMCT262Re£t
;

81 
GameSèãRe°‹e
=
BMCT262Re°‹e
;

82 
	`AddExSèã
(&
SèãRegs
, ~0, 0, 0);

83 
	}
}

	@boards/tengen.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gcmd
,
	gmú
,
	grmode
,
	gIRQmode
;

24 
uöt8
 
	gDRegs
[11];

25 
uöt8
 
	gIRQCou¡
,
	gIRQa
,
	gIRQL©ch
;

27 
SFORMAT
 
	gRambo_SèãRegs
[]={

28 {&
cmd
, 1, "CMD"},

29 {&
mú
, 1, "MIR"},

30 {&
rmode
, 1, "RMOD"},

31 {&
IRQmode
, 1, "IRQM"},

32 {&
IRQCou¡
, 1, "IRQC"},

33 {&
IRQa
, 1, "IRQA"},

34 {&
IRQL©ch
, 1, "IRQL"},

35 {
DRegs
, 11, "DREG"},

39 
FP_FASTAPASS
(2Ë(*
	g£tchr1wøp
)(
	gA
, 
	gV
);

40 
	gnomúr‹
;

42 
	$FP_FASTAPASS
(1Ë
	$RAMBO1_IRQHook
(
a
)

44 
smÆlcou¡
;

45 if(!
IRQmode
) ;

47 
smÆlcou¡
+=
a
;

48 
smÆlcou¡
>=4)

50 
smÆlcou¡
-=4;

51 
IRQCou¡
--;

52 if(
IRQCou¡
==0xFF)

53 if(
IRQa
Ë
	`X6502_IRQBegö
(
FCEU_IQEXT
);

55 
	}
}

57 
	$RAMBO1_hb
()

59 if(
IRQmode
) ;

60 if(
sˇ∆öe
==240) ;

61 
rmode
=0;

62 
IRQCou¡
--;

63 if(
IRQCou¡
==0xFF)

65 if(
IRQa
)

67 
rmode
 = 1;

68 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

71 
	}
}

73 
	$Synco
()

75 
x
;

77 if(
cmd
&0x20)

79 
	`£tchr1wøp
(0x0000,
DRegs
[0]);

80 
	`£tchr1wøp
(0x0800,
DRegs
[1]);

81 
	`£tchr1wøp
(0x0400,
DRegs
[8]);

82 
	`£tchr1wøp
(0x0c00,
DRegs
[9]);

86 
	`£tchr1wøp
(0x0000,(
DRegs
[0]&0xFE));

87 
	`£tchr1wøp
(0x0400,(
DRegs
[0]&0xFE)|1);

88 
	`£tchr1wøp
(0x0800,(
DRegs
[1]&0xFE));

89 
	`£tchr1wøp
(0x0C00,(
DRegs
[1]&0xFE)|1);

92 
x
=0;x<4;x++)

93 
	`£tchr1wøp
(0x1000+
x
*0x400,
DRegs
[2+x]);

95 
	`£çrg8
(0x8000,
DRegs
[6]);

96 
	`£çrg8
(0xA000,
DRegs
[7]);

98 
	`£çrg8
(0xC000,
DRegs
[10]);

99 
	}
}

102 
	$DECLFW
(
RAMBO1_wrôe
)

104 
A
&0xF001)

106 0xa000: 
mú
=
V
&1;

107 if(!
nomúr‹
)

108 
	`£tmúr‹
(
mú
^1);

110 0x8000: 
cmd
 = 
V
;

112 0x8001: if((
cmd
&0xF)<10)

113 
DRegs
[
cmd
&0xF]=
V
;

114 if((
cmd
&0xF)==0xF)

115 
DRegs
[10]=
V
;

116 
	`Synco
();

118 0xc000: 
IRQL©ch
=
V
;

119 if(
rmode
==1)

120 
IRQCou¡
=
IRQL©ch
;

122 0xc001: 
rmode
=1;

123 
IRQCou¡
=
IRQL©ch
;

124 
IRQmode
=
V
&1;

126 0xE000: 
IRQa
=0;

127 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

128 if(
rmode
==1)

129 
IRQCou¡
=
IRQL©ch
;

131 0xE001: 
IRQa
=1;

132 if(
rmode
==1)

133 
IRQCou¡
=
IRQL©ch
;

136 
	}
}

138 
	$RAMBO1_Re°‹e
(
vîsi⁄
)

140 
	`Synco
();

141 if(!
nomúr‹
)

142 
	`£tmúr‹
(
mú
^1);

143 
	}
}

145 
	$RAMBO1_öô
()

147 
x
;

148 
x
=0;x<11;x++)

149 
DRegs
[
x
]=~0;

150 
cmd
=
mú
=0;

151 if(!
nomúr‹
)

152 
	`£tmúr‹
(1);

153 
	`Synco
();

154 
GameHBIRQHook
=
RAMBO1_hb
;

155 
M≠IRQHook
=
RAMBO1_IRQHook
;

156 
GameSèãRe°‹e
=
RAMBO1_Re°‹e
;

157 
	`SëWrôeH™dÀr
(0x8000,0xffff,
RAMBO1_wrôe
);

158 
	`AddExSèã
(
Rambo_SèãRegs
, ~0, 0, 0);

159 
	}
}

161 
	$FP_FASTAPASS
(2Ë
	$CHRWøp
(
A
, 
V
)

163 
	`£tchr1
(
A
,
V
);

164 
	}
}

166 
	$M≠≥r64_öô
()

168 
£tchr1wøp
=
CHRWøp
;

169 
nomúr‹
=0;

170 
	`RAMBO1_öô
();

171 
	}
}

173 
	gMúCache
[8];

174 
	gPPUCHRBus
;

176 
	$FP_FASTAPASS
(2Ë
	$MúWøp
(
A
, 
V
)

178 
MúCache
[
A
>>10]=(
V
>>7)&1;

179 if(
PPUCHRBus
==(
A
>>10))

180 
	`£tmúr‹
(
MI_0
+((
V
>>7)&1));

181 
	`£tchr1
(
A
,
V
);

182 
	}
}

184 
	$FP_FASTAPASS
(1Ë
	$Múr‹Fór
(
uöt32
 
A
)

186 
A
&=0x1FFF;

187 
A
>>=10;

188 
PPUCHRBus
=
A
;

189 
	`£tmúr‹
(
MI_0
+
MúCache
[
A
]);

190 
	}
}

192 
	$M≠≥r158_öô
()

194 
£tchr1wøp
=
MúWøp
;

195 
PPU_hook
=
Múr‹Fór
;

196 
nomúr‹
=1;

197 
	`RAMBO1_öô
();

198 
	}
}

	@cart.c

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

25 #ifde‡
GP2X


26 
	~<uni°d.h
>

29 
	~"ty≥s.h
"

30 
	~"f˚.h
"

31 
	~"µu.h
"

32 
	~"µu098.h
"

34 
	~"ˇπ.h
"

35 
	~"mem‹y.h
"

36 
	~"x6502.h
"

38 
	~"gíîÆ.h
"

40 
	~"svga.h
"

41 
	~"fûe.h
"

49 
uöt8
 *
	gPage
[32],*
	gVPage
[8];

50 
uöt8
 **
	gVPageR
=
VPage
;

51 
uöt8
 *
	gVPageG
[8];

52 
uöt8
 *
	gMMC5SPRVPage
[8];

53 
uöt8
 *
	gMMC5BGVPage
[8];

55 
uöt8
 
	gPRGIsRAM
[32];

58 
	gCHRøm
[32];

59 
	gPRGøm
[32];

61 
uöt8
 *
	gPRG±r
[32];

62 
uöt8
 *
	gCHR±r
[32];

64 
uöt32
 
	gPRGsize
[32];

65 
uöt32
 
	gCHRsize
[32];

67 
uöt32
 
	gPRGmask2
[32];

68 
uöt32
 
	gPRGmask4
[32];

69 
uöt32
 
	gPRGmask8
[32];

70 
uöt32
 
	gPRGmask16
[32];

71 
uöt32
 
	gPRGmask32
[32];

73 
uöt32
 
	gCHRmask1
[32];

74 
uöt32
 
	gCHRmask2
[32];

75 
uöt32
 
	gCHRmask4
[32];

76 
uöt32
 
	gCHRmask8
[32];

78 
	ggíõ°age
=0;

80 
	gmodc⁄
;

82 
uöt8
 
	ggíõvÆ
[3];

83 
uöt8
 
	ggíõch
[3];

85 
uöt32
 
	ggíõaddr
[3];

87 
INLINE
 
	$£çagïå
(
s
, 
uöt32
 
A
, 
uöt8
 *
p
, 
øm
)

89 
uöt32
 
AB
=
A
>>11;

90 
x
;

92 if(
p
)

93 
x
=(
s
>>1)-1;x>=0;x--)

95 
PRGIsRAM
[
AB
+
x
]=
øm
;

96 
Page
[
AB
+
x
]=
p
-
A
;

99 
x
=(
s
>>1)-1;x>=0;x--)

101 
PRGIsRAM
[
AB
+
x
]=0;

102 
Page
[
AB
+
x
]=0;

104 
	}
}

106 
uöt8
 
	gnŸhög
[8192];

107 
	$Re£tC¨tM≠pög
()

109 
x
;

111 
x
=0;x<32;x++)

113 
Page
[
x
]=
nŸhög
-x*2048;

114 
PRG±r
[
x
]=
CHR±r
[x]=0;

115 
PRGsize
[
x
]=
CHRsize
[x]=0;

117 
x
=0;x<8;x++)

119 
MMC5SPRVPage
[
x
]=
MMC5BGVPage
[x]=
VPageR
[x]=
nŸhög
-0x400*x;

122 
	}
}

124 
	$SëupC¨tPRGM≠pög
(
chù
, 
uöt8
 *
p
, 
uöt32
 
size
, 
øm
)

126 
PRG±r
[
chù
]=
p
;

127 
PRGsize
[
chù
]=
size
;

129 
PRGmask2
[
chù
]=(
size
>>11)-1;

130 
PRGmask4
[
chù
]=(
size
>>12)-1;

131 
PRGmask8
[
chù
]=(
size
>>13)-1;

132 
PRGmask16
[
chù
]=(
size
>>14)-1;

133 
PRGmask32
[
chù
]=(
size
>>15)-1;

135 
PRGøm
[
chù
]=
øm
?1:0;

136 
	}
}

138 
	$SëupC¨tCHRM≠pög
(
chù
, 
uöt8
 *
p
, 
uöt32
 
size
, 
øm
)

140 
CHR±r
[
chù
]=
p
;

141 
CHRsize
[
chù
]=
size
;

143 
CHRmask1
[
chù
]=(
size
>>10)-1;

144 
CHRmask2
[
chù
]=(
size
>>11)-1;

145 
CHRmask4
[
chù
]=(
size
>>12)-1;

146 
CHRmask8
[
chù
]=(
size
>>13)-1;

148 
CHRøm
[
chù
]=
øm
;

149 
	}
}

151 
	$DECLFR
(
C¨tBR
)

153  
Page
[
A
>>11][A];

154 
	}
}

156 
	$DECLFW
(
C¨tBW
)

159 if(
PRGIsRAM
[
A
>>11] && 
Page
[A>>11])

160 
Page
[
A
>>11][A]=
V
;

161 
	}
}

163 
	$DECLFR
(
C¨tBROB
)

165 if(!
Page
[
A
>>11]Ë(
X
.
DB
);

166  
Page
[
A
>>11][A];

167 
	}
}

169 
	$FASTAPASS
(3Ë
	$£çrg2r
(
r
, 
A
, 
V
)

171 
V
&=
PRGmask2
[
r
];

172 
	`£çagïå
(2,
A
,
PRG±r
[
r
]?(&PRG±r[r][
V
<<11]):0,
PRGøm
[r]);

173 
	`X6502_Reba£
();

174 
	}
}

176 
	$FASTAPASS
(2Ë
	$£çrg2
(
uöt32
 
A
, uöt32 
V
)

178 
	`£çrg2r
(0,
A
,
V
);

179 
	}
}

181 
	$FASTAPASS
(3Ë
	$£çrg4r
(
r
, 
A
, 
V
)

183 
V
&=
PRGmask4
[
r
];

184 
	`£çagïå
(4,
A
,
PRG±r
[
r
]?(&PRG±r[r][
V
<<12]):0,
PRGøm
[r]);

185 
	`X6502_Reba£
();

186 
	}
}

188 
	$FASTAPASS
(2Ë
	$£çrg4
(
uöt32
 
A
, uöt32 
V
)

190 
	`£çrg4r
(0,
A
,
V
);

191 
	}
}

193 
	$FASTAPASS
(3Ë
	$£çrg8r
(
r
, 
A
, 
V
)

195 if(
PRGsize
[
r
]>=8192)

197 
V
&=
PRGmask8
[
r
];

198 
	`£çagïå
(8,
A
,
PRG±r
[
r
]?(&PRG±r[r][
V
<<13]):0,
PRGøm
[r]);

202 
uöt32
 
VA
=
V
<<2;

203 
x
;

204 
x
=0;x<4;x++)

205 
	`£çagïå
(2,
A
+(
x
<<11),
PRG±r
[
r
]?(&PRG±r[r][((
VA
+x)&
PRGmask2
[r])<<11]):0,
PRGøm
[r]);

207 
	`X6502_Reba£
();

208 
	}
}

210 
	$FASTAPASS
(2Ë
	$£çrg8
(
uöt32
 
A
, uöt32 
V
)

212 
	`£çrg8r
(0,
A
,
V
);

213 
	}
}

215 
	$FASTAPASS
(3Ë
	$£çrg16r
(
r
, 
A
, 
V
)

217 if(
PRGsize
[
r
]>=16384)

219 
V
&=
PRGmask16
[
r
];

220 
	`£çagïå
(16,
A
,
PRG±r
[
r
]?(&PRG±r[r][
V
<<14]):0,
PRGøm
[r]);

224 
uöt32
 
VA
=
V
<<3;

225 
x
;

227 
x
=0;x<8;x++)

228 
	`£çagïå
(2,
A
+(
x
<<11),
PRG±r
[
r
]?(&PRG±r[r][((
VA
+x)&
PRGmask2
[r])<<11]):0,
PRGøm
[r]);

230 
	`X6502_Reba£
();

231 
	}
}

233 
	$FASTAPASS
(2Ë
	$£çrg16
(
uöt32
 
A
, uöt32 
V
)

235 
	`£çrg16r
(0,
A
,
V
);

236 
	}
}

238 
	$FASTAPASS
(3Ë
	$£çrg32r
(
r
,
A
, 
V
)

240 if(
PRGsize
[
r
]>=32768)

242 
V
&=
PRGmask32
[
r
];

243 
	`£çagïå
(32,
A
,
PRG±r
[
r
]?(&PRG±r[r][
V
<<15]):0,
PRGøm
[r]);

247 
uöt32
 
VA
=
V
<<4;

248 
x
;

250 
x
=0;x<16;x++)

251 
	`£çagïå
(2,
A
+(
x
<<11),
PRG±r
[
r
]?(&PRG±r[r][((
VA
+x)&
PRGmask2
[r])<<11]):0,
PRGøm
[r]);

253 
	`X6502_Reba£
();

254 
	}
}

256 
	$FASTAPASS
(2Ë
	$£çrg32
(
uöt32
 
A
, uöt32 
V
)

258 
	`£çrg32r
(0,
A
,
V
);

259 
	}
}

261 
	$FASTAPASS
(3Ë
	$£tchr1r
(
r
, 
A
, 
V
)

263 if(!
CHR±r
[
r
]) ;

264 
	`FCEUPPU_LöeUpd©e
();

265 
V
&=
CHRmask1
[
r
];

266 if(
CHRøm
[
r
])

267 
PPUCHRRAM
|=(1<<(
A
>>10));

269 
PPUCHRRAM
&=~(1<<(
A
>>10));

270 
VPageR
[(
A
)>>10]=&
CHR±r
[
r
][(
V
)<<10]-(A);

271 
	}
}

273 
	$FASTAPASS
(3Ë
	$£tchr2r
(
r
, 
A
, 
V
)

275 if(!
CHR±r
[
r
]) ;

276 
	`FCEUPPU_LöeUpd©e
();

277 
V
&=
CHRmask2
[
r
];

278 
VPageR
[(
A
)>>10]=VPageR[((A)>>10)+1]=&
CHR±r
[
r
][(
V
)<<11]-(A);

279 if(
CHRøm
[
r
])

280 
PPUCHRRAM
|=(3<<(
A
>>10));

282 
PPUCHRRAM
&=~(3<<(
A
>>10));

283 
	}
}

285 
	$FASTAPASS
(3Ë
	$£tchr4r
(
r
, 
A
, 
V
)

287 if(!
CHR±r
[
r
]) ;

288 
	`FCEUPPU_LöeUpd©e
();

289 
V
&=
CHRmask4
[
r
];

290 
VPageR
[(
A
)>>10]=VPageR[((A)>>10)+1]=

291 
VPageR
[((
A
)>>10)+2]=VPageR[((A)>>10)+3]=&
CHR±r
[
r
][(
V
)<<12]-(A);

292 if(
CHRøm
[
r
])

293 
PPUCHRRAM
|=(15<<(
A
>>10));

295 
PPUCHRRAM
&=~(15<<(
A
>>10));

296 
	}
}

298 
	$FASTAPASS
(2Ë
	$£tchr8r
(
r
, 
V
)

300 
x
;

302 if(!
CHR±r
[
r
]) ;

303 
	`FCEUPPU_LöeUpd©e
();

304 
V
&=
CHRmask8
[
r
];

305 
x
=7;x>=0;x--)

306 
VPageR
[
x
]=&
CHR±r
[
r
][
V
<<13];

307 if(
CHRøm
[
r
])

308 
PPUCHRRAM
|=(255);

310 
PPUCHRRAM
&=~(255);

311 
	}
}

313 
	$FASTAPASS
(2Ë
	$£tchr1
(
A
, 
V
)

315 
	`£tchr1r
(0,
A
,
V
);

316 
	}
}

318 
	$FASTAPASS
(2Ë
	$£tchr2
(
A
, 
V
)

320 
	`£tchr2r
(0,
A
,
V
);

321 
	}
}

323 
	$FASTAPASS
(2Ë
	$£tchr4
(
A
, 
V
)

325 
	`£tchr4r
(0,
A
,
V
);

326 
	}
}

328 
	$FASTAPASS
(1Ë
	$£tchr8
(
V
)

330 
	`£tchr8r
(0,
V
);

331 
	}
}

333 
	$FASTAPASS
(1Ë
	$£tvøm8
(
uöt8
 *
p
)

335 
x
;

336 
x
=7;x>=0;x--)

337 
VPageR
[
x
]=
p
;

338 
PPUCHRRAM
|=255;

339 
	}
}

341 
	$FASTAPASS
(2Ë
	$£tvøm4
(
uöt32
 
A
, 
uöt8
 *
p
)

343 
x
;

344 
x
=3;x>=0;x--)

345 
VPageR
[(
A
>>10)+
x
]=
p
-A;

346 
PPUCHRRAM
|=(15<<(
A
>>10));

347 
	}
}

349 
	$FASTAPASS
(3Ë
	$£tvømb1
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
)

351 
	`FCEUPPU_LöeUpd©e
();

352 
VPageR
[
A
>>10]=
p
-A+(
b
<<10);

353 
PPUCHRRAM
|=(1<<(
A
>>10));

354 
	}
}

356 
	$FASTAPASS
(3Ë
	$£tvømb2
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
)

358 
	`FCEUPPU_LöeUpd©e
();

359 
VPageR
[(
A
>>10)]=VPageR[(A>>10)+1]=
p
-A+(
b
<<11);

360 
PPUCHRRAM
|=(3<<(
A
>>10));

361 
	}
}

363 
	$FASTAPASS
(3Ë
	$£tvømb4
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
)

365 
x
;

367 
	`FCEUPPU_LöeUpd©e
();

368 
x
=3;x>=0;x--)

369 
VPageR
[(
A
>>10)+
x
]=
p
-A+(
b
<<12);

370 
PPUCHRRAM
|=(15<<(
A
>>10));

371 
	}
}

373 
	$FASTAPASS
(2Ë
	$£tvømb8
(
uöt8
 *
p
, 
uöt32
 
b
)

375 
x
;

377 
	`FCEUPPU_LöeUpd©e
();

378 
x
=7;x>=0;x--)

379 
VPageR
[
x
]=
p
+(
b
<<13);

380 
PPUCHRRAM
|=255;

381 
	}
}

385 
	$FASTAPASS
(3Ë
	$£äèmem
(
uöt8
 *
p
, 
øm
, 
uöt32
 
b
)

387 
	`FCEUPPU_LöeUpd©e
();

388 
v«∑ge
[
b
]=
p
;

389 
PPUNTARAM
&=~(1<<
b
);

390 if(
øm
)

391 
PPUNTARAM
|=1<<
b
;

392 
	}
}

394 
	gmúr‹h¨d
=0;

395 
	$£tmúr‹w
(
a
, 
b
, 
c
, 
d
)

397 
	`FCEUPPU_LöeUpd©e
();

398 
v«∑ge
[0]=
NTARAM
+
a
*0x400;

399 
v«∑ge
[1]=
NTARAM
+
b
*0x400;

400 
v«∑ge
[2]=
NTARAM
+
c
*0x400;

401 
v«∑ge
[3]=
NTARAM
+
d
*0x400;

402 
	}
}

404 
	$FASTAPASS
(1Ë
	$£tmúr‹
(
t
)

406 
	`FCEUPPU_LöeUpd©e
();

407 if(!
múr‹h¨d
)

409 
t
)

411 
MI_H
:

412 
v«∑ge
[0]=v«∑ge[1]=
NTARAM
;vnapage[2]=vnapage[3]=NTARAM+0x400;

414 
MI_V
:

415 
v«∑ge
[0]=v«∑ge[2]=
NTARAM
;vnapage[1]=vnapage[3]=NTARAM+0x400;

417 
MI_0
:

418 
v«∑ge
[0]=v«∑ge[1]=v«∑ge[2]=v«∑ge[3]=
NTARAM
;

420 
MI_1
:

421 
v«∑ge
[0]=v«∑ge[1]=v«∑ge[2]=v«∑ge[3]=
NTARAM
+0x400;

424 
PPUNTARAM
=0xF;

426 
	}
}

428 
	$SëupC¨tMúr‹ög
(
m
, 
h¨d
, 
uöt8
 *
exåa
)

430 if(
m
<4)

432 
múr‹h¨d
 = 0;

433 
	`£tmúr‹
(
m
);

437 
v«∑ge
[0]=
NTARAM
;

438 
v«∑ge
[1]=
NTARAM
+0x400;

439 
v«∑ge
[2]=
exåa
;

440 
v«∑ge
[3]=
exåa
+0x400;

441 
PPUNTARAM
=0xF;

443 
múr‹h¨d
=
h¨d
;

444 
	}
}

446 
uöt8
 *
	gGENIEROM
=0;

448 
FixGíõM≠
();

451 
	$O≥nGíõ
()

453 
FILE
 *
Â
;

454 
x
;

456 if(!
GENIEROM
)

458 *
‚
;

460 if(!(
GENIEROM
=(
uöt8
 *)
	`FCEU_mÆloc
(4096+1024))) ;

462 
‚
=
	`FCEU_MakeFName
(
FCEUMKF_GGROM
,0,0);

463 
Â
=
	`f›í
(
‚
,"rb");

464 
	`‰ì
(
‚
);

465 if(!
Â
)

467 
	`FCEU_PrötEº‹
("Error opening Game Genie ROM image!");

468 
	`‰ì
(
GENIEROM
);

469 
GENIEROM
=0;

472 if(
	`‰ód
(
GENIEROM
,1,16,
Â
)!=16)

474 
gªº
:

475 
	`FCEU_PrötEº‹
("ErrorÑeading from Game Genie ROM image!");

476 
	`‰ì
(
GENIEROM
);

477 
GENIEROM
=0;

478 
	`f˛o£
(
Â
);

481 if(
GENIEROM
[0]==0x4E)

483 if(
	`‰ód
(
GENIEROM
,1,4096,
Â
)!=4096)

484 
gªº
;

485 if(
	`f£ek
(
Â
,16384-4096,
SEEK_CUR
))

486 
gªº
;

487 if(
	`‰ód
(
GENIEROM
+4096,1,256,
Â
)!=256)

488 
gªº
;

492 if(
	`‰ód
(
GENIEROM
+16,1,4352-16,
Â
)!=(4352-16))

493 
gªº
;

495 
	`f˛o£
(
Â
);

498 
x
=0;x<4;x++)

499 
	`mem˝y
(
GENIEROM
+4096+(
x
<<8),GENIEROM+4096,256);

502 
gíõ°age
=1;

503 
	}
}

506 
	$Clo£Gíõ
()

509 
gíõ°age
=0;

510 
	`FlushGíõRW
();

511 
VPageR
=
VPage
;

512 
	}
}

514 
	$FCEU_KûlGíõ
()

516 if(
GENIEROM
)

518 
	`‰ì
(
GENIEROM
);

519 
GENIEROM
=0;

521 
	}
}

523 
	$DECLFR
(
GíõRód
)

525  
GENIEROM
[
A
&4095];

526 
	}
}

528 
	$DECLFW
(
GíõWrôe
)

530 
A
)

534 0x8004:
gíõvÆ
[((
A
-4)&0xF)>>2]=
V
;;

538 0x8003:
gíõch
[((
A
-3)&0xF)>>2]=
V
;;

542 0x8002:
gíõaddr
[((
A
-2)&0xF)>>2]&=0xFF00;gíõaddr[((A-2)&0xF)>>2]|=
V
;;

546 0x8001:
gíõaddr
[((
A
-1)&0xF)>>2]&=0xFF;gíõaddr[((A-1)&0xF)>>2]|=(
V
|0x80)<<8;;

548 0x8000:if(!
V
)

549 
	`FixGíõM≠
();

552 
modc⁄
=
V
^0xFF;

553 if(
V
==0x71)

554 
modc⁄
=0;

558 
	}
}

560 
ªadfunc
 
	gGíõBackup
[3];

562 
	$DECLFR
(
GíõFix1
)

564 
uöt8
 
r
=
GíõBackup
[0](
A
);

566 if((
modc⁄
>>1)&1)

567  
gíõvÆ
[0];

568 if(
r
==
gíõch
[0])

569  
gíõvÆ
[0];

571  
r
;

572 
	}
}

574 
	$DECLFR
(
GíõFix2
)

576 
uöt8
 
r
=
GíõBackup
[1](
A
);

578 if((
modc⁄
>>2)&1)

579  
gíõvÆ
[1];

580 if(
r
==
gíõch
[1])

581  
gíõvÆ
[1];

583  
r
;

584 
	}
}

586 
	$DECLFR
(
GíõFix3
)

588 
uöt8
 
r
=
GíõBackup
[2](
A
);

590 if((
modc⁄
>>3)&1)

591  
gíõvÆ
[2];

592 if(
r
==
gíõch
[2])

593  
gíõvÆ
[2];

595  
r
;

596 
	}
}

599 
	$FixGíõM≠
()

601 
x
;

603 
gíõ°age
=2;

605 
x
=0;x<8;x++)

606 
VPage
[
x
]=
VPageG
[x];

608 
VPageR
=
VPage
;

609 
	`FlushGíõRW
();

611 
x
=0;x<3;x++)

612 if((
modc⁄
>>(4+
x
))&1)

614 
ªadfunc
 
tmp
[3]={
GíõFix1
,
GíõFix2
,
GíõFix3
};

615 
GíõBackup
[
x
]=
	`GëRódH™dÀr
(
gíõaddr
[x]);

616 
	`SëRódH™dÀr
(
gíõaddr
[
x
],gíõaddr[x],
tmp
[x]);

618 
	}
}

620 
	$GíõPowî
()

622 
uöt32
 
x
;

624 if(!
gíõ°age
)

627 
gíõ°age
=1;

628 
x
=0;x<3;x++)

630 
gíõvÆ
[
x
]=0xFF;

631 
gíõch
[
x
]=0xFF;

632 
gíõaddr
[
x
]=0xFFFF;

634 
modc⁄
=0;

636 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
GíõWrôe
);

637 
	`SëRódH™dÀr
(0x8000,0xFFFF,
GíõRód
);

639 
x
=0;x<8;x++)

640 
VPage
[
x
]=
GENIEROM
+4096-0x400*x;

642 if(
	`AŒocGíõRW
())

643 
VPageR
=
VPageG
;

645 
gíõ°age
=2;

646 
	}
}

648 
uöt8
 *
	gªÆ_∑ges
[16];

650 
	$GíõSëPages
(
ª°‹e
)

652 
∑ge
;

653 i‡(
ª°‹e
)

655 
∑ge
=16;Öage<32;Öage++)

656 
Page
[
∑ge
] = 
ªÆ_∑ges
[page-16];

660 
∑ge
=16;Öage<32;Öage++) {

661 
ªÆ_∑ges
[
∑ge
-16] = 
Page
[page];

662 
Page
[
∑ge
]=
GENIEROM
 - (page<<11) + ((page&1)<<11);

665 
	}
}

667 
	$FCEU_SaveGameSave
(
C¨tInfo
 *
LoˇlHWInfo
)

669 if(
LoˇlHWInfo
->
b©ãry
 && LoˇlHWInfo->
SaveGame
[0])

671 
FILE
 *
•
;

672 *
soŸ
;

674 
soŸ
=
	`FCEU_MakeFName
(
FCEUMKF_SAV
,0,"sav");

675 if((
•
=
	`FCEUD_UTF8f›í
(
soŸ
,"wb"))==
NULL
)

677 
	`FCEU_PrötEº‹
("WRAM fûê\"%s\" c™nŸ bêwrôã¿to.\n",
soŸ
);

681 
x
;

683 
x
=0;x<4;x++)

684 if(
LoˇlHWInfo
->
SaveGame
[
x
])

686 
	`fwrôe
(
LoˇlHWInfo
->
SaveGame
[
x
],1,

687 
LoˇlHWInfo
->
SaveGameLí
[
x
],
•
);

689 
	`f˛o£
(
•
);

690 #ifde‡
GP2X


691 
	`sync
();

694 
	`‰ì
(
soŸ
);

696 
	}
}

699 
	gdißbÀB©ãryLﬂdög
=0;

701 
	$FCEU_LﬂdGameSave
(
C¨tInfo
 *
LoˇlHWInfo
)

703 if(
LoˇlHWInfo
->
b©ãry
 && LoˇlHWInfo->
SaveGame
[0] && !
dißbÀB©ãryLﬂdög
)

705 
FILE
 *
•
;

706 *
soŸ
;

708 
soŸ
=
	`FCEU_MakeFName
(
FCEUMKF_SAV
,0,"sav");

709 
•
=
	`FCEUD_UTF8f›í
(
soŸ
,"rb");

710 if(
•
!=
NULL
)

712 
x
;

713 
x
=0;x<4;x++)

714 if(
LoˇlHWInfo
->
SaveGame
[
x
])

715 
	`‰ód
(
LoˇlHWInfo
->
SaveGame
[
x
],1,LoˇlHWInfo->
SaveGameLí
[x],
•
);

716 
	`f˛o£
(
•
);

718 
	`‰ì
(
soŸ
);

720 
	}
}

722 
	$DumpEm±yC¨tM≠pög
()

724 
x
, 
°
=0, 
íd
=-1;

726 
x
=8;x<32;x++)

728 i‡(
Page
[
x
] =(
nŸhög
-x*2048) || Page[x] == 0)

730 i‡(
íd
 !
x
Ë
°
=x;

731 
íd
=
x
+1;

733 i‡(
íd
 =
x
)

734 
	`¥ötf
("DumpEm±yC¨tM≠pög: %04x-%04x\n", 
°
*2048, 
íd
*2048-1);

736 i‡(
íd
==32)

737 
	`¥ötf
("DumpEm±yC¨tM≠pög: %04x-%04x\n", 
°
*2048, 
íd
*2048-1);

738 
	}
}

	@cart.h

1 #i‚de‡
_CART_H


2 
	#_CART_H


	)

6 (*
	mPowî
)();

7 (*
	mRe£t
)();

8 (*
	mClo£
)();

9 
uöt8
 *
	mSaveGame
[4];

10 
uöt32
 
	mSaveGameLí
[4];

13 
	mmúr‹
;

19 
	mb©ãry
;

20 
uöt8
 
	mMD5
[16];

21 
uöt32
 
	mCRC32
;

25 } 
	tC¨tInfo
;

27 
FCEU_SaveGameSave
(
C¨tInfo
 *
LoˇlHWInfo
);

28 
FCEU_LﬂdGameSave
(
C¨tInfo
 *
LoˇlHWInfo
);

30 
uöt8
 *
Page
[32],*
VPage
[8],*
MMC5SPRVPage
[8],*
MMC5BGVPage
[8];

32 
Re£tC¨tM≠pög
();

33 
SëupC¨tPRGM≠pög
(
chù
, 
uöt8
 *
p
, 
uöt32
 
size
, 
øm
);

34 
SëupC¨tCHRM≠pög
(
chù
, 
uöt8
 *
p
, 
uöt32
 
size
, 
øm
);

35 
SëupC¨tMúr‹ög
(
m
, 
h¨d
, 
uöt8
 *
exåa
);

37 
DECLFR
(
C¨tBROB
);

38 
DECLFR
(
C¨tBR
);

39 
DECLFW
(
C¨tBW
);

41 
uöt8
 *
PRG±r
[32];

42 
uöt8
 *
CHR±r
[32];

44 
uöt32
 
PRGsize
[32];

45 
uöt32
 
CHRsize
[32];

47 
uöt32
 
PRGmask2
[32];

48 
uöt32
 
PRGmask4
[32];

49 
uöt32
 
PRGmask8
[32];

50 
uöt32
 
PRGmask16
[32];

51 
uöt32
 
PRGmask32
[32];

53 
uöt32
 
CHRmask1
[32];

54 
uöt32
 
CHRmask2
[32];

55 
uöt32
 
CHRmask4
[32];

56 
uöt32
 
CHRmask8
[32];

58 
	$FASTAPASS
(2Ë
	`£çrg2
(
uöt32
 
A
, uöt32 
V
);

59 
	$FASTAPASS
(2Ë
	`£çrg4
(
uöt32
 
A
, uöt32 
V
);

60 
	$FASTAPASS
(2Ë
	`£çrg8
(
uöt32
 
A
, uöt32 
V
);

61 
	$FASTAPASS
(2Ë
	`£çrg16
(
uöt32
 
A
, uöt32 
V
);

62 
	$FASTAPASS
(2Ë
	`£çrg32
(
uöt32
 
A
, uöt32 
V
);

64 
	$FASTAPASS
(3Ë
	`£çrg2r
(
r
, 
A
, 
V
);

65 
	$FASTAPASS
(3Ë
	`£çrg4r
(
r
, 
A
, 
V
);

66 
	$FASTAPASS
(3Ë
	`£çrg8r
(
r
, 
A
, 
V
);

67 
	$FASTAPASS
(3Ë
	`£çrg16r
(
r
, 
A
, 
V
);

68 
	$FASTAPASS
(3Ë
	`£çrg32r
(
r
, 
A
, 
V
);

70 
	$FASTAPASS
(3Ë
	`£tchr1r
(
r
, 
A
, 
V
);

71 
	$FASTAPASS
(3Ë
	`£tchr2r
(
r
, 
A
, 
V
);

72 
	$FASTAPASS
(3Ë
	`£tchr4r
(
r
, 
A
, 
V
);

73 
	$FASTAPASS
(2Ë
	`£tchr8r
(
r
, 
V
);

75 
	$FASTAPASS
(2Ë
	`£tchr1
(
A
, 
V
);

76 
	$FASTAPASS
(2Ë
	`£tchr2
(
A
, 
V
);

77 
	$FASTAPASS
(2Ë
	`£tchr4
(
A
, 
V
);

78 
	$FASTAPASS
(1Ë
	`£tchr8
(
V
);

80 
	$FASTAPASS
(2Ë
	`£tvøm4
(
uöt32
 
A
, 
uöt8
 *
p
);

81 
	$FASTAPASS
(1Ë
	`£tvøm8
(
uöt8
 *
p
);

83 
	$FASTAPASS
(3Ë
	`£tvømb1
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
);

84 
	$FASTAPASS
(3Ë
	`£tvømb2
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
);

85 
	$FASTAPASS
(3Ë
	`£tvømb4
(
uöt8
 *
p
, 
uöt32
 
A
, uöt32 
b
);

86 
	$FASTAPASS
(2Ë
	`£tvømb8
(
uöt8
 *
p
, 
uöt32
 
b
);

88 
	$FASTAPASS
(1Ë
	`£tmúr‹
(
t
);

89 
	`£tmúr‹w
(
a
, 
b
, 
c
, 
d
);

90 
	$FASTAPASS
(3Ë
	`£äèmem
(
uöt8
 *
p
, 
øm
, 
uöt32
 
b
);

92 
	#MI_H
 0

	)

93 
	#MI_V
 1

	)

94 
	#MI_0
 2

	)

95 
	#MI_1
 3

	)

97 
gíõ°age
;

99 
	`GíõPowî
();

101 
	`O≥nGíõ
();

102 
	`Clo£Gíõ
();

103 
	`FCEU_KûlGíõ
();

104 
	`GíõSëPages
(
ª°‹e
);

	@cheat.c

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<°dio.h
>

24 
	~<˘y≥.h
>

26 
	~"ty≥s.h
"

27 
	~"x6502.h
"

28 
	~"chót.h
"

29 
	~"f˚.h
"

30 
	~"gíîÆ.h
"

31 
	~"ˇπ.h
"

32 
	~"mem‹y.h
"

34 
	~"fûe.h
"

35 
	~"svga.h
"

37 
uöt8
 *
	gChótRPås
[64];

39 
	$FCEU_ChótRe£tRAM
()

41 
x
;

43 
x
=0;x<64;x++)

44 
ChótRPås
[
x
]=0;

45 
	}
}

47 
	$FCEU_ChótAddRAM
(
s
, 
uöt32
 
A
, 
uöt8
 *
p
)

49 
uöt32
 
AB
=
A
>>10;

50 
x
;

52 
x
=
s
-1;x>=0;x--)

53 
ChótRPås
[
AB
+
x
]=
p
-
A
;

54 
	}
}

57 
	sCHEATF
 {

58 
CHEATF
 *
	m√xt
;

59 *
	m«me
;

60 
uöt16
 
	maddr
;

61 
uöt8
 
	mvÆ
;

62 
	mcom∑ª
;

63 
	mty≥
;

64 
	m°©us
;

68 
uöt16
 
	maddr
;

69 
uöt8
 
	mvÆ
;

70 
	mcom∑ª
;

71 
ªadfunc
 
	mPªvRód
;

72 } 
	tCHEATF_SUBFAST
;

75 
CHEATF_SUBFAST
 
	gSubChóts
[256];

76 
	gnumsubchóts
=0;

77 
CHEATF
 *
	gchóts
=0,*
	gchót¶
=0;

80 
	#CHEATC_NONE
 0x8000

	)

81 
	#CHEATC_EXCLUDED
 0x4000

	)

82 
	#CHEATC_NOSHOW
 0xC000

	)

84 
uöt16
 *
	gChótComp
=0;

85 
	gßvechóts
;

87 
	$DECLFR
(
SubChótsRód
)

89 
CHEATF_SUBFAST
 *
s
=
SubChóts
;

90 
x
=
numsubchóts
;

94 if(
s
->
addr
==
A
)

96 if(
s
->
com∑ª
>=0)

98 
uöt8
 
pv
=
s
->
	`PªvRód
(
A
);

100 if(
pv
==
s
->
com∑ª
)

101 (
s
->
vÆ
);

102 (
pv
);

104 (
s
->
vÆ
);

106 
s
++;

107 } --
x
);

109 
	}
}

111 
	$RebuûdSubChóts
()

113 
x
;

114 
CHEATF
 *
c
=
chóts
;

116 
x
=0;x<
numsubchóts
;x++)

117 
	`SëRódH™dÀr
(
SubChóts
[
x
].
addr
,SubChóts[x].addr,SubChóts[x].
PªvRód
);

119 
numsubchóts
=0;

120 
c
)

122 if(
c
->
ty≥
==1 && c->
°©us
)

124 if(
	`GëRódH™dÀr
(
c
->
addr
)==
SubChótsRód
)

131 
SubChóts
[
numsubchóts
].
PªvRód
=
	`GëRódH™dÀr
(
c
->
addr
);

132 
SubChóts
[
numsubchóts
].
addr
=
c
->addr;

133 
SubChóts
[
numsubchóts
].
vÆ
=
c
->val;

134 
SubChóts
[
numsubchóts
].
com∑ª
=
c
->compare;

135 
	`SëRódH™dÀr
(
c
->
addr
,c->addr,
SubChótsRód
);

136 
numsubchóts
++;

139 
c
=c->
√xt
;

141 
	}
}

143 
	$FCEU_PowîChóts
()

145 
numsubchóts
=0;

146 
	`RebuûdSubChóts
();

147 
	}
}

149 
AddChótE¡ry
(*
«me
, 
uöt32
 
addr
, 
uöt8
 
vÆ
, 
com∑ª
, 
°©us
, 
ty≥
);

150 
	$ChótMemEº
()

152 
	`FCEUD_PrötEº‹
("Errorállocating memory for cheat data.");

153 
	}
}

156 
	$AddChótE¡ry
(*
«me
, 
uöt32
 
addr
, 
uöt8
 
vÆ
, 
com∑ª
, 
°©us
, 
ty≥
)

158 
CHEATF
 *
ãmp
;

159 if(!(
ãmp
=(
CHEATF
 *)
	`mÆloc
((CHEATF))))

161 
	`ChótMemEº
();

164 
ãmp
->
«me
=name;

165 
ãmp
->
addr
=addr;

166 
ãmp
->
vÆ
=val;

167 
ãmp
->
°©us
=status;

168 
ãmp
->
com∑ª
=compare;

169 
ãmp
->
ty≥
=type;

170 
ãmp
->
√xt
=0;

172 if(
chóts
)

174 
chót¶
->
√xt
=
ãmp
;

175 
chót¶
=
ãmp
;

178 
chóts
=
chót¶
=
ãmp
;

181 
	}
}

183 
	$FCEU_LﬂdGameChóts
(
FILE
 *
ovîride
)

185 
FILE
 *
Â
;

186 
addr
;

187 
vÆ
;

188 
°©us
;

189 
ty≥
;

190 
com∑ª
;

191 
x
;

193 
löebuf
[2048];

194 *
«mebuf
;

195 
tc
=0;

196 *
‚
;

198 
numsubchóts
=
ßvechóts
=0;

200 if(
ovîride
)

201 
Â
 = 
ovîride
;

204 
‚
=
	`FCEU_MakeFName
(
FCEUMKF_CHEAT
,0,0);

205 
Â
=
	`FCEUD_UTF8f›í
(
‚
,"rb");

206 
	`‰ì
(
‚
);

207 if(!
Â
) ;

210 
	`fgës
(
löebuf
,2048,
Â
)>0)

212 *
tbuf
=
löebuf
;

213 
doc
=0;

215 
addr
=
vÆ
=
com∑ª
=
°©us
=
ty≥
=0;

217 if(
tbuf
[0]=='S')

219 
tbuf
++;

220 
ty≥
=1;

222 
ty≥
=0;

224 if(
tbuf
[0]=='C')

226 
tbuf
++;

227 
doc
=1;

230 if(
tbuf
[0]==':')

232 
tbuf
++;

233 
°©us
=0;

235 
°©us
=1;

237 if(
doc
)

239 *
√o
=&
tbuf
[4+2+2+1+1+1];

240 if(
	`ssˇnf
(
tbuf
,"%04x%*[:]%02x%*[:]%02x",&
addr
,&
vÆ
,&
com∑ª
)!=3)

242 
«mebuf
=
	`mÆloc
(
	`°æí
(
√o
)+1);

243 
	`°r˝y
(
«mebuf
,
√o
);

247 *
√o
=&
tbuf
[4+2+1+1];

248 if(
	`ssˇnf
(
tbuf
,"%04x%*[:]%02x",&
addr
,&
vÆ
)!=2)

250 
«mebuf
=
	`mÆloc
(
	`°æí
(
√o
)+1);

251 
	`°r˝y
(
«mebuf
,
√o
);

254 
x
=0;x<
	`°æí
(
«mebuf
);x++)

256 if(
«mebuf
[
x
]==10 ||Çamebuf[x]==13)

258 
«mebuf
[
x
]=0;

261 if(
«mebuf
[
x
]<0x20)Çamebuf[x]=' ';

264 
	`AddChótE¡ry
(
«mebuf
,
addr
,
vÆ
,
doc
?
com∑ª
:-1,
°©us
,
ty≥
);

265 
tc
++;

267 
	`RebuûdSubChóts
();

268 if(!
ovîride
)

269 
	`f˛o£
(
Â
);

270 
	}
}

272 
	$FCEU_FlushGameChóts
(
FILE
 *
ovîride
, 
noßve
)

274 if(
ChótComp
)

276 
	`‰ì
(
ChótComp
);

277 
ChótComp
=0;

279 if((!
ßvechóts
 || 
noßve
Ë&& !
ovîride
)

281 if(
chóts
)

283 
CHEATF
 *
√xt
=
chóts
;

286 
CHEATF
 *
œ°
=
√xt
;

287 
√xt
=next->next;

288 
	`‰ì
(
œ°
->
«me
);

289 
	`‰ì
(
œ°
);

290 if(!
√xt
) ;

292 
chóts
=
chót¶
=0;

297 *
‚
 = 0;

299 if(!
ovîride
)

300 
‚
 = 
	`FCEU_MakeFName
(
FCEUMKF_CHEAT
,0,0);

302 if(
chóts
)

304 
CHEATF
 *
√xt
=
chóts
;

305 
FILE
 *
Â
;

307 if(
ovîride
)

308 
Â
 = 
ovîride
;

310 
Â
=
	`FCEUD_UTF8f›í
(
‚
,"wb");

312 if(
Â
)

316 
CHEATF
 *
t
;

317 if(
√xt
->
ty≥
)

318 
	`Âutc
('S',
Â
);

319 if(
√xt
->
com∑ª
>=0)

320 
	`Âutc
('C',
Â
);

322 if(!
√xt
->
°©us
)

323 
	`Âutc
(':',
Â
);

325 if(
√xt
->
com∑ª
>=0)

326 
	`Ârötf
(
Â
,"%04x:%02x:%02x:%s\n",
√xt
->
addr
,√xt->
vÆ
,√xt->
com∑ª
,√xt->
«me
);

328 
	`Ârötf
(
Â
,"%04x:%02x:%s\n",
√xt
->
addr
,√xt->
vÆ
,√xt->
«me
);

330 
	`‰ì
(
√xt
->
«me
);

331 
t
=
√xt
;

332 
√xt
=next->next;

333 
	`‰ì
(
t
);

334 if(!
√xt
) ;

336 if(!
ovîride
)

337 
	`f˛o£
(
Â
);

340 
	`FCEUD_PrötEº‹
("Error saving cheats.");

341 
chóts
=
chót¶
=0;

343 if(!
ovîride
)

344 
	`ªmove
(
‚
);

345 if(!
ovîride
)

346 
	`‰ì
(
‚
);

349 
	`RebuûdSubChóts
();

351 
	}
}

354 
	$FCEUI_AddChót
(c⁄° *
«me
, 
uöt32
 
addr
, 
uöt8
 
vÆ
, 
com∑ª
, 
ty≥
)

356 *
t
;

358 if(!(
t
=(*)
	`mÆloc
(
	`°æí
(
«me
)+1)))

360 
	`ChótMemEº
();

363 
	`°r˝y
(
t
,
«me
);

364 if(!
	`AddChótE¡ry
(
t
,
addr
,
vÆ
,
com∑ª
,1,
ty≥
))

366 
	`‰ì
(
t
);

369 
ßvechóts
=1;

370 
	`RebuûdSubChóts
();

372 
	}
}

374 
	$FCEUI_DñChót
(
uöt32
 
which
)

376 
CHEATF
 *
¥ev
;

377 
CHEATF
 *
cur
;

378 
uöt32
 
x
=0;

380 
¥ev
=0,
cur
=
chóts
;;)

382 if(
x
==
which
)

384 if(
¥ev
)

386 if(
cur
->
√xt
)

387 
¥ev
->
√xt
=
cur
->next;

390 
¥ev
->
√xt
=0;

391 
chót¶
=
¥ev
;

396 if(
cur
->
√xt
)

397 
chóts
=
cur
->
√xt
;

399 
chóts
=
chót¶
=0;

401 
	`‰ì
(
cur
->
«me
);

402 
	`‰ì
(
cur
);

407 if(!
cur
->
√xt
)

409 
¥ev
=
cur
;

410 
cur
=
¥ev
->
√xt
;

411 
x
++;

414 
ßvechóts
=1;

415 
	`RebuûdSubChóts
();

418 
	}
}

420 
	$FCEU_AµlyPîiodicChóts
()

422 
CHEATF
 *
cur
=
chóts
;

423 if(!
cur
) ;

427 if(
cur
->
°©us
 && !(cur->
ty≥
))

428 if(
ChótRPås
[
cur
->
addr
>>10])

429 
ChótRPås
[
cur
->
addr
>>10][cur->addr]=cur->
vÆ
;

430 if(
cur
->
√xt
)

431 
cur
=cur->
√xt
;

435 
	}
}

438 
FCEUI_Li°Chóts
((*
ˇŒb
)(*
«me
, 
uöt32
 
a
, 
uöt8
 
v
, 
com∑ª
, 
s
, 
ty≥
, *
d©a
), *data)

440 
CHEATF
 *
√xt
=
chóts
;

442 
√xt
)

444 if(!
	`ˇŒb
(
√xt
->
«me
,√xt->
addr
,√xt->
vÆ
,√xt->
com∑ª
,√xt->
°©us
,√xt->
ty≥
,
d©a
)) ;

445 
√xt
=next->next;

447 
	}
}

449 
	$FCEUI_GëChót
(
uöt32
 
which
, **
«me
, uöt32 *
a
, 
uöt8
 *
v
, *
com∑ª
, *
s
, *
ty≥
)

451 
CHEATF
 *
√xt
=
chóts
;

452 
uöt32
 
x
=0;

454 
√xt
)

456 if(
x
==
which
)

458 if(
«me
)

459 *
«me
=
√xt
->name;

460 if(
a
)

461 *
a
=
√xt
->
addr
;

462 if(
v
)

463 *
v
=
√xt
->
vÆ
;

464 if(
s
)

465 *
s
=
√xt
->
°©us
;

466 if(
com∑ª
)

467 *
com∑ª
=
√xt
->compare;

468 if(
ty≥
)

469 *
ty≥
=
√xt
->type;

472 
√xt
=next->next;

473 
x
++;

476 
	}
}

478 
	$GGtobö
(
c
)

480 
Àts
[16]={'A','P','Z','L','G','I','T','Y','E','O','X','U','K','S','V','N'};

481 
x
;

483 
x
=0;x<16;x++)

484 if(
Àts
[
x
] =
	`touµî
(
c
)) (x);

486 
	}
}

489 
	$FCEUI_DecodeGG
(c⁄° *
°r
, 
uöt16
 *
a
, 
uöt8
 *
v
, *
c
)

491 
uöt16
 
A
;

492 
uöt8
 
V
,
C
;

493 
uöt8
 
t
;

494 
s
;

496 
A
=0x8000;

497 
V
=0;

498 
C
=0;

500 
s
=
	`°æí
(
°r
);

501 if(
s
!=6 && s!=8) (0);

503 
t
=
	`GGtobö
(*
°r
++);

504 
V
|=(
t
&0x07);

505 
V
|=(
t
&0x08)<<4;

507 
t
=
	`GGtobö
(*
°r
++);

508 
V
|=(
t
&0x07)<<4;

509 
A
|=(
t
&0x08)<<4;

511 
t
=
	`GGtobö
(*
°r
++);

512 
A
|=(
t
&0x07)<<4;

515 
t
=
	`GGtobö
(*
°r
++);

516 
A
|=(
t
&0x07)<<12;

517 
A
|=(
t
&0x08);

519 
t
=
	`GGtobö
(*
°r
++);

520 
A
|=(
t
&0x07);

521 
A
|=(
t
&0x08)<<8;

523 if(
s
==6)

525 
t
=
	`GGtobö
(*
°r
++);

526 
A
|=(
t
&0x07)<<8;

527 
V
|=(
t
&0x08);

529 *
a
=
A
;

530 *
v
=
V
;

531 *
c
=-1;

536 
t
=
	`GGtobö
(*
°r
++);

537 
A
|=(
t
&0x07)<<8;

538 
C
|=(
t
&0x08);

540 
t
=
	`GGtobö
(*
°r
++);

541 
C
|=(
t
&0x07);

542 
C
|=(
t
&0x08)<<4;

544 
t
=
	`GGtobö
(*
°r
++);

545 
C
|=(
t
&0x07)<<4;

546 
V
|=(
t
&0x08);

547 *
a
=
A
;

548 *
v
=
V
;

549 *
c
=
C
;

553 
	}
}

555 
	$FCEUI_DecodePAR
(c⁄° *
°r
, 
uöt16
 *
a
, 
uöt8
 *
v
, *
c
, *
ty≥
)

557 
boo
[4];

558 if(
	`°æí
(
°r
)!=8) (0);

560 
	`ssˇnf
(
°r
,"%02x%02x%02x%02x",
boo
,boo+1,boo+2,boo+3);

562 *
c
=-1;

566 *
a
=(
boo
[3]<<8)|(boo[2]+0x7F);

567 *
v
=0;

571 *
v
=
boo
[3];

572 *
a
=
boo
[2]|(boo[1]<<8);

577 if(*
a
<0x0100)

578 *
ty≥
=0;

580 *
ty≥
=1;

582 
	}
}

587 
	$FCEUI_SëChót
(
uöt32
 
which
, c⁄° *
«me
, 
öt32
 
a
, i¡32 
v
, 
com∑ª
,
s
, 
ty≥
)

589 
CHEATF
 *
√xt
=
chóts
;

590 
uöt32
 
x
=0;

592 
√xt
)

594 if(
x
==
which
)

596 if(
«me
)

598 *
t
;

600 if((
t
=(*)
	`ªÆloc
(
√xt
->
«me
,
	`°æí
(name+1))))

602 
√xt
->
«me
=
t
;

603 
	`°r˝y
(
√xt
->
«me
,name);

608 if(
a
>=0)

609 
√xt
->
addr
=
a
;

610 if(
v
>=0)

611 
√xt
->
vÆ
=
v
;

612 if(
s
>=0)

613 
√xt
->
°©us
=
s
;

614 
√xt
->
com∑ª
=compare;

615 
√xt
->
ty≥
=type;

617 
ßvechóts
=1;

618 
	`RebuûdSubChóts
();

622 
√xt
=next->next;

623 
x
++;

626 
	}
}

629 
	$FCEUI_ToggÀChót
(
uöt32
 
which
)

631 
CHEATF
 *
√xt
=
chóts
;

632 
uöt32
 
x
=0;

634 
√xt
)

636 if(
x
==
which
)

638 
√xt
->
°©us
=!next->status;

639 
ßvechóts
=1;

640 
	`RebuûdSubChóts
();

641 (
√xt
->
°©us
);

643 
√xt
=next->next;

644 
x
++;

648 
	}
}

650 
	$InôChótComp
()

652 
uöt32
 
x
;

654 
ChótComp
=(
uöt16
*)
	`mÆloc
(65536*(uint16));

655 if(!
ChótComp
)

657 
	`ChótMemEº
();

660 
x
=0;x<65536;x++)

661 
ChótComp
[
x
]=
CHEATC_NONE
;

664 
	}
}

666 
	$FCEUI_ChótSórchSëCuºítAsOrigöÆ
()

668 
uöt32
 
x
;

669 
x
=0x000;x<0x10000;x++)

670 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

672 if(
ChótRPås
[
x
>>10])

673 
ChótComp
[
x
]=
ChótRPås
[x>>10][x];

675 
ChótComp
[
x
]|=
CHEATC_NONE
;

677 
	}
}

679 
	$FCEUI_ChótSórchShowEx˛uded
()

681 
uöt32
 
x
;

683 
x
=0x000;x<0x10000;x++)

684 
ChótComp
[
x
]&=~
CHEATC_EXCLUDED
;

685 
	}
}

688 
öt32
 
	$FCEUI_ChótSórchGëCou¡
()

690 
uöt32
 
x
,
c
=0;

692 if(
ChótComp
)

694 
x
=0x0000;x<0x10000;x++)

695 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
Ë&& 
ChótRPås
[x>>10])

696 
c
++;

699  
c
;

700 
	}
}

703 
FCEUI_ChótSórchGë
((*
ˇŒb
)(
uöt32
 
a
, 
uöt8
 
œ°
, uöt8 
cuºít
, *
d©a
),*data)

705 
uöt32
 
x
;

707 if(!
ChótComp
)

709 if(!
	`InôChótComp
())

710 
	`ChótMemEº
();

714 
x
=0;x<0x10000;x++)

715 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
Ë&& 
ChótRPås
[x>>10])

716 if(!
	`ˇŒb
(
x
,
ChótComp
[x],
ChótRPås
[x>>10][x],
d©a
))

718 
	}
}

720 
FCEUI_ChótSórchGëR™ge
(
uöt32
 
fú°
, uöt32 
œ°
, (*
ˇŒb
)(uöt32 
a
, 
uöt8
Üa°, uöt8 
cuºít
))

722 
uöt32
 
x
;

723 
uöt32
 
ö
=0;

725 if(!
ChótComp
)

727 if(!
	`InôChótComp
())

728 
	`ChótMemEº
();

732 
x
=0;x<0x10000;x++)

733 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
Ë&& 
ChótRPås
[x>>10])

735 if(
ö
>=
fú°
)

736 if(!
	`ˇŒb
(
x
,
ChótComp
[x],
ChótRPås
[x>>10][x]))

738 
ö
++;

739 if(
ö
>
œ°
) ;

741 
	}
}

743 
	$FCEUI_ChótSórchBegö
()

745 
uöt32
 
x
;

747 if(!
ChótComp
)

749 if(!
	`InôChótComp
())

751 
	`ChótMemEº
();

755 
x
=0;x<0x10000;x++)

757 if(
ChótRPås
[
x
>>10])

758 
ChótComp
[
x
]=
ChótRPås
[x>>10][x];

760 
ChótComp
[
x
]=
CHEATC_NONE
;

762 
	}
}

765 
INLINE
 
	$CAbs
(
x
)

767 if(
x
<0)

768 (0-
x
);

769  
x
;

770 
	}
}

772 
	$FCEUI_ChótSórchEnd
(
ty≥
, 
uöt8
 
v1
, uöt8 
v2
)

774 
uöt32
 
x
;

776 if(!
ChótComp
)

778 if(!
	`InôChótComp
())

780 
	`ChótMemEº
();

786 if(!
ty≥
)

788 
x
=0;x<0x10000;x++)

789 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

791 if(
ChótComp
[
x
]==
v1
 && 
ChótRPås
[x>>10][x]==
v2
)

796 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

799 if(
ty≥
==1)

801 
x
=0;x<0x10000;x++)

802 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

804 if(
ChótComp
[
x
]==
v1
 && 
	`CAbs
(ChótComp[x]-
ChótRPås
[x>>10][x])==
v2
)

809 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

812 if(
ty≥
==2)

814 
x
=0x000;x<0x10000;x++)

815 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

817 if(
	`CAbs
(
ChótComp
[
x
]-
ChótRPås
[x>>10][x])==
v2
)

822 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

825 if(
ty≥
==3)

827 
x
=0;x<0x10000;x++)

828 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

830 if(
ChótComp
[
x
]!=
ChótRPås
[x>>10][x])

835 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

838 if(
ty≥
==4)

840 
x
=0;x<0x10000;x++)

841 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

843 if(!(
ChótRPås
[
x
>>10][x]<
ChótComp
[x]))

844 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

847 if(
ty≥
==5)

849 
x
=0;x<0x10000;x++)

850 if(!(
ChótComp
[
x
]&
CHEATC_NOSHOW
))

852 if(!(
ChótRPås
[
x
>>10][x]>
ChótComp
[x]))

853 
ChótComp
[
x
]|=
CHEATC_EXCLUDED
;

856 if(
ty≥
>4)

857 
	`FCEUI_ChótSórchSëCuºítAsOrigöÆ
();

858 
	}
}

	@cheat.h

1 
FCEU_ChótRe£tRAM
();

2 
FCEU_ChótAddRAM
(
s
, 
uöt32
 
A
, 
uöt8
 *
p
);

4 
FCEU_LﬂdGameChóts
(
FILE
 *
ovîride
);

5 
FCEU_FlushGameChóts
(
FILE
 *
ovîride
, 
noßve
);

6 
FCEU_AµlyPîiodicChóts
();

7 
FCEU_PowîChóts
();

	@crc32.c

21 #i‚de‡
ZLIB


22 
	~"ty≥s.h
"

23 
	~"¸c32.h
"

25 
uöt32
 
	gCRC32TabÀ
[256] = {

92 
uöt32
 
	$CÆcCRC32
(
uöt32
 
¸c
, 
uöt8
 *
buf
, uöt32 
Àn
)

94 
¸c
=~crc;

96 
Àn
--)

97 
¸c
=(¸c>>8)^
CRC32TabÀ
[(¸c&0xFF)^(*
buf
++)];

98 (~
¸c
);

99 
	}
}

	@crc32.h

1 #ifde‡
ZLIB


2 
	~<zlib.h
>

3 
	#CÆcCRC32
 
¸c32


	)

5 
uöt32
 
CÆcCRC32
(uöt32 
¸c
, 
uöt8
 *
buf
, uöt32 
Àn
);

	@debug.c

21 
	~<°dio.h
>

22 
	~"ty≥s.h
"

23 
	~"f˚.h
"

24 
	~"debug.h
"

28 
	$DumpMem
(*
‚ame
, 
uöt32
 
°¨t
, uöt32 
íd
)

30 
FILE
 *
Â
=
	`f›í
(
‚ame
,"wb");

31 ;
°¨t
<=
íd
;start++)

32 
	`Âutc
(
ARód
[
°¨t
](°¨t),
Â
);

33 
	`f˛o£
(
Â
);

35 
	}
}

	@debug.h

1 
DumpMem
(*
‚ame
, 
uöt32
 
°¨t
, uöt32 
íd
);

	@dprintf.h

2 
	~<°dio.h
>

4 
uöt32
 
time°amp
;

5 
uöt32
 
‰amecou¡
;

6 
sˇ∆öe
;

8 #unde‡
d¥ötf


9 
	#d¥ötf
(
f
,...Ë
	`¥ötf
("%05u:%05u:%03i: " f "\n",
time°amp
,
‰amecou¡
,
sˇ∆öe
,##
__VA_ARGS__
)

	)

13 
	#d¥ötf
(
x
...)

	)

	@drawing.h

1 
	#SCREEN_WIDTH
 320

	)

2 
	#SCREEN_OFFS
 32

	)

4 
	$DøwTextLöeBG
(
uöt8
 *
de°
)

6 
x
,
y
;

7 
ŸabÀ
[7]={81,49,30,17,8,3,0};

9 
y
=0;y<14;y++)

11 
offs
;

13 if(
y
>=7Ë
offs
=
ŸabÀ
[13-y];

14 
offs
=
ŸabÀ
[
y
];

16 
x
=
offs
;x<(256-offs);x++)

17 
de°
[
y
*
SCREEN_WIDTH
+
x
]=(dest[y*SCREEN_WIDTH+x]&0x0f)|0xC0;

19 
	}
}

21 
	$DøwMesßge
()

23 if(
howl⁄g
)

25 
uöt8
 *
t
;

26 
howl⁄g
--;

27 
t
=
XBuf
+(
FSëtögs
.
La°SLöe
-16)*
SCREEN_WIDTH
+
SCREEN_OFFS
;

28 if(
t
>=
XBuf
)

30 
	`DøwTextLöeBG
(
t
);

31 
	`DøwTextTøns
(
t
+3*
SCREEN_WIDTH
+(128-
	`°æí
(
îrmsg
)*4),SCREEN_WIDTH,(
uöt8
 *)errmsg,4);

34 
	}
}

36 
uöt8
 
	gf⁄td©a2
[2048] =

48 
	$DøwTextTøns
(
uöt8
 *
de°
, 
uöt32
 
width
, uöt8 *
ãxtmsg
, uöt8 
fgcﬁ‹
)

50 
uöt8
 
Àngth
=
	`°æí
((*)
ãxtmsg
);

51 
uöt8
 
x
;

52 
uöt8
 
y
;

53 
uöt8
 
z
;

55 
x
=0;x<
Àngth
;x++)

56 
y
=0;y<8;y++)

57 
z
=0;z<8;z++)

58 if((
f⁄td©a2
[(
ãxtmsg
[
x
]<<3)+
y
]>>
z
)&1Ë
de°
[y*
width
+(x<<3)+z]=
fgcﬁ‹
;

59 
	}
}

61 
uöt8
 
	gs°©
[2541] =

80 
	$FCEU_DøwNumbîRow
(
uöt8
 *
XBuf
, *
n°©us
, 
cur
)

82 
uöt8
 *
XBaf
;

83 
z
,
x
,
y
;

85 
XBaf
=
XBuf
 - 4 + (
FSëtögs
.
La°SLöe
-34)*
SCREEN_WIDTH
+
SCREEN_OFFS
;

86 if(
XBaf
>=
XBuf
)

87 
z
=1;z<11;z++)

89 if(
n°©us
[
z
%10])

91 
y
=0;y<13;y++)

92 
x
=0;x<21;x++)

93 
XBaf
[
y
*
SCREEN_WIDTH
+
x
+
z
*21+z]=
s°©
[y*21+x+(z-1)*21*12]^0x80;

95 
y
=0;y<13;y++)

96 
x
=0;x<21;x++)

97 if(
s°©
[
y
*21+
x
+(
z
-1)*21*12]!=0x83)

98 
XBaf
[
y
*
SCREEN_WIDTH
+
x
+
z
*21+z]=
s°©
[y*21+x+(z-1)*21*12]^0x80;

101 
XBaf
[
y
*
SCREEN_WIDTH
+
x
+
z
*21+z]=(XBaf[y*SCREEN_WIDTH+x+z*21+z]&0xF)|0xC0;

103 if(
cur
==
z
%10)

105 
x
=0;x<21;x++)

106 
XBaf
[
x
+
z
*21+z*1]=4;

107 
x
=1;x<12;x++)

109 
XBaf
[
SCREEN_WIDTH
*
x
+
z
*21+z*1]=

110 
XBaf
[
SCREEN_WIDTH
*
x
+
z
*21+z*1+20]=4;

112 
x
=0;x<21;x++)

113 
XBaf
[12*
SCREEN_WIDTH
+
x
+
z
*21+z*1]=4;

116 
	}
}

118 
uöt8
 
	g∂ay_¶öes
[]=

138 
uöt8
 
	gªc‹d_¶öes
[]=

158 
uöt8
 
	g∑u£_¶öes
[]=

194 
uöt8
 
	gno_¶öes
[]=

199 
uöt8
* 
	g¶öe_ic⁄s
[4]=

201 
no_¶öes
,

202 
∂ay_¶öes
,

203 
ªc‹d_¶öes
,

204 
∑u£_¶öes


207 
	$FCEU_DøwRec‹dögSètusN
(
uöt8
* 
XBuf
, 
n
)

209 
uöt8
* 
¶öes
=
¶öe_ic⁄s
[
n
];

210 
i
;

212 
XBuf
 +(
FSëtögs
.
La°SLöe
-28)*
SCREEN_WIDTH
+
SCREEN_OFFS
 + 240 + 255;

213 
i
=0; 
¶öes
[i]!=99; i+=3)

215 
y
=
¶öes
[
i
];

216 
uöt8
* 
de°
=
XBuf
+(
y
*
SCREEN_WIDTH
);

217 
x
;

218 
x
=
¶öes
[
i
+1]; x!=slines[i+2]; ++x)

219 
de°
[
x
]=0;

222 
XBuf
 -= 255;

223 
i
=0; 
¶öes
[i]!=99; i+=3)

225 
y
=
¶öes
[
i
];

226 
uöt8
* 
de°
=
XBuf
+(
y
*
SCREEN_WIDTH
);

227 
x
;

228 
x
=
¶öes
[
i
+1]; x!=slines[i+2]; ++x)

229 
de°
[
x
]=4;

231 
	}
}

	@driver.h

1 
	~"ty≥s.h
"

2 
	~"gô.h
"

6 
FCEUD_Upd©e
(
uöt8
 *
buf
, 
öt16
 *
Buf„r
, 
Cou¡
);

9 
FCEUD_SëPÆëã
(
uöt8
 
ödex
, uöt8 
r
, uöt8 
g
, uöt8 
b
);

10 
FCEUD_GëPÆëã
(
uöt8
 
i
,uöt8 *
r
, *
g
, *
b
);

13 
FCEUD_WrôeSoundD©a
(
öt32
 *
Buf„r
, 
Cou¡
);

16 
FCEUD_PrötEº‹
(*
s
);

18 #ifde‡
NETWORK


21 
FCEUD_Nëw‹kC⁄√˘
();

22 
FCEUD_Nëw‹kRecvD©a
(
uöt8
 *
d©a
, 
uöt32
 
Àn
, 
block
);

23 
FCEUD_Nëw‹kSídD©a
(
uöt8
 *
d©a
, 
uöt32
 
Àn
);

24 
FCEUD_Nëw‹kClo£
();

28 
	#DES_NTSCCOL
 2

	)

30 
	#DES_RESET
 0x10

	)

31 
	#DES_POWER
 0x11

	)

33 
	#DES_GETNTSCHUE
 0x20

	)

34 
	#DES_GETNTSCTINT
 0x21

	)

35 
	#DES_SETNTSCHUE
 0x22

	)

36 
	#DES_SETNTSCTINT
 0x23

	)

38 
	#DES_NSFINC
 0x50

	)

39 
	#DES_NSFDEC
 0x51

	)

40 
	#DES_NSFRES
 0x52

	)

42 
	#DES_VSUNIDIPSET
 0x70

	)

43 
	#DES_VSUNITOGGLEDIPVIEW
 0x71

	)

44 
	#DES_VSUNICOIN
 0x72

	)

45 
	#DES_FDSINSERT
 0x80

	)

46 
	#DES_FDSEJECT
 0x81

	)

47 
	#DES_FDSSELECT
 0x82

	)

49 
	#DES_NTSCSELHUE
 0x90

	)

50 
	#DES_NTSCSELTINT
 0x91

	)

51 
	#DES_NTSCDEC
 0x92

	)

52 
	#DES_NTSCINC
 0x93

	)

54 
DrivîI¡îÁ˚
(
w
, *
d
);

56 
FCEUI_SëI≈ut
(
p‹t
, 
ty≥
, *
±r
, 
©åib
);

57 
FCEUI_SëI≈utFC
(
ty≥
, *
±r
, 
©åib
);

58 
FCEUI_DißbÀFourSc‹e
(
s
);

60 
FCEUI_GëNTSCTH
(*
töt
, *
hue
);

61 
FCEUI_SëNTSCTH
(
n
, 
töt
, 
hue
);

63 
	~"vîsi⁄.h
"

65 
	#SI_NONE
 0

	)

66 
	#SI_GAMEPAD
 1

	)

67 
	#SI_ZAPPER
 2

	)

68 
	#SI_POWERPADA
 3

	)

69 
	#SI_POWERPADB
 4

	)

70 
	#SI_ARKANOID
 5

	)

72 
	#SIFC_NONE
 0

	)

73 
	#SIFC_ARKANOID
 1

	)

74 
	#SIFC_SHADOW
 2

	)

75 
	#SIFC_4PLAYER
 3

	)

76 
	#SIFC_FKB
 4

	)

77 
	#SIFC_SUBORKB
 5

	)

78 
	#SIFC_HYPERSHOT
 6

	)

79 
	#SIFC_MAHJONG
 7

	)

80 
	#SIFC_QUIZKING
 8

	)

81 
	#SIFC_FTRAINERA
 9

	)

82 
	#SIFC_FTRAINERB
 10

	)

83 
	#SIFC_OEKAKIDS
 11

	)

84 
	#SIFC_BWORLD
 12

	)

85 
	#SIFC_TOPRIDER
 13

	)

87 
	#SIS_NONE
 0

	)

88 
	#SIS_DATACH
 1

	)

89 
	#SIS_NWC
 2

	)

90 
	#SIS_VSUNISYSTEM
 3

	)

91 
	#SIS_NSF
 4

	)

97 
FCEUI_SëS«pName
(
a
);

100 
FCEUI_DißbÀS¥ôeLimô©i⁄
(
a
);

103 
FCEUI_SaveExåaD©aUndîBa£
(
a
);

106 
FCEUGI
 *
FCEUI_LﬂdGame
(*
«me
);

107 
LﬂdGameLa°Eº‹
;

110 
FCEUI_Inôülize
();

112 
FCEUI_Kûl
();

113 
FCEUI_SëEmuMode
(
is_√w
);

116 (*
FCEUI_Emuœã
)();

119 
	`FCEUI_Clo£Game
();

122 
	`FCEUI_SëGameGíõ
(
a
);

125 
	`FCEUI_SëVidSy°em
(
a
);

128 
	`FCEUI_GëCuºítVidSy°em
(*
¶°¨t
, *
¶íd
);

130 #ifde‡
FRAMESKIP


135 
	`FCEUI_FømeSkù
(
x
);

139 
	`FCEUI_SëRídîedLöes
(
¡scf
, 
¡s˛
, 
∑lf
, 
∑Œ
);

143 
	`FCEUI_SëBa£Dúe˘‹y
(*
dú
);

148 
	`FCEUI_SëPÆëãAºay
(
uöt8
 *
∑l
);

156 
	`FCEUI_Sound
(
R©e
);

157 
	`FCEUI_SëSoundVﬁume
(
uöt32
 
vﬁume
);

159 #ifde‡
NETWORK


162 
	`FCEUI_SëNëw‹kPœy
(
ty≥
);

165 
	`FCEUI_Sñe˘Sèã
(
w
);

166 
	`FCEUI_SaveSèã
(c⁄° *
‚ame
);

167 
	`FCEUI_LﬂdSèã
(c⁄° *
‚ame
);

168 
öt32
 
	`FCEUI_GëDesúedFPS
();

169 
	`FCEUI_SaveS«pshŸ
();

170 
	`FCEU_Di•Mesßge
(*
f‹m©
, ...);

171 
	`FCEU_C™˚lDi•Mesßge
();

172 
	#FCEUI_Di•Mesßge
 
FCEU_Di•Mesßge


	)

174 
	`FCEUI_AddChót
(c⁄° *
«me
, 
uöt32
 
addr
, 
uöt8
 
vÆ
, 
com∑ª
, 
ty≥
);

175 
	`FCEUI_DñChót
(
uöt32
 
which
);

177 
öt32
 
	`FCEUI_ChótSórchGëCou¡
();

178 
	`FCEUI_ChótSórchGëR™ge
(
uöt32
 
fú°
, uöt32 
œ°
, (*
ˇŒb
)(uöt32 
a
, 
uöt8
Üa°, uöt8 
cuºít
));

179 
	`FCEUI_ChótSórchGë
((*
ˇŒb
)(
uöt32
 
a
, 
uöt8
 
œ°
, uöt8 
cuºít
, *
d©a
),*data);

180 
	`FCEUI_ChótSórchBegö
();

181 
	`FCEUI_ChótSórchEnd
(
ty≥
, 
uöt8
 
v1
, uöt8 
v2
);

182 
	`FCEUI_Li°Chóts
((*
ˇŒb
)(*
«me
, 
uöt32
 
a
, 
uöt8
 
v
, 
com∑ª
, 
s
, 
ty≥
, *
d©a
), *data);

184 
	`FCEUI_GëChót
(
uöt32
 
which
, **
«me
, uöt32 *
a
, 
uöt8
 *
v
, *
com∑ª
, *
s
, *
ty≥
);

185 
	`FCEUI_SëChót
(
uöt32
 
which
, c⁄° *
«me
, 
öt32
 
a
, i¡32 
v
, 
com∑ª
,
s
, 
ty≥
);

186 
	`FCEUI_ChótSórchShowEx˛uded
();

187 
	`FCEUI_ChótSórchSëCuºítAsOrigöÆ
();

189 
	`FCEUI_DecodePAR
(c⁄° *
code
, 
uöt16
 *
a
, 
uöt8
 *
v
, *
c
, *
ty≥
);

190 
	`FCEUI_DecodeGG
(c⁄° *
°r
, 
uöt16
 *
a
, 
uöt8
 *
v
, *
c
);

191 
	`FCEUI_ToggÀChót
(
uöt32
 
which
);

193 
	#FCEUIOD_STATE
 0

	)

194 
	#FCEUIOD_SNAPS
 1

	)

195 
	#FCEUIOD_NV
 2

	)

196 
	#FCEUIOD_CHEATS
 3

	)

197 
	#FCEUIOD_MISC
 4

	)

199 
	#FCEUIOD__COUNT
 5

	)

201 
	`FCEUI_SëDúOvîride
(
which
, *
n
);

	@drivers/android/debug.c

1 
	#LOG_TAG
 "lib√s"

	)

2 
	~<cutûs/log.h
>

4 
	$FCEUD_PrötEº‹
(*
s
)

6 
	`LOGE
(
s
);

7 
	}
}

9 
	$FCEUD_Mesßge
(*
s
)

11 
	`LOGD
(
s
);

12 
	}
}

	@drivers/android/emulator.cpp

2 
	~"drivî.h
"

3 
	~"f˚.h
"

5 
Clo£Game
();

7 
	~<±hªad.h
>

9 
	#LOG_TAG
 "lib√s"

	)

10 
	~<utûs/Log.h
>

11 
	~<ui/SurÁ˚.h
>

12 
	~<«tivehñ≥r/JNIHñp.h
>

13 
	~<«tivehñ≥r/jni.h
>

14 
	~"video.h
"

15 
	~"sound.h
"

16 
	~"öput.h
"

17 
	~"ticks.h
"

19 
	#SOUND_RATE
 22050

	)

21 
uöt8
 
Exô
;

23 
	gsoundvﬁ
 = 100;

24 
±hªad_t
 
	gemuThªad
;

25 
±hªad_muãx_t
 
	gemuSèãMuãx
;

26 
±hªad_c⁄d_t
 
	gemuSèãC⁄d
;

27 
FCEUGI
 *
	gcuºítGame
;

28 
	gemuSèã
;

29 
	g°¨tReque°ed
;

31 
usög
 
«me•a˚
 
	g™droid
;

32 
	g•
<
	gSurÁ˚
> 
	gªndîSurÁ˚
;

35 
	mEMUSTATE_RUNNING
,

36 
	mEMUSTATE_PAUSED
,

37 
	mEMUSTATE_REQUEST_PAUSE
,

38 
	mEMUSTATE_REQUEST_RUN
,

39 
	mEMUSTATE_QUIT


42 
	$showFPS
()

44 
‰ames
;

45 
œ°
;

46 
now
 = 
	`ticksGëTicks
();

48 
‰ames
++;

49 i‡(
now
 - 
œ°
 >= 1000) {

50 
	`LOGD
("Âs: %d", 
‰ames
 * 1000 / (
now
 - 
œ°
));

51 
œ°
 = 
now
;

52 
‰ames
 = 0;

54 
	}
}

56 
	$FCEUD_Upd©e
(
uöt8
 *
xbuf
, 
öt16
 *
Buf„r
, 
Cou¡
)

58 
	`öputUpd©e
();

60 i‡(
xbuf
 !
NULL
) {

61 
SurÁ˚
::
SurÁ˚Info
 
öfo
;

62 i‡(
ªndîSurÁ˚
->
	`lock
(&
öfo
, 
Ál£
Ë=
NO_ERROR
) {

63 
	`videoDøwS¸ìn
((
uöt8
 *Ë
öfo
.
bôs
, info.
b¥
, 
xbuf
 + 32, 320);

64 
ªndîSurÁ˚
->
	`u∆ockAndPo°
();

67 i‡(
Cou¡
 > 0)

68 
	`soundPœy
(
Buf„r
, 
Cou¡
);

70 
	`showFPS
();

71 
	}
}

73 
	$∑u£Emuœt‹
()

75 
	`±hªad_muãx_lock
(&
emuSèãMuãx
);

76 i‡(
emuSèã
 =
EMUSTATE_RUNNING
) {

77 
Exô
 = 1;

78 
emuSèã
 = 
EMUSTATE_REQUEST_PAUSE
;

79 
emuSèã
 =
EMUSTATE_REQUEST_PAUSE
)

80 
	`±hªad_c⁄d_waô
(&
emuSèãC⁄d
, &
emuSèãMuãx
);

82 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

83 
	}
}

85 
	$ªsumeEmuœt‹
()

87 i‡(
°¨tReque°ed
 <= 0 ||

88 
ªndîSurÁ˚
 =
NULL
 || 
cuºítGame
 == NULL)

91 
	`±hªad_muãx_lock
(&
emuSèãMuãx
);

92 i‡(
emuSèã
 =
EMUSTATE_PAUSED
) {

93 
emuSèã
 = 
EMUSTATE_REQUEST_RUN
;

94 
	`±hªad_c⁄d_sig«l
(&
emuSèãC⁄d
);

96 
emuSèã
 =
EMUSTATE_REQUEST_RUN
)

97 
	`±hªad_c⁄d_waô
(&
emuSèãC⁄d
, &
emuSèãMuãx
);

99 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

100 
	}
}

102 
	$u∆ﬂdROM
()

104 i‡(
cuºítGame
 =
NULL
)

107 
	`∑u£Emuœt‹
();

108 
	`soundSt›
();

109 
	`Clo£Game
();

110 
cuºítGame
 = 
NULL
;

111 
	}
}

113 *
	$emuThªadProc
(*
¨g
)

115 
åue
) {

116 
	`±hªad_muãx_lock
(&
emuSèãMuãx
);

117 
emuSèã
 =
EMUSTATE_PAUSED
)

118 
	`±hªad_c⁄d_waô
(&
emuSèãC⁄d
, &
emuSèãMuãx
);

119 i‡(
emuSèã
 =
EMUSTATE_QUIT
) {

120 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

123 i‡(
emuSèã
 =
EMUSTATE_REQUEST_RUN
) {

124 
emuSèã
 = 
EMUSTATE_RUNNING
;

125 
	`±hªad_c⁄d_sig«l
(&
emuSèãC⁄d
);

127 
Exô
 = 0;

128 
	`öputRe£t
();

129 
	`soundSèπ
();

130 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

132 
	`FCEUI_Emuœã
();

134 
	`±hªad_muãx_lock
(&
emuSèãMuãx
);

135 
	`soundPau£
();

136 i‡(
emuSèã
 =
EMUSTATE_REQUEST_PAUSE
) {

137 
emuSèã
 = 
EMUSTATE_PAUSED
;

138 
	`±hªad_c⁄d_sig«l
(&
emuSèãC⁄d
);

140 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

142  
NULL
;

143 
	}
}

145 
jboﬁón
 
	$Emuœt‹_öôülize
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
j°rög
 
jdú
)

147 i‡(!
	`FCEUI_Inôülize
())

148  
JNI_FALSE
;

150 
	`ticksInôülize
();

151 
	`öputInôülize
();

152 i‡(!
	`videoInôülize
())

153  
JNI_FALSE
;

155 c⁄° *
libdú
 = 
ív
->
	`GëSåögUTFCh¨s
(
jdú
, 
NULL
);

156 i‡(
	`soundInôülize
(
libdú
, 
SOUND_RATE
, 
Ál£
))

157 
	`FCEUI_Sound
(
SOUND_RATE
);

159 
	`LOGW
("Cannot initialize sound device");

160 
	`FCEUI_Sound
(0);

162 
ív
->
	`Rñó£SåögUTFCh¨s
(
jdú
, 
libdú
);

164 
cuºítGame
 = 
NULL
;

165 
ªndîSurÁ˚
 = 
NULL
;

166 
emuSèã
 = 
EMUSTATE_PAUSED
;

167 
°¨tReque°ed
 = 0;

169 
	`±hªad_muãx_öô
(&
emuSèãMuãx
, 
NULL
);

170 
	`±hªad_c⁄d_öô
(&
emuSèãC⁄d
, 
NULL
);

171 
	`±hªad_¸óã
(&
emuThªad
, 
NULL
, 
emuThªadProc
, NULL);

172  
JNI_TRUE
;

173 
	}
}

175 
	$Emuœt‹_˛ónUp
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

177 
	`u∆ﬂdROM
();

179 
	`±hªad_muãx_lock
(&
emuSèãMuãx
);

180 
emuSèã
 = 
EMUSTATE_QUIT
;

181 
	`±hªad_c⁄d_sig«l
(&
emuSèãC⁄d
);

182 
	`±hªad_muãx_u∆ock
(&
emuSèãMuãx
);

185 
	`±hªad_joö
(
emuThªad
, 
NULL
);

186 
emuThªad
 = 
NULL
;

187 
ªndîSurÁ˚
 = 
NULL
;

189 
	`öputCÀ™up
();

190 
	`soundCÀ™up
();

191 
	`videoCÀ™up
();

192 
	}
}

195 
	$Emuœt‹_£tRídîSurÁ˚
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, jobje˘ 
surÁ˚
)

197 
	`∑u£Emuœt‹
();

199 
ªndîSurÁ˚
 = 
NULL
;

200 i‡(
surÁ˚
 !
NULL
) {

201 
j˛ass
 
˛azz
 = 
ív
->
	`GëObje˘Cœss
(
surÁ˚
);

202 
jfõldID
 
fid
 = 
ív
->
	`GëFõldID
(
˛azz
, "mSurface", "I");

203 
ªndîSurÁ˚
 = 
ªöãΩªt_ˇ°
<
SurÁ˚
 *>

204 (
ív
->
	`GëI¡Fõld
(
surÁ˚
, 
fid
));

206 
	`ªsumeEmuœt‹
();

208 
	}
}

211 
	$Emuœt‹_£tSoundE«bÀd
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
jboﬁón
 
íabÀd
)

213 
	`∑u£Emuœt‹
();

215 
	`FCEUI_Sound
(
íabÀd
 ? 
SOUND_RATE
 : 0);

216 
	`soundSëE«bÀd
(
íabÀd
 !
JNI_FALSE
);

218 
	`ªsumeEmuœt‹
();

219 
	}
}

221 
	$Emuœt‹_ª£t
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

223 i‡(
cuºítGame
 !
NULL
) {

224 
	`∑u£Emuœt‹
();

225 
	`Re£tNES
();

226 
	`ªsumeEmuœt‹
();

228 
	}
}

230 
	$Emuœt‹_powî
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

232 i‡(
cuºítGame
 !
NULL
) {

233 
	`∑u£Emuœt‹
();

234 
	`PowîNES
();

235 
	`ªsumeEmuœt‹
();

237 
	}
}

239 
jboﬁón
 
	$Emuœt‹_lﬂdROM
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
j°rög
 
jfûe
)

241 
	`u∆ﬂdROM
();

242 
	`FCEU_C™˚lDi•Mesßge
();

244 c⁄° *
romfûe
 = 
ív
->
	`GëSåögUTFCh¨s
(
jfûe
, 
NULL
);

245 i‡(
romfûe
 =
NULL
)

246  
JNI_FALSE
;

248 
jboﬁón
 
rv
 = 
JNI_FALSE
;

251 
cuºítGame
 = 
	`FCEUI_LﬂdGame
(
c⁄°_ˇ°
<*> (
romfûe
));

252 i‡(
cuºítGame
 =
NULL
)

253 
îr‹
;

255 
	`ªsumeEmuœt‹
();

256 
rv
 = 
JNI_TRUE
;

257 
îr‹
:

258 
ív
->
	`Rñó£SåögUTFCh¨s
(
jfûe
, 
romfûe
);

259  
rv
;

260 
	}
}

262 
	$Emuœt‹_u∆ﬂdROM
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

264 
	`u∆ﬂdROM
();

265 
	}
}

267 
	$Emuœt‹_∑u£
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

269 i‡(--
°¨tReque°ed
 == 0) {

270 
	`∑u£Emuœt‹
();

272 
	}
}

274 
	$Emuœt‹_ªsume
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
)

276 i‡(
°¨tReque°ed
++ == 0) {

277 
	`ªsumeEmuœt‹
();

279 
	}
}

281 
jboﬁón
 
	$Emuœt‹_ßveSèã
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
j°rög
 
jfûe
)

283 c⁄° *
‚ame
 = 
ív
->
	`GëSåögUTFCh¨s
(
jfûe
, 
NULL
);

284 i‡(
‚ame
 =
NULL
)

285  
JNI_FALSE
;

287 
	`∑u£Emuœt‹
();

288 
	`FCEUI_SaveSèã
(
‚ame
);

289 
	`ªsumeEmuœt‹
();

291 
ív
->
	`Rñó£SåögUTFCh¨s
(
jfûe
, 
‚ame
);

292  
JNI_TRUE
;

293 
	}
}

295 
jboﬁón
 
	$Emuœt‹_lﬂdSèã
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
j°rög
 
jfûe
)

297 c⁄° *
‚ame
 = 
ív
->
	`GëSåögUTFCh¨s
(
jfûe
, 
NULL
);

298 i‡(
‚ame
 =
NULL
)

299  
JNI_FALSE
;

301 
	`∑u£Emuœt‹
();

302 
	`FCEUI_LﬂdSèã
(
‚ame
);

303 
	`ªsumeEmuœt‹
();

305 
ív
->
	`Rñó£SåögUTFCh¨s
(
jfûe
, 
‚ame
);

306  
JNI_TRUE
;

307 
	}
}

309 
	$Emuœt‹_¥o˚ssKeyDown
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
jöt
 
key
)

311 i‡(
emuSèã
 =
EMUSTATE_RUNNING
)

312 
	`öputKeyDown
(
key
);

313 
	}
}

315 
	$Emuœt‹_¥o˚ssKeyUp
(
JNIEnv
 *
ív
, 
jobje˘
 
£lf
, 
jöt
 
key
)

317 i‡(
emuSèã
 =
EMUSTATE_RUNNING
)

318 
	`öputKeyUp
(
key
);

319 
	}
}

322 
	$ªgi°î_Emuœt‹
(
JNIEnv
 *
ív
)

324 c⁄° 
JNIN©iveMëhod
 
mëhods
[] = {

326 (*Ë
Emuœt‹_£tRídîSurÁ˚
 },

327 { "¥o˚ssKeyDown", "(I)V", (*Ë
Emuœt‹_¥o˚ssKeyDown
 },

328 { "¥o˚ssKeyUp", "(I)V", (*Ë
Emuœt‹_¥o˚ssKeyUp
 },

331 (*Ë
Emuœt‹_£tSoundE«bÀd
 },

333 (*Ë
Emuœt‹_öôülize
 },

334 { "˛ónUp", "()V", (*Ë
Emuœt‹_˛ónUp
 },

335 { "ª£t", "()V", (*Ë
Emuœt‹_ª£t
 },

336 { "powî", "()V", (*Ë
Emuœt‹_powî
 },

337 { "lﬂdROM", "(Ljava/œng/Såög;)Z", (*Ë
Emuœt‹_lﬂdROM
 },

338 { "u∆ﬂdROM", "()V", (*Ë
Emuœt‹_u∆ﬂdROM
 },

339 { "∑u£", "()V", (*Ë
Emuœt‹_∑u£
 },

340 { "ªsume", "()V", (*Ë
Emuœt‹_ªsume
 },

341 { "ßveSèã", "(Ljava/œng/Såög;)Z", (*Ë
Emuœt‹_ßveSèã
 },

342 { "lﬂdSèã", "(Ljava/œng/Såög;)Z", (*Ë
Emuœt‹_lﬂdSèã
 },

345  
	`jniRegi°îN©iveMëhods
(
ív
, "com/androidemu/nes/Emulator",

346 
mëhods
, 
	`NELEM
(methods));

347 
	}
}

	@drivers/android/file.c

1 
	~<°dio.h
>

3 
FILE
 *
	$FCEUD_UTF8f›í
(c⁄° *
‚
, c⁄° *
mode
)

5  
	`f›í
(
‚
, 
mode
);

6 
	}
}

	@drivers/android/input.cpp

2 
	~"drivî.h
"

5 
	#GAMEPAD_A
 0x0001

	)

6 
	#GAMEPAD_B
 0x0002

	)

7 
	#GAMEPAD_UP
 0x0010

	)

8 
	#GAMEPAD_DOWN
 0x0020

	)

9 
	#GAMEPAD_LEFT
 0x0040

	)

10 
	#GAMEPAD_RIGHT
 0x0080

	)

12 
	#GAMEPAD_A_TURBO
 (
GAMEPAD_A
 << 16)

	)

13 
	#GAMEPAD_B_TURBO
 (
GAMEPAD_B
 << 16)

	)

15 
	#GAMEPAD_LEFT_RIGHT
 (
GAMEPAD_LEFT
 | 
GAMEPAD_RIGHT
)

	)

16 
	#GAMEPAD_UP_DOWN
 (
GAMEPAD_UP
 | 
GAMEPAD_DOWN
)

	)

18 
uöt32
 
JSªtu∫
;

19 
uöt32
 
	gkeySèãs
;

21 
boﬁ
 
	$öputInôülize
()

23 
JSªtu∫
 = 0;

24 
keySèãs
 = 0;

26 
	`FCEUI_SëI≈ut
(0, 
SI_GAMEPAD
, &
JSªtu∫
, 0);

27  
åue
;

28 
	}
}

30 
	$öputCÀ™up
()

32 
	}
}

34 
	$öputUpd©e
()

36 
uöt32
 
°©es
 = 
keySèãs
;

38 
JSªtu∫
 = (
°©es
 & 0xffff);

39 i‡((
JSªtu∫
 & 
GAMEPAD_LEFT_RIGHT
) == GAMEPAD_LEFT_RIGHT)

40 
JSªtu∫
 &~
GAMEPAD_LEFT_RIGHT
;

41 i‡((
JSªtu∫
 & 
GAMEPAD_UP_DOWN
) == GAMEPAD_UP_DOWN)

42 
JSªtu∫
 &~
GAMEPAD_UP_DOWN
;

44 
turbo
 = 0;

45 i‡(
turbo
 ^= 1) {

46 i‡(
°©es
 & 
GAMEPAD_A_TURBO
)

47 
JSªtu∫
 |
GAMEPAD_A
;

48 i‡(
°©es
 & 
GAMEPAD_B_TURBO
)

49 
JSªtu∫
 |
GAMEPAD_B
;

51 
	}
}

	@drivers/android/input.h

1 
	~"ty≥s.h
"

3 
uöt32
 
keySèãs
;

5 
boﬁ
 
öputInôülize
();

6 
boﬁ
 
öputCÀ™up
();

7 
öputUpd©e
();

9 
ölöe
 
	$öputKeyDown
(
key
)

11 
keySèãs
 |
key
;

12 
	}
}

14 
ölöe
 
	$öputKeyUp
(
key
)

16 
keySèãs
 &~
key
;

17 
	}
}

19 
ölöe
 
	$öputRe£t
()

21 
keySèãs
 = 0;

22 
	}
}

	@drivers/android/main.cpp

1 
	#LOG_TAG
 "lib√s"

	)

2 
	~<utûs/Log.h
>

3 
	~<«tivehñ≥r/jni.h
>

5 
	#REGISTER_NATIVE
(
ív
, 
moduÀ
) { \

6 
ªgi°î_
##
	`moduÀ
(
JNIEnv
 *); \

7 i‡(
ªgi°î_
##
	`moduÀ
(
ív
) < 0) \

8  
JNI_FALSE
; \

9 }

	)

16 
	$ªgi°îN©ives
(
JNIEnv
* 
ív
)

18 
	`REGISTER_NATIVE
(
ív
, 
Emuœt‹
);

20  
JNI_TRUE
;

21 
	}
}

31 
JNIEnv
* 
	mív
;

32 * 
	mvív
;

33 } 
	tUni⁄JNIEnvToVoid
;

36 
__©åibuã__
((
visibûôy
("default")))

37 
jöt
 
	$JNI_OnLﬂd
(
JavaVM
* 
vm
, * 
ª£rved
)

39 
Uni⁄JNIEnvToVoid
 
uív
;

40 
uív
.
vív
 = 
NULL
;

41 
jöt
 
ªsu…
 = -1;

42 
JNIEnv
* 
ív
 = 
NULL
;

44 
	`LOGI
("JNI_OnLoad");

46 i‡(
vm
->
	`GëEnv
(&
uív
.
vív
, 
JNI_VERSION_1_4
Ë!
JNI_OK
) {

47 
	`LOGE
("ERROR: GetEnv failed");

48 
baû
;

50 
ív
 = 
uív
.env;

52 i‡(
	`ªgi°îN©ives
(
ív
Ë!
JNI_TRUE
) {

53 
	`LOGE
("ERROR:ÑegisterNatives failed");

54 
baû
;

57 
ªsu…
 = 
JNI_VERSION_1_4
;

59 
baû
:

60  
ªsu…
;

61 
	}
}

	@drivers/android/netplay.c

1 #ifde‡
NETWORK


3 
	~"ty≥s.h
"

5 
	$FCEUD_Nëw‹kC⁄√˘
()

8 
	}
}

10 
	$FCEUD_SídD©a
(*
d©a
, 
uöt32
 
Àn
)

13 
	}
}

15 
	$FCEUD_RecvD©a
(*
d©a
, 
uöt32
 
Àn
)

18 
	}
}

20 
	$FCEUD_Nëw‹kClo£
()

22 
	}
}

24 
	$FCEUD_Në∂ayText
(
uöt8
 *
ãxt
)

26 
	}
}

	@drivers/android/sound.cpp

1 
	~<dlf˙.h
>

2 
	~<utûs/Log.h
>

3 
	~<utûs/misc.h
>

5 
	gch™√ls
;

7 
	$boﬁ
 (*
drivîSoundInôülize
)(, );

8 (*
drivîSoundCÀ™up
)();

9 (*
drivîSoundSèπ
)();

10 (*
drivîSoundSt›
)();

11 (*
drivîSoundPau£
)();

12 (*
drivîSoundPœy
)(*, );

14 
boﬁ
 
	$soundInôülize
(c⁄° *
libdú
, 
øã
, 
boﬁ
 
°îeo
)

16 c⁄° *c⁄° 
so_«mes
[] = {

21 *
h™dÀ
 = 
NULL
;

22 
i
 = 0; i < 
	`NELEM
(
so_«mes
); i++) {

23 
∑th
[1024];

24 
	`¢¥ötf
(
∑th
, ’©h), "%s/lib%s.so", 
libdú
, 
so_«mes
[
i
]);

25 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
);

26 i‡(
h™dÀ
 !
NULL
)

29 
	`LOGW
("C™nŸÜﬂd %s: %s", 
∑th
, 
	`dÀº‹
());

31 i‡(
h™dÀ
 =
NULL
)

32  
Ál£
;

34 
ch™√ls
 = (
°îeo
 ? 2 : 1);

36 
drivîSoundInôülize
 = (
	`boﬁ
(*)(, ))

37 
	`dlsym
(
h™dÀ
, "sound_initialize");

38 i‡(
drivîSoundInôülize
 =
NULL
 ||

39 !
	`drivîSoundInôülize
(
øã
, 
ch™√ls
)) {

40 
	`dl˛o£
(
h™dÀ
);

41  
Ál£
;

44 
drivîSoundCÀ™up
 = ((*)()Ë
	`dlsym
(
h™dÀ
, "sound_cleanup");

45 
drivîSoundSèπ
 = ((*)()Ë
	`dlsym
(
h™dÀ
, "sound_start");

46 
drivîSoundSt›
 = ((*)()Ë
	`dlsym
(
h™dÀ
, "sound_stop");

47 
drivîSoundPau£
 = ((*)()Ë
	`dlsym
(
h™dÀ
, "sound_pause");

48 
drivîSoundPœy
 = ((*)(*, )Ë
	`dlsym
(
h™dÀ
, "sound_play");

49  
åue
;

50 
	}
}

52 
	$soundCÀ™up
()

54 i‡(
drivîSoundCÀ™up
 !
NULL
)

55 
	`drivîSoundCÀ™up
();

56 
	}
}

58 
	$soundSèπ
()

60 i‡(
drivîSoundSèπ
 !
NULL
)

61 
	`drivîSoundSèπ
();

62 
	}
}

64 
	$soundSt›
()

66 i‡(
drivîSoundSt›
 !
NULL
)

67 
	`drivîSoundSt›
();

68 
	}
}

70 
	$soundPau£
()

72 i‡(
drivîSoundPau£
 !
NULL
)

73 
	`drivîSoundPau£
();

74 
	}
}

76 
	$soundPœy
(*
d©a
, 
size
)

78 i‡(
drivîSoundPœy
 !
NULL
)

79 
	`drivîSoundPœy
(
d©a
, 
size
 * 
ch™√ls
 * 2);

80 
	}
}

82 
	$soundSëE«bÀd
(
boﬁ
 
íabÀd
)

84 i‡(
drivîSoundSèπ
 =
NULL
 || 
drivîSoundSt›
 == NULL)

87 i‡(
íabÀd
)

88 
	`drivîSoundSèπ
();

90 
	`drivîSoundSt›
();

91 
	}
}

	@drivers/android/sound.h

1 #i‚de‡
ANDROID_SOUND_H


2 
	#ANDROID_SOUND_H


	)

4 
boﬁ
 
soundInôülize
(c⁄° *
libdú
, 
øã
, boﬁ 
°îeo
);

5 
soundCÀ™up
();

6 
soundSëE«bÀd
(
boﬁ
 
íabÀd
);

7 
soundSèπ
();

8 
soundSt›
();

9 
soundPau£
();

10 
soundPœy
(*
d©a
, 
size
);

	@drivers/android/ticks.c

1 
	~<time.h
>

3 
time•ec
 
	g°¨tTicks
;

5 
	$ticksInôülize
()

7 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
°¨tTicks
);

8 
	}
}

10 
	$ticksGëTicks
()

12 
time•ec
 
now
;

13 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
now
);

14  (
now
.
tv_£c
 - 
°¨tTicks
.tv_sec) * 1000 +

15 (
now
.
tv_n£c
 - 
°¨tTicks
.tv_nsec) / 1000000;

16 
	}
}

	@drivers/android/ticks.h

1 #i‚de‡
GENSOID_TICKS_H


2 
	#GENSOID_TICKS_H


	)

4 #ifde‡
__˝lu•lus


8 
ticksInôülize
();

9 
ticksGëTicks
();

11 #ifde‡
__˝lu•lus


	@drivers/android/video.cpp

1 
	~"ty≥s.h
"

3 
	#LOG_TAG
 "lib√s"

	)

4 
	~<utûs/Log.h
>

6 
	#MAKE_RGB565
(
∑l
) \

7 ((((
∑l
).
r
 & 0xf8) << 8) | \

8 (((
∑l
).
g
 & 0xfc) << 3) | \

9 (((
∑l
).
b
 & 0xf8Ë>> 3))

	)

12 
uöt8
 
	mr
;

13 
uöt8
 
	mg
;

14 
uöt8
 
	mb
;

15 } 
	g∑Àâe
[256];

17 
boﬁ
 
	gªdoCﬁ‹M≠
;

18 
uöt32
 
	gcﬁ‹M≠
[0x10000];

20 
	$doCﬁ‹M≠
()

22 
i
 = 0; i < 0x10000; i++) {

23 
cﬁ‹M≠
[
i
] =

24 (
	`MAKE_RGB565
(
∑Àâe
[
i
 & 0xff]) |

25 (
	`MAKE_RGB565
(
∑Àâe
[
i
 >> 8]) << 16));

27 
	}
}

29 
boﬁ
 
	$videoInôülize
()

31 
ªdoCﬁ‹M≠
 = 
åue
;

32 
	`mem£t
(
∑Àâe
, 0, (palette));

33  
åue
;

34 
	}
}

36 
	$videoCÀ™up
()

38 
	}
}

40 
	$videoDøwS¸ìn
(
uöt8
 *
d°
, 
d°Pôch
, uöt8 *
§c
, 
§cPôch
)

42 i‡(
ªdoCﬁ‹M≠
) {

43 
	`doCﬁ‹M≠
();

44 
ªdoCﬁ‹M≠
 = 
Ál£
;

47 
h
 = 240; --h >= 0; ) {

48 
uöt32
 *
d
 = (uöt32 *Ë
d°
;

49 
uöt16
 *
s
 = (uöt16 *Ë
§c
;

50 
w
 = 128; --w >= 0; )

51 *
d
++ = 
cﬁ‹M≠
[*
s
++];

53 
d°
 +
d°Pôch
;

54 
§c
 +
§cPôch
;

56 
	}
}

58 "C" 
	$FCEUD_SëPÆëã
(
uöt8
 
ödex
, uöt8 
r
, uöt8 
g
, uöt8 
b
)

60 
∑Àâe
[
ödex
].
r
 =Ñ;

61 
∑Àâe
[
ödex
].
g
 = g;

62 
∑Àâe
[
ödex
].
b
 = b;

64 
ªdoCﬁ‹M≠
 = 
åue
;

65 
	}
}

67 "C" 
	$FCEUD_GëPÆëã
(
uöt8
 
ödex
, uöt8 *
r
, uöt8 *
g
, uöt8 *
b
)

69 *
r
 = 
∑Àâe
[
ödex
].r;

70 *
g
 = 
∑Àâe
[
ödex
].g;

71 *
b
 = 
∑Àâe
[
ödex
].b;

72 
	}
}

	@drivers/android/video.h

1 #i‚de‡
NESOID_VIDEO_H


2 
	#NESOID_VIDEO_H


	)

4 
boﬁ
 
videoInôülize
();

5 
videoCÀ™up
();

6 
videoDøwS¸ìn
(
uöt8
 *
d°
, 
d°Pôch
, uöt8 *
§c
, 
§cPôch
);

	@drivers/common/args.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"../../ty≥s.h
"

34 
	~"¨gs.h
"

36 
	$P¨£EA
(
x
, 
¨gc
, *
¨gv
[], 
ARGPSTRUCT
 *
¨g•s
)

38 
y
=0,
ªt
=0;

42 if(!
¨g•s
[
y
].
«me
)

44 
ªt
 = 
	`P¨£EA
(
x
,
¨gc
,
¨gv
,(*)
¨g•s
[
y
].
v¨
);

45 
y
++;

48 if(!
	`°rcmp
(
¨gv
[
x
],
¨g•s
[
y
].
«me
))

50 if(
¨g•s
[
y
].
subs
)

52 if((
x
+1)>=
¨gc
)

54 if(
¨g•s
[
y
].
sub°y≥
&0x8000)

56 *(*)
¨g•s
[
y
].
subs
&=~◊rg•s[y].
sub°y≥
&(~0x8000));

57 *(*)
¨g•s
[
y
].
subs
|=
	`©oi
(
¨gv
[
x
+1])?◊rg•s[y].
sub°y≥
&(~0x8000)):0;

60 
¨g•s
[
y
].
sub°y≥
&(~0x4000))

63 *(*)
¨g•s
[
y
].
subs
=
	`©oi
(
¨gv
[
x
+1]);

66 if(
¨g•s
[
y
].
sub°y≥
&0x4000)

68 if(*(**)
¨g•s
[
y
].
subs
)

69 
	`‰ì
(*(**)
¨g•s
[
y
].
subs
);

70 if(!–*(**)
¨g•s
[
y
].
subs
=
	`mÆloc
(
	`°æí
(
¨gv
[
x
+1])+1) ))

73 
	`°r˝y
(*(**)
¨g•s
[
y
].
subs
,
¨gv
[
x
+1]);

76 
ªt
=2;

78 if(
¨g•s
[
y
].
v¨
)

80 *
¨g•s
[
y
].
v¨
=1;

81 
ªt
=1;

85 
y
++;

86 } 
¨g•s
[
y
].
v¨
 ||árg•s[y].
subs
);

87  
ªt
;

88 
	}
}

91 
	$P¨£Argumíts
(
¨gc
, *
¨gv
[], 
ARGPSTRUCT
 *
¨g•s
)

93 
x
, 
ªt
=0;

95 
x
=0;x<
¨gc
;x++)

97 
ªt
 = 
	`P¨£EA
(
x
,
¨gc
,
¨gv
,
¨g•s
);

98 i‡(
ªt
 =2Ë
x
++;

101  
ªt
;

102 
	}
}

	@drivers/common/args.h

22 *
	m«me
;

23 *
	mv¨
;

25 *
	msubs
;

26 
	msub°y≥
;

27 } 
	tARGPSTRUCT
;

29 
P¨£Argumíts
(
¨gc
, *
¨gv
[], 
ARGPSTRUCT
 *
¨g•s
);

	@drivers/common/cheat.c

21 
	~<°dio.h
>

22 
	~<˘y≥.h
>

23 
	~"../../drivî.h
"

25 
	$GëSåög
(*
s
, 
max
)

27 
x
;

28 
	`fgës
(
s
,
max
,
°dö
);

30 
x
=0;x<
max
;x++)

31 if(
s
[
x
]=='\n')

33 
s
[
x
]=0;

36 
	}
}

39 
uöt32
 
	$GëH16
(
def
)

41 
buf
[32];

43 
	`fgës
(
buf
,32,
°dö
);

44 if(
buf
[0]=='\n')

45 (
def
);

46 if(
buf
[0]=='$')

47 
	`ssˇnf
(
buf
+1,"%04x",&
def
);

49 
	`ssˇnf
(
buf
,"%04x",&
def
);

50  
def
;

51 
	}
}

54 
uöt8
 
	$Gë8
(
def
)

56 
buf
[32];

58 
	`fgës
(
buf
,32,
°dö
);

59 if(
buf
[0]=='\n')

60 (
def
);

61 
	`ssˇnf
(
buf
,"%u",&
def
);

62  
def
;

63 
	}
}

65 
	$GëI
(
def
)

67 
buf
[32];

69 
	`fgës
(
buf
,32,
°dö
);

70 if(
buf
[0]=='\n')

71 (
def
);

72 
	`ssˇnf
(
buf
,"%d",&
def
);

73  
def
;

74 
	}
}

76 
	$GëYN
(
def
)

78 
buf
[32];

79 
	`¥ötf
("(Y/N)[%s]: ",
def
?"Y":"N");

80 
	`fgës
(
buf
,32,
°dö
);

81 if(
buf
[0]=='y' || buf[0]=='Y')

83 if(
buf
[0]=='n' || buf[0]=='N')

85 (
def
);

86 
	}
}

92 
	gli°cou¡
;

93 
	gli°ids
[16];

94 
	gli°£l
;

95 
	gm‹d€
;

97 
	$BegöLi°Show
()

99 
li°cou¡
=0;

100 
li°£l
=-1;

101 
m‹d€
=0;

102 
	}
}

106 
	$Li°Choi˚
(
hmm
)

108 
buf
[32];

110 if(!
hmm
)

112 
num
=0;

114 
åyagaö
:

115 
	`¥ötf
(" <'Enter'Åo continue, (S)top, orÉnteráÇumber.> ");

116 
	`fgës
(
buf
,32,
°dö
);

117 if(
buf
[0]=='s' || buf[0]=='S') (-1);

118 if(
buf
[0]=='\n') (0);

119 if(!
	`ssˇnf
(
buf
,"%d",&
num
))

121 if(
num
<1Ë
åyagaö
;

122 (
num
);

126 
num
=0;

128 
åyagaö2
:

129 
	`¥ötf
(" <'Enter'Åo makeÇo selection orÉnteráÇumber.> ");

130 
	`fgës
(
buf
,32,
°dö
);

131 if(
buf
[0]=='\n') (0);

132 if(!
	`ssˇnf
(
buf
,"%d",&
num
))

134 if(
num
<1Ë
åyagaö2
;

135 (
num
);

137 
	}
}

139 
	$EndLi°Show
()

141 if(
m‹d€
)

143 
r
=
	`Li°Choi˚
(1);

144 if(
r
>0 &&Ñ<=
li°cou¡
)

145 
li°£l
=
li°ids
[
r
-1];

147 (
li°£l
);

148 
	}
}

151 
	$AddToLi°
(*
ãxt
, 
uöt32
 
id
)

153 if(
li°cou¡
==16)

155 
t
=
	`Li°Choi˚
(0);

156 
m‹d€
=0;

157 if(
t
==-1) (0);

158 if(
t
>0 &&Å<17)

160 
li°£l
=
li°ids
[
t
-1];

163 
li°cou¡
=0;

165 
m‹d€
=1;

166 
li°ids
[
li°cou¡
]=
id
;

167 
	`¥ötf
("%2dË%s\n",
li°cou¡
+1,
ãxt
);

168 
li°cou¡
++;

170 
	}
}

177 
	sMENU
 {

178 *
	mãxt
;

179 *
	ma˘i⁄
;

180 
	mty≥
;

181 } 
	tMENU
;

183 
	$SëOC
()

185 
	`FCEUI_ChótSórchSëCuºítAsOrigöÆ
();

186 
	}
}

188 
	$UnhideEx
()

190 
	`FCEUI_ChótSórchShowEx˛uded
();

191 
	}
}

193 
	$ToggÀChót
(
num
)

195 
	`¥ötf
("Chóà%d %ßbÀd.\n",1+
num
,

196 
	`FCEUI_ToggÀChót
(
num
)?"en":"dis");

197 
	}
}

199 
	$ModifyChót
(
num
)

201 *
«me
;

202 
buf
[256];

203 
uöt32
 
A
;

204 
uöt8
 
V
;

205 
com∑ª
;

206 
ty≥
;

208 
s
;

209 
t
;

211 
	`FCEUI_GëChót
(
num
, &
«me
, &
A
, &
V
, &
com∑ª
, &
s
, &
ty≥
);

213 
	`¥ötf
("Namê[%s]: ",
«me
);

214 
	`GëSåög
(
buf
,256);

220 if(
buf
[0])

221 
«me
=
buf
;

223 
«me
=0;

225 
	`¥ötf
("Addªs†[$%04x]: ",()
A
);

226 
A
=
	`GëH16
(A);

228 
	`¥ötf
("VÆuê[%03d]: ",()
V
);

229 
V
=
	`Gë8
(V);

231 
	`¥ötf
("Com∑ª [%3d]: ",
com∑ª
);

232 
com∑ª
=
	`GëI
(compare);

234 
	`¥ötf
("Ty≥(0=Old StyÀ, 1=Ród Sub°ôuãË[%1d]: ",
ty≥
);

235 
ty≥
=
	`GëI
(type)?1:0;

237 
	`¥ötf
("E«bÀ [%s]: ",
s
?"Y":"N");

238 
t
=
	`gëch¨
();

239 if(
t
=='Y' ||Å=='y'Ë
s
=1;

240 if(
t
=='N' ||Å=='n'Ë
s
=0;

242 
	`FCEUI_SëChót
(
num
,
«me
,
A
,
V
,
com∑ª
,
s
,
ty≥
);

243 
	}
}

246 
	$AddChótGGPAR
(
which
)

248 
uöt16
 
A
;

249 
uöt8
 
V
;

250 
C
;

251 
ty≥
;

252 
«me
[256],
code
[256];

254 
	`¥ötf
("Name: ");

255 
	`GëSåög
(
«me
,256);

257 
	`¥ötf
("Code: ");

258 
	`GëSåög
(
code
,256);

260 
	`¥ötf
("Add chóà\"%s\" f‹ codê\"%s\"?",
«me
,
code
);

261 if(
	`GëYN
(0))

263 if(
which
)

265 if(!
	`FCEUI_DecodePAR
(
code
,&
A
,&
V
,&
C
,&
ty≥
))

267 
	`puts
("Invalid Game Genie code.");

273 if(!
	`FCEUI_DecodeGG
(
code
,&
A
,&
V
,&
C
))

275 
	`puts
("Invalid Game Genie code.");

278 
ty≥
=1;

281 if(
	`FCEUI_AddChót
(
«me
,
A
,
V
,
C
,
ty≥
))

282 
	`puts
("Cheatádded.");

284 
	`puts
("Errorádding cheat.");

286 
	}
}

288 
	$AddChótGG
()

290 
	`AddChótGGPAR
(0);

291 
	}
}

293 
	$AddChótPAR
()

295 
	`AddChótGGPAR
(1);

296 
	}
}

298 
	$AddChótP¨am
(
uöt32
 
A
, 
uöt8
 
V
)

300 
«me
[256];

302 
	`¥ötf
("Name: ");

303 
	`GëSåög
(
«me
,256);

304 
	`¥ötf
("Addªs†[$%04x]: ",()
A
);

305 
A
=
	`GëH16
(A);

306 
	`¥ötf
("VÆuê[%03d]: ",()
V
);

307 
V
=
	`Gë8
(V);

308 
	`¥ötf
("Add chóà\"%s\" f‹áddªs†$%04x wôh vÆuê%03d?",
«me
,()
A
,()
V
);

309 if(
	`GëYN
(0))

311 if(
	`FCEUI_AddChót
(
«me
,
A
,
V
,-1,0))

312 
	`puts
("Cheatádded.");

314 
	`puts
("Errorádding cheat.");

316 
	}
}

318 
	$AddChót
()

320 
	`AddChótP¨am
(0,0);

321 
	}
}

323 
	glid
;

324 
	$˛i°ˇŒb
(*
«me
, 
uöt32
 
a
, 
uöt8
 
v
, 
com∑ª
, 
s
, 
ty≥
, *
d©a
)

326 
tmp
[512];

327 
ªt
;

329 if(
com∑ª
>=0)

330 
	`•rötf
(
tmp
,"%† $%04x:%03d:%03d - %s",
s
?"*":" ",()
a
,()
v
,
com∑ª
,
«me
);

332 
	`•rötf
(
tmp
,"%† $%04x:%03d - %s",
s
?"*":" ",()
a
,()
v
,
«me
);

333 if(
ty≥
==1)

334 
tmp
[2]='S';

335 
ªt
=
	`AddToLi°
(
tmp
,
lid
);

336 
lid
++;

337 (
ªt
);

338 
	}
}

340 
	$Li°Chóts
()

342 
which
;

343 
lid
=0;

345 
	`BegöLi°Show
();

346 
	`FCEUI_Li°Chóts
(
˛i°ˇŒb
,0);

347 
which
=
	`EndLi°Show
();

348 if(
which
>=0)

350 
tmp
[32];

351 
	`¥ötf
(" <(T)oggle status, (M)odify, or (D)eleteÅhis cheat.> ");

352 
	`fgës
(
tmp
,32,
°dö
);

353 
	`tﬁowî
(
tmp
[0]))

355 't':
	`ToggÀChót
(
which
);

357 'd':if(!
	`FCEUI_DñChót
(
which
))

358 
	`puts
("Error deleting cheat!");

360 
	`puts
("Cheat has been deleted.");

362 'm':
	`ModifyChót
(
which
);

366 
	}
}

368 
	$Re£tSórch
()

370 
	`FCEUI_ChótSórchBegö
();

371 
	`puts
("Done.");

372 
	}
}

374 
	$§esˇŒb
(
uöt32
 
a
, 
uöt8
 
œ°
, uöt8 
cuºít
, *
d©a
)

376 
tmp
[13];

377 
	`•rötf
(
tmp
, "$%04x:%03d:%03d",()
a
,()
œ°
,()
cuºít
);

378 (
	`AddToLi°
(
tmp
,
a
));

379 
	}
}

381 
	$ShowRes
()

383 
n
=
	`FCEUI_ChótSórchGëCou¡
();

384 
	`¥ötf
(" %dÑesu…s:\n",
n
);

385 if(
n
)

387 
which
;

388 
	`BegöLi°Show
();

389 
	`FCEUI_ChótSórchGë
(
§esˇŒb
,0);

390 
which
=
	`EndLi°Show
();

391 if(
which
>=0)

392 
	`AddChótP¨am
(
which
,0);

394 
	}
}

396 
	$ShowSh‹tLi°
(*
m€
[], 
n
, 
def
)

398 
x
,
c
;

399 
bØ
;

400 
tmp
[16];

402 
ªd
:

403 
x
=0;x<
n
;x++)

404 
	`¥ötf
("%dË%s\n",
x
+1,
m€
[x]);

405 
	`puts
("D) Display List");

406 
˛o
:

408 
	`¥ötf
("\nSñe˘i⁄ [%d]> ",
def
+1);

409 
	`fgës
(
tmp
,256,
°dö
);

410 if(
tmp
[0]=='\n')

411  
def
;

412 
c
=
	`tﬁowî
(
tmp
[0]);

413 
bØ
=
c
-'1';

415 if(
bØ
<
n
)

416  
bØ
;

417 if(
c
=='d')

418 
ªd
;

421 
	`puts
("Invalid selection.");

422 
˛o
;

424 
	}
}

426 
	$DoSórch
()

428 
v1
=0,
v2
=0;

429 
mëhod
=0;

430 *
m
[6]={"O==V1 && C==V2","O==V1 && |O-C|==V2","|O-C|==V2","O!=C","Value decreased","Value increased"};

431 
	`¥ötf
("\nSearch Filter:\n");

433 
mëhod
=
	`ShowSh‹tLi°
(
m
,6,method);

434 if(
mëhod
<=1)

436 
	`¥ötf
("V1 [%03d]: ",
v1
);

437 
v1
=
	`Gë8
(v1);

439 if(
mëhod
<=2)

441 
	`¥ötf
("V2 [%03d]: ",
v2
);

442 
v2
=
	`Gë8
(v2);

444 
	`FCEUI_ChótSórchEnd
(
mëhod
,
v1
,
v2
);

445 
	`puts
("Search completed.\n");

446 
	}
}

449 
MENU
 
	gNewChótsMíu
[]={

450 {"Add Chót",(*)
AddChót
,1},

451 {"Re£àSórch",(*)
Re£tSórch
,1},

452 {"DÿSórch",(*)
DoSórch
,1},

453 {"Së OrigöÆÅÿCuºít",(*)
SëOC
,1},

454 {"UnhidêEx˛uded",(*)
UnhideEx
,1},

455 {"Show Resu…s",(*)
ShowRes
,1},

456 {"Add GamêGíõ Chót",(*)
AddChótGG
,1},

457 {"Add PAR Chót",(*)
AddChótPAR
,1},

461 
MENU
 
	gMaöMíu
[]={

462 {"Li° Chóts",(*)
Li°Chóts
,1},

463 {"New Chóts...",(*)
NewChótsMíu
,0},

467 
	$DoMíu
(
MENU
 *
mí
)

469 
x
=0;

471 
ªdi•œy
:

472 
x
=0;

473 
	`puts
("");

474 
mí
[
x
].
ãxt
)

476 
	`¥ötf
("%dË%s\n",
x
+1,
mí
[x].
ãxt
);

477 
x
++;

479 
	`puts
("D) Display Menu\nX) ReturnÅo Previous\n");

481 
buf
[32];

482 
c
;

484 
ªcomm™d
:

485 
	`¥ötf
("Command> ");

486 
	`fgës
(
buf
,32,
°dö
);

487 
c
=
	`tﬁowî
(
buf
[0]);

488 if(
c
=='\n')

489 
ªcomm™d
;

490 if(
c
=='d')

491 
ªdi•œy
;

492 if(
c
=='x')

496 if(
	`ssˇnf
(
buf
,"%d",&
c
))

498 if(
c
>
x
Ë
övÆid
;

499 if(
mí
[
c
-1].
ty≥
)

501 (*
func
)()=((*)())
mí
[
c
-1].
a˘i⁄
;

502 
	`func
();

505 
	`DoMíu
((
MENU
*)
mí
[
c
-1].
a˘i⁄
);

506 
ªdi•œy
;

510 
övÆid
:

511 
	`puts
("Invalid command.\n");

512 
ªcomm™d
;

516 
	}
}

518 
	$DoC⁄sﬁeChótC⁄fig
()

520 
MENU
 *
curmíu
=
MaöMíu
;

522 
	`DoMíu
(
curmíu
);

523 
	}
}

	@drivers/common/cheat.h

21 
DoC⁄sﬁeChótC⁄fig
();

	@drivers/common/config.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 #ifde‡
GP2X


33 
	~<uni°d.h
>

36 
	~"../../ty≥s.h
"

37 
	~"c⁄fig.h
"

39 
	$FRódSåög
(
FILE
 *
Â
, *
°r
, 
n
)

41 
x
=0,
z
;

44 
z
=
	`fgëc
(
Â
);

45 
°r
[
x
]=
z
;

46 
x
++;

47 if(
z
<=0) ;

48 if(
x
>=
n
)  0;

50 if(
z
<0)  0;

52 
	}
}

54 
	$GëVÆueR
(
FILE
 *
Â
, *
°r
, *
v
, 
c
)

56 
buf
[256];

57 
s
;

59 
	`FRódSåög
(
Â
,
buf
,256))

61 
	`‰ód
(&
s
,1,4,
Â
);

62 if(!
	`°rcmp
(
°r
, 
buf
))

64 if(!
c
)

66 if(!(*(**)
v
=
	`mÆloc
(
s
)))

67 
gogl
;

68 
	`‰ód
(*(**)
v
,1,
s
,
Â
);

71 if(
s
>
c
 || s<c)

73 
gogl
:

74 
	`f£ek
(
Â
,
s
,
SEEK_CUR
);

77 
	`‰ód
((
uöt8
*)
v
,1,
c
,
Â
);

80 
	`f£ek
(
Â
,
s
,
SEEK_CUR
);

82 
	`f£ek
(
Â
,4,
SEEK_SET
);

83 
	}
}

85 
	$SëVÆueR
(
FILE
 *
Â
, *
°r
, *
v
, 
c
)

87 
	`fwrôe
(
°r
,1,
	`°æí
(°r)+1,
Â
);

88 
	`fwrôe
((
uöt8
*)&
c
,1,4,
Â
);

89 
	`fwrôe
((
uöt8
*)
v
,1,
c
,
Â
);

90 
	}
}

92 
	$SaveP¨£
(
CFGSTRUCT
 *
cfg°
, 
FILE
 *
Â
)

94 
x
=0;

98 if(!
cfg°
[
x
].
«me
)

100 
	`SaveP¨£
(
cfg°
[
x
].
±r
,
Â
);

104 
x
++;

108 if(
cfg°
[
x
].
Àn
)

109 
	`SëVÆueR
(
Â
,
cfg°
[
x
].
«me
,cfg°[x].
±r
,cfg°[x].
Àn
);

111 if(*(**)
cfg°
[
x
].
±r
)

112 
	`SëVÆueR
(
Â
,
cfg°
[
x
].
«me
,*(**)cfg°[x].
±r
,

113 
	`°æí
(*(**)
cfg°
[
x
].
±r
)+1);

114 
x
++;

115 } 
cfg°
[
x
].
±r
);

116 
	}
}

118 
	$SaveFCEUC⁄fig
(*
fûíame
, 
CFGSTRUCT
 *
cfg°
)

120 
FILE
 *
Â
;

122 
Â
=
	`f›í
(
fûíame
,"wb");

123 if(
Â
==
NULL
)  -1;

125 
	`SaveP¨£
(
cfg°
,
Â
);

127 
	`f˛o£
(
Â
);

128 #ifde‡
GP2X


129 
	`sync
();

132 
	}
}

134 
	$LﬂdP¨£
(
CFGSTRUCT
 *
cfg°
, 
FILE
 *
Â
)

136 
x
=0;

139 if(!
cfg°
[
x
].
«me
)

141 
	`LﬂdP¨£
(
cfg°
[
x
].
±r
,
Â
);

142 
x
++;

145 
	`GëVÆueR
(
Â
,
cfg°
[
x
].
«me
,cfg°[x].
±r
,cfg°[x].
Àn
);

146 
x
++;

147 } 
cfg°
[
x
].
±r
);

148 
	}
}

150 
	$LﬂdFCEUC⁄fig
(*
fûíame
, 
CFGSTRUCT
 *
cfg°
)

152 
FILE
 *
Â
;

154 
Â
=
	`f›í
(
fûíame
,"rb");

155 if(
Â
==
NULL
)  -1;

156 
	`LﬂdP¨£
(
cfg°
,
Â
);

157 
	`f˛o£
(
Â
);

159 
	}
}

	@drivers/common/config.h

22 *
	m«me
;

23 *
	m±r
;

24 
	mÀn
;

25 } 
	tCFGSTRUCT
;

27 
SaveFCEUC⁄fig
(*
fûíame
, 
CFGSTRUCT
 *
cfg°
);

28 
LﬂdFCEUC⁄fig
(*
fûíame
, 
CFGSTRUCT
 *
cfg°
);

33 
	#ENDCFGSTRUCT
 { 0,0,0 }

	)

39 
	#ADDCFGSTRUCT
(
x
Ë{ 0,&x,0 }

	)

47 
	#AC
(
x
Ë{ #x,&x,(x)}

	)

48 
	#NAC
(
w
,
x
Ë{ #w,&x,(x)}

	)

51 
	#ACA
(
x
Ë{#x,x,(x)}

	)

52 
	#NACA
(
w
,
x
Ë{#w,x,(x)}

	)

55 
	#ACS
(
x
Ë{#x,&x,0}

	)

56 
	#NACS
(
w
,
x
Ë{#w,&x,0}

	)

	@drivers/common/unixdsp.c

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<sys/io˘l.h
>

29 
	~<sys/waô.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<sched.h
>

33 
	~<sys/soundˇrd.h
>

35 
	~"../../ty≥s.h
"

37 
	gf‹m©
;

38 
	gd•fd
;

41 
	$InôUNIXDSPSound
(*
øã
, 
bôs
, 
fsize
, 
n‰ags
)

43 
x
;

45 
	`¥ötf
(" Opening /dev/dsp...");

46 
d•fd
=
	`›í
("/dev/d•",
O_WRONLY
);

47 if(
d•fd
==-1Ë
__di•îr‹
;

49 if(!
bôs
Ë
skù16check
;

50 
x
=
AFMT_S16_LE
;

51 
f‹m©
=0;

52 
	`¥ötf
("\n Setting formatÅo 16-bit, signed, LSB first...");

53 if(
	`io˘l
(
d•fd
,
SNDCTL_DSP_SETFMT
,&
x
)==-1)

55 
skù16check
:

56 
x
=
AFMT_U8
;

57 
	`¥ötf
("\n Setting formatÅo 8-bit, unsigned...");

58 if(
	`io˘l
(
d•fd
,
SNDCTL_DSP_SETFMT
,&
x
)==-1Ë
__di•îr‹
;

59 
f‹m©
=1;

62 
	`¥ötf
("\¿ Sëtög føgmíàsizêtÿ%d sam∂e†™dÇumbî o‡‰agmít†tÿ%d...",1<<
fsize
,
n‰ags
);

64 if(!
f‹m©
)

65 
fsize
++;

66 
x
=
fsize
|(
n‰ags
<<16);

68 if(
	`io˘l
(
d•fd
,
SNDCTL_DSP_SETFRAGMENT
,&
x
)==-1)

69 
	`¥ötf
("ERROR (continuingányway)\n");

70 
x
=0;

71 
	`¥ötf
("\n Setting mono sound...");

72 if(
	`io˘l
(
d•fd
,
SNDCTL_DSP_STEREO
,&
x
)==-1Ë
__di•îr‹
;

73 
	`¥ötf
("\¿ SëtögÖœybackÑ©êo‡%d hz...",*
øã
);

74 if(
	`io˘l
(
d•fd
,
SNDCTL_DSP_SPEED
,
øã
)==-1Ë
__di•îr‹
;

75 
	`¥ötf
("SëÅÿ%d hz\n",*
øã
);

76 if(*
øã
<8192 || *rate>65535)

78 
	`¥ötf
(" SampleÑate is out ofÅheácceptableÑange(8192-65535).\n");

79 
	`˛o£
(
d•fd
);

83 
__di•îr‹
:

84 
	`¥ötf
("ERROR\n");

86 
	}
}

88 
	$KûlUNIXDSPSound
()

90 
	`˛o£
(
d•fd
);

91 
	}
}

93 
öt16
 
	gMBuf„r
[2048];

94 
	$WrôeUNIXDSPSound
(
öt32
 *
Buf„r
, 
Cou¡
, 
noblockög
)

96 
P
,
c
;

97 
öt32
 *
§c
=
Buf„r
;

99 if(
f‹m©
)

101 
uöt8
 *
de°
=(uöt8 *)
MBuf„r
;

102 
P
=
Cou¡
;P;P--,
de°
++,
§c
++)

103 *
de°
=(
uöt8
)((*
§c
)>>8)^128;

104 
c
=
Cou¡
;

108 
öt16
 *
de°
=
MBuf„r
;

109 
P
=
Cou¡
;P;P--,
de°
++,
§c
++)

110 *
de°
=*
§c
;

111 
c
=
Cou¡
<<1;

115 if(
noblockög
)

117 
audio_buf_öfo
 
ai
;

118 if(!
	`io˘l
(
d•fd
,
SNDCTL_DSP_GETOSPACE
,&
ai
))

119 if(
ai
.
byãs
<
c
)

122 
	`wrôe
(
d•fd
,(
uöt8
 *)
MBuf„r
,
c
);

123 
	}
}

	@drivers/common/unixdsp.h

21 
InôUNIXDSPSound
(*
øã
, 
bôs
, 
fsize
, 
n‰ags
);

22 
WrôeUNIXDSPSound
(
öt32
 *
Buf„r
, 
Cou¡
, 
noblockög
);

23 
KûlUNIXDSPSound
();

	@drivers/common/vidblit.c

21 
	~<°dlib.h
>

23 
	~"../../ty≥s.h
"

25 
uöt32
 
	gCBM
[3];

26 
uöt32
 *
	g∑Àâëøn¶©e
=0;

27 
	gBµ
;

30 
	$InôBlôToHigh
(
b
, 
uöt32
 
rmask
, uöt32 
gmask
, uöt32 
bmask
)

32 
Bµ
=
b
;

34 if(
Bµ
<=1 || Bpp>4)

37 if(
Bµ
==2)

38 
∑Àâëøn¶©e
=
	`mÆloc
(65536*4);

39 if(
Bµ
>=3)

40 
∑Àâëøn¶©e
=
	`mÆloc
(256*4);

41 if(!
∑Àâëøn¶©e
)

44 
CBM
[0]=
rmask
;

45 
CBM
[1]=
gmask
;

46 
CBM
[2]=
bmask
;

48 
	}
}

50 
	$KûlBlôToHigh
()

52 
	`‰ì
(
∑Àâëøn¶©e
);

53 
	}
}

55 
	$SëPÆëãBlôToHigh
(
uöt8
 *
§c
)

57 
cshi·r
[3];

58 
cshi·l
[3];

59 
a
,
x
,
z
,
y
;

61 
cshi·l
[0]=cshiftl[1]=cshiftl[2]=-1;

62 
a
=0;a<3;a++)

64 
x
=0,
y
=-1,
z
=0;x<32;x++)

66 if(
CBM
[
a
]&(1<<
x
))

68 if(
cshi·l
[
a
]==-1Ëcshi·l[a]=
x
;

69 
z
++;

72 
cshi·r
[
a
]=(8-
z
);

75 
Bµ
)

78 
x
=0;x<65536;x++)

80 
uöt16
 
lowî
,
uµî
;

82 
lowî
=(
§c
[((
x
&255)<<2)]>>
cshi·r
[0])<<
cshi·l
[0];

83 
lowî
|=(
§c
[((
x
&255)<<2)+1]>>
cshi·r
[1])<<
cshi·l
[1];

84 
lowî
|=(
§c
[((
x
&255)<<2)+2]>>
cshi·r
[2])<<
cshi·l
[2];

85 
uµî
=(
§c
[((
x
>>8)<<2)]>>
cshi·r
[0])<<
cshi·l
[0];

86 
uµî
|=(
§c
[((
x
>>8)<<2)+1]>>
cshi·r
[1])<<
cshi·l
[1];

87 
uµî
|=(
§c
[((
x
>>8)<<2)+2]>>
cshi·r
[2])<<
cshi·l
[2];

89 
∑Àâëøn¶©e
[
x
]=
lowî
|(
uµî
<<16);

94 
x
=0;x<256;x++)

96 
uöt32
 
t
;

98 
t
=
§c
[(
x
<<2)]<<
cshi·l
[0];

99 
t
|=
§c
[(
x
<<2)+1]<<
cshi·l
[1];

100 
t
|=
§c
[(
x
<<2)+2]<<
cshi·l
[2];

102 
∑Àâëøn¶©e
[
x
]=
t
;

106 
	}
}

108 
	$Blô8To8
(
uöt8
 *
§c
, uöt8 *
de°
, 
xr
, 
yr
, 
pôch
, 
xsˇÀ
, 
ysˇÀ
, 
efx
)

110 
x
,
y
;

111 
pöc
;

113 
pöc
=
pôch
-(
xr
*
xsˇÀ
);

114 if(
xsˇÀ
!=1 || 
ysˇÀ
!=1)

116 if(
efx
)

118 
y
=
yr
;y;y--, 
§c
+=320-
xr
)

120 
doo
=
ysˇÀ
-(yscale>>1);

123 
x
=
xr
;x;x--,
§c
++)

125 
too
=
xsˇÀ
;

128 *(
uöt8
 *)
de°
=*(uöt8 *)
§c
;

129 
de°
++;

130 } --
too
);

132 
§c
-=
xr
;

133 
de°
+=
pöc
;

134 } --
doo
);

136 
de°
+=
pôch
*(
ysˇÀ
>>1);

138 
§c
+=
xr
;

144 
y
=
yr
;y;y--, 
§c
+=320-
xr
)

146 
doo
=
ysˇÀ
;

149 
x
=
xr
;x;x--,
§c
++)

151 
too
=
xsˇÀ
;

154 *(
uöt8
 *)
de°
=*(uöt8 *)
§c
;

155 
de°
++;

156 } --
too
);

158 
§c
-=
xr
;

159 
de°
+=
pöc
;

160 } --
doo
);

161 
§c
+=
xr
;

168 
y
=
yr
;y;y--,
de°
+=
pöc
,
§c
+=320-
xr
)

169 
x
=
xr
;x;x-=4,
de°
+=4,
§c
+=4)

170 *(
uöt32
 *)
de°
=*(uöt32 *)
§c
;

172 
	}
}

174 
	$Blô8ToHigh
(
uöt8
 *
§c
, uöt8 *
de°
, 
xr
, 
yr
, 
pôch
)

176 
x
,
y
;

177 
pöc
;

179 
Bµ
)

182 
pöc
=
pôch
-(
xr
<<2);

183 
y
=
yr
;y;y--)

185 
x
=
xr
;x;x--)

187 *(
uöt32
 *)
de°
=
∑Àâëøn¶©e
[(uöt32)*
§c
];

188 
de°
+=4;

189 
§c
++;

191 
de°
+=
pöc
;

192 
§c
+=16;

197 
pöc
=
pôch
-(
xr
+xr+xr);

198 
y
=
yr
;y;y--)

200 
x
=
xr
;x;x--)

202 
uöt32
 
tmp
;

203 
tmp
=
∑Àâëøn¶©e
[(
uöt32
)*
§c
];

204 *(
uöt16
*)
de°
=(uöt16)
tmp
;

205 *&
de°
[2]=(
uöt8
)(
tmp
>>16);

206 
de°
+=3;

207 
§c
++;

209 
de°
+=
pöc
;

210 
§c
+=16;

215 
pöc
=
pôch
-(
xr
<<1);

216 
y
=
yr
;y;y--)

218 
x
=
xr
>>1;x;x--)

220 *(
uöt32
 *)
de°
=
∑Àâëøn¶©e
[*(
uöt16
 *)
§c
];

221 
de°
+=4;

222 
§c
+=2;

224 
de°
+=
pöc
;

225 
§c
+=16;

229 
	}
}

	@drivers/common/vidblit.h

21 
InôBlôToHigh
(
b
, 
uöt32
 
rmask
, uöt32 
gmask
, uöt32 
bmask
);

22 
SëPÆëãBlôToHigh
(
uöt8
 *
§c
);

23 
KûlBlôToHigh
();

24 
Blô8ToHigh
(
uöt8
 *
§c
, uöt8 *
de°
, 
xr
, 
yr
, 
pôch
);

25 
Blô8To8
(
uöt8
 *
§c
, uöt8 *
de°
, 
xr
, 
yr
, 
pôch
, 
xsˇÀ
, 
ysˇÀ
, 
efx
);

	@drivers/gp2x/asmutils.h

1 
Êushˇche
(*
begönög_addr
, *
íd_addr
, 
Êags
);

2 
block_‹
(*
§c
, 
size_t
 
n
, 
∑t
);

3 
block_™d
(*
§c
, 
size_t
 
n
, 
∑t
);

4 
block_™d‹
(*
§c
, 
size_t
 
n
, 
™d∑t
, 
‹∑t
);

5 
mem£t32
(*
de°
, 
c
, 
cou¡
);

6 
•íd_cy˛es
(
c
);

7 
so·_sˇÀ
(*
d°
, *
∑l
, 
löe_offs
, 
löes
);

8 
c⁄vît2RGB555
(*
d°
, *
§c
, *
∑l
, 
cou¡
);

	@drivers/gp2x/cpuctrl.c

23 
	~<°dio.h
>

24 
	~<m©h.h
>

25 
	~"˝u˘æ.h
"

31 
	mSYSCLKENREG
,
	mSYSCSETREG
,
	mUPLLVSETREG
,
	mFPLLVSETREG
,

32 
	mDUALINT920
,
	mDUALINT940
,
	mDUALCTRL940
,
	mMEMTIMEX0
,
	mMEMTIMEX1
,
	mDISPCSETREG
,

33 
	mDPC_HS_WIDTH
,
	mDPC_HS_STR
,
	mDPC_HS_END
,
	mDPC_VS_END
,
	mDPC_DE
;

35 
	gsy°em_ªg
;

37 vﬁ©ûê*
	gMEM_REG
;

39 
	#SYS_CLK_FREQ
 7372800

	)

46 
	$˝u˘æ_öô
()

48 vﬁ©ûê*
gp2x_memªgs
;

49 
MEM_REG
=&
gp2x_memªgs
[0];

50 
sy°em_ªg
.
DISPCSETREG
=
MEM_REG
[0x924>>1];

51 
sy°em_ªg
.
UPLLVSETREG
=
MEM_REG
[0x916>>1];

52 
sy°em_ªg
.
FPLLVSETREG
=
MEM_REG
[0x912>>1];

53 
sy°em_ªg
.
SYSCSETREG
=
MEM_REG
[0x91c>>1];

54 
sy°em_ªg
.
SYSCLKENREG
=
MEM_REG
[0x904>>1];

55 
sy°em_ªg
.
DUALINT920
=
MEM_REG
[0x3B40>>1];

56 
sy°em_ªg
.
DUALINT940
=
MEM_REG
[0x3B42>>1];

57 
sy°em_ªg
.
DUALCTRL940
=
MEM_REG
[0x3B48>>1];

58 
sy°em_ªg
.
MEMTIMEX0
=
MEM_REG
[0x3802>>1];

59 
sy°em_ªg
.
MEMTIMEX1
=
MEM_REG
[0x3804>>1];

60 
sy°em_ªg
.
DPC_HS_WIDTH
=
MEM_REG
[0x281A>>1];

61 
sy°em_ªg
.
DPC_HS_STR
=
MEM_REG
[0x281C>>1];

62 
sy°em_ªg
.
DPC_HS_END
=
MEM_REG
[0x281E>>1];

63 
sy°em_ªg
.
DPC_VS_END
=
MEM_REG
[0x2822>>1];

64 
sy°em_ªg
.
DPC_DE
=
MEM_REG
[0x2826>>1];

65 
	}
}

68 
	$˝u˘æ_deöô
()

70 
MEM_REG
[0x910>>1]=
sy°em_ªg
.
FPLLVSETREG
;

71 
MEM_REG
[0x91c>>1]=
sy°em_ªg
.
SYSCSETREG
;

72 
MEM_REG
[0x3B40>>1]=
sy°em_ªg
.
DUALINT920
;

73 
MEM_REG
[0x3B42>>1]=
sy°em_ªg
.
DUALINT940
;

74 
MEM_REG
[0x3B48>>1]=
sy°em_ªg
.
DUALCTRL940
;

75 
MEM_REG
[0x904>>1]=
sy°em_ªg
.
SYSCLKENREG
;

76 
MEM_REG
[0x3802>>1]=
sy°em_ªg
.
MEMTIMEX0
;

77 
MEM_REG
[0x3804>>1]=
sy°em_ªg
.
MEMTIMEX1
 ;

78 
	`un£t_LCD_cu°om_øã
();

79 
	}
}

82 
	$£t_di•œy_˛ock_div
(
div
)

84 
div
=((div & 63) | 64)<<8;

85 
MEM_REG
[0x924>>1]=(MEM_REG[0x924>>1] & ~(255<<8)Ë| 
div
;

86 
	}
}

89 
	$£t_FCLK
(
MHZ
)

91 
v
;

92 
mdiv
,
pdiv
=3,
sˇÀ
=0;

93 
MHZ
*=1000000;

94 
mdiv
=(
MHZ
*
pdiv
)/
SYS_CLK_FREQ
;

95 
mdiv
=((mdiv-8)<<8) & 0xff00;

96 
pdiv
=((pdiv-2)<<2) & 0xfc;

97 
sˇÀ
&=3;

98 
v
=
mdiv
 | 
pdiv
 | 
sˇÀ
;

99 
MEM_REG
[0x910>>1]=
v
;

100 
	}
}

103 
	$£t_920_Div
(
div
)

105 
v
;

106 
v
 = 
MEM_REG
[0x91c>>1] & (~0x3);

107 
MEM_REG
[0x91c>>1] = (
div
 & 0x7Ë| 
v
;

108 
	}
}

111 
	$£t_DCLK_Div
–
div
 )

113 
v
;

114 
v
 = ()–
MEM_REG
[0x91c>>1] & (~(0x7 << 6)) );

115 
MEM_REG
[0x91c>>1] = ((
div
 & 0x7Ë<< 6Ë| 
v
;

116 
	}
}

132 
	mªg
, 
	mvÆmask
, 
	mvÆ
;

134 
	tªg_£âög
;

137 
ªg_£âög
 
	gøã_Æmo°60
[] =

150 
ªg_£âög
 
	gøã_50
[] =

163 
ªg_£âög
 
	gøã_120_20
[] =

176 
ªg_£âög
 
	gøã_100_02
[] =

189 
ªg_£âög
 
	gøã_120
[] =

202 
ªg_£âög
 
	gøã_100
[] =

216 
ªg_£âög
 *
	gpossibÀ_øãs
[] = { 
øã_Æmo°60
, 
øã_50
, 
øã_120_20
, 
øã_100_02
, 
øã_120
, 
øã_100
 };

218 
	$£t_LCD_cu°om_øã
(
lcd_øã_t
 
øã
)

220 
ªg_£âög
 *
£t
;

222 i‡(
MEM_REG
[0x2800>>1] & 0x100)

227 
	`¥ötf
("£âög cu°om LCDÑe‰esh, mode=%i... ", 
øã
); 
	`fÊush
(
°dout
);

228 
£t
 = 
possibÀ_øãs
[
øã
]; së->
ªg
; set++)

230 
vÆ
 = 
MEM_REG
[
£t
->
ªg
 >> 1];

231 
vÆ
 &~
£t
->
vÆmask
;

232 
vÆ
 |
£t
->val;

233 
MEM_REG
[
£t
->
ªg
 >> 1] = 
vÆ
;

235 
	`¥ötf
("done.\n");

236 
	}
}

238 
	$un£t_LCD_cu°om_øã
()

240 
	`¥ötf
("resetÅoÖrev LCDÑefresh.\n");

241 
MEM_REG
[0x914>>1]=
sy°em_ªg
.
UPLLVSETREG
;

242 
MEM_REG
[0x924>>1]=
sy°em_ªg
.
DISPCSETREG
;

243 
MEM_REG
[0x281A>>1]=
sy°em_ªg
.
DPC_HS_WIDTH
;

244 
MEM_REG
[0x281C>>1]=
sy°em_ªg
.
DPC_HS_STR
;

245 
MEM_REG
[0x281E>>1]=
sy°em_ªg
.
DPC_HS_END
;

246 
MEM_REG
[0x2822>>1]=
sy°em_ªg
.
DPC_VS_END
;

247 
MEM_REG
[0x2826>>1]=
sy°em_ªg
.
DPC_DE
;

248 
	}
}

250 
	$£t_RAM_Timögs
(
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
)

252 
tRC
 -1; 
tRAS
 -1; 
tWR
 -1; 
tMRD
 -1; 
tRFC
 -1; 
tRP
 -1; 
tRCD
 -= 1;

253 
MEM_REG
[0x3802>>1] = ((
tMRD
 & 0xFË<< 12Ë| ((
tRFC
 & 0xFË<< 8Ë| ((
tRP
 & 0xFË<< 4Ë| (
tRCD
 & 0xF);

254 
MEM_REG
[0x3804>>1] = ((
tRC
 & 0xFË<< 8Ë| ((
tRAS
 & 0xFË<< 4Ë| (
tWR
 & 0xF);

255 
	}
}

258 
	$£t_gamma
(
g100
)

260 
gamma
 = (Ë
g100
 / 100;

261 
i
;

263 
gamma
 = 1/gamma;

266 
MEM_REG
[0x2880>>1]&=~(1<<12);

268 
MEM_REG
[0x295C>>1]=0;

269 
i
=0; i<256; i++)

271 
g
;

272 
s
;

273 
g
 =()(255.0*
	`pow
(
i
/255.0,
gamma
));

274 
s
 = (
g
<<8) | g;

275 
MEM_REG
[0x295E>>1]
s
;

276 
MEM_REG
[0x295E>>1]
g
;

278 
	}
}

	@drivers/gp2x/cpuctrl.h

1 #i‚de‡
__CPUCTRL_H__


2 
	#__CPUCTRL_H__


	)

4 
˝u˘æ_öô
();

5 
ßve_sy°em_ªgs
();

6 
˝u˘æ_deöô
();

7 
£t_di•œy_˛ock_div
(
div
);

8 
£t_FCLK
(
MHZ
);

9 
£t_920_Div
(
div
);

10 
£t_DCLK_Div
(
div
);

13 
£t_RAM_Timögs
(
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
);

14 
£t_gamma
(
g100
);

18 
	mLCDR_60
 = 0,

19 
	mLCDR_50
,

20 
	mLCDR_120_20
,

21 
	mLCDR_100_02
,

22 
	mLCDR_120
,

23 
	mLCDR_100
,

24 } 
	tlcd_øã_t
;

26 
£t_LCD_cu°om_øã
(
lcd_øã_t
 
øã
);

27 
un£t_LCD_cu°om_øã
();

	@drivers/gp2x/dface.h

1 
CFGSTRUCT
 
DrivîC⁄fig
[];

2 
ARGPSTRUCT
 
DrivîArgs
[];

3 *
DrivîUßge
;

5 
DoDrivîArgs
();

6 
GëBa£Dúe˘‹y
(*
Ba£Dúe˘‹y
);

8 
InôSound
();

9 
WrôeSound
(
öt16
 *
Buf„r
, 
Cou¡
);

11 
KûlSound
();

12 
Sûí˚Sound
(
s
);

15 
InôVideo
();

16 
KûlVideo
();

17 
BlôPª∑ª
(
skù
);

18 
BlôS¸ìn
(
skù
);

19 
LockC⁄sﬁe
();

20 
U∆ockC⁄sﬁe
();

21 
ToggÀFS
();

	@drivers/gp2x/fonts.c

1 
	gf⁄td©a8x8
[64*16] =

88 
	gf⁄td©a6x8
[256][8] = {

	@drivers/gp2x/fonts.h

2 
f⁄td©a8x8
[64*16];

3 
f⁄td©a6x8
[256-32][8];

	@drivers/gp2x/gp2x-sound.c

18 
	~<°dio.h
>

20 
	~"../../drivî.h
"

21 
	~"gp2x.h
"

22 
	~"möimÆ.h
"

23 
	~"thrŸée.h
"

26 
soundvﬁ
;

29 
	$WrôeSound
(
öt16
 *
Buf„r
, 
Cou¡
)

31 
	`gp2x_sound_wrôe
(
Buf„r
, 
Cou¡
<<1);

33 
	}
}

35 
	$Sûí˚Sound
(
n
)

37 
soundvﬁ
=0;

38 
	}
}

40 
	$InôSound
()

42 
	`FCEUI_Sound
(
Sëtögs
.
sound_øã
);

43 
	`gp2x_sound_vﬁume
(
soundvﬁ
, soundvol);

45 
	}
}

47 
uöt32
 
	$GëMaxSound
()

50 
	}
}

52 
uöt32
 
	$GëWrôeSound
()

55 
	}
}

57 
	$KûlSound
()

62 
	}
}

	@drivers/gp2x/gp2x-video.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/time.h
>

22 
	~"../../video.h
"

24 
	~"maö.h
"

25 
	~"gp2x.h
"

26 
	~"möimÆ.h
"

27 
	~"f⁄ts.h
"

28 
	~"asmutûs.h
"

30 
	gÂs_°r
[32];

31 
	g‰amesEmuœãd
, 
	g‰amesRídîed
;

33 
	ggp2x_∑Àâe
[256];

34 
	ggp2x_∑Àâe16
[256];

36 
	g∑Àâîe‰esh
;

38 
e›ti⁄s
;

40 
	#FPS_COLOR
 1

	)

43 
	$gp2x_ãxt
(*
s¸ìn
, 
x
, 
y
, *
ãxt
, 
cﬁ‹
, 
Êù
)

45 
i
,
l
,
¶í
;

46 
¶í
=
	`°æí
(
ãxt
);

48 
s¸ìn
=s¸ìn+
x
+
y
*320;

50 
i
=0;i<
¶í
;i++)

52 
l
=0;l<8;l++)

55 
s¸ìn
[
l
*320+0]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x80)?
cﬁ‹
:0;

56 
s¸ìn
[
l
*320+1]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x40)?
cﬁ‹
:0;

57 
s¸ìn
[
l
*320+2]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x20)?
cﬁ‹
:0;

58 
s¸ìn
[
l
*320+3]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x10)?
cﬁ‹
:0;

59 
s¸ìn
[
l
*320+4]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x08)?
cﬁ‹
:0;

60 
s¸ìn
[
l
*320+5]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x04)?
cﬁ‹
:0;

61 
s¸ìn
[
l
*320+6]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x02)?
cﬁ‹
:0;

62 
s¸ìn
[
l
*320+7]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x01)?
cﬁ‹
:0;

65 
s¸ìn
+=8;

67 
	}
}

70 
	$CÀ™SurÁ˚
()

72 
c
=4;

73 
c
--)

75 
	`mem£t32
(
gp2x_s¸ìn
, 0, 320*240*2/4);

76 
	`gp2x_video_Êù
();

78 
XBuf
 = 
gp2x_s¸ìn
;

79 
	}
}

82 
	$KûlVideo
()

84 
	}
}

87 
	$InôVideo
()

89 
Âs_°r
[0]=0;

91 
	`CÀ™SurÁ˚
();

93 
	`puts
("Initialized GP2X VIDEO via minimal");

95 
§ídlöe
=0;

96 
îídlöe
=239;

97 
XBuf
 = 
gp2x_s¸ìn
;

99 
	}
}

103 
	$FCEUD_SëPÆëã
(
uöt8
 
ödex
, uöt8 
r
, uöt8 
g
, uöt8 
b
)

106 
gp2x_∑Àâe
[
ödex
] = (
r
 << 16Ë| (
g
 << 8Ë| 
b
;

107 
gp2x_∑Àâe16
[
ödex
] = ((
r
 & 0xf8Ë<< 8Ë| ((
g
 & 0xf8Ë<< 3Ë| (
b
 >> 3);

108 
	`gp2x_video_£çÆëã
(
gp2x_∑Àâe
, 
ödex
 + 1);

110 
∑Àâîe‰esh
 = 1;

111 
	}
}

114 
	$FCEUD_GëPÆëã
(
uöt8
 
ödex
, uöt8 * 
r
, uöt8 * 
g
, uöt8 * 
b
)

116 
pix
 = 
gp2x_∑Àâe
[
ödex
];

117 *
r
 = (
uöt8
Ë(
pix
 >> 16);

118 *
g
 = (
uöt8
Ë(
pix
 >> 8);

119 *
b
 = (
uöt8
Ë
pix
;

120 
	}
}

123 
INLINE
 
	$¥ötFps
(
uöt8
 *
s¸ìn
)

125 
timevÆ
 
tv_now
;

126 
¥ev£c
, 
√edÂsÊù
 = 0;

128 
	`gëtimeofday
(&
tv_now
, 0);

129 i‡(
¥ev£c
 !
tv_now
.
tv_£c
)

131 
	`•rötf
(
Âs_°r
, "%2i/%2i", 
‰amesRídîed
, 
‰amesEmuœãd
);

132 
‰amesEmuœãd
 = 
‰amesRídîed
 = 0;

133 
√edÂsÊù
 = 4;

134 
¥ev£c
 = 
tv_now
.
tv_£c
;

137 i‡(!
Sëtögs
.
showÂs
 || !
s¸ìn
) ;

139 i‡(
Sëtögs
.
sˇlög
 == 0)

141 i‡(
√edÂsÊù
)

143 
£p
;

144 
£p
=1; sep < 5; sep++)

145 i‡(
Âs_°r
[
£p
] == '/' || fps_str[sep] == 0) ;

146 
Âs_°r
[
£p
] = 0;

147 
	`gp2x_ãxt
(
s¸ìn
, 0, 0, 
Âs_°r
, 
FPS_COLOR
, 0);

148 
	`gp2x_ãxt
(
s¸ìn
, 0, 10, 
Âs_°r
+
£p
+1, 
FPS_COLOR
, 0);

149 
√edÂsÊù
--;

154 
	`gp2x_ãxt
(
s¸ìn
+32, 0, 
§ídlöe
, 
Âs_°r
, 
FPS_COLOR
, 0);

156 
	}
}

159 
	$BlôPª∑ª
(
skù
)

161 
‰amesEmuœãd
++;

163 i‡(
skù
) {

164 
	`¥ötFps
(0);

168 
‰amesRídîed
++;

170 i‡(
e›ti⁄s
 & 
EO_CLIPSIDES
)

172 
i
, *
p
 = (*Ë((*)
gp2x_s¸ìn
 + 32);

173 
i
 = 240; i; i--, 
p
 += 320/4)

175 
p
[0] =Ö[1] =Ö[62] =Ö[63] = 0;

179 i‡(
Sëtögs
.
accuøã_mode
 && Sëtögs.
sˇlög
 < 2)

181 
i
, *
p
 = (*)
gp2x_s¸ìn
 + 32/4;

182 i‡(
§ídlöe
 > 0)

183 
i
 = 
§ídlöe
; i > 0; i--, 
p
 += 320/4)

184 
	`mem£t32
(
p
, 0, 256/4);

185 i‡(
îídlöe
 < 239)

187 *
p
 = (*)
gp2x_s¸ìn
 + 
îídlöe
*320/4 + 32/4;

188 
i
 = 239-
§ídlöe
; i > 0; i--, 
p
 += 320/4)

189 
	`mem£t32
(
p
, 0, 256/4);

193 
	`¥ötFps
(
gp2x_s¸ìn
);

195 i‡(
Sëtögs
.
sˇlög
 == 3)

197 
	`so·_sˇÀ
((*)
gp2x_s¸ìn
 + 32, 
gp2x_∑Àâe16
, 
§ídlöe
, 
îídlöe
-srendline);

198 i‡(
§ídlöe
)

199 
	`mem£t32
((*)((*)
gp2x_s¸ìn
 + 32), 0, 
§ídlöe
*320*2/4);

203 
	`gp2x_video_Êush_ˇche
();

204 
	}
}

207 
	$BlôS¸ìn
(
skù
)

209 i‡(!
skù
)

211 
	`gp2x_video_Êù
();

212 
XBuf
 = 
gp2x_s¸ìn
;

214 
	}
}

	@drivers/gp2x/gp2x-video.h

1 
uöt32
 
PtoV
(
uöt16
 
x
, uöt16 
y
);

	@drivers/gp2x/gp2x.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"../../drivî.h
"

6 
	~"../comm⁄/c⁄fig.h
"

7 
	~"../comm⁄/¨gs.h
"

8 
	~"gp2x.h
"

9 
	~"gp2x-video.h
"

10 #ifde‡
NETWORK


11 
	~"unix-√çœy.h
"

14 
	~"möimÆ.h
"

15 
	~"˝u˘æ.h
"

16 
	~"squidgehack.h
"

18 
	gGP2X_PORT_REV
 =

19 
	~"ªv.h
"

22 
uöt8
 
PAL
;

24 
CLImaö
(
¨gc
, *
¨gv
[]);

26 
DSETTINGS
 
	gSëtögs
;

27 
CFGSTRUCT
 
	gDrivîC⁄fig
[]={

28 
ACA
(
Sëtögs
.
KeyBöds
),

29 
ACA
(
Sëtögs
.
JoyBöds
),

30 
AC
(
Sëtögs
.
turbo_øã_add
),

31 
AC
(
Sëtögs
.
sound_øã
),

32 
AC
(
Sëtögs
.
showÂs
),

33 
AC
(
Sëtögs
.
sˇlög
),

34 
AC
(
Sëtögs
.
‰ameskù
),

35 
AC
(
Sëtögs
.
s°©e_c⁄fúm
),

36 
AC
(
Sëtögs
.
ªgi⁄_f‹˚
),

37 
AC
(
Sëtögs
.
˝u˛ock
),

38 
AC
(
Sëtögs
.
mmuhack
),

39 
AC
(
Sëtögs
.
ømtimögs
),

40 
AC
(
Sëtögs
.
gamma
),

41 
AC
(
Sëtögs
.
≥r„˘_vsync
),

42 
AC
(
Sëtögs
.
accuøã_mode
),

43 
ENDCFGSTRUCT


47 *
	gDrivîUßge
=

56 #ifde‡
NETWORK


63 #ifde‡
NETWORK


64 
	gdocheckõ
[2]={0,0};

66 
ARGPSTRUCT
 
	gDrivîArgs
[]={

67 {"-sound",0,&
Sëtögs
.
sound_øã
,0},

68 {"-showÂs",0,&
Sëtögs
.
showÂs
,0},

69 {"-mmuhack",0,&
Sëtögs
.
mmuhack
,0},

70 {"-ømtimögs",0,&
Sëtögs
.
ømtimögs
,0},

71 {"-míu",0,&
ext_míu
,0x4001},

72 {"-míu°©e",0,&
ext_°©e
,0x4001},

73 #ifde‡
NETWORK


74 {"-c⁄√˘",&
docheckõ
[0],&
√çœyho°
,0x4001},

75 {"-£rvî",&
docheckõ
[1],0,0},

76 {"-√ç‹t",0,&
P‹t
,0},

83 
	$GëBa£Dúe˘‹y
(*
Ba£Dúe˘‹y
)

85 
	`°r˝y
(
Ba£Dúe˘‹y
, "fceultra");

86 
	}
}

88 
	$SëDeÁu…s
()

90 
	`mem£t
(&
Sëtögs
,0,(Settings));

91 
Sëtögs
.
˝u˛ock
 = 150;

92 
Sëtögs
.
‰ameskù
 = -1;

93 
Sëtögs
.
mmuhack
 = 1;

94 
Sëtögs
.
sound_øã
 = 22050;

95 
Sëtögs
.
turbo_øã_add
 = (8*2 << 24) / 60 + 1;

96 
Sëtögs
.
gamma
 = 100;

97 
Sëtögs
.
s°©e_c⁄fúm
 = 1;

99 
Sëtögs
.
KeyBöds
[ 0] = 0x010;

100 
Sëtögs
.
KeyBöds
[ 4] = 0x020;

101 
Sëtögs
.
KeyBöds
[ 2] = 0x040;

102 
Sëtögs
.
KeyBöds
[ 6] = 0x080;

103 
Sëtögs
.
KeyBöds
[13] = 0x001;

104 
Sëtögs
.
KeyBöds
[14] = 0x002;

105 
Sëtögs
.
KeyBöds
[12] = 0x100;

106 
Sëtögs
.
KeyBöds
[15] = 0x200;

107 
Sëtögs
.
KeyBöds
[ 8] = 0x008;

108 
Sëtögs
.
KeyBöds
[ 9] = 0x004;

109 
Sëtögs
.
KeyBöds
[10] = 0x80000000;

110 
Sëtögs
.
KeyBöds
[11] = 0x40000000;

111 
Sëtögs
.
KeyBöds
[27] = 0xc0000000;

112 
	}
}

114 
	$DoDrivîArgs
()

116 #ifde‡
NETWORK


117 if(
docheckõ
[0])

118 
√çœy
=2;

119 if(
docheckõ
[1])

120 
√çœy
=1;

122 if(
√çœy
)

123 
	`FCEUI_SëNëw‹kPœy
(
√çœy
);

125 
	}
}

128 **
	gg_¨gv
;

129 
	gmmuhack_°©us
 = 0;

133 
	$maö
(
¨gc
, *
¨gv
[])

135 
ªt
;

136 
g_¨gv
 = 
¨gv
;

138 
	`¥ötf
("Sèπög GPFCE - P‹àvîsi⁄ " 
GP2X_PORT_VERSION
 "Ñ%ò(" 
__DATE__
 ")\n", 
GP2X_PORT_REV
);

139 
	`puts
("Ba£d o¿FCE U…ø "
VERSION_STRING
"ánd 0.98.1x versions");

140 
	`puts
("OriginalÖort by Zheng Zhu");

141 
	`puts
("Menu/optimization/misc work byÇotaz\n");

143 
	`gp2x_öô
();

144 
	`˝u˘æ_öô
();

146 
	`SëDeÁu…s
();

148 
ªt
 = 
	`CLImaö
(
¨gc
,
¨gv
);

151 
	`gp2x_video_RGB_£tsˇlög
(320, 240);

153 i‡(
mmuhack_°©us
 > 0)

154 
	`mmuunhack
();

156 
	`£t_gamma
(100);

157 
	`˝u˘æ_deöô
();

158 
	`gp2x_deöô
();

160 (
ªt
?0:-1);

161 
	}
}

165 
	$gp2x_›t_£tup
()

167 i‡(
Sëtögs
.
mmuhack
) {

168 
ªt
 = 
	`mmuhack
();

169 
	`¥ötf
("squidgêhack codêföishedándÑëu∫ed %s\n", 
ªt
 > 0 ? "ok" : "fail");

170 
	`fÊush
(
°dout
);

171 
mmuhack_°©us
 = 
ªt
;

173 i‡(
Sëtögs
.
ømtimögs
) {

174 
	`¥ötf
("£âög RAMÅimögs.. "); 
	`fÊush
(
°dout
);

176 
	`£t_RAM_Timögs
(6, 4, 1, 1, 1, 2, 2);

177 
	`¥ötf
("d⁄e.\n"); 
	`fÊush
(
°dout
);

179 
	}
}

181 
	$gp2x_›t_upd©e
()

183 
¥ev_˝u˛ock
 = 200, 
¥ev_gamma
 = 100, 
¥ev_vsync
 = 0, 
¥ev_∑l
 = 0;

184 i‡(
Sëtögs
.
˝u˛ock
 !0 && Sëtögs.˝u˛ock !
¥ev_˝u˛ock
)

186 
	`£t_FCLK
(
Sëtögs
.
˝u˛ock
);

187 
¥ev_˝u˛ock
 = 
Sëtögs
.
˝u˛ock
;

190 i‡(
Sëtögs
.
gamma
 !0 && Sëtögs.gamm®!
¥ev_gamma
)

192 
	`£t_gamma
(
Sëtögs
.
gamma
);

193 
¥ev_gamma
 = 
Sëtögs
.
gamma
;

196 i‡(
Sëtögs
.
≥r„˘_vsync
 !
¥ev_vsync
 || (Sëtögs.≥r„˘_vsyn¯&& 
¥ev_∑l
 !
PAL
))

198 i‡(
Sëtögs
.
≥r„˘_vsync
)

200 
	`£t_LCD_cu°om_øã
(
PAL
 ? 
LCDR_100_02
 : 
LCDR_120_20
);

201 
¥ev_∑l
 = 
PAL
;

205 
	`un£t_LCD_cu°om_øã
();

207 
¥ev_vsync
 = 
Sëtögs
.
≥r„˘_vsync
;

209 
	}
}

	@drivers/gp2x/gp2x.h

1 
	#GP2X_PORT_VERSION
 "0.4"

	)

5 
	mKeyBöds
[32];

6 
	mJoyBöds
[4][32];

7 
	mturbo_øã_add
;

8 
	msound_øã
;

9 
	mshowÂs
;

10 
	msˇlög
;

11 
	m‰ameskù
;

12 
	ms°©e_c⁄fúm
;

13 
	mªgi⁄_f‹˚
;

14 
	m˝u˛ock
;

15 
	mmmuhack
;

16 
	mømtimögs
;

17 
	mgamma
;

18 
	m≥r„˘_vsync
;

19 
	maccuøã_mode
;

20 } 
	tDSETTINGS
;

22 
DSETTINGS
 
Sëtögs
;

24 
gp2x_›t_£tup
();

25 
gp2x_›t_upd©e
();

	@drivers/gp2x/input.c

18 
	~"../../°©e.h
"

19 
	~"../../gíîÆ.h
"

20 
	~"../../öput.h
"

21 
	~"../../svga.h
"

22 
	~"../../video.h
"

23 
	~"usbjoy.h
"

28 
	gU§I≈utTy≥
[2]={
SI_GAMEPAD
,SI_GAMEPAD};

29 
	gU§I≈utTy≥FC
={
SI_NONE
};

31 
	gI≈utTy≥
[2];

32 
	gI≈utTy≥FC
;

34 
uöt32
 
	gJSªtu∫
;

36 
	gpowî∑dsc
[2][12];

37 
	gpowî∑dside
=0;

39 
uöt32
 
	gMou£D©a
[3];

40 
uöt8
 
	gfkbkeys
[0x48];

42 
uöt32
 
	gcombo_a˘s
 = 0, 
	gcombo_keys
 = 0;

43 
uöt32
 
	g¥ev_emu_a˘s
 = 0;

46 
	$£tsoundvﬁ
(
soundvﬁume
)

48 
soundvﬁIndex
;

49 
soundvﬁmëî
[24];

50 
¥ev_¢d_⁄
 = 0;

52 i‡((!!
soundvﬁume
Ë^ 
¥ev_¢d_⁄
)

54 
	`FCEUI_Sound
(
Sëtögs
.
sound_øã
);

55 
¥ev_¢d_⁄
 = !!
soundvﬁume
;

59 
	`gp2x_sound_vﬁume
(
soundvﬁume
, soundvolume);

60 
mëîvÆ
=
soundvﬁume
/5;

61 
soundvﬁIndex
 = 0; soundvolIndex < 20; soundvolIndex++)

63 i‡(
soundvﬁIndex
 < 
mëîvÆ
)

65 
soundvﬁmëî
[
soundvﬁIndex
]='*';

69 
soundvﬁmëî
[
soundvﬁIndex
]='_';

72 
soundvﬁmëî
[20]=0;

73 
	`FCEU_Di•Mesßge
("|%s|", 
soundvﬁmëî
);

74 
	}
}

77 
	$do_emu_a˘s
(
uöt32
 
a˘s
)

79 
uöt32
 
a˘sc
 = 
a˘s
;

80 
a˘s
 &a˘†^ 
¥ev_emu_a˘s
;

81 
¥ev_emu_a˘s
 = 
a˘sc
;

83 i‡(
a˘s
 & (3 << 30))

85 
keys
;

86 
do_ô
 = 1;

87 i‡(
a˘s
 & (1 << 30))

89 i‡(
Sëtögs
.
s°©e_c⁄fúm
 & 2)

91 
	`FCEU_Di•Mesßge
("LOAD STATE? (Y=yes, X=no)");

92 
	`FCEU_PutImage
();

93 
	`FCEUD_Upd©e
(
XBuf
+8,
NULL
,0);

94  !((
keys
 = 
	`gp2x_joy°ick_ªad
(1)Ë& (
GP2X_X
|
GP2X_Y
)ËË
	`u¶ìp
(50*1024);

95 i‡(
keys
 & 
GP2X_X
Ë
do_ô
 = 0;

96 
	`FCEU_C™˚lDi•Mesßge
();

98 i‡(
do_ô
Ë
	`FCEUI_LﬂdSèã
();

102 i‡(
Sëtögs
.
s°©e_c⁄fúm
 & 1)

104 *
‚ame
 = 
	`FCEU_MakeFName
(
FCEUMKF_STATE
,
CuºítSèã
,0);

105 
FILE
 *
°
=
	`f›í
(
‚ame
,"rb");

106 
	`‰ì
(
‚ame
);

107 i‡(
°
)

109 
	`f˛o£
(
°
);

110 
	`FCEU_Di•Mesßge
("OVERWRITE SAVE? (Y=yes, X=no)");

111 
	`FCEU_PutImage
();

112 
	`FCEUD_Upd©e
(
XBuf
+8,
NULL
,0);

113  !((
keys
 = 
	`gp2x_joy°ick_ªad
(1)Ë& (
GP2X_X
|
GP2X_Y
)ËË
	`u¶ìp
(50*1024);

114 i‡(
keys
 & 
GP2X_X
Ë
do_ô
 = 0;

115 
	`FCEU_C™˚lDi•Mesßge
();

118 i‡(
do_ô
Ë
	`FCEUI_SaveSèã
();

120 
	`Re‰eshThrŸéeFPS
();

122 i‡(
a˘s
 & (3 << 28))

124 
FILE
 *
°
;

125 *
‚ame
;

127 
CuºítSèã
 +(
a˘s
 & (1 << 29)) ? 1 : -1;

128 i‡(
CuºítSèã
 > 9) CurrentState = 0;

129 i‡(
CuºítSèã
 < 0) CurrentState = 9;

131 
‚ame
 = 
	`FCEU_MakeFName
(
FCEUMKF_STATE
,
CuºítSèã
,0);

132 
°
=
	`f›í
(
‚ame
,"rb");

133 
	`‰ì
(
‚ame
);

134 
	`FCEU_Di•Mesßge
("[%s] Sèã SlŸ %i", 
°
 ? "USED" : "FREE", 
CuºítSèã
);

135 i‡(
°
Ë
	`f˛o£
(st);

137 i‡(
a˘s
 & (1 << 27))

139 if(
FCEUGameInfo
.
ty≥
 =
GIT_FDS
)

140 
	`FCEU_DoSim∂eComm™d
(
FCEUNPCMD_FDSINSERT
);

142 i‡(
a˘s
 & (1 << 26))

144 if(
FCEUGameInfo
.
ty≥
 =
GIT_FDS
)

145 
	`FCEU_DoSim∂eComm™d
(
FCEUNPCMD_FDSSELECT
);

147 i‡(
a˘s
 & (1 << 25))

149 if(
FCEUGameInfo
.
ty≥
 =
GIT_VSUNI
)

150 
	`FCEU_DoSim∂eComm™d
(
FCEUNPCMD_VSUNICOIN
);

152 
	}
}

155 
	#down
(
b
Ë(
keys
 & 
GP2X_
##b)

	)

156 
	$do_Áke_mou£
(
keys
)

158 
x
=256/2, 
y
=240/2;

159 
•ìd
 = 3;

161 i‡(
	`down
(
A
)Ë
•ìd
 = 1;

162 i‡(
	`down
(
Y
)Ë
•ìd
 = 5;

164 i‡(
	`down
(
LEFT
))

166 
x
 -
•ìd
;

167 i‡(
x
 < 0) x = 0;

169 i‡(
	`down
(
RIGHT
))

171 
x
 +
•ìd
;

172 i‡(
x
 > 255) x = 255;

175 i‡(
	`down
(
UP
))

177 
y
 -
•ìd
;

178 i‡(
y
 < 0) y = 0;

180 i‡(
	`down
(
DOWN
))

182 
y
 +
•ìd
;

183 i‡(
y
 > 239) y = 239;

186 
Mou£D©a
[0] = 
x
;

187 
Mou£D©a
[1] = 
y
;

188 
Mou£D©a
[2] = 0;

189 i‡(
	`down
(
B
)Ë
Mou£D©a
[2] |= 1;

190 i‡(
	`down
(
X
)Ë
Mou£D©a
[2] |= 2;

191 
	}
}

194 
	$FCEUD_Upd©eI≈ut
()

196 
vﬁpushed_‰ames
 = 0;

197 
turbo_øã_˙t_a
[2] = {0,0}, 
turbo_øã_˙t_b
[2] = {0,0};

198 
keys
 = 
	`gp2x_joy°ick_ªad
(0);

199 
uöt32
 
Æl_a˘s
[2] = {0,0};

200 
i
;

202 i‡((
	`down
(
VOL_DOWN
Ë&& down(
VOL_UP
)Ë|| (
keys
 & (
GP2X_L
|
GP2X_START
)) == (GP2X_L|GP2X_START))

204 
Exô
 = 1;

207 i‡(
	`down
(
VOL_UP
))

210 i‡(
vﬁpushed_‰ames
++ > 10 && (volpushed_frames&1)) {

211 
soundvﬁ
++;

212 i‡(
soundvﬁ
 > 100) soundvol=100;

214 
	`£tsoundvﬁ
(
soundvﬁ
);

217 i‡(
	`down
(
VOL_DOWN
))

219 i‡(
vﬁpushed_‰ames
++ > 10 && (volpushed_frames&1)) {

220 
soundvﬁ
-=1;

221 i‡(
soundvﬁ
 < 0) soundvol=0;

223 
	`£tsoundvﬁ
(
soundvﬁ
);

228 
vﬁpushed_‰ames
 = 0;

231 
JSªtu∫
 = 0;

233 i‡(
I≈utTy≥
[1] !
SI_GAMEPAD
)

236 
	`do_Áke_mou£
(
keys
);

239 
i
 = 0; i < 32; i++)

241 i‡(
keys
 & (1 << 
i
))

243 
uöt32
 
a˘s
, 
u
 = 32;

244 
a˘s
 = 
Sëtögs
.
KeyBöds
[
i
];

245 i‡(!
a˘s
) ;

246 i‡((1 << 
i
Ë& 
combo_keys
)

249 
u
 = 
i
+1; u < 32; u++)

251 i‡((
keys
 & (1 << 
u
)Ë&& (
Sëtögs
.
KeyBöds
[u] & 
a˘s
))

253 
keys
 &~(1 << 
u
);

254 
a˘s
 &
Sëtögs
.
KeyBöds
[
u
];

259 i‡(
u
 !32Ë
a˘s
 &
combo_a˘s
;

260 
a˘s
 &~
combo_a˘s
;

261 
Æl_a˘s
[(
a˘s
>>16)&1] |=ácts;

266 i‡(
num_of_joys
 > 0)

268 
joy
;

269 
	`gp2x_usbjoy_upd©e
();

270 
joy
 = 0; joy < 
num_of_joys
; joy++) {

271 
keys
 = 
	`gp2x_usbjoy_check2
(
joy
);

272 
i
 = 0; i < 32; i++) {

273 i‡(
keys
 & (1 << 
i
)) {

274 
a˘s
 = 
Sëtögs
.
JoyBöds
[
joy
][
i
];

275 
Æl_a˘s
[(
a˘s
>>16)&1] |=ácts;

282 
JSªtu∫
 |
Æl_a˘s
[0] & 0xff;

283 i‡(
Æl_a˘s
[0] & 0x100) {

284 
turbo_øã_˙t_a
[0] +
Sëtögs
.
turbo_øã_add
;

285 
JSªtu∫
 |(
turbo_øã_˙t_a
[0] >> 24) & 1;

287 i‡(
Æl_a˘s
[0] & 0x200) {

288 
turbo_øã_˙t_b
[0] +
Sëtögs
.
turbo_øã_add
;

289 
JSªtu∫
 |(
turbo_øã_˙t_b
[0] >> 23) & 2;

293 
JSªtu∫
 |(
Æl_a˘s
[1] & 0xff) << 16;

294 i‡(
Æl_a˘s
[1] & 0x100) {

295 
turbo_øã_˙t_a
[1] +
Sëtögs
.
turbo_øã_add
;

296 
JSªtu∫
 |(
turbo_øã_˙t_a
[1] >> 8) & 0x10000;

298 i‡(
Æl_a˘s
[1] & 0x200) {

299 
turbo_øã_˙t_b
[1] +
Sëtögs
.
turbo_øã_add
;

300 
JSªtu∫
 |(
turbo_øã_˙t_b
[1] >> 7) & 0x20000;

303 
	`do_emu_a˘s
(
Æl_a˘s
[0]|all_acts[1]);

304 
	}
}

307 
	$InôOthîI≈ut
()

310 *
I≈utDPå
;

312 
t
;

313 
x
;

314 
©åib
;

316 
	`¥ötf
("InitOtherInput: InputType[0]: %i, InputType[1]: %i, InputTypeFC: %i\n",

317 
I≈utTy≥
[0], I≈utTy≥[1], 
I≈utTy≥FC
);

319 
t
=0,
x
=0;x<2;x++)

321 
©åib
=0;

322 
I≈utDPå
=0;

323 
I≈utTy≥
[
x
])

326 
SI_GAMEPAD
:
I≈utDPå
=((
uöt8
 *)&
JSªtu∫
)+(
x
<<1);;

327 
SI_ARKANOID
:
I≈utDPå
=
Mou£D©a
;
t
|=1;;

328 
SI_ZAPPER
:
I≈utDPå
=
Mou£D©a
;

329 
t
|=1;

330 
©åib
=1;

333 
	`FCEUI_SëI≈ut
(
x
,
I≈utTy≥
[x],
I≈utDPå
,
©åib
);

336 
©åib
=0;

337 
I≈utDPå
=0;

338 
I≈utTy≥FC
)

340 
SIFC_SHADOW
:
I≈utDPå
=
Mou£D©a
;
t
|=1;
©åib
=1;;

341 
SIFC_ARKANOID
:
I≈utDPå
=
Mou£D©a
;
t
|=1;;

342 
SIFC_FKB
:
I≈utDPå
=
fkbkeys
;;

345 
	`FCEUI_SëI≈utFC
(
I≈utTy≥FC
,
I≈utDPå
,
©åib
);

346 
	`FCEUI_DißbÀFourSc‹e
(
e›ti⁄s
&
EO_NOFOURSCORE
);

348 
öôed
|=16;

349 
	}
}

352 
	$Pª∑ªOthîI≈ut
()

354 
uöt32
 
a˘
;

356 
combo_a˘s
 = 
combo_keys
 = 
¥ev_emu_a˘s
 = 0;

358 
a˘
 = 0;áct < 32;áct++)

360 
u
, 
keyc
 = 0, 
keyc2
 = 0;

361 i‡(
a˘
 == 16 ||áct == 17) ;

362 i‡(
a˘
 > 17)

364 
u
 = 0; u < 32; u++)

365 i‡(
Sëtögs
.
KeyBöds
[
u
] & (1 << 
a˘
)Ë
keyc
++;

369 
u
 = 0; u < 32; u++)

370 i‡((
Sëtögs
.
KeyBöds
[
u
] & 0x30000) == 0 &&

371 (
Sëtögs
.
KeyBöds
[
u
] & (1 << 
a˘
))Ë
keyc
++;

372 
u
 = 0; u < 32; u++)

373 i‡((
Sëtögs
.
KeyBöds
[
u
] & 0x30000) == 1 &&

374 (
Sëtögs
.
KeyBöds
[
u
] & (1 << 
a˘
))Ë
keyc2
++;

375 i‡(
keyc2
 > 
keyc
) keyc = keyc2;

377 i‡(
keyc
 > 1)

380 
u
 = 0; u < 32; u++)

382 i‡(
Sëtögs
.
KeyBöds
[
u
] & (1 << 
a˘
)) {

383 
combo_keys
 |1 << 
u
;

384 
combo_a˘s
 |1 << 
a˘
;

391 
	}
}

	@drivers/gp2x/main.c

19 
	~<uni°d.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sig«l.h
>

22 
	~<sys/time.h
>

23 
	~<sys/°©.h
>

24 
	~<°rög.h
>

25 
	~<°rögs.h
>

26 
	~<î∫o.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

30 
	~"maö.h
"

31 
	~"möimÆ.h
"

32 
	~"thrŸée.h
"

33 
	~"míu.h
"

34 
	~"gp2x.h
"

36 
	~"../comm⁄/c⁄fig.h
"

37 
	~"../comm⁄/¨gs.h
"

38 
	~"../comm⁄/unixd•.h
"

39 
	~"../comm⁄/chót.h
"

41 
	~"../../f˚.h
"

42 
	~"../../ˇπ.h
"

44 
	~"dÁ˚.h
"

47 
CÀ™SurÁ˚
();

50 
œ°LﬂdedGameName
[2048];

51 
uöt8
 
Exô
;

52 
FSkù
;

53 
Clo£Game
();

55 
FCEUGI
 *
	gf˚ugi
 = 
NULL
;

56 
	g¡sccﬁ
=0,
	g¡schue
=-1,
	g¡s˘öt
=-1;

57 
	gsoundvﬁ
=70;

58 
	göôed
=0;

60 
	g§ídlöev
[2]={8,0};

61 
	gîídlöev
[2]={231,239};

62 
	g§ídlöe
,
	gîídlöe
;

65 
	gBa£Dúe˘‹y
[2048];

67 
	ge›ti⁄s
=0;

69 
DrivîKûl
();

70 
DrivîInôülize
();

72 
	ggamëy≥
;

73 
	~"öput.c
"

75 
	$P¨£GI
(
FCEUGI
 *
gi
)

77 
gamëy≥
=
gi
->
ty≥
;

79 
I≈utTy≥
[0]=
U§I≈utTy≥
[0];

80 
I≈utTy≥
[1]=
U§I≈utTy≥
[1];

81 
I≈utTy≥FC
=
U§I≈utTy≥FC
;

83 if(
gi
->
öput
[0]>=0)

84 
I≈utTy≥
[0]=
gi
->
öput
[0];

85 if(
gi
->
öput
[1]>=0)

86 
I≈utTy≥
[1]=
gi
->
öput
[1];

87 if(
gi
->
öputfc
>=0)

88 
I≈utTy≥FC
=
gi
->
öputfc
;

89 
	}
}

91 
	$FCEUD_PrötEº‹
(*
s
)

93 
	`puts
(
s
);

94 
	}
}

96 *
	g˝Æëã
=0;

97 
	$LﬂdCPÆëã
()

99 
tmµ
[192];

100 
FILE
 *
Â
;

102 if(!(
Â
=
	`f›í
(
˝Æëã
,"rb")))

104 
	`¥ötf
(" Eº‹Üﬂdög cu°omÖÆëã from fûe: %s\n",
˝Æëã
);

105 
	`‰ì
(
˝Æëã
);

106 
˝Æëã
=0;

109 
	`‰ód
(
tmµ
,1,192,
Â
);

110 
	`FCEUI_SëPÆëãAºay
((
uöt8
 *)
tmµ
);

111 
	`f˛o£
(
Â
);

112 
	}
}

114 
CFGSTRUCT
 
	gf˚uc⁄fig
[]={

115 
AC
(
soundvﬁ
),

116 
ACS
(
˝Æëã
),

117 
AC
(
¡s˘öt
),

118 
AC
(
¡schue
),

119 
AC
(
¡sccﬁ
),

120 
AC
(
U§I≈utTy≥FC
),

121 
ACA
(
U§I≈utTy≥
),

122 
AC
(
powî∑dside
),

123 
AC
(
powî∑dsc
),

124 
AC
(
e›ti⁄s
),

125 
ACA
(
§ídlöev
),

126 
ACA
(
îídlöev
),

127 
ADDCFGSTRUCT
(
DrivîC⁄fig
),

128 
ENDCFGSTRUCT


131 c⁄° *
	$skù_∑th
(c⁄° *
∑th
)

133 c⁄° *
p
;

134 i‡(
∑th
 =
NULL
)  NULL;

135 
p
 = 
∑th
+
	`°æí
(path)-1;Ö >Öath && *p != '/';Ö--);

136 i‡(*
p
 == '/')Ö++;

137  
p
;

138 
	}
}

140 
	$SaveC⁄fig
(c⁄° *
Œgn_∑th
)

142 c⁄° *
«me
 = 
	`skù_∑th
(
Œgn_∑th
);

143 
tdú
[2048];

144 
ªt
;

145 i‡(
«me
)

146 
	`•rötf
(
tdú
,"%s"
PSS
"cfg"PSS"%s.cfg",
Ba£Dúe˘‹y
,
«me
);

147 
	`•rötf
(
tdú
,"%s"
PSS
"f˚u2.cfg",
Ba£Dúe˘‹y
);

148 
	`¥ötf
("ßvög cfgÅÿ%†... ", 
tdú
); 
	`fÊush
(
°dout
);

149 
	`FCEUI_GëNTSCTH
(&
¡s˘öt
, &
¡schue
);

150 
ªt
=
	`SaveFCEUC⁄fig
(
tdú
,
f˚uc⁄fig
);

151 
	`¥ötf
(
ªt
 == 0 ? "done\n" : "failed\n");

152  
ªt
;

153 
	}
}

155 
	$LﬂdC⁄fig
(c⁄° *
Œgn_∑th
)

157 c⁄° *
«me
 = 
	`skù_∑th
(
Œgn_∑th
);

158 
tdú
[2048];

159 
ªt
;

160 i‡(
«me
)

161 
	`•rötf
(
tdú
,"%s"
PSS
"cfg"PSS"%s.cfg",
Ba£Dúe˘‹y
,
«me
);

162 
	`•rötf
(
tdú
,"%s"
PSS
"f˚u2.cfg",
Ba£Dúe˘‹y
);

163 
	`¥ötf
("lﬂdög cfg from %†... ", 
tdú
); 
	`fÊush
(
°dout
);

164 
	`FCEUI_GëNTSCTH
(&
¡s˘öt
, &
¡schue
);

165 
ªt
=
	`LﬂdFCEUC⁄fig
(
tdú
,
f˚uc⁄fig
);

166 
	`FCEUI_SëNTSCTH
(
¡sccﬁ
, 
¡s˘öt
, 
¡schue
);

167 
	`¥ötf
(
ªt
 == 0 ? "done\n" : "failed\n");

168  
ªt
;

169 
	}
}

171 
	$LﬂdLLGN
()

173 
tdú
[2048];

174 
FILE
 *
f
;

175 
Àn
;

176 
	`•rötf
(
tdú
,"%s"
PSS
"œ°_rom.txt",
Ba£Dúe˘‹y
);

177 
f
=
	`f›í
(
tdú
, "r");

178 if(
f
)

180 
Àn
 = 
	`‰ód
(
œ°LﬂdedGameName
, 1, ÷a°LﬂdedGameName)-1, 
f
);

181 
œ°LﬂdedGameName
[
Àn
] = 0;

182 
	`f˛o£
(
f
);

184 
	}
}

186 
	$SaveLLGN
()

189 i‡(
œ°LﬂdedGameName
[0] && !(
e›ti⁄s
&
EO_NOAUTOWRITE
))

191 
tdú
[2048];

192 
FILE
 *
f
;

193 
	`•rötf
(
tdú
,"%s"
PSS
"œ°_rom.txt",
Ba£Dúe˘‹y
);

194 
f
=
	`f›í
(
tdú
, "w");

195 if(
f
)

197 
	`fwrôe
(
œ°LﬂdedGameName
, 1, 
	`°æí
÷a°LﬂdedGameName), 
f
);

198 
	`f˛o£
(
f
);

199 
	`sync
();

202 
	}
}

205 
	$Cª©eDús
()

207 *
subs
[]={"fcs","snaps","gameinfo","sav","cheats","cfg","pal"};

208 
tdú
[2048];

209 
x
;

211 
	`mkdú
(
Ba£Dúe˘‹y
,
S_IRWXU
);

212 
x
=0;x<(
subs
)/(subs[0]);x++)

214 
	`•rötf
(
tdú
,"%s"
PSS
"%s",
Ba£Dúe˘‹y
,
subs
[
x
]);

215 
	`mkdú
(
tdú
,
S_IRWXU
);

217 
	}
}

219 
SëSig«ls
((*
t
)())

221 
sigs
[11]={
SIGINT
,
SIGTERM
,
SIGHUP
,
SIGPIPE
,
SIGSEGV
,
SIGFPE
,
SIGKILL
,
SIGALRM
,
SIGABRT
,
SIGUSR1
,
SIGUSR2
};

222 
x
;

223 
x
=0;x<11;x++)

224 
	`sig«l
(
sigs
[
x
],
t
);

225 
	}
}

227 
	$Clo£Stuff
(
signum
)

229 
	`DrivîKûl
();

230 
	`¥ötf
("\nSig«»%d ha†bì¿ˇughà™d dó… wôh...\n",
signum
);

231 
signum
)

233 
SIGINT
:
	`¥ötf
("How DARE you interrupt me!\n");;

234 
SIGTERM
:
	`¥ötf
("MUST TERMINATE ALL HUMANS\n");;

235 
SIGHUP
:
	`¥ötf
("Reach outánd hang-up on someone.\n");;

236 
SIGPIPE
:
	`¥ötf
("TheÖipe has broken! Better watch out for floods...\n");;

237 
SIGSEGV
:
	`¥ötf
("Iyeeeeeeeee!!! A segmentation fault has occurred. Haveá fluffy day.\n");;

238 #if(
SIGBUS
!=
SIGSEGV
)

239 
SIGBUS
:
	`¥ötf
("IÅold youÅo beÇiceÅoÅhe driver.\n");;

241 
SIGFPE
:
	`¥ötf
("Those darn floatingÖoints. Ne'er know whenÅhey'll bite!\n");;

242 
SIGALRM
:
	`¥ötf
("Don'tÅhrow your clockátÅhe meowing cats!\n");;

243 
SIGABRT
:
	`¥ötf
("Abort, Retry, Ignore, Fail?\n");;

244 
SIGUSR1
:

245 
SIGUSR2
:
	`¥ötf
("Killing yourÖrocesses isÇotÇice.\n");;

247 
	`exô
(1);

248 
	}
}

250 
	$DoArgs
(
¨gc
, *
¨gv
[])

252 *
c‹èb
[5]={"none","gamepad","zapper","powerpad","arkanoid"};

253 
c‹èbi
[5]={
SI_NONE
,
SI_GAMEPAD
,

254 
SI_ZAPPER
,
SI_POWERPADA
,
SI_ARKANOID
};

255 *
fcc‹èb
[5]={"none","arkanoid","shadow","4player","fkb"};

256 
fcc‹èbi
[5]={
SIFC_NONE
,
SIFC_ARKANOID
,
SIFC_SHADOW
,

257 
SIFC_4PLAYER
,
SIFC_FKB
};

259 
x
, 
ªt
;

260 *
öpuè
[2]={0,0};

261 *
f˚xp
=0;

262 
docheckõ
[4];

264 
ARGPSTRUCT
 
FCEUArgs
[]={

265 {"-soundvﬁ",0,&
soundvﬁ
,0},

266 {"-˝Æëã",0,&
˝Æëã
,0x4001},

268 {"-¡sccﬁ",0,&
¡sccﬁ
,0},

269 {"-∑l",&
docheckõ
[0],0,0},

270 {"-öput1",0,&
öpuè
[0],0x4001},{"-input2",0,&inputa[1],0x4001},

271 {"-f˚xp",0,&
f˚xp
,0x4001},

273 {"-gg",0,&
e›ti⁄s
,0x8000|
EO_GG
},

274 {"-no8lim",0,&
e›ti⁄s
,0x8000|
EO_NO8LIM
},

275 {"-¢≠«me",0,&
e›ti⁄s
,0x8000|
EO_SNAPNAME
},

276 {"-nofs",0,&
e›ti⁄s
,0x8000|
EO_NOFOURSCORE
},

277 {"-˛ùsides",0,&
e›ti⁄s
,0x8000|
EO_CLIPSIDES
},

278 {"-nŸhrŸée",0,&
e›ti⁄s
,0x8000|
EO_NOTHROTTLE
},

279 {"-nﬂutowrôe",0,&
e›ti⁄s
,0x8000|
EO_NOAUTOWRITE
},

280 {"-¶°¨t",0,&
§ídlöev
[0],0},{"-¶íd",0,&
îídlöev
[0],0},

281 {"-¶°¨ç",0,&
§ídlöev
[1],0},{"-¶ídp",0,&
îídlöev
[1],0},

282 {0,(*)
DrivîArgs
,0,0},

286 
	`mem£t
(
docheckõ
,0,(docheckie));

287 
ªt
=
	`P¨£Argumíts
(
¨gc
, 
¨gv
, 
FCEUArgs
);

288 if(
˝Æëã
)

290 if(
˝Æëã
[0]=='0')

291 if(
˝Æëã
[1]==0)

293 
	`‰ì
(
˝Æëã
);

294 
˝Æëã
=0;

297 if(
docheckõ
[0])

298 
Sëtögs
.
ªgi⁄_f‹˚
=2;

299 
	`FCEUI_SëGameGíõ
(
e›ti⁄s
&
EO_GG
);

300 
	`FCEUI_DißbÀS¥ôeLimô©i⁄
(
e›ti⁄s
&
EO_NO8LIM
);

301 
	`FCEUI_SëS«pName
(
e›ti⁄s
&
EO_SNAPNAME
);

303 
x
=0;x<2;x++)

305 if(
§ídlöev
[
x
]<0 || srendlinev[x]>239) srendlinev[x]=0;

306 if(
îídlöev
[
x
]<
§ídlöev
[x] ||Érendlinev[x]>239)Érendlinev[x]=239;

309 
	`FCEUI_SëRídîedLöes
(
§ídlöev
[0],
îídlöev
[0],srendlinev[1],erendlinev[1]);

310 
	`FCEUI_SëSoundVﬁume
(80);

311 
	`DoDrivîArgs
();

313 if(
f˚xp
)

315 
y
;

316 
y
=0;y<5;y++)

318 if(!
	`°∫cmp
(
fcc‹èb
[
y
],
f˚xp
,8))

320 
U§I≈utTy≥FC
=
fcc‹èbi
[
y
];

324 
	`‰ì
(
f˚xp
);

326 
x
=0;x<2;x++)

328 
y
;

330 if(!
öpuè
[
x
])

333 
y
=0;y<5;y++)

335 if(!
	`°∫cmp
(
c‹èb
[
y
],
öpuè
[
x
],8))

337 
U§I≈utTy≥
[
x
]=
c‹èbi
[
y
];

338 if(
y
==3)

340 
powî∑dside
&=~(1<<
x
);

341 
powî∑dside
|=((((
öpuè
[
x
][8])-'a')&1)^1)<<x;

343 
	`‰ì
(
öpuè
[
x
]);

347  
ªt
;

348 
	}
}

351 
	~"ußge.h
"

353 
	$CLImaö
(
¨gc
, *
¨gv
[])

355 
œ°_¨g_∑r£d
, 
ªt
;

362 if(!
	`DrivîInôülize
())

367 if(!
	`FCEUI_Inôülize
())

369 
	`GëBa£Dúe˘‹y
(
Ba£Dúe˘‹y
);

370 
	`FCEUI_SëBa£Dúe˘‹y
(
Ba£Dúe˘‹y
);

371 
œ°LﬂdedGameName
[0] = 0;

373 
	`Cª©eDús
();

374 
	`LﬂdC⁄fig
(
NULL
);

375 
œ°_¨g_∑r£d
=
	`DoArgs
(
¨gc
-1,&
¨gv
[1]);

376 
	`gp2x_›t_£tup
();

377 
	`LﬂdLLGN
();

378 
	`FCEUI_SëNTSCTH
(
¡sccﬁ
, 
¡s˘öt
, 
¡schue
);

379 if(
˝Æëã
)

380 
	`LﬂdCPÆëã
();

381 if(
	`InôSound
())

382 
öôed
|=1;

384 i‡(
¨gc
 > 1 && !
œ°_¨g_∑r£d
)

386 
	`°∫˝y
(
œ°LﬂdedGameName
, 
¨gv
[
¨gc
-1], (lastLoadedGameName));

387 
œ°LﬂdedGameName
[(lastLoadedGameName)-1] = 0;

388 
Exô
 = 0;

392 
Exô
 = 1;

397 if(!
Exô
)

399 i‡(
f˚ugi
)

400 
	`Clo£Game
();

401 
ªt
=
	`LﬂdC⁄fig
(
œ°LﬂdedGameName
);

402 i‡(
ªt
 != 0)

404 
	`LﬂdC⁄fig
(
NULL
);

406 
	`FCEUI_SëEmuMode
(
Sëtögs
.
accuøã_mode
);

407 
f˚ugi
=
	`FCEUI_LﬂdGame
(
œ°LﬂdedGameName
);

408 i‡(
f˚ugi
)

410 
öfo°rög
[32];

411 i‡(
Sëtögs
.
ªgi⁄_f‹˚
)

412 
	`FCEUI_SëVidSy°em
(
Sëtögs
.
ªgi⁄_f‹˚
 - 1);

413 
	`P¨£GI
(
f˚ugi
);

414 
	`InôOthîI≈ut
();

416 i‡((
e›ti⁄s
&
EO_GG
Ë&& 
gíõ°age
 == 0) {

417 
	`°r˝y
(
öfo°rög
, "gg.rom is missing, GG disabled");

418 
e›ti⁄s
&=~
EO_GG
;

419 
	`FCEUI_SëGameGíõ
(0);

421 
	`GameI¡îÁ˚
(
GI_INFOSTRING
, 
öfo°rög
);

422 
	`FCEU_Di•Mesßge
("%s", 
öfo°rög
);

426 
LﬂdGameLa°Eº‹
) {

427 : 
	`°r˝y
(
míuEº‹Msg
, "failedÅoÜoad ROM"); ;

428 2: 
	`°r˝y
(
míuEº‹Msg
, "Can't findá ROM for ips/movie"); ;

429 10: 
	`°r˝y
(
míuEº‹Msg
, "FDS BIOS ROM is missing,Ñead docs"); ;

430 11: 
	`°r˝y
(
míuEº‹Msg
, "ErrorÑeadingáuxillary FDS file"); ;

434 if(
Exô
 || !
f˚ugi
)

436 
ªt
;

437 
ªt
 = 
	`gp2x_míu_do
();

438 i‡(
ªt
 == 1) ;

439 i‡(
ªt
 == 2) {

440 
Exô
 = 0;

445 
	`gp2x_›t_upd©e
();

446 
	`Pª∑ªOthîI≈ut
();

447 
	`FCEUI_GëCuºítVidSy°em
(&
§ídlöe
,&
îídlöe
);

448 
	`gp2x_video_ch™gemode
(
Sëtögs
.
sˇlög
 == 3 ? 15 : 8);

449 
Sëtögs
.
sˇlög
 & 3) {

450 0: 
	`gp2x_video_£t_offs
(0); 
	`gp2x_video_RGB_£tsˇlög
(320, 240); ;

451 1: 
	`gp2x_video_£t_offs
(32); 
	`gp2x_video_RGB_£tsˇlög
(256, 240); ;

452 2: 
	`gp2x_video_£t_offs
(32+
§ídlöe
*320); 
	`gp2x_video_RGB_£tsˇlög
(256, 
îídlöe
-srendline); ;

453 3: 
	`gp2x_video_£t_offs
(32); 
	`gp2x_video_RGB_£tsˇlög
(320, 240); ;

455 
	`CÀ™SurÁ˚
();

456 
	`gp2x_°¨t_sound
(
Sëtögs
.
sound_øã
, 16, 0);

457 
	`Re‰eshThrŸéeFPS
();

458 
	`FCEUI_Emuœã
();

461 i‡(
f˚ugi
)

462 
	`Clo£Game
();

464 
	`SaveLLGN
();

465 
	`FCEUI_Kûl
();

466 
	`DrivîKûl
();

468 
	}
}

470 
	$DrivîInôülize
()

472 
	`SëSig«ls
((*)
Clo£Stuff
);

474 if(!
	`InôVideo
())  0;

475 
öôed
|=4;

477 
	}
}

479 
	$DrivîKûl
()

482 
	`SëSig«ls
(
SIG_DFL
);

484 if(
˝Æëã
Ë
	`‰ì
(cpalette);

485 
˝Æëã
=0;

487 if(
öôed
&4)

488 
	`KûlVideo
();

489 if(
öôed
&1)

490 
	`KûlSound
();

491 
öôed
=0;

492 
	}
}

494 
	$FCEUD_Upd©e
(
uöt8
 *
xbuf
, 
öt16
 *
Buf„r
, 
Cou¡
)

496 
	`FCEUD_Upd©eI≈ut
();

497 
	`BlôPª∑ª
(
xbuf
 =
NULL
);

498 if(!(
e›ti⁄s
&
EO_NOTHROTTLE
))

500 if(
Cou¡
)

501 
	`WrôeSound
(
Buf„r
,
Cou¡
);

502 
	`S≥edThrŸée
();

504 
	`BlôS¸ìn
(
xbuf
 =
NULL
);

506 i‡(
Exô
Ë
FSkù
=0;

507 
	}
}

	@drivers/gp2x/main.h

20 
	~"../../drivî.h
"

22 
e›ti⁄s
;

23 
	#EO_NO8LIM
 1

	)

24 
	#EO_SUBASE
 2

	)

25 
	#EO_CLIPSIDES
 8

	)

26 
	#EO_SNAPNAME
 16

	)

27 
	#EO_NOFOURSCORE
 32

	)

28 
	#EO_NOTHROTTLE
 64

	)

29 
	#EO_GG
 128

	)

30 
	#EO_NOAUTOWRITE
 256

	)

31 
§ídlöe
,
îídlöe
,
§ídlöev
[2],
îídlöev
[2];

32 
NoWaôög
;

34 
FCEUGI
 *
f˚ugi
;

36 
SaveC⁄fig
(c⁄° *
«me
);

	@drivers/gp2x/menu.c

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 
	~<°d¨g.h
>

8 
	~<uni°d.h
>

9 
	~<dúít.h
>

11 
	~"möimÆ.h
"

12 
	~"usbjoy.h
"

13 
	~"asmutûs.h
"

14 
	~"míu.h
"

15 
	~"maö.h
"

16 
	~"f⁄ts.h
"

17 
	~"gp2x.h
"

19 
	~"../../öput.h
"

20 
	~"../../°©e.h
"

21 
	~"../../∑Àâe.h
"

22 
	~"ªad≤g.h
"

24 #i‚de‡
_DIRENT_HAVE_D_TYPE


28 
GP2X_PORT_REV
;

29 
œ°LﬂdedGameName
[
PATH_MAX
];

30 
mmuhack_°©us
;

31 
soundvﬁ
;

32 
uöt8
 
Exô
;

33 
InôSound
();

35 
	#CONFIGURABLE_KEYS
 (
GP2X_UP
|
GP2X_LEFT
|
GP2X_DOWN
|
GP2X_RIGHT
|
GP2X_START
|
GP2X_SELECT
|
GP2X_L
|
GP2X_R
|
GP2X_A
|
GP2X_B
|
GP2X_X
|
GP2X_Y
|
GP2X_PUSH
)

	)

37 *
	ggp2xKeyNames
[] = {

45 
	g∑th_buf„r
[
PATH_MAX
];

46 *
	gmíu_bg
 = 0;

47 
	gtxt_xmö
, 
	gtxt_xmax
, 
	gtxt_ymö
, 
	gtxt_ymax
;

49 
	gmíuEº‹Msg
[40] = {0, };

51 
	$míu_Êù
()

53 
	`gp2x_video_Êush_ˇche
();

54 
	`gp2x_video_Êù
();

55 
	}
}

57 
	$míu_d¨kí_ª£t
()

59 
txt_xmö
 = 320; 
txt_xmax
 = 0;

60 
txt_ymö
 = 240; 
txt_ymax
 = 0;

61 
	}
}

63 
	$gp2x_f˚u_c›y_bg
()

65 i‡(
míu_bg
)

66 
	`mem˝y
(
gp2x_s¸ìn
, 
míu_bg
, 320*240*2);

67 
	`mem£t
(
gp2x_s¸ìn
, 0, 320*240*2);

68 
	`míu_d¨kí_ª£t
();

69 
	}
}

71 
	$míu_d¨kí_ãxt_bg
()

73 
x
, 
y
, 
xmö
, 
xmax
, 
ymax
;

74 *
s¸ìn
 = 
gp2x_s¸ìn
;

76 
xmö
 = 
txt_xmö
 - 3;

77 i‡(
xmö
 < 0) xmin = 0;

78 
xmax
 = 
txt_xmax
 + 2;

79 i‡(
xmax
 > 319) xmax = 319;

81 
y
 = 
txt_ymö
 - 3;

82 i‡(
y
 < 0) y = 0;

83 
ymax
 = 
txt_ymax
 + 2;

84 i‡(
ymax
 > 239) ymax = 239;

86 
x
 = 
xmö
; x <
xmax
; x++)

87 
s¸ìn
[
y
*320+
x
] = 0xa514;

88 
y
++; y < 
ymax
; y++)

90 
s¸ìn
[
y
*320+
xmö
] = 0xffff;

91 
x
 = 
xmö
+1; x < 
xmax
; x++)

93 
p
 = 
s¸ìn
[
y
*320+
x
];

94 i‡(
p
 != 0xffff)

95 
s¸ìn
[
y
*320+
x
] = ((
p
&0xf79e)>>1) - ((p&0xc618)>>3);

97 
s¸ìn
[
y
*320+
xmax
] = 0xffff;

99 
x
 = 
xmö
; x <
xmax
; x++)

100 
s¸ìn
[
y
*320+
x
] = 0xffff;

101 
	}
}

103 
	$gp2x_f˚u_d¨kí_Æl
()

105 *
s¸ìn
 = 
gp2x_s¸ìn
;

106 
cou¡
 = 320*240/2;

108 
cou¡
--)

110 
p
 = 
s¸ìn
[
cou¡
];

111 
s¸ìn
[
cou¡
] = ((
p
&0xf79ef79e)>>1) - ((p&0xc618c618)>>3);

113 
	}
}

116 
	$gp2x_ãxt_out15_
(
x
, 
y
, c⁄° *
ãxt
)

118 
i
,
l
;

119 *
s¸ìn
 = 
gp2x_s¸ìn
;

121 
s¸ìn
 = s¸ì¿+ 
x
 + 
y
*320;

123 
i
 = 0; i < 
	`°æí
(
ãxt
); i++)

125 
l
=0;l<8;l++)

127 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x80Ë
s¸ìn
[l*320+0]=0xffff;

128 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x40Ë
s¸ìn
[l*320+1]=0xffff;

129 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x20Ë
s¸ìn
[l*320+2]=0xffff;

130 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x10Ë
s¸ìn
[l*320+3]=0xffff;

131 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x08Ë
s¸ìn
[l*320+4]=0xffff;

132 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x04Ë
s¸ìn
[l*320+5]=0xffff;

133 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x02Ë
s¸ìn
[l*320+6]=0xffff;

134 if(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+
l
]&0x01Ë
s¸ìn
[l*320+7]=0xffff;

136 
s¸ìn
 += 8;

138 i‡(
x
 < 
txt_xmö
)Åxt_xmin = x;

139 i‡(
x
+
i
*8 > 
txt_xmax
)Åxt_xmax = x+i*8;

140 i‡(
y
 < 
txt_ymö
)Åxt_ymin = y;

141 i‡(
y
+8 > 
txt_ymax
)Åxt_ymax = y+8;

142 
	}
}

144 
	$gp2x_ãxt_out15
(
x
, 
y
, c⁄° *
ãxto
, ...)

146 
va_li°
 
¨gs
;

147 
buf„r
[512];

149 
	`va_°¨t
(
¨gs
,
ãxto
);

150 
	`v•rötf
(
buf„r
,
ãxto
,
¨gs
);

151 
	`va_íd
(
¨gs
);

153 
	`gp2x_ãxt_out15_
(
x
,
y
,
buf„r
);

154 
	}
}

157 
	$gp2x_ãxt_out15_lim
(
x
, 
y
, c⁄° *
ãxto
, 
max
)

159 
buf„r
[320/8+1];

161 
	`°∫˝y
(
buf„r
, 
ãxto
, 320/8);

162 i‡(
max
 > 320/8) max = 320/8;

163 i‡(
max
 < 0) max = 0;

164 
buf„r
[
max
] = 0;

166 
	`gp2x_ãxt_out15
(
x
,
y
,
buf„r
);

167 
	}
}

169 
	$gp2x_smÆ…ext16
(
x
, 
y
, c⁄° *
ãxto
, 
cﬁ‹
)

171 
i
;

172 *
§c
;

173 *
d°
;

175 
i
 = 0;; i++, 
x
 += 6)

177 
c
 = (Ë
ãxto
[
i
];

178 
h
 = 8;

180 i‡(!
c
) ;

182 
§c
 = 
f⁄td©a6x8
[
c
];

183 
d°
 = (*)
gp2x_s¸ìn
 + 
x
 + 
y
*320;

185 
h
--)

187 
w
 = 0x20;

188 
w
)

190 if–*
§c
 & 
w
 ) *
d°
 = 
cﬁ‹
;

191 
d°
++;

192 
w
>>=1;

194 
§c
++;

196 
d°
 += 320-6;

199 
	}
}

201 
	$gp2x_smÆ…ext16_lim
(
x
, 
y
, c⁄° *
ãxto
, 
cﬁ‹
, 
max
)

203 
buf„r
[320/6+1];

205 
	`°∫˝y
(
buf„r
, 
ãxto
, 320/6);

206 i‡(
max
 > 320/6) max = 320/6;

207 i‡(
max
 < 0) max = 0;

208 
buf„r
[
max
] = 0;

210 
	`gp2x_smÆ…ext16
(
x
, 
y
, 
buf„r
, 
cﬁ‹
);

211 
	}
}

214 
	göp_¥ev
 = 0;

215 
	göp_¥evjoy
 = 0;

217 
	$waô_f‹_öput
(
öãª°ög
)

219 
ªt
;

220 
ª≥©s
 = 0, 
waô
 = 50*1000;

221 
ªÀa£
 = 0, 
i
;

223 i‡(
ª≥©s
 =2 ||Ñïót†=4Ë
waô
 /= 2;

224 i‡(
ª≥©s
 =6Ë
waô
 = 15 * 1000;

226 
i
 = 0; i < 6 && 
öp_¥ev
 =
	`gp2x_joy°ick_ªad
(1); i++) {

227 i‡(
i
 =0Ë
ª≥©s
++;

228 i‡(
waô
 >30*1000Ë
	`u¶ìp
(wait);

229 
	`•íd_cy˛es
(
waô
 * 
Sëtögs
.
˝u˛ock
);

232  !((
ªt
 = 
	`gp2x_joy°ick_ªad
(1)Ë& 
öãª°ög
) ) {

233 
	`u¶ìp
(50000);

234 
ªÀa£
 = 1;

237 i‡(
ªÀa£
 || 
ªt
 !
öp_¥ev
) {

238 
ª≥©s
 = 0;

239 
waô
 = 50*1000;

241 
öp_¥ev
 = 
ªt
;

242 
öp_¥evjoy
 = 0;

245 i‡((
ªt
&
GP2X_UP
Ë&& (ªt&
GP2X_LEFT
))Ñet &= ~GP2X_LEFT;

246 i‡((
ªt
&
GP2X_UP
Ë&& (ªt&
GP2X_RIGHT
))Ñet &= ~GP2X_RIGHT;

247 i‡((
ªt
&
GP2X_DOWN
Ë&& (ªt&
GP2X_LEFT
))Ñet &= ~GP2X_LEFT;

248 i‡((
ªt
&
GP2X_DOWN
Ë&& (ªt&
GP2X_RIGHT
))Ñet &= ~GP2X_RIGHT;

250  
ªt
;

251 
	}
}

253 
	$öput2_ªad
(
öãª°ög
, *
joy
)

255 
ªt
;

256 
i
;

260 *
joy
 = 0;

261 i‡((
ªt
 = 
	`gp2x_joy°ick_ªad
(0Ë& 
öãª°ög
)) ;

262 
	`gp2x_usbjoy_upd©e
();

263 
i
 = 0; i < 
num_of_joys
; i++) {

264 
ªt
 = 
	`gp2x_usbjoy_check2
(
i
);

265 i‡(
ªt
Ë{ *
joy
 = 
i
 + 1; ; }

267 i‡(
ªt
) ;

271  
ªt
;

272 
	}
}

275 
	$waô_f‹_öput_usbjoy
(
öãª°ög
, *
joy
)

277 
ªt
;

278 c⁄° 
waô
 = 300*1000;

279 
i
;

281 i‡(
öp_¥evjoy
 =0Ë
öp_¥ev
 &
öãª°ög
;

282 
i
 = 0; i < 6; i++) {

283 
ªt
 = 
	`öput2_ªad
(
öãª°ög
, 
joy
);

284 i‡(*
joy
 !
öp_¥evjoy
 || 
ªt
 !
öp_¥ev
) ;

285 
	`u¶ìp
(
waô
/6);

288  !(
ªt
 = 
	`öput2_ªad
(
öãª°ög
, 
joy
)) ) {

289 
	`u¶ìp
(50000);

292 
öp_¥ev
 = 
ªt
;

293 
öp_¥evjoy
 = *
joy
;

295  
ªt
;

296 
	}
}

303 
	$fûe2cﬁ‹
(c⁄° *
‚ame
)

305 c⁄° *
ext
 = 
‚ame
 + 
	`°æí
(fname) - 3;

306 c⁄° *
rom_exts
[] = { "zip", "nes", "fds", "unf", "nez", "nif" };

307 c⁄° *
Ÿhî_exts
[] = { "nsf", "ips", "fcm" };

308 
i
;

310 i‡(
ext
 < 
‚ame
)Éxt = fname;

311 
i
 = 0; i < (
rom_exts
)/(rom_exts[0]); i++)

312 i‡(
	`°rˇ£cmp
(
ext
, 
rom_exts
[
i
]) == 0)  0xbdff;

313 
i
 = 0; i < (
Ÿhî_exts
)/(other_exts[0]); i++)

314 i‡(
	`°rˇ£cmp
(
ext
, 
Ÿhî_exts
[
i
]) == 0)  0xaff5;

316 
	}
}

318 
	$døw_dúli°
(*
curdú
, 
dúít
 **
«mñi°
, 
n
, 
£l
)

320 
°¨t
, 
i
, 
pos
;

322 
°¨t
 = 12 - 
£l
;

323 
n
--;

325 
	`gp2x_f˚u_c›y_bg
();

326 
	`gp2x_f˚u_d¨kí_Æl
();

328 if(
°¨t
 - 2 >= 0)

329 
	`gp2x_smÆ…ext16_lim
(14, (
°¨t
 - 2)*10, 
curdú
, 0xffff, 53-2);

330 
i
 = 0; i < 
n
; i++) {

331 
pos
 = 
°¨t
 + 
i
;

332 i‡(
pos
 < 0) ;

333 i‡(
pos
 > 23) ;

334 i‡(
«mñi°
[
i
+1]->
d_ty≥
 =
DT_DIR
) {

335 
	`gp2x_smÆ…ext16_lim
(14, 
pos
*10, "/", 0xfff6, 1);

336 
	`gp2x_smÆ…ext16_lim
(14+6, 
pos
*10, 
«mñi°
[
i
+1]->
d_«me
, 0xfff6, 53-3);

338 
cﬁ‹
 = 
	`fûe2cﬁ‹
(
«mñi°
[
i
+1]->
d_«me
);

339 
	`gp2x_smÆ…ext16_lim
(14, 
pos
*10, 
«mñi°
[
i
+1]->
d_«me
, 
cﬁ‹
, 53-2);

342 
	`gp2x_ãxt_out15
(5, 120, ">");

343 
	`míu_Êù
();

344 
	}
}

346 
	$sˇndú_cmp
(c⁄° *
p1
, c⁄° *
p2
)

348 
dúít
 **
d1
 = (dúíà**)
p1
, **
d2
 = (dúíà**)
p2
;

349 i‡((*
d1
)->
d_ty≥
 =(*
d2
)->d_ty≥Ë 
	`Æphas‹t
(d1, d2);

350 i‡((*
d1
)->
d_ty≥
 =
DT_DIR
)  -1;

351 i‡((*
d2
)->
d_ty≥
 =
DT_DIR
)  1;

352  
	`Æphas‹t
(
d1
, 
d2
);

353 
	}
}

355 *
	gfûãr_exts
[] = {

359 
	$sˇndú_fûãr
(c⁄° 
dúít
 *
ít
)

361 c⁄° *
p
;

362 
i
;

364 i‡(
ít
 =
NULL
 ||É¡->
d_«me
 == NULL)  0;

365 i‡(
	`°æí
(
ít
->
d_«me
) < 5)  1;

367 
p
 = 
ít
->
d_«me
 + 
	`°æí
(ent->d_name) - 4;

369 
i
 = 0; i < (
fûãr_exts
)/(filter_exts[0]); i++)

371 i‡(
	`°rcmp
(
p
, 
fûãr_exts
[
i
]) == 0)  0;

375 
	}
}

377 *
	$fûe£l_lo›
(*
cuº_∑th
, *
föÆ_de°
)

379 
dúít
 **
«mñi°
;

380 
DIR
 *
dú
;

381 
n
, 
√wÀn
, 
£l
 = 0;

382 
öp
 = 0;

383 *
ªt
 = 
NULL
, *
‚ame
 = NULL;

386 i‡((
dú
 = 
	`›ídú
(
cuº_∑th
))) {

387 
	`˛o£dú
(
dú
);

389 *
p
;

390 
p
 = 
cuº_∑th
 + 
	`°æí
(curr_path) - 1;Ö > curr_path && *p != '/';Ö--);

391 *
p
 = 0;

392 
‚ame
 = 
p
+1;

395 
n
 = 
	`sˇndú
(
cuº_∑th
, &
«mñi°
, 
sˇndú_fûãr
, 
sˇndú_cmp
);

396 i‡(
n
 < 0) {

398 
n
 = 
	`sˇndú
("/", &
«mñi°
, 
sˇndú_fûãr
, 
sˇndú_cmp
);

399 i‡(
n
 < 0) {

401 
	`¥ötf
("dú: %s\n", 
cuº_∑th
);

402 
	`≥º‹
("scandir");

403  
NULL
;

408 i‡(
‚ame
 !
NULL
) {

409 
i
;

410 
i
 = 1; i < 
n
; i++) {

411 i‡(
	`°rcmp
(
«mñi°
[
i
]->
d_«me
, 
‚ame
) == 0) {

412 
£l
 = 
i
 - 1;

420 
	`døw_dúli°
(
cuº_∑th
, 
«mñi°
, 
n
, 
£l
);

421 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_LEFT
|
GP2X_RIGHT
|
GP2X_L
|
GP2X_R
|
GP2X_B
|
GP2X_X
);

422 if(
öp
 & 
GP2X_UP
 ) { 
£l
--; i‡(£»< 0Ë£»
n
-2; }

423 if(
öp
 & 
GP2X_DOWN
Ë{ 
£l
++; i‡(£»> 
n
-2) sel = 0; }

424 if(
öp
 & 
GP2X_LEFT
Ë{ 
£l
-=10; if (sel < 0) sel = 0; }

425 if(
öp
 & 
GP2X_L
Ë{ 
£l
-=24; if (sel < 0) sel = 0; }

426 if(
öp
 & 
GP2X_RIGHT
Ë{ 
£l
+=10; i‡(£»> 
n
-2) sel =Ç-2; }

427 if(
öp
 & 
GP2X_R
Ë{ 
£l
+=24; i‡(£»> 
n
-2) sel =Ç-2; }

428 if(
öp
 & 
GP2X_B
) {

429 
agaö
:

430 
√wÀn
 = 
	`°æí
(
cuº_∑th
Ë+ såÀn(
«mñi°
[
£l
+1]->
d_«me
) + 2;

431 i‡(
«mñi°
[
£l
+1]->
d_ty≥
 =
DT_REG
) {

432 i‡(
föÆ_de°
 =
NULL
ËföÆ_de° = 
	`mÆloc
(
√wÀn
);

433 i‡(
föÆ_de°
 =
NULL
) ;

434 
	`°r˝y
(
föÆ_de°
, 
cuº_∑th
);

435 
	`°rˇt
(
föÆ_de°
, "/");

436 
	`°rˇt
(
föÆ_de°
, 
«mñi°
[
£l
+1]->
d_«me
);

437 
ªt
 = 
föÆ_de°
;

439 } i‡(
«mñi°
[
£l
+1]->
d_ty≥
 =
DT_DIR
) {

440 *
p
, *
√wdú
 = 
	`mÆloc
(
√wÀn
);

441 i‡(
√wdú
 =
NULL
) ;

442 i‡(
	`°rcmp
(
«mñi°
[
£l
+1]->
d_«me
, "..") == 0) {

443 *
°¨t
 = 
cuº_∑th
;

444 
p
 = 
°¨t
 + 
	`°æí
(start) - 1;

445 *
p
 ='/' &&Ö > 
°¨t
)Ö--;

446 *
p
 !'/' &&Ö > 
°¨t
)Ö--;

447 i‡(
p
 <
°¨t
Ë
	`°r˝y
(
√wdú
, "/");

448 { 
	`°∫˝y
(
√wdú
, 
°¨t
, 
p
-start);Çewdir[p-start] = 0; }

450 
	`°r˝y
(
√wdú
, 
cuº_∑th
);

451 
p
 = 
√wdú
 + 
	`°æí
(newdir) - 1;

452 
p
 >
√wdú
 && *p == '/') *p-- = 0;

453 
	`°rˇt
(
√wdú
, "/");

454 
	`°rˇt
(
√wdú
, 
«mñi°
[
£l
+1]->
d_«me
);

456 
ªt
 = 
	`fûe£l_lo›
(
√wdú
, 
föÆ_de°
);

457 
	`‰ì
(
√wdú
);

461 *
t°‚
; 
FILE
 *
t°f
; 
tmp
;

462 
t°‚
 = 
	`mÆloc
(
√wÀn
);

463 i‡(
t°‚
 =
NULL
) ;

464 
	`°r˝y
(
t°‚
, 
cuº_∑th
);

465 
	`°rˇt
(
t°‚
, "/");

466 
	`°rˇt
(
t°‚
, 
«mñi°
[
£l
+1]->
d_«me
);

467 
t°f
 = 
	`f›í
(
t°‚
, "rb");

468 
	`‰ì
(
t°‚
);

469 i‡(
t°f
 !
NULL
)

471 i‡(
	`‰ód
(&
tmp
, 1, 1, 
t°f
Ë> 0 || 
	`„º‹
(tstf) == 0)

472 
«mñi°
[
£l
+1]->
d_ty≥
 = 
DT_REG
;

473 
«mñi°
[
£l
+1]->
d_ty≥
 = 
DT_DIR
;

474 
	`f˛o£
(
t°f
);

475 
agaö
;

479 if(
öp
 & 
GP2X_X
) ;

482 i‡(
n
 > 0) {

483 
n
--Ë
	`‰ì
(
«mñi°
[n]);

484 
	`‰ì
(
«mñi°
);

487  
ªt
;

488 
	}
}

492 *
chóts
;

493 
	gchót_cou¡
 = 0, 
	gchót_°¨t
, 
	gchót_pos
;

495 
	$cou¡ˇŒb
(*
«me
, 
uöt32
 
a
, 
uöt8
 
v
, 
com∑ª
, 
s
, 
ty≥
, *
d©a
)

497 
chót_cou¡
++;

499 
	}
}

501 
	$˛i°ˇŒb
(*
«me
, 
uöt32
 
a
, 
uöt8
 
v
, 
com∑ª
, 
s
, 
ty≥
, *
d©a
)

503 
pos
;

505 
pos
 = 
chót_°¨t
 + 
chót_pos
;

506 
chót_pos
++;

507 i‡(
pos
 < 0)  1;

508 i‡(
pos
 > 23)  0;

510 
	`gp2x_smÆ…ext16_lim
(14, 
pos
*10, 
s
 ? "ON " : "OFF", 0xffff, 3);

511 
	`gp2x_smÆ…ext16_lim
(14+6*4, 
pos
*10, 
ty≥
 ? "S" : "R", 0xffff, 1);

512 
	`gp2x_smÆ…ext16_lim
(14+6*6, 
pos
*10, 
«me
, 0xffff, 53-8);

515 
	}
}

517 
	$døw_∑tchli°
(
£l
)

519 
pos
;

521 
	`gp2x_f˚u_c›y_bg
();

522 
	`gp2x_f˚u_d¨kí_Æl
();

524 
chót_°¨t
 = 12 - 
£l
;

525 
chót_pos
 = 0;

526 
	`FCEUI_Li°Chóts
(
˛i°ˇŒb
,0);

528 
pos
 = 
chót_°¨t
 + 
chót_pos
;

529 i‡(
pos
 < 24Ë
	`gp2x_smÆ…ext16_lim
(14,Öos*10, "done", 0xffff, 4);

531 
	`gp2x_ãxt_out15
(5, 120, ">");

532 
	`míu_Êù
();

533 
	}
}

535 
	$∑tches_míu_lo›
()

537 
míu_£l
 = 0;

538 
öp
 = 0;

540 
chót_cou¡
 = 0;

541 
	`FCEUI_Li°Chóts
(
cou¡ˇŒb
,0);

545 
	`døw_∑tchli°
(
míu_£l
);

546 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_LEFT
|
GP2X_RIGHT
|
GP2X_L
|
GP2X_R
|
GP2X_B
|
GP2X_X
);

547 if(
öp
 & 
GP2X_UP
 ) { 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
chót_cou¡
; }

548 if(
öp
 & 
GP2X_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
chót_cou¡
) menu_sel = 0; }

549 if(
öp
 &(
GP2X_LEFT
|
GP2X_L
)Ë{ 
míu_£l
-=10; if (menu_sel < 0) menu_sel = 0; }

550 if(
öp
 &(
GP2X_RIGHT
|
GP2X_R
)Ë{ 
míu_£l
+=10; i‡(míu_£»> 
chót_cou¡
) menu_sel = cheat_count; }

551 if(
öp
 & 
GP2X_B
) {

552 i‡(
míu_£l
 < 
chót_cou¡
)

553 
	`FCEUI_ToggÀChót
(
míu_£l
);

556 if(
öp
 & 
GP2X_X
) ;

559 
	}
}

564 
míu_¥ï¨e_bg
();

566 
	g°©e_¶Ÿ_Êags
 = 0;

568 
	$°©e_check_¶Ÿs
()

570 
¶Ÿ
;

572 
°©e_¶Ÿ_Êags
 = 0;

574 
¶Ÿ
 = 0; slot < 10; slot++)

576 i‡(
	`emu_check_ßve_fûe
(
¶Ÿ
))

578 
°©e_¶Ÿ_Êags
 |1 << 
¶Ÿ
;

581 
	}
}

583 
	$døw_ßve°©e_bg
(
¶Ÿ
)

585 
PicoVideo
 
tmp_pv
;

586 
tmp_¸am
[0x40];

587 
tmp_v§am
[0x40];

588 *
tmp_vøm
, *
fûe
;

589 *
‚ame
;

591 
‚ame
 = 
	`emu_GëSaveFName
(1, 0, 
¶Ÿ
);

592 i‡(!
‚ame
) ;

594 
tmp_vøm
 = 
	`mÆloc
((
Pico
.
vøm
));

595 i‡(
tmp_vøm
 =
NULL
) ;

597 
	`mem˝y
(
tmp_vøm
, 
Pico
.
vøm
, (Pico.vram));

598 
	`mem˝y
(
tmp_¸am
, 
Pico
.
¸am
, (Pico.cram));

599 
	`mem˝y
(
tmp_v§am
, 
Pico
.
v§am
, (Pico.vsram));

600 
	`mem˝y
(&
tmp_pv
, &
Pico
.
video
, (Pico.video));

602 i‡(
	`°rcmp
(
‚ame
 + 
	`°æí
(fname) - 3, ".gz") == 0) {

603 
fûe
 = 
	`gz›í
(
‚ame
, "rb");

604 
	`emu_£t_ßve_cbs
(1);

606 
fûe
 = 
	`f›í
(
‚ame
, "rb");

607 
	`emu_£t_ßve_cbs
(0);

610 i‡(
fûe
) {

611 i‡(
PicoMCD
 & 1) {

612 
	`PicoCdLﬂdSèãGfx
(
fûe
);

614 
	`¨óSìk
(
fûe
, 0x10020, 
SEEK_SET
);

615 
	`¨óRód
(
Pico
.
vøm
, 1, (Pico.vøm), 
fûe
);

616 
	`¨óSìk
(
fûe
, 0x2000, 
SEEK_CUR
);

617 
	`¨óRód
(
Pico
.
¸am
, 1, (Pico.¸am), 
fûe
);

618 
	`¨óRód
(
Pico
.
v§am
, 1, (Pico.v§am), 
fûe
);

619 
	`¨óSìk
(
fûe
, 0x221a0, 
SEEK_SET
);

620 
	`¨óRód
(&
Pico
.
video
, 1, (Pico.video), 
fûe
);

622 
	`¨óClo£
(
fûe
);

625 
	`emu_f‹˚d_‰ame
();

626 
	`gp2x_mem˝y_buf„rs
((1<<2), 
gp2x_s¸ìn
, 0, 320*240*2);

627 
	`míu_¥ï¨e_bg
();

629 
	`mem˝y
(
Pico
.
vøm
, 
tmp_vøm
, (Pico.vram));

630 
	`mem˝y
(
Pico
.
¸am
, 
tmp_¸am
, (Pico.cram));

631 
	`mem˝y
(
Pico
.
v§am
, 
tmp_v§am
, (Pico.vsram));

632 
	`mem˝y
(&
Pico
.
video
, &
tmp_pv
, (Pico.video));

633 
	`‰ì
(
tmp_vøm
);

634 
	}
}

636 
	$døw_ßve°©e_míu
(
míu_£l
, 
is_lﬂdög
)

638 
é_x
 = 25, 
é_y
 = 60, 
y
, 
i
;

640 i‡(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
))

641 
	`døw_ßve°©e_bg
(
míu_£l
);

642 
	`gp2x_f˚u_c›y_bg
();

644 
	`gp2x_ãxt_out15
(
é_x
, 30, 
is_lﬂdög
 ? "Load state" : "Save state");

647 
y
 = 
é_y
;

648 
i
 = 0; i < 10; i++, 
y
+=10)

650 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "SLOT %ò(%s)", 
i
, (
°©e_¶Ÿ_Êags
 & (1 << i)) ? "USED" : "free");

652 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "back");

655 
	`gp2x_ãxt_out15
(
é_x
 - 16, 
é_y
 + 
míu_£l
*10, ">");

657 
	`míu_Êù
();

658 
	}
}

660 
	$ßve°©e_míu_lo›
(
is_lﬂdög
)

662 
míu_£l
 = 10, 
míu_£l_max
 = 10;

663 
öp
 = 0;

665 
	`°©e_check_¶Ÿs
();

669 
	`døw_ßve°©e_míu
(
míu_£l
, 
is_lﬂdög
);

670 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_B
|
GP2X_X
);

671 if(
öp
 & 
GP2X_UP
 ) {

673 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
míu_£l_max
;

674 } !(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
)Ë&& míu_£»!
míu_£l_max
 && 
is_lﬂdög
);

676 if(
öp
 & 
GP2X_DOWN
) {

678 
míu_£l
++; i‡(míu_£»> 
míu_£l_max
) menu_sel = 0;

679 } !(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
)Ë&& míu_£»!
míu_£l_max
 && 
is_lﬂdög
);

681 if(
öp
 & 
GP2X_B
) {

682 i‡(
míu_£l
 < 10) {

683 
°©e_¶Ÿ
 = 
míu_£l
;

684 i‡(
	`emu_SaveLﬂdGame
(
is_lﬂdög
, 0)) {

685 
	`°r˝y
(
míuEº‹Msg
, 
is_lﬂdög
 ? "Load failed" : "Save failed");

691 if(
öp
 & 
GP2X_X
)  1;

693 
	}
}

698 *
	$usb_joy_key_«me
(
joy
, 
num
)

700 
«me
[16];

701 
num
)

703 0: 
	`•rötf
(
«me
, "Joy%òUP", 
joy
); ;

704 1: 
	`•rötf
(
«me
, "Joy%òDOWN", 
joy
); ;

705 2: 
	`•rötf
(
«me
, "Joy%òLEFT", 
joy
); ;

706 3: 
	`•rötf
(
«me
, "Joy%òRIGHT", 
joy
); ;

707 :
	`•rötf
(
«me
, "Joy%òb%i", 
joy
, 
num
-3); ;

709  
«me
;

710 
	}
}

712 *
	$a˘i⁄_böds
(
∂ayî_idx
, 
a˘i⁄_mask
)

714 
°rkeys
[32*5];

715 
joy
, 
i
;

717 
°rkeys
[0] = 0;

718 
i
 = 0; i < 32; i++)

720 i‡(
Sëtögs
.
KeyBöds
[
i
] & 
a˘i⁄_mask
)

722 i‡(
∂ayî_idx
 >0 && ((
Sëtögs
.
KeyBöds
[
i
] >> 16) & 3) !=Ölayer_idx) ;

723 i‡(
°rkeys
[0]Ë{ 
	`°rˇt
(°rkeys, " + "); såˇt(°rkeys, 
gp2xKeyNames
[
i
]); ; }

724 
	`°r˝y
(
°rkeys
, 
gp2xKeyNames
[
i
]);

727 
joy
 = 0; joy < 
num_of_joys
; joy++)

729 
i
 = 0; i < 32; i++)

731 i‡(
Sëtögs
.
JoyBöds
[
joy
][
i
] & 
a˘i⁄_mask
)

733 i‡(
∂ayî_idx
 >0 && ((
Sëtögs
.
JoyBöds
[
joy
][
i
] >> 16) & 3) !=Ölayer_idx) ;

734 i‡(
°rkeys
[0]) {

735 
	`°rˇt
(
°rkeys
, ", "); såˇt(°rkeys, 
	`usb_joy_key_«me
(
joy
 + 1, 
i
));

738 
	`°r˝y
(
°rkeys
, 
	`usb_joy_key_«me
(
joy
 + 1, 
i
));

743  
°rkeys
;

744 
	}
}

746 
	$unböd_a˘i⁄
(
a˘i⁄
)

748 
i
, 
u
;

750 
i
 = 0; i < 32; i++)

751 
Sëtögs
.
KeyBöds
[
i
] &~
a˘i⁄
;

752 
u
 = 0; u < 4; u++)

753 
i
 = 0; i < 32; i++)

754 
Sëtögs
.
JoyBöds
[
u
][
i
] &~
a˘i⁄
;

755 
	}
}

757 
	$cou¡_bound_keys
(
a˘i⁄
, 
joy
)

759 
i
, 
keys
 = 0;

761 i‡(
joy
)

763 
i
 = 0; i < 32; i++)

764 i‡(
Sëtögs
.
JoyBöds
[
joy
-1][
i
] & 
a˘i⁄
Ë
keys
++;

768 
i
 = 0; i < 32; i++)

769 i‡(
Sëtögs
.
KeyBöds
[
i
] & 
a˘i⁄
Ë
keys
++;

771  
keys
;

772 
	}
}

774 °ru˘ { *
	m«me
; 
	mmask
; } 
	tböd_a˘i⁄_t
;

776 
	$døw_key_c⁄fig
(c⁄° 
böd_a˘i⁄_t
 *
›ts
, 
›t_˙t
, 
∂ayî_idx
, 
£l
)

778 
x
, 
y
, 
é_y
 = 40, 
i
;

780 
	`gp2x_f˚u_c›y_bg
();

781 i‡(
∂ayî_idx
 >= 0)

782 
	`gp2x_ãxt_out15
(80, 20, "Pœyî %òc⁄åﬁs", 
∂ayî_idx
 + 1);

783 
	`gp2x_ãxt_out15
(80, 20, "Emulator controls");

785 
x
 = 40; 
y
 = 
é_y
;

786 
i
 = 0; i < 
›t_˙t
; i++, 
y
+=10)

787 
	`gp2x_ãxt_out15
(
x
, 
y
, "%†: %s", 
›ts
[
i
].
«me
, 
	`a˘i⁄_böds
(
∂ayî_idx
, o±s[i].
mask
));

789 
	`gp2x_ãxt_out15
(
x
, 
y
, "Done");

792 
	`gp2x_ãxt_out15
(
x
 - 16, 
é_y
 + 
£l
*10, ">");

794 
	`míu_d¨kí_ãxt_bg
();

795 
	`míu_d¨kí_ª£t
();

797 i‡(
£l
 < 
›t_˙t
) {

798 
	`gp2x_ãxt_out15
(30, 190, "Pressá buttonÅo bind/unbind");

799 
	`gp2x_ãxt_out15
(30, 200, "Use VOL+Åo clear");

800 
	`gp2x_ãxt_out15
(30, 210, "To bind UP/DOWN, hold VOL-");

801 
	`gp2x_ãxt_out15
(30, 220, "Select \"Done\"ÅoÉxit");

803 
	`gp2x_ãxt_out15
(30, 200, "Use Options -> Save cfg");

804 
	`gp2x_ãxt_out15
(30, 210, "to save controls");

805 
	`gp2x_ãxt_out15
(30, 220, "Press B or XÅoÉxit");

807 
	`míu_d¨kí_ãxt_bg
();

808 
	`míu_Êù
();

809 
	}
}

811 
	$key_c⁄fig_lo›
(c⁄° 
böd_a˘i⁄_t
 *
›ts
, 
›t_˙t
, 
∂ayî_idx
)

813 
joy
 = 0, 
£l
 = 0, 
míu_£l_max
 = 
›t_˙t
, 
i
;

814 
öp
 = 0;

818 
	`døw_key_c⁄fig
(
›ts
, 
›t_˙t
, 
∂ayî_idx
, 
£l
);

819 
öp
 = 
	`waô_f‹_öput_usbjoy
(
CONFIGURABLE_KEYS
|
GP2X_VOL_DOWN
|
GP2X_VOL_UP
, &
joy
);

821 i‡(
joy
 == 0) {

822 i‡(!(
öp
 & 
GP2X_VOL_DOWN
)) {

823 if(
öp
 & 
GP2X_UP
 ) { 
£l
--; i‡(£»< 0Ë£»
míu_£l_max
; ; }

824 if(
öp
 & 
GP2X_DOWN
Ë{ 
£l
++; i‡(£»> 
míu_£l_max
) sel = 0; ; }

826 i‡(
£l
 >
›t_˙t
) {

827 i‡(
öp
 & (
GP2X_B
|
GP2X_X
)) ;

831 i‡(
öp
 & 
GP2X_VOL_UP
)

832 
	`unböd_a˘i⁄
(
›ts
[
£l
].
mask
);

833 
öp
 &
CONFIGURABLE_KEYS
;

834 
i
 = 0; i < 32; i++)

835 i‡(
öp
 & (1 << 
i
)) {

836 i‡(
	`cou¡_bound_keys
(
›ts
[
£l
].
mask
, 0) >= 2)

837 
Sëtögs
.
KeyBöds
[
i
] &~
›ts
[
£l
].
mask
;

838 
Sëtögs
.
KeyBöds
[
i
] ^
›ts
[
£l
].
mask
;

839 i‡(
∂ayî_idx
 >= 0) {

840 
Sëtögs
.
KeyBöds
[
i
] &= ~(3 << 16);

841 
Sëtögs
.
KeyBöds
[
i
] |
∂ayî_idx
 << 16;

845 i‡(
£l
 < 
›t_˙t
)

847 
i
 = 0; i < 32; i++)

848 i‡(
öp
 & (1 << 
i
)) {

849 i‡(
	`cou¡_bound_keys
(
›ts
[
£l
].
mask
, 
joy
) >= 1)

850 
Sëtögs
.
JoyBöds
[
joy
-1][
i
] &~
›ts
[
£l
].
mask
;

851 
Sëtögs
.
JoyBöds
[
joy
-1][
i
] ^
›ts
[
£l
].
mask
;

852 i‡(
∂ayî_idx
 >= 0) {

853 
Sëtögs
.
JoyBöds
[
joy
-1][
i
] &= ~(3 << 16);

854 
Sëtögs
.
JoyBöds
[
joy
-1][
i
] |
∂ayî_idx
 << 16;

859 
	}
}

861 
	$døw_kc_£l
(
míu_£l
)

863 
é_x
 = 25+40, 
é_y
 = 60, 
y
, 
i
;

864 
joy«me
[36];

866 
y
 = 
é_y
;

867 
	`gp2x_f˚u_c›y_bg
();

868 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "Player 1");

869 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Player 2");

870 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Emulator controls");

871 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Done");

874 
	`gp2x_ãxt_out15
(
é_x
 - 16, 
é_y
 + 
míu_£l
*10, ">");

876 
é_x
 = 25;

877 
	`gp2x_ãxt_out15
(
é_x
, (
y
=110), "USB joys detected:");

878 i‡(
num_of_joys
 > 0) {

879 
i
 = 0; i < 
num_of_joys
; i++) {

880 
	`°∫˝y
(
joy«me
, 
	`joy_«me
(
joys
[
i
]), 33); joyname[33] = 0;

881 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "%i: %s", 
i
+1, 
joy«me
);

884 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "none");

887 
	`míu_d¨kí_ãxt_bg
();

888 
	`míu_Êù
();

889 
	}
}

892 
böd_a˘i⁄_t
 
	g˘æ_a˘i⁄s
[] =

906 
böd_a˘i⁄_t
 
	gemu˘æ_a˘i⁄s
[] =

917 
	$kc_£l_lo›
()

919 
míu_£l
 = 3, 
míu_£l_max
 = 3;

920 
öp
 = 0;

924 
	`døw_kc_£l
(
míu_£l
);

925 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_B
|
GP2X_X
);

926 if(
öp
 & 
GP2X_UP
 ) { 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
míu_£l_max
; }

927 if(
öp
 & 
GP2X_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
míu_£l_max
) menu_sel = 0; }

928 if(
öp
 & 
GP2X_B
) {

929 
míu_£l
) {

930 0: 
	`key_c⁄fig_lo›
(
˘æ_a˘i⁄s
, 10, 0); ;

931 1: 
	`key_c⁄fig_lo›
(
˘æ_a˘i⁄s
, 10, 1); ;

932 2: 
	`key_c⁄fig_lo›
(
emu˘æ_a˘i⁄s
,

933 (
emu˘æ_a˘i⁄s
)/(emuctrl_actions[0]), -1); ;

934 3: i‡(!
f˚ugi
Ë
	`SaveC⁄fig
(
NULL
); ;

938 if(
öp
 & 
GP2X_X
) ;

940 
	}
}

945 
¡sccﬁ
,
¡schue
,
¡s˘öt
;

946 
§ídlöev
[2];

947 
îídlöev
[2];

948 
e›ti⁄s
;

949 *
˝Æëã
;

950 
LﬂdCPÆëã
();

953 
	$öt_öcdec
(*
p
, 
öc
, 
mö
, 
max
)

955 *
p
 +
öc
;

956 i‡(*
p
 < 
mö
) *p = min;

957 i‡(*
p
 > 
max
) *p = max;

958 
	}
}

960 
	$døw_f˚míu_›ti⁄s
(
míu_£l
)

962 
é_x
 = 25, 
é_y
 = 60, 
y
;

963 
˝Æ
[32];

965 i‡(
˝Æëã
 !
NULL
)

967 *
p
 = 
˝Æëã
 + 
	`°æí
(cpalette) - 1;

968 *
p
 !'/' &&Ö > 
˝Æëã
)Ö--;

969 i‡(*
p
 == '/')Ö++;

970 
	`°∫˝y
(
˝Æ
, 
p
, 16);

971 
˝Æ
[16] = 0;

973 
	`°r˝y
(
˝Æ
, " OFF");

975 
y
 = 
é_y
;

976 
	`gp2x_f˚u_c›y_bg
();

978 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "Cu°omÖÆëã: %s", 
˝Æ
);

979 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "NTSC Cﬁ‹ Emuœti⁄ %s", 
¡sccﬁ
?"ON":"OFF");

980 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), " Töà(deÁu…: 56Ë %i", 
¡s˘öt
);

981 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), " Huê (deÁu…: 72Ë %i", 
¡schue
);

982 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Fú° visibÀÜöê(NTSCË %i", 
§ídlöev
[0]);

983 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "La° visibÀÜöê(NTSCË %i", 
îídlöev
[0]);

984 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Fú° visibÀÜöê(PALË %i", 
§ídlöev
[1]);

985 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "La° visibÀÜöê(PALË %i", 
îídlöev
[1]);

986 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Clù 8Üe·/righàcﬁumn† %s", (
e›ti⁄s
&
EO_CLIPSIDES
)?"ON":"OFF");

987 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "DißbÀ 8 s¥ôêlimô %s", (
e›ti⁄s
&
EO_NO8LIM
)?"ON":"OFF");

988 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "E«bÀáuthíti¯GameGíõ %s", (
e›ti⁄s
&
EO_GG
)?"ON":"OFF");

989 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Done");

992 
	`gp2x_ãxt_out15
(
é_x
 - 16, 
é_y
 + 
míu_£l
*10, ">");

994 i‡(
míu_£l
 == 0) {

995 
	`míu_d¨kí_ãxt_bg
();

996 
	`míu_d¨kí_ª£t
();

998 
	`gp2x_ãxt_out15
(30, 210, "Press BÅo browse,");

999 
	`gp2x_ãxt_out15
(30, 220, "STARTÅo use default");

1002 
	`míu_d¨kí_ãxt_bg
();

1003 
	`míu_Êù
();

1004 
	}
}

1006 
	$f˚míu_lo›_›ti⁄s
()

1008 
míu_£l
 = 0, 
míu_£l_max
 = 11, 
i
;

1009 
öp
 = 0;

1011 
	`FCEUI_GëNTSCTH
(&
¡s˘öt
, &
¡schue
);

1015 
	`døw_f˚míu_›ti⁄s
(
míu_£l
);

1016 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_LEFT
|
GP2X_RIGHT
|
GP2X_B
|
GP2X_X
|
GP2X_A
|
GP2X_START
);

1017 if(
öp
 & 
GP2X_UP
 ) { 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
míu_£l_max
; }

1018 if(
öp
 & 
GP2X_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
míu_£l_max
) menu_sel = 0; }

1019 if((
öp
& 
GP2X_B
)||(öp&
GP2X_LEFT
)||(öp&
GP2X_RIGHT
)) {

1020 
míu_£l
) {

1021 1: 
¡sccﬁ
 = !ntsccol; ;

1022 8: 
e›ti⁄s
^=
EO_CLIPSIDES
; ;

1023 9: 
e›ti⁄s
^=
EO_NO8LIM
; ;

1024 10: 
e›ti⁄s
^=
EO_GG
; ;

1028 if(
öp
 & (
GP2X_X
|
GP2X_A
)) {

1029 
i
=0;i<2;i++)

1031 if(
§ídlöev
[
i
]<0 || srendlinev[i]>239) srendlinev[i]=0;

1032 if(
îídlöev
[
i
]<
§ídlöev
[i] ||Érendlinev[i]>239)Érendlinev[i]=239;

1034 
	`FCEUI_SëNTSCTH
(
¡sccﬁ
, 
¡s˘öt
, 
¡schue
);

1035 
	`FCEUI_SëRídîedLöes
(
§ídlöev
[0],
îídlöev
[0],srendlinev[1],erendlinev[1]);

1036 
	`FCEUI_DißbÀS¥ôeLimô©i⁄
(
e›ti⁄s
&
EO_NO8LIM
);

1037 
	`FCEUI_SëGameGíõ
(
e›ti⁄s
&
EO_GG
);

1038 i‡(
˝Æëã
Ë
	`LﬂdCPÆëã
();

1039 
	`FCEUI_SëPÆëãAºay
(0);

1040 
	`FCEU_Re£tPÆëã
();

1043 if(
öp
 & (
GP2X_LEFT
|
GP2X_RIGHT
)) {

1044 
míu_£l
) {

1045 2: 
	`öt_öcdec
(&
¡s˘öt
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 128); ;

1046 3: 
	`öt_öcdec
(&
¡schue
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 128); ;

1047 4: 
	`öt_öcdec
(&
§ídlöev
[0], (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 239); ;

1048 5: 
	`öt_öcdec
(&
îídlöev
[0], (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 239); ;

1049 6: 
	`öt_öcdec
(&
§ídlöev
[1], (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 239); ;

1050 7: 
	`öt_öcdec
(&
îídlöev
[1], (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 239); ;

1053 if(
míu_£l
 =0 && (
öp
 & (
GP2X_START
|
GP2X_B
))) {

1054 i‡((
öp
 & 
GP2X_START
Ë&& 
˝Æëã
) {

1055 
	`‰ì
(
˝Æëã
);

1056 
˝Æëã
=
NULL
;

1058 i‡(
öp
 & 
GP2X_B
) {

1059 *
£l‚ame
;

1060 i‡(
˝Æëã
Ë
	`°∫˝y
(
∑th_buf„r
, cpalette, (path_buffer));

1061 
	`gëcwd
(
∑th_buf„r
, 
PATH_MAX
);

1062 
∑th_buf„r
[(path_buffer)-1] = 0;

1064 
£l‚ame
 = 
	`fûe£l_lo›
(
∑th_buf„r
, 
NULL
);

1065 i‡(
£l‚ame
) {

1066 i‡(
˝Æëã
Ë
	`‰ì
(cpalette);

1067 
˝Æëã
 = 
£l‚ame
;

1072 
	}
}

1076 
	$døw_míu_›ti⁄s
(
míu_£l
)

1078 
é_x
 = 25, 
é_y
 = 20, 
y
;

1079 
°r‰ameskù
[8], *
°rsˇlög
, *
°rssc⁄fúm
;

1080 *
mms
 = 
mmuhack_°©us
 ? "active) " : "inactive)";

1082 i‡(
Sëtögs
.
‰ameskù
 < 0)

1083 
	`°r˝y
(
°r‰ameskù
, "Auto");

1084 
	`•rötf
(
°r‰ameskù
, "%i", 
Sëtögs
.
‰ameskù
);

1085 
Sëtögs
.
sˇlög
) {

1086 : 
°rsˇlög
 = " OFF"; ;

1087 1: 
°rsˇlög
 = "hw horizontal"; ;

1088 2: 
°rsˇlög
 = "hw horiz. + vert."; ;

1089 3: 
°rsˇlög
 = "sw horizontal"; ;

1091 
Sëtögs
.
s°©e_c⁄fúm
) {

1092 : 
°rssc⁄fúm
 = "OFF"; ;

1093 1: 
°rssc⁄fúm
 = "writes"; ;

1094 2: 
°rssc⁄fúm
 = "loads"; ;

1095 3: 
°rssc⁄fúm
 = "both"; ;

1098 
y
 = 
é_y
;

1099 
	`gp2x_f˚u_c›y_bg
();

1101 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "Sˇlög: %s", 
°rsˇlög
);

1102 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Show FPS %s", 
Sëtögs
.
showÂs
?"ON":"OFF");

1103 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Fømeskù %s", 
°r‰ameskù
);

1104 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "AccuøãÑídîî (¶owË %s", 
Sëtögs
.
accuøã_mode
?"ON":"OFF");

1105 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "E«bÀ sound %s", 
soundvﬁ
?"ON":"OFF");

1106 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Sound R©e: %5iHz", 
Sëtögs
.
sound_øã
);

1107 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Force Region: %s",

1108 
Sëtögs
.
ªgi⁄_f‹˚
 == 2 ? "PAL" : Settings.region_force == 1 ? "NTSC" : "OFF");

1109 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Turbÿøã %iHz", (
Sëtögs
.
turbo_øã_add
*60/2) >> 24);

1110 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "C⁄fúm save°©ê %s", 
°rssc⁄fúm
);

1111 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Savê¶Ÿ %i", 
CuºítSèã
);

1112 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Fa°î RAMÅimög† %s", 
Sëtögs
.
ømtimögs
?"ON":"OFF");

1113 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "squidgehack (now %†%s", 
mms
, 
Sëtögs
.
mmuhack
?"ON":"OFF");

1114 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Gamm®c‹ª˘i⁄ %i.%02i", 
Sëtögs
.
gamma
 / 100, Settings.gamma%100);

1115 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Pî„˘ VSYNC %s", 
Sëtögs
.
≥r„˘_vsync
?"ON":"OFF");

1116 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "GP2X CPU clock %iMhz", 
Sëtögs
.
˝u˛ock
);

1117 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "[FCE Ultra options]");

1118 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Save cfgás default");

1119 i‡(
f˚ugi
)

1120 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Save cfg for current game only");

1123 
	`gp2x_ãxt_out15
(
é_x
 - 16, 
é_y
 + 
míu_£l
*10, ">");

1125 i‡(
míu_£l
 == 3) {

1126 
	`gp2x_ãxt_out15
(
é_x
, 210, "ROMÑeloadÑequired forÅhis");

1127 
	`gp2x_ãxt_out15
(
é_x
, 220, "settingÅoÅakeÉffect");

1128 } i‡(
míu_£l
 == 10 || menu_sel == 11) {

1129 
	`gp2x_ãxt_out15
(
é_x
, 210, "EmuÑestartÑequired forÅhis");

1130 
	`gp2x_ãxt_out15
(
é_x
, 220, "settingÅoÅakeÉffect");

1133 
	`míu_d¨kí_ãxt_bg
();

1134 
	`míu_Êù
();

1135 
	}
}

1137 
	$¢døã_¥ev√xt
(
øã
, 
dú
)

1139 
i
, 
øãs
[] = { 8000, 11025, 16000, 22050, 44100 };

1141 
i
 = 0; i < 5; i++)

1142 i‡(
øãs
[
i
] =
øã
) ;

1144 
i
 +
dú
 ? 1 : -1;

1145 i‡(
i
 > 4Ë 
dú
 ? 44100 : 22050;

1146 i‡(
i
 < 0Ë 
dú
 ? 11025 : 8000;

1147  
øãs
[
i
];

1148 
	}
}

1150 
	$c⁄fig_commô
()

1152 i‡(
Sëtögs
.
ªgi⁄_f‹˚
)

1153 
	`FCEUI_SëVidSy°em
(
Sëtögs
.
ªgi⁄_f‹˚
 - 1);

1154 
	}
}

1156 
	$míu_lo›_›ti⁄s
()

1158 
míu_£l
 = 0;

1159 
ªt
, 
míu_£l_max
 = 16;

1160 
öp
 = 0;

1162 i‡(
f˚ugi
Ë
míu_£l_max
++;

1166 
	`døw_míu_›ti⁄s
(
míu_£l
);

1167 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_LEFT
|
GP2X_RIGHT
|
GP2X_B
|
GP2X_X
|
GP2X_A
);

1168 if(
öp
 & 
GP2X_UP
 ) { 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
míu_£l_max
; }

1169 if(
öp
 & 
GP2X_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
míu_£l_max
) menu_sel = 0; }

1170 if((
öp
& 
GP2X_B
)||(öp&
GP2X_LEFT
)||(öp&
GP2X_RIGHT
)) {

1171 
míu_£l
) {

1172 1: 
Sëtögs
.
showÂs
 = !Settings.showfps; ;

1173 3: 
Sëtögs
.
accuøã_mode
 = !Settings.accurate_mode; ;

1174 4: 
soundvﬁ
 = soundvol ? 0 : 50; ;

1175 10: 
Sëtögs
.
ømtimögs
 = !Settings.ramtimings; ;

1176 11: 
Sëtögs
.
mmuhack
 = !Settings.mmuhack; ;

1177 13: 
Sëtögs
.
≥r„˘_vsync
 = !Settings.perfect_vsync; ;

1178 15: 
	`f˚míu_lo›_›ti⁄s
(); ;

1180 
	`c⁄fig_commô
();

1181 
ªt
 = 
	`SaveC⁄fig
(
NULL
);

1182 
	`°r˝y
(
míuEº‹Msg
, 
ªt
 == 0 ? "default config saved" : "config save failed");

1185 i‡(
œ°LﬂdedGameName
[0])

1187 
	`c⁄fig_commô
();

1188 
ªt
 = 
	`SaveC⁄fig
(
œ°LﬂdedGameName
);

1189 
	`°r˝y
(
míuEº‹Msg
, 
ªt
 == 0 ? "game config saved" : "config save failed");

1194 if(
öp
 & (
GP2X_X
|
GP2X_A
)) {

1195 
	`c⁄fig_commô
();

1198 if(
öp
 & (
GP2X_LEFT
|
GP2X_RIGHT
)) {

1199 
míu_£l
) {

1200 0: 
	`öt_öcdec
(&
Sëtögs
.
sˇlög
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 3); ;

1201 2: 
	`öt_öcdec
(&
Sëtögs
.
‰ameskù
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, -1, 32); ;

1203 
Sëtögs
.
sound_øã
 = 
	`¢døã_¥ev√xt
(Sëtögs.sound_øã, 
öp
 & 
GP2X_RIGHT
);

1204 
	`InôSound
();

1206 6: 
	`öt_öcdec
(&
Sëtögs
.
ªgi⁄_f‹˚
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 2); ;

1208 
hz
 = 
Sëtögs
.
turbo_øã_add
*60/2 >> 24;

1209 
	`öt_öcdec
(&
hz
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 1, 30);

1210 
Sëtögs
.
turbo_øã_add
 = (
hz
*2 << 24) / 60 + 1;

1213 8: 
	`öt_öcdec
(&
Sëtögs
.
s°©e_c⁄fúm
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 3); ;

1214 9: 
	`öt_öcdec
(&
CuºítSèã
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 9); ;

1215 12: 
	`öt_öcdec
(&
Sëtögs
.
gamma
, (
öp
 & 
GP2X_LEFT
) ? -1 : 1, 0, 300); ;

1217 (
öp
 = 
	`gp2x_joy°ick_ªad
(1)Ë& (
GP2X_LEFT
|
GP2X_RIGHT
)) {

1218 
Sëtögs
.
˝u˛ock
 +(
öp
 & 
GP2X_LEFT
) ? -1 : 1;

1219 i‡(
Sëtögs
.
˝u˛ock
 < 0) Settings.cpuclock = 0;

1220 
	`døw_míu_›ti⁄s
(
míu_£l
);

1221 
	`u¶ìp
(50*1000);

1227 
	}
}

1231 
	$døw_míu_¸edôs
()

1233 
v°r
[32];

1236 
	`gp2x_f˚u_c›y_bg
();

1238 
	`•rötf
(
v°r
, "GPFCE v" 
GP2X_PORT_VERSION
 "Ñev%i", 
GP2X_PORT_REV
);

1239 
	`gp2x_ãxt_out15
(20, 30, 
v°r
);

1240 
	`gp2x_ãxt_out15
(20, 40, "(c)Çotaz, 2007");

1242 
	`gp2x_ãxt_out15
(20, 70, "Based on FCE Ultra versions");

1243 
	`gp2x_ãxt_out15
(20, 80, "0.81ánd 0.98.1x");

1245 
	`gp2x_ãxt_out15
(20, 110, " - Credits - ");

1246 
	`gp2x_ãxt_out15
(20, 130, "Bero: FCE");

1247 
	`gp2x_ãxt_out15
(20, 140, "Xodnizel: FCE Ultra");

1248 
	`gp2x_ãxt_out15
(20, 150, "zzhu8192: originalÖort");

1249 
	`gp2x_ãxt_out15
(20, 160, "rlyeh: minimalÜib");

1250 
	`gp2x_ãxt_out15
(20, 170, "Hermes,Åheoddbot, god_at_hell:");

1251 
	`gp2x_ãxt_out15
(20, 180, " cpuctrl, gammaÜibs");

1252 
	`gp2x_ãxt_out15
(20, 190, "Squidge: squidgehack");

1254 
	`míu_d¨kí_ãxt_bg
();

1255 
	`míu_Êù
();

1256 
	}
}

1261 
	$døw_míu_roŸ
(
míu_£l
)

1263 
é_x
 = 30, 
é_y
 = 126, 
y
;

1264 
	`gp2x_f˚u_c›y_bg
();

1266 
y
 = 
é_y
;

1267 i‡(
f˚ugi
) {

1268 
	`gp2x_ãxt_out15
(
é_x
, 
y
, "Resume game");

1269 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Save State");

1270 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Load State");

1271 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Reset game");

1273 
y
 += 30;

1275 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "LoadÇew ROM");

1276 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Options");

1277 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Controls");

1278 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Credits");

1279 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Exit");

1281 i‡(
chóts
)

1282 
	`gp2x_ãxt_out15
(
é_x
, (
y
+=10), "Cheats");

1285 
	`gp2x_ãxt_out15
(
é_x
 - 16, 
é_y
 + 
míu_£l
*10, ">");

1287 
	`míu_d¨kí_ãxt_bg
();

1288 
	`míu_d¨kí_ª£t
();

1291 i‡(
míuEº‹Msg
[0]Ë
	`gp2x_ãxt_out15
(1, 229, menuErrorMsg);

1293 
v°r
[16];

1294 
	`•rötf
(
v°r
, "v" 
GP2X_PORT_VERSION
 "Ñ%i", 
GP2X_PORT_REV
);

1295 
	`gp2x_ãxt_out15
(320-
	`°æí
(
v°r
)*8-1, 228, vstr);

1297 
	`míu_d¨kí_ãxt_bg
();

1298 
	`míu_Êù
();

1299 
	}
}

1302 
	$míu_lo›_roŸ
()

1304 
ªt
, 
míu_£l_max
 = 8, 
míu_£l_mö
 = 4;

1305 
míu_£l
 = 4;

1306 
öp
 = 0;

1308 i‡(
f˚ugi
Ë
míu_£l_mö
 = 0;

1309 i‡(
chóts
Ë
míu_£l_max
 = 9;

1310 i‡(
míu_£l
 < 
míu_£l_mö
 || míu_£»> 
míu_£l_max
)

1311 
míu_£l
 = 
míu_£l_mö
;

1314 
	`døw_míu_roŸ
(
míu_£l
);

1315 
	`gp2x_joy°ick_ªad
(1Ë& (
GP2X_B
|
GP2X_X
|
GP2X_SELECT
)Ë
	`u¶ìp
(50*1000);

1319 
	`døw_míu_roŸ
(
míu_£l
);

1320 
öp
 = 
	`waô_f‹_öput
(
GP2X_UP
|
GP2X_DOWN
|
GP2X_B
|
GP2X_X
);

1321 if(
öp
 & 
GP2X_UP
 ) { 
míu_£l
--; i‡(míu_£»< 
míu_£l_mö
Ëmíu_£»
míu_£l_max
; }

1322 if(
öp
 & 
GP2X_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
míu_£l_max
Ëmíu_£»
míu_£l_mö
; }

1323 if(
öp
 &(
GP2X_SELECT
|
GP2X_X
)){

1324 i‡(
f˚ugi
) {

1325 
	`gp2x_joy°ick_ªad
(1Ë& 
GP2X_X
Ë
	`u¶ìp
(50*1000);

1326 
Exô
 = 0;

1330 if(
öp
 & 
GP2X_B
 ) {

1331 
míu_£l
) {

1333 i‡(
f˚ugi
) {

1334 
	`gp2x_joy°ick_ªad
(1Ë& 
GP2X_B
Ë
	`u¶ìp
(50*1000);

1335 
Exô
 = 0;

1340 i‡(
f˚ugi
) {

1343 
	`FCEUI_SaveSèã
();

1344 
Exô
 = 0;

1345 
	`gp2x_joy°ick_ªad
(1Ë& 
GP2X_B
Ë
	`u¶ìp
(50*1000);

1350 i‡(
f˚ugi
) {

1353 
	`FCEUI_LﬂdSèã
();

1354 
Exô
 = 0;

1355 
	`gp2x_joy°ick_ªad
(1Ë& 
GP2X_B
Ë
	`u¶ìp
(50*1000);

1360 i‡(
f˚ugi
) {

1361 
	`FCEU_DoSim∂eComm™d
(
FCEUNPCMD_RESET
);

1362 
Exô
 = 0;

1368 
FILE
 *
t°f
;

1369 *
£l‚ame
;

1371 i‡–(
t°f
 = 
	`f›í
(
œ°LﬂdedGameName
, "rb")) )

1373 
	`f˛o£
(
t°f
);

1374 
	`°∫˝y
(
∑th_buf„r
, 
œ°LﬂdedGameName
, (path_buffer));

1375 
∑th_buf„r
[(path_buffer)-1] = 0;

1379 
	`gëcwd
(
∑th_buf„r
, 
PATH_MAX
);

1382 
£l‚ame
 = 
	`fûe£l_lo›
(
∑th_buf„r
, 
œ°LﬂdedGameName
);

1383 i‡(
£l‚ame
) {

1384 
	`¥ötf
("£À˘ed fûe: %s\n", 
£l‚ame
);

1385 
	`gp2x_joy°ick_ªad
(1Ë& 
GP2X_B
Ë
	`u¶ìp
(50*1000);

1391 
ªt
 = 
	`míu_lo›_›ti⁄s
();

1392 i‡(
ªt
 == 1) ;

1395 
	`kc_£l_lo›
();

1398 
	`døw_míu_¸edôs
();

1399 
	`u¶ìp
(500*1000);

1400 
öp
 = 
	`waô_f‹_öput
(
GP2X_B
|
GP2X_X
);

1405 
	`∑tches_míu_lo›
();

1409 
míuEº‹Msg
[0] = 0;

1411 
	}
}

1414 
gp2x_∑Àâe16
[256];

1416 
	$míu_¥ï¨e_bg
()

1418 
míu_bg
 = 
	`mÆloc
(320*240*2);

1419 i‡(
míu_bg
 =
NULL
) ;

1421 i‡(
f˚ugi
)

1424 i‡(
Sëtögs
.
sˇlög
 != 0)

1426 
	`so·_sˇÀ
((*)
gp2x_s¸ìn
 + 32, 
gp2x_∑Àâe16
, 
§ídlöe
, 
îídlöe
-srendline);

1427 i‡(
§ídlöe
)

1428 
	`mem£t32
((*)((*)
gp2x_s¸ìn
 + 32), 0, 
§ídlöe
*320*2/4);

1429 
	`mem˝y
(
míu_bg
, 
gp2x_s¸ìn
 + 32, 320*240*2);

1433 
	`c⁄vît2RGB555
(
míu_bg
, 
gp2x_s¸ìn
, 
gp2x_∑Àâe16
, 320*240);

1438 
	`mem£t32
((*)
míu_bg
, 0, 320*240*2/4);

1439 
	`ªad≤g
(
míu_bg
, "background.png");

1441 
	}
}

1443 
	$míu_gfx_¥ï¨e
()

1445 
	`míu_¥ï¨e_bg
();

1448 
	`gp2x_video_ch™gemode
(16);

1449 
	`gp2x_video_£t_offs
(0);

1450 
	`gp2x_video_RGB_£tsˇlög
(320, 240);

1451 
	`míu_Êù
();

1452 
	}
}

1455 
	$gp2x_míu_do
()

1457 
ªt
;

1459 
	`míu_gfx_¥ï¨e
();

1461 
ªt
 = 
	`míu_lo›_roŸ
();

1463 i‡(
míu_bg
Ë
	`‰ì
(menu_bg);

1464 
míu_bg
 = 
NULL
;

1465 
míuEº‹Msg
[0] = 0;

1467  
ªt
;

1468 
	}
}

	@drivers/gp2x/menu.h

2 
míuEº‹Msg
[40];

4 
gp2x_míu_do
();

	@drivers/gp2x/minimal.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<uni°d.h
>

26 
	~<sys/mm™.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/io˘l.h
>

30 
	~<sys/soundˇrd.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

34 
	~"möimÆ.h
"

35 
	~"usbjoy.h
"

36 
	~"asmutûs.h
"

38 vﬁ©ûê*
	ggp2x_memªgs
;

40 vﬁ©ûê*
	ggp2x_memªgl
;

41 *
	ggp2x_s¸ìns
[4];

42 
	gs¸ìn£l
 = 0;

43 
	ggp2x_s¸ìn_offs
 = 0;

45 
	gmemdev
 = 0;

46 
	gsounddev
 = 0, 
	gmixîdev
 = 0;

48 *
	ggp2x_s¸ìn
;

50 
	#FRAMEBUFF_WHOLESIZE
 (0x30000*4)

51 
	#FRAMEBUFF_ADDR0
 (0x4000000-
FRAMEBUFF_WHOLESIZE
)

	)

52 
	#FRAMEBUFF_ADDR1
 (
FRAMEBUFF_ADDR0
+0x30000)

	)

53 
	#FRAMEBUFF_ADDR2
 (
FRAMEBUFF_ADDR1
+0x30000)

	)

54 
	#FRAMEBUFF_ADDR3
 (
FRAMEBUFF_ADDR2
+0x30000)

	)

56 c⁄° 
	ggp2x_s¸ì«ddrs
[4] = { 
FRAMEBUFF_ADDR0
, 
FRAMEBUFF_ADDR1
, 
FRAMEBUFF_ADDR2
, 
FRAMEBUFF_ADDR3
 };

57 
	ggp2x_s¸ì«ddr_ﬁd
[4];

61 
	$gp2x_video_Êù
()

63 
lsw
, 
msw
;

64 
addr
 = 
gp2x_s¸ì«ddrs
[
s¸ìn£l
&3];

66 
addr
 +
gp2x_s¸ìn_offs
;

68 
lsw
 = (Ë
addr
;

69 
msw
 = ()(
addr
 >> 16);

71 
gp2x_memªgs
[0x2910>>1] = 
msw
;

72 
gp2x_memªgs
[0x2914>>1] = 
msw
;

73 
gp2x_memªgs
[0x290E>>1] = 
lsw
;

74 
gp2x_memªgs
[0x2912>>1] = 
lsw
;

77 
gp2x_s¸ìn
 = 
gp2x_s¸ìns
[++
s¸ìn£l
&3];

78 
	}
}

81 
	$gp2x_video_Êù2
()

83 
msw
 = ()(
gp2x_s¸ì«ddrs
[
s¸ìn£l
&1] >> 16);

85 
gp2x_memªgs
[0x2910>>1] = 
msw
;

86 
gp2x_memªgs
[0x2914>>1] = 
msw
;

87 
gp2x_memªgs
[0x290E>>1] = 0;

88 
gp2x_memªgs
[0x2912>>1] = 0;

91 
gp2x_s¸ìn
 = 
gp2x_s¸ìns
[++
s¸ìn£l
&1];

92 
	}
}

95 
	$gp2x_video_ch™gemode2
(
bµ
)

97 
gp2x_memªgs
[0x28DA>>1]=(((
bµ
+1)/8)<<9)|0xAB;

98 
gp2x_memªgs
[0x290C>>1]=320*((
bµ
+1)/8);

99 
	}
}

102 
	$gp2x_video_ch™gemode
(
bµ
)

104 
	`gp2x_video_ch™gemode2
(
bµ
);

106 
	`gp2x_mem£t_Æl_buf„rs
(0, 0, 320*240*2);

107 
	`gp2x_video_Êù
();

108 
	}
}

111 
	$gp2x_video_£çÆëã
(*
∑l
, 
Àn
)

113 *
g
=(*)
∑l
;

114 vﬁ©ûê*
memªg
 = &
gp2x_memªgs
[0x295A>>1];

115 
gp2x_memªgs
[0x2958>>1] = 0;

117 
Àn
 *= 2;

118 
Àn
--Ë*
memªg
=*
g
++;

119 
	}
}

123 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

125 
esˇœw
, 
esˇœh
;

126 
bµ
 = (
gp2x_memªgs
[0x28DA>>1]>>9)&0x3;

127 
sˇlw
;

129 
esˇœw
 = 1024.0;

130 
esˇœh
 = 320.0;

132 if(
gp2x_memªgs
[0x2800>>1]&0x100)

134 
esˇœw
=489.0;

135 i‡(
gp2x_memªgs
[0x2818>>1] == 287)

136 
esˇœh
=274.0;

137 i‡(
gp2x_memªgs
[0x2818>>1] == 239)

138 
esˇœh
=331.0;

142 
sˇlw
 = ()(()
esˇœw
 *(
W
/320.0));

144 i‡(
H
 !240 && 
W
 =320Ë
sˇlw
--;

145 
gp2x_memªgs
[0x2906>>1]=
sˇlw
;

147 
gp2x_memªgl
[0x2908>>2]=()(()
esˇœh
 *
bµ
 *(
H
/240.0));

148 
	}
}

150 
	$gp2x_video_£t_offs
(
offs
)

152 
gp2x_s¸ìn_offs
 = 
offs
;

153 
	}
}

155 
	$gp2x_video_waô_vsync
()

157 
v
 = 
gp2x_memªgs
[0x1182>>1];

158 !((
v
 ^ 
gp2x_memªgs
[0x1182>>1]) & 0x10));

159 
	}
}

161 
	$gp2x_video_Êush_ˇche
()

166 
	`Êushˇche
(
gp2x_s¸ìn
, (*)gp2x_screen + 320*240*2, 0);

167 
	}
}

169 
	$gp2x_mem˝y_buf„rs
(
buf„rs
, *
d©a
, 
off£t
, 
Àn
)

171 i‡(
buf„rs
 & (1<<0)Ë
	`mem˝y
((*)
gp2x_s¸ìns
[0] + 
off£t
, 
d©a
, 
Àn
);

172 i‡(
buf„rs
 & (1<<1)Ë
	`mem˝y
((*)
gp2x_s¸ìns
[1] + 
off£t
, 
d©a
, 
Àn
);

173 i‡(
buf„rs
 & (1<<2)Ë
	`mem˝y
((*)
gp2x_s¸ìns
[2] + 
off£t
, 
d©a
, 
Àn
);

174 i‡(
buf„rs
 & (1<<3)Ë
	`mem˝y
((*)
gp2x_s¸ìns
[3] + 
off£t
, 
d©a
, 
Àn
);

175 
	}
}

178 
	$gp2x_mem˝y_Æl_buf„rs
(*
d©a
, 
off£t
, 
Àn
)

180 
	`gp2x_mem˝y_buf„rs
(0xf, 
d©a
, 
off£t
, 
Àn
);

181 
	}
}

184 
	$gp2x_mem£t_Æl_buf„rs
(
off£t
, 
byã
, 
Àn
)

186 
	`mem£t
((*)
gp2x_s¸ìns
[0] + 
off£t
, 
byã
, 
Àn
);

187 
	`mem£t
((*)
gp2x_s¸ìns
[1] + 
off£t
, 
byã
, 
Àn
);

188 
	`mem£t
((*)
gp2x_s¸ìns
[2] + 
off£t
, 
byã
, 
Àn
);

189 
	`mem£t
((*)
gp2x_s¸ìns
[3] + 
off£t
, 
byã
, 
Àn
);

190 
	}
}

193 
	$gp2x_joy°ick_ªad
(
Ælow_usb_joy
)

195 
i
;

196 
vÆue
=(
gp2x_memªgs
[0x1198>>1] & 0x00FF);

197 if(
vÆue
==0xFD) value=0xFA;

198 if(
vÆue
==0xF7) value=0xEB;

199 if(
vÆue
==0xDF) value=0xAF;

200 if(
vÆue
==0x7F) value=0xBE;

201 
vÆue
 = ~((
gp2x_memªgs
[0x1184>>1] & 0xFF00) | value | (gp2x_memregs[0x1186>>1] << 16));

203 i‡(
Ælow_usb_joy
 && 
num_of_joys
 > 0) {

205 
	`gp2x_usbjoy_upd©e
();

206 
i
 = 0; i < 
num_of_joys
; i++)

207 
vÆue
 |
	`gp2x_usbjoy_check
(
i
);

210  
vÆue
;

211 
	}
}

213 
	gs_ﬁdøã
 = 0, 
	gs_ﬁdbôs
 = 0, 
	gs_ﬁd°îeo
 = 0;

215 
	$gp2x_°¨t_sound
(
øã
, 
bôs
, 
°îeo
)

217 
‰ag
 = 0, 
bsize
, 
buf„rs
;

220 i‡(
øã
 =
s_ﬁdøã
 && 
s_ﬁdbôs
 =
bôs
 && 
s_ﬁd°îeo
 =
°îeo
) ;

222 i‡(
sounddev
 > 0Ë
	`˛o£
(sounddev);

223 
sounddev
 = 
	`›í
("/dev/d•", 
O_WRONLY
|
O_ASYNC
);

224 i‡(
sounddev
 == -1)

226 
	`¥ötf
("›í(\"/dev/d•\"ËÁûed wôh %i\n", 
î∫o
);

230 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SPEED
, &
øã
);

231 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFMT
, &
bôs
);

232 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_STEREO
, &
°îeo
);

234 
buf„rs
 = 16;

235 
bsize
 = 
øã
 / 32;

236 i‡(
øã
 > 22050Ë{ 
bsize
*=4; 
buf„rs
*=2; }

237 (
bsize
>>=1)Ë
‰ag
++;

238 
‰ag
 |
buf„rs
<<16;

239 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFRAGMENT
, &
‰ag
);

240 
	`¥ötf
("gp2x_set_sound: %i/%ibit/%s, %i buffers of %i bytes\n",

241 
øã
, 
bôs
, 
°îeo
?"°îeo":"m⁄o", 
‰ag
>>16, 1<<(frag&0xffff));

243 
s_ﬁdøã
 = 
øã
; 
s_ﬁdbôs
 = 
bôs
; 
s_ﬁd°îeo
 = 
°îeo
;

244 
	`u¶ìp
(100000);

245 
	}
}

248 
	$gp2x_sound_wrôe
(*
buff
, 
Àn
)

250 
	`wrôe
(
sounddev
, 
buff
, 
Àn
);

251 
	}
}

253 
	$gp2x_sound_sync
()

255 
	`io˘l
(
sounddev
, 
SOUND_PCM_SYNC
, 0);

256 
	}
}

258 
	$gp2x_sound_vﬁume
(
l
, 
r
)

260 
l
ˆ<0?0:l;Üˆ>255?255:l; 
r
=r<0?0:r;Ñ=r>255?255:r;

261 
l
<<=8;Ü|=
r
;

262 
	`io˘l
(
mixîdev
, 
SOUND_MIXER_WRITE_PCM
, &
l
);

263 
	}
}

267 
	$gp2x_öô
()

269 
	`¥ötf
("íãrög inô()\n"); 
	`fÊush
(
°dout
);

271 
memdev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

272 i‡(
memdev
 == -1)

274 
	`¥ötf
("›í(\"/dev/mem\"ËÁûed wôh %i\n", 
î∫o
);

275 
	`exô
(1);

278 
gp2x_memªgs
 = 
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
memdev
, 0xc0000000);

279 
	`¥ötf
("memªg†¨ê@ %p\n", 
gp2x_memªgs
);

280 if(
gp2x_memªgs
 =
MAP_FAILED
)

282 
	`¥ötf
("mm≠(memªgsËÁûed wôh %i\n", 
î∫o
);

283 
	`exô
(1);

285 
gp2x_memªgl
 = (*Ë
gp2x_memªgs
;

287 
gp2x_s¸ìns
[0] = 
	`mm≠
(0, 
FRAMEBUFF_WHOLESIZE
, 
PROT_WRITE
, 
MAP_SHARED
, 
memdev
, 
FRAMEBUFF_ADDR0
);

288 if(
gp2x_s¸ìns
[0] =
MAP_FAILED
)

290 
	`¥ötf
("mm≠(gp2x_s¸ìnËÁûed wôh %i\n", 
î∫o
);

291 
	`exô
(1);

293 
	`¥ötf
("‰amebuf„r†poöàtÿ%p\n", 
gp2x_s¸ìns
[0]);

294 
gp2x_s¸ìns
[1] = (*) gp2x_screens[0]+0x30000;

295 
gp2x_s¸ìns
[2] = (*) gp2x_screens[1]+0x30000;

296 
gp2x_s¸ìns
[3] = (*) gp2x_screens[2]+0x30000;

298 
gp2x_s¸ìn
 = 
gp2x_s¸ìns
[0];

299 
s¸ìn£l
 = 0;

301 
gp2x_s¸ì«ddr_ﬁd
[0] = 
gp2x_memªgs
[0x290E>>1];

302 
gp2x_s¸ì«ddr_ﬁd
[1] = 
gp2x_memªgs
[0x2910>>1];

303 
gp2x_s¸ì«ddr_ﬁd
[2] = 
gp2x_memªgs
[0x2912>>1];

304 
gp2x_s¸ì«ddr_ﬁd
[3] = 
gp2x_memªgs
[0x2914>>1];

306 
	`gp2x_mem£t_Æl_buf„rs
(0, 0, 320*240*2);

309 
mixîdev
 = 
	`›í
("/dev/mixî", 
O_RDWR
);

310 i‡(
mixîdev
 == -1)

311 
	`¥ötf
("›í(\"/dev/mixî\"ËÁûed wôh %i\n", 
î∫o
);

314 
	`gp2x_usbjoy_öô
();

316 
	`¥ötf
("exôtög inô()\n"); 
	`fÊush
(
°dout
);

317 
	}
}

319 *
	gext_míu
 = 0, *
	gext_°©e
 = 0;

321 
	$gp2x_deöô
()

323 
	`gp2x_video_ch™gemode
(15);

324 
gp2x_memªgs
[0x290E>>1] = 
gp2x_s¸ì«ddr_ﬁd
[0];

325 
gp2x_memªgs
[0x2910>>1] = 
gp2x_s¸ì«ddr_ﬁd
[1];

326 
gp2x_memªgs
[0x2912>>1] = 
gp2x_s¸ì«ddr_ﬁd
[2];

327 
gp2x_memªgs
[0x2914>>1] = 
gp2x_s¸ì«ddr_ﬁd
[3];

329 
	`gp2x_usbjoy_deöô
();

331 
	`munm≠
(
gp2x_s¸ìns
[0], 
FRAMEBUFF_WHOLESIZE
);

332 
	`munm≠
((*)
gp2x_memªgs
, 0x10000);

333 
	`˛o£
(
memdev
);

334 
	`˛o£
(
mixîdev
);

335 i‡(
sounddev
 > 0Ë
	`˛o£
(sounddev);

337 
	`¥ötf
("all done,Ñunning ");

340 if(
ext_míu
 && 
ext_°©e
) {

341 
	`¥ötf
("%†-°©ê%s\n", 
ext_míu
, 
ext_°©e
);

342 
	`exe˛
(
ext_míu
,Éxt_míu, "-°©e", 
ext_°©e
, 
NULL
);

343 } if(
ext_míu
) {

344 
	`¥ötf
("%s\n", 
ext_míu
);

345 
	`exe˛
(
ext_míu
,Éxt_míu, 
NULL
);

347 
	`¥ötf
("gp2xmenu\n");

348 
	`chdú
("/usr/gp2x");

349 
	`exe˛
("gp2xmíu", "gp2xmíu", 
NULL
);

351 
	}
}

	@drivers/gp2x/minimal.h

2 #i‚de‡
__GP2X_H__


3 
	#__GP2X_H__


	)

6 
gp2x_öô
();

7 
gp2x_deöô
();

10 
gp2x_video_Êù
();

11 
gp2x_video_ch™gemode
(
bµ
);

12 
gp2x_video_ch™gemode2
(
bµ
);

13 
gp2x_video_£çÆëã
(*
∑l
, 
Àn
);

14 
gp2x_video_RGB_£tsˇlög
(
W
, 
H
);

15 
gp2x_video_£t_offs
(
offs
);

16 
gp2x_video_waô_vsync
();

17 
gp2x_video_Êush_ˇche
();

18 
gp2x_mem˝y_buf„rs
(
buf„rs
, *
d©a
, 
off£t
, 
Àn
);

19 
gp2x_mem˝y_Æl_buf„rs
(*
d©a
, 
off£t
, 
Àn
);

20 
gp2x_mem£t_Æl_buf„rs
(
off£t
, 
byã
, 
Àn
);

23 
gp2x_°¨t_sound
(
øã
, 
bôs
, 
°îeo
);

24 
gp2x_sound_wrôe
(*
buff
, 
Àn
);

25 
gp2x_sound_vﬁume
(
l
, 
r
);

28 
gp2x_joy°ick_ªad
(
Ælow_usb_joy
);

31 *
gp2x_s¸ìn
;

32 
memdev
;

33 *
ext_míu
, *
ext_°©e
;

36 íum { 
	mGP2X_UP
=0x1, 
	mGP2X_LEFT
=0x4, 
	mGP2X_DOWN
=0x10, 
	mGP2X_RIGHT
=0x40,

37 
	mGP2X_START
=1<<8, 
	mGP2X_SELECT
=1<<9, 
	mGP2X_L
=1<<10, 
	mGP2X_R
=1<<11,

38 
	mGP2X_A
=1<<12, 
	mGP2X_B
=1<<13, 
	mGP2X_X
=1<<14, 
	mGP2X_Y
=1<<15,

39 
	mGP2X_VOL_UP
=1<<23, 
	mGP2X_VOL_DOWN
=1<<22, 
	mGP2X_PUSH
=1<<27 };

	@drivers/gp2x/mmuhack.c

1 
	~<löux/c⁄fig.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/kî√l.h
>

4 
	~<löux/öô.h
>

5 
	~<löux/miscdevi˚.h
>

6 
	~<asm/mem‹y.h
>

8 
	#MMUHACK_MINOR
 225

	)

9 
	#DEVICE_NAME
 "mmuhack"

	)

11 #i‡
__GNUC__
 == 3

12 
	~<löux/vîsi⁄.h
>

13 c⁄° 
	g__moduÀ_kî√l_vîsi⁄_gcc3
[] 
__©åibuã__
((
__u£d__
)Ë__©åibuã__((
£˘i⁄
(".modinfo"))) =

14 "kî√l_vîsi⁄=" 
UTS_RELEASE
;

17 
ssize_t
 
	$mmuhack_›í
(
öode
 *öode, 
fûe
 *
fûp
)

19 *
pgèbÀ
;

20 *
˝t
;

21 
i
, 
j
;

22 
âb
;

23 
ªt
 = -
EFAULT
;

26 
asm
 volatile(

30 "ldmü sp!, {r0}\n\t": "Ù"(
âb
)

33 
pgèbÀ
 = 
	`__va
(
âb
);

35 
i
 = 0; i < 4096; i ++Ëi‡–(
pgèbÀ
[i] & 3) == 1 ) {

36 
˝t
 = 
	`__va
(
pgèbÀ
[
i
] & 0xfffffc00);

38 
j
 = 0; j < 256; j ++) {

46 i‡(((
˝t
[
j
] & 0xff000000) == 0x02000000) && ((cpt[j] & 12)==0) )

49 
˝t
[
j
] |= 0xFFC;

52 i‡(((
˝t
[
j
] & 0xff000000) == 0x03000000) && ((cpt[j] & 12)==0))

56 
˝t
[
j
] |= 0xFFC;

62 
asm
 volatile(

70 i‡(
ªt
 == 0)

71 
	`¥ötk
("MMU hackápplied.\n");

74 
	}
}

76 
fûe_›î©i⁄s
 
	gmmuhack_f›s
 = {

77 
ow√r
: 
THIS_MODULE
,

78 
›í
: 
mmuhack_›í
,

82 
miscdevi˚
 
	gmmuhack
 = {

83 
MMUHACK_MINOR
, 
DEVICE_NAME
, &
mmuhack_f›s


86 
__öô
 
	$mmuhack_öô
()

88 
	`misc_ªgi°î
(&
mmuhack
);

93 
	}
}

95 
__exô
 
	$mmuhack_exô
()

97 
	`misc_dîegi°î
(&
mmuhack
);

101 
	}
}

103 
moduÀ_öô
(
mmuhack_öô
);

104 
moduÀ_exô
(
mmuhack_exô
);

	@drivers/gp2x/readpng.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<≤g.h
>

5 
	$ªad≤g
(*
de°
, c⁄° *
‚ame
)

7 
FILE
 *
Â
;

8 
≤g_°ru˘p
 
≤g_±r
 = 
NULL
;

9 
≤g_öf›
 
öfo_±r
 = 
NULL
;

10 
≤g_byãµ
 
row_±r
 = 
NULL
;

11 
height
, 
width
, 
h
;

13 i‡(
de°
 =
NULL
 || 
‚ame
 == NULL)

18 
Â
 = 
	`f›í
(
‚ame
, "rb");

19 i‡(
Â
 =
NULL
)

21 
	`¥ötf
(
__FILE__
 ": faûedÅÿ›í: %s\n", 
‚ame
);

25 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

26 i‡(!
≤g_±r
)

28 
	`¥ötf
(
__FILE__
 ":Öng_create_read_struct() failed\n");

29 
	`f˛o£
(
Â
);

33 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

34 i‡(!
öfo_±r
)

36 
	`¥ötf
(
__FILE__
 ":Öng_create_info_struct() failed\n");

37 
d⁄e
;

41 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

42 
	`≤g_ªad_≤g
(
≤g_±r
, 
öfo_±r
, 
PNG_TRANSFORM_STRIP_16
 | 
PNG_TRANSFORM_STRIP_ALPHA
 | 
PNG_TRANSFORM_PACKING
, 
NULL
);

43 
row_±r
 = 
	`≤g_gë_rows
(
≤g_±r
, 
öfo_±r
);

44 i‡(
row_±r
 =
NULL
)

46 
	`¥ötf
(
__FILE__
 ":Öng_get_rows() failed\n");

47 
d⁄e
;

50 
height
 = 
öfo_±r
->height;

51 i‡(
height
 > 240) height = 240;

52 
width
 = 
öfo_±r
->width;

53 i‡(
width
 > 320) width = 320;

55 
h
 = 0; h < 
height
; h++)

57 *
§c
 = 
row_±r
[
h
];

58 
Àn
 = 
width
;

59 
Àn
--)

61 *
de°
++ = ((
§c
[0]&0xf8)<<8) | ((src[1]&0xf8)<<3) | (src[2] >> 3);

62 
§c
 += 3;

64 
de°
 +320 - 
width
;

68 
d⁄e
:

69 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
öfo_±r
 ? &öfo_±∏: 
NULL
, (
≤g_öf›p
)NULL);

70 
	`f˛o£
(
Â
);

71 
	}
}

	@drivers/gp2x/readpng.h

2 
ªad≤g
(*
de°
, c⁄° *
‚ame
);

	@drivers/gp2x/squidgehack.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

9 **
g_¨gv
;

12 
	$mmuhack
()

14 
kocmd
[1024];

15 
i
, 
mmufd
;

20 
	`sy°em
("/sbin/rmmod mmuhack");

22 
	`°r˝y
(
kocmd
, "/sbin/insmod ");

23 
	`°∫˝y
(
kocmd
+13, 
g_¨gv
[0], 1023-13);

24 
kocmd
[1023] = 0;

25 
i
 = 
	`°æí
(
kocmd
); i > 13; i--)

26 i‡(
kocmd
[
i
] == '/') { i++; ; }

27 
	`°r˝y
(
kocmd
+
i
, "mmuhack.o");

29 
	`¥ötf
("In°Ælög NK'†kî√»moduÀ f‹ SquidgêMMU Hack (%s)...\n", 
kocmd
);

30 
	`sy°em
(
kocmd
);

31 
mmufd
 = 
	`›í
("/dev/mmuhack", 
O_RDWR
);

32 if(
mmufd
 < 0)  0;

34 
	`˛o£
(
mmufd
);

36 
	}
}

40 
	$mmuunhack
()

42 
ªt
;

43 
	`¥ötf
("Removög NK'†kî√»moduÀ f‹ SquidgêMMU Hack... "); 
	`fÊush
(
°dout
);

44 
ªt
 = 
	`sy°em
("/sbin/rmmod mmuhack");

45 
	`¥ötf
("d⁄ê(%i)\n", 
ªt
);

47  
ªt
;

48 
	}
}

	@drivers/gp2x/squidgehack.h

1 #i‚de‡
__MMUHACK__


2 
	#__MMUHACK__


	)

4 
mmuhack
();

5 
mmuunhack
();

	@drivers/gp2x/throttle.c

1 
	~<sys/time.h
>

2 
	~"maö.h
"

3 
	~"gp2x.h
"

4 
	~"möimÆ.h
"

5 
	~"thrŸée.h
"

8 
uöt8
 
PAL
;

9 
FSkù
;

10 
	gskù_cou¡
 = 0;

11 
timevÆ
 
	gtv_¥ev
;

13 
	#tvdiff
(
tv1
, 
tv2
) \

14 ((
tv1
.
tv_£c
 - 
tv2
.tv_£cË* 1000000 +Åv1.
tv_u£c
 -Åv2.tv_u£c)

	)

16 
	#tvadd
(
tv
, 
u£c
) { \

17 
tv
.
tv_u£c
 +
u£c
; \

18 i‡(
tv
.
tv_u£c
 >= 1000000) { \

19 
tv
.
tv_£c
 += 1; \

20 
tv
.
tv_u£c
 -= 1000000; \

22 }

	)

24 
	#tvsub
(
tv
, 
u£c
) { \

25 
tv
.
tv_u£c
 -
u£c
; \

26 i‡(
tv
.
tv_u£c
 < 0) { \

27 
tv
.
tv_£c
 -= 1; \

28 
tv
.
tv_u£c
 += 1000000; \

30 }

	)

32 
	$Re‰eshThrŸéeFPS
()

34 
skù_cou¡
 = 0;

35 i‡(
Sëtögs
.
≥r„˘_vsync
)

37 
	`gp2x_video_waô_vsync
();

39 
	`gëtimeofday
(&
tv_¥ev
, 0);

40 
	`tvsub
(
tv_¥ev
, 
PAL
 ? 19997 : 16639);

41 
	}
}

43 
	$waô_to
(
timevÆ
 *
tv_aim
)

45 
timevÆ
 
tv_now
;

46 
diff
;

50 
	`gëtimeofday
(&
tv_now
, 0);

51 
diff
 = 
	`tvdiff
((*
tv_aim
), 
tv_now
);

53 
diff
 > 0);

54 
	}
}

56 
	~<°dio.h
>

57 
	$S≥edThrŸée
()

59 
timevÆ
 
tv_now
, 
tv_aim
;

60 
‰ame_time
 = 
PAL
 ? 19997 : 16639;

61 
tdiff
;

63 
tv_aim
 = 
tv_¥ev
;

64 
	`tvadd
(
tv_aim
, 
‰ame_time
);

66 
	`gëtimeofday
(&
tv_now
, 0);

67 
tdiff
 = 
	`tvdiff
(
tv_now
, 
tv_aim
);

69 #ifde‡
FRAMESKIP


70 i‡(
Sëtögs
.
‰ameskù
 >= 0)

72 i‡(
skù_cou¡
 >
Sëtögs
.
‰ameskù
)

73 
skù_cou¡
 = 0;

75 
skù_cou¡
++;

76 
FSkù
 = 1;

79 i‡(
tdiff
 >
‰ame_time
)

82 i‡–
skù_cou¡
 < 6) {

83 
FSkù
 = 1;

84 
skù_cou¡
++;

86 
skù_cou¡
 = 0;

88 i‡(
tdiff
 < 92*1024)

89 
tv_¥ev
 = 
tv_aim
;

91 
tv_¥ev
 = 
tv_now
;

95 
skù_cou¡
 = 0;

99 i‡(
tdiff
 < 0)

101 i‡(
Sëtögs
.
≥r„˘_vsync
)

103 i‡(
tdiff
 <(
PAL
 ? 19997/2 : 16639/2))

105 
timevÆ
 
tv_tmp
 = 
tv_aim
;

106 
	`tvsub
(
tv_tmp
, 5000);

107 
	`waô_to
(&
tv_tmp
);

109 
	`gp2x_video_waô_vsync
();

110 
	`gëtimeofday
(&
tv_¥ev
, 0);

115 
	`waô_to
(&
tv_aim
);

119 
tv_¥ev
 = 
tv_aim
;

120 
	}
}

	@drivers/gp2x/throttle.h

1 
Re‰eshThrŸéeFPS
();

2 
S≥edThrŸée
();

	@drivers/gp2x/unix-netplay.c

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°dio.h
>

26 
	~<uni°d.h
>

27 
	~<√tdb.h
>

28 
	~<î∫o.h
>

30 #i‚de‡
sockÀn_t


31 
	#sockÀn_t
 

	)

33 #ifde‡
NETWORK


34 
	gSockë
=-1;

36 
	~"maö.h
"

37 
	~"unix-√çœy.h
"

39 *
	g√çœyho°
=0;

40 
	gP‹t
=0xFCE;

41 
	g√çœy
=0;

43 
	$FCEUD_Nëw‹kC⁄√˘
()

45 #ifde‡
NETWORK


46 
sockaddr_ö
 
sockn
;

47 
TSockë
;

49 
	`mem£t
(&
sockn
,0,(sockn));

50 
sockn
.
sö_Ámûy
=
AF_INET
;

51 
sockn
.
sö_p‹t
=
	`ht⁄s
(
P‹t
);

53 if((
TSockë
=
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0))<0)

55 
	`puts
("Error creating socket.");

59 if(
√çœy
==1)

61 
sockn
.
sö_addr
.
s_addr
=
INADDR_ANY
;

62 if(
	`böd
(
TSockë
, (
sockaddr
 *)&
sockn
, (sockn))<0)

64 
	`˛o£
(
TSockë
);

65 
	`puts
("Error bindingÅo socket.");

68 if(
	`li°í
(
TSockë
, 1)<0)

70 
	`puts
("ErrorÜistening on socket.");

71 
	`˛o£
(
TSockë
);

75 
sockÀn_t
 
Àn
=(
sockn
);

77 
	`¥ötf
("Ac˚±ög c⁄√˘i⁄ o¿p‹à%d...\n",
P‹t
);

78 if((
Sockë
=
	`ac˚±
(
TSockë
,(
sockaddr
 *)&
sockn
,&
Àn
))<0 )

80 
	`puts
("Errorácceptingá connection.");

81 
	`˛o£
(
TSockë
);

84 
	`˛o£
(
TSockë
);

90 
ho°ít
 *
Ho°
;

92 if((
sockn
.
sö_addr
.
s_addr
=
	`öë_addr
(
√çœyho°
))==
INADDR_NONE
)

94 if(!(
Ho°
=
	`gëho°by«me
(
√çœyho°
)))

96 
	`puts
("Error gettingÇetwork hostÉntry.");

99 
	`mem˝y
(&
sockn
.
sö_addr
,
Ho°
->
h_addr
,Ho°->
h_Àngth
);

101 
	`¥ötf
("Aâem±ögÅÿc⁄√˘Åÿ%s...\n",
√çœyho°
);

102 if–
	`c⁄√˘
(
TSockë
, (
sockaddr
 *)&
sockn
, (sockn)) <0 )

104 
	`puts
("Error connectingÅoÑemote host.");

105 
	`˛o£
(
TSockë
);

108 
Sockë
=
TSockë
;

112 
	}
}

118 
	$FCEUD_Nëw‹kRecvD©a
(
uöt8
 *
d©a
, 
uöt32
 
Àn
, 
block
)

120 #ifde‡
NETWORK


121 if(
block
)

123 
t
;

124 
uöt8
 
ãmp
[32];

125 
t
=
	`ªcv
(
Sockë
,
ãmp
,32,
MSG_PEEK
|
MSG_DONTWAIT
);

126 if(
t
==-1)

128 if(
î∫o
!=
EAGAIN
) (0);

130 if(
t
==32)

131 
NoWaôög
|=2;

133 
NoWaôög
&=~2;

134 (
	`ªcv
(
Sockë
,
d©a
,
Àn
,0)==len);

138 
t
=
	`ªcv
(
Sockë
,
d©a
,
Àn
,
MSG_DONTWAIT
);

139 if(
t
==-1)

141 if(
î∫o
==
EAGAIN
)

150 
	}
}

154 
	$FCEUD_Nëw‹kSídD©a
(
uöt8
 *
VÆue
, 
uöt32
 
Àn
)

156 #ifde‡
NETWORK


157 (
	`£nd
(
Sockë
,
VÆue
,
Àn
,0)==len);

161 
	}
}

163 
	$FCEUD_Nëw‹kClo£
()

165 #ifde‡
NETWORK


166 if(
Sockë
>0)

167 
	`˛o£
(
Sockë
);

168 
Sockë
=-1;

170 
	}
}

	@drivers/gp2x/unix-netplay.h

1 *
√çœyho°
;

2 
P‹t
;

3 
FD√çœy
;

4 
	#√çœy
 
FD√çœy


	)

	@drivers/gp2x/usage.h

21 
	$ShowUßge
(*
¥og
)

23 
	`¥ötf
("\nUßgêi†a†fﬁlows:\n%†<›ti⁄s> fûíame\n\n",
¥og
);

24 
	`puts
("Options:");

25 
	`puts
(
DrivîUßge
);

26 
	`puts
("-cpalette x Loadá custom globalÖalette from file x.\n\
-ntsccol x Emulateán NTSC's TV's colors.\n\
0 = Disabled.\n\
1 = Enabled.\n\
-pal Emulateá PAL NES.\n\
-soundvol x Sound volume. x isán integralÖercentage value.\n\
-inputx str Select device mappedÅo virtual inputÖort x(1-2).\n\
 may be:Çone, gamepad, zapper,Öowerpada,Öowerpadb,\n\
\n\
-fcexp str Select FamicomÉxpansionÖort device.\n\
 may be:Çone, shadow,árkanoid, 4player, fkb\n\
-nofs x Disables Four-ScoreÉmulation if x is 1.\n\
-gg Enable Game GenieÉmulation.\n\
-no8lim x DisablesÅhe 8 spritesÖer scanlineÜimitation.\n\
0 = LimitationÉnabled.\n\
1 = Limitation disabled.\n\
-subase x SaveÉxtra game data files underÅhe base directory ifÉnabled.\n\
0 = Disabled.\n\
1 = Enabled.\n\
-snapname x Selects whatÅype of fileÇame snapshots will have.\n\
0 = Numeric(0.png)\n\
1 = File baseándÇumeric(mario-0.png)\n\
-nothrottle x Disableártificial speedÅhrottling if x isÇon-zero.\n\
-clipsides x ClipÜeftmostándÑightmost 8 columns ofÖixels of video output.\n\
0 = No clipping.\n\
1 = Clipping.\n\
-slstart x SetÅhe first drawnÉmulated scanline. Valid values for xáre\n\
0Åhrough 239.\n\
-slend x SetÅheÜast drawnÉmulated scanline. Valid values for xáre\n\
0Åhrough 239.");

56 
	}
}

	@drivers/gp2x/usbjoy.c

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/io˘l.h
>

28 
	~<f˙é.h
>

29 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<limôs.h
>

33 
	~<löux/joy°ick.h
>

35 
	~"usbjoy.h
"

38 
	#DEAD_ZONE
 (8*1024)

	)

54 
usbjoy
 *
	$joy_›í
(
joynumbî
)

56 
fd
;

57 
∑th
 [128];

58 
usbjoy
 * 
joy
 = 
NULL
;

59 
js_evít
 
evít
;

60 
ösmod_d⁄e
 = 0;

64 i‡(!
ösmod_d⁄e
) {

65 
	`sy°em
 ("insmod input");

66 
	`sy°em
 ("insmod joydev");

67 
ösmod_d⁄e
 = 1;

70 i‡(
joynumbî
 == 0) {

72 i‡(
joynumbî
 > 0) {

73 
	`•rötf
 (
∑th
, "/dev/öput/js%d", 
joynumbî
-1);

74 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
, 0);

75 i‡(
fd
 > 0) {

76 
joy
 = (
usbjoy
 *Ë
	`mÆloc
((*joy));

77 i‡(
joy
 =
NULL
Ë{ 
	`˛o£
(
fd
);  NULL; }

78 
	`mem£t
(
joy
, 0, (*joy));

81 
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
);

85 
	`ªad
(
fd
, &
evít
, (event)) > 0);

88 
joy
->
fd
 = fd;

91 
	`io˘l
(
joy
->
fd
, 
	`JSIOCGNAME
(128*()), joy->
«me
);

94 
	`°r˝y
(
joy
->
devi˚
, 
∑th
);

97 
	`io˘l
(
joy
->
fd
, 
JSIOCGBUTTONS
, &joy->
numbuâ⁄s
);

100 
	`io˘l
(
joy
->
fd
, 
JSIOCGAXES
, &joy->
numaxes
);

103 i‡(
	`°∫ˇ£cmp
(
joy
->
«me
, "logôech", 
	`°æí
("logitech")) == 0)

104 
joy
->
ty≥
 = 
JOY_TYPE_LOGITECH
;

105 
joy
->
ty≥
 = 
JOY_TYPE_GENERIC
;

110  
joy
;

111 
	}
}

126 * 
	$joy_«me
 (
usbjoy
 * 
joy
) {

127 i‡(
joy
 !
NULL
Ë joy->
«me
;

128  
NULL
;

129 
	}
}

145 * 
	$joy_devi˚
 (
usbjoy
 * 
joy
) {

146 i‡(
joy
 !
NULL
Ë joy->
devi˚
;

147  
NULL
;

148 
	}
}

164 
	$joy_buâ⁄s
 (
usbjoy
 * 
joy
) {

165 i‡(
joy
 !
NULL
Ë joy->
numbuâ⁄s
;

167 
	}
}

183 
	$joy_axes
 (
usbjoy
 * 
joy
) {

184 i‡(
joy
 !
NULL
Ë joy->
numaxes
;

186 
	}
}

204 
	$joy_upd©e
 (
usbjoy
 * 
joy
) {

205 
js_evít
 
evíts
[0xff];

206 
i
, 
Àn
;

207 
evít
 = 0;

208 i‡(
joy
 !
NULL
) {

209 i‡((
Àn
=
	`ªad
(
joy
->
fd
, 
evíts
, (Évents))) >0) {

210 
Àn
 /(
evíts
[0]);

211  
i
=0; i<
Àn
; ++i ) {

212 
evíts
[
i
].
ty≥
 & ~
JS_EVENT_INIT
) {

213 
JS_EVENT_AXIS
:

214 i‡(
evíts
[
i
].
numbî
 == 0) {

215 
joy
->
°©óxes
[
JOYLEFT
] = joy->°©óxes[
JOYRIGHT
] = 0;

216 i‡(
evíts
[
i
].
vÆue
 < -
DEAD_ZONE
Ë
joy
->
°©óxes
[
JOYLEFT
] = 1;

217 i‡(
evíts
[
i
].
vÆue
 > 
DEAD_ZONE
Ë
joy
->
°©óxes
[
JOYRIGHT
] = 1;

218 
joy
->
axevÆs
[0] = 
evíts
[
i
].
vÆue
;

220 i‡(
evíts
[
i
].
numbî
 == 1) {

221 
joy
->
°©óxes
[
JOYUP
] = joy->°©óxes[
JOYDOWN
] = 0;

222 i‡(
evíts
[
i
].
vÆue
 < -
DEAD_ZONE
Ë
joy
->
°©óxes
[
JOYUP
] = 1;

223 i‡(
evíts
[
i
].
vÆue
 > 
DEAD_ZONE
Ë
joy
->
°©óxes
[
JOYDOWN
] = 1;

224 
joy
->
axevÆs
[1] = 
evíts
[
i
].
vÆue
;

226 
evít
 = 1;

228 
JS_EVENT_BUTTON
:

229 
joy
->
°©ebuâ⁄s
[
evíts
[
i
].
numbî
] =Évíts[i].
vÆue
;

230 
evít
 = 1;

239 
evít
 = -1;

241  
evít
;

242 
	}
}

261 
	$joy_gëbuâ⁄
 (
buâ⁄
, 
usbjoy
 * 
joy
) {

262 i‡(
joy
 !
NULL
) {

263 i‡(
buâ⁄
 < 
	`joy_buâ⁄s
(
joy
)Ë joy->
°©ebuâ⁄s
[button];

267 
	}
}

286 
	$joy_gëaxe
 (
axe
, 
usbjoy
 * 
joy
) {

287 i‡(
joy
 !
NULL
) {

288 i‡(
axe
 < 4Ë 
joy
->
°©óxes
[axe];

292 
	}
}

309 
	$joy_˛o£
 (
usbjoy
 * 
joy
) {

310 i‡(
joy
 !
NULL
) {

311 
	`˛o£
 (
joy
->
fd
);

312 
	`‰ì
 (
joy
);

316 
	}
}

323 
	~"möimÆ.h
"

325 
	gnum_of_joys
 = 0;

326 
usbjoy
 *
	gjoys
[4];

328 
	$gp2x_usbjoy_öô
 () {

330 
i
, 
n
 = 0;

332 
	`¥ötf
("\n");

333 
i
 = 0; i < 4; i++) {

334 
joys
[
n
] = 
	`joy_›í
(
i
+1);

335 i‡(
joys
[
n
] && 
	`joy_buâ⁄s
(joys[n]) > 0) {

336 
	`¥ötf
 ("+-Joy°ick %d: \"%s\", buâ⁄†%i\n", 
i
+1, 
	`joy_«me
(
joys
[
n
]), 
	`joy_buâ⁄s
(joys[n]));

337 
n
++;

340 
num_of_joys
 = 
n
;

342 
	`¥ötf
("Found %d Joy°ick(s)\n",
num_of_joys
);

343 
	}
}

345 
	$gp2x_usbjoy_upd©e
 () {

347 
q
, 
foo
;

348 
q
=0; q < 
num_of_joys
; q++) {

349 
foo
 = 
	`joy_upd©e
 (
joys
[
q
]);

351 
	}
}

353 
	$gp2x_usbjoy_check
 (
joyno
) {

355 
q
, 
joyExKey
 = 0;

356 
usbjoy
 *
joy
 = 
joys
[
joyno
];

358 i‡(
joy
 !
NULL
) {

359 i‡(
	`joy_gëaxe
(
JOYUP
, 
joy
)Ë{ 
joyExKey
 |
GP2X_UP
; }

360 i‡(
	`joy_gëaxe
(
JOYDOWN
, 
joy
)Ë{ 
joyExKey
 |
GP2X_DOWN
; }

361 i‡(
	`joy_gëaxe
(
JOYLEFT
, 
joy
)Ë{ 
joyExKey
 |
GP2X_LEFT
; }

362 i‡(
	`joy_gëaxe
(
JOYRIGHT
, 
joy
)Ë{ 
joyExKey
 |
GP2X_RIGHT
; }

365 
q
=0; q<
	`joy_buâ⁄s
 (
joy
); q++) {

366 i‡(
	`joy_gëbuâ⁄
 (
q
, 
joy
)) {

367 i‡(
joy
->
ty≥
 =
JOY_TYPE_LOGITECH
) {

368 
q
) {

369 0: 
joyExKey
 |
GP2X_A
; ;

370 1: 
joyExKey
 |
GP2X_X
; ;

371 2: 
joyExKey
 |
GP2X_B
; ;

372 3: 
joyExKey
 |
GP2X_Y
; ;

375 
q
) {

376 0: 
joyExKey
 |
GP2X_Y
; ;

377 1: 
joyExKey
 |
GP2X_B
; ;

378 2: 
joyExKey
 |
GP2X_X
; ;

379 3: 
joyExKey
 |
GP2X_A
; ;

383 
q
) {

384 4: 
joyExKey
 |
GP2X_L
; ;

385 5: 
joyExKey
 |
GP2X_R
; ;

386 6: 
joyExKey
 |
GP2X_L
; ;

387 7: 
joyExKey
 |
GP2X_R
; ;

388 8: 
joyExKey
 |
GP2X_SELECT
;;

389 9: 
joyExKey
 |
GP2X_START
; ;

390 10: 
joyExKey
 |
GP2X_PUSH
; ;

391 11: 
joyExKey
 |
GP2X_PUSH
; ;

396  
joyExKey
;

397 
	}
}

399 
	$gp2x_usbjoy_check2
 (
joyno
) {

401 
q
, 
to
, 
joyExKey
 = 0;

402 
usbjoy
 *
joy
 = 
joys
[
joyno
];

404 i‡(
joy
 !
NULL
) {

405 i‡(
	`joy_gëaxe
(
JOYUP
, 
joy
)Ë{ 
joyExKey
 |= 1 << 0; }

406 i‡(
	`joy_gëaxe
(
JOYDOWN
, 
joy
)Ë{ 
joyExKey
 |= 1 << 1; }

407 i‡(
	`joy_gëaxe
(
JOYLEFT
, 
joy
)Ë{ 
joyExKey
 |= 1 << 2; }

408 i‡(
	`joy_gëaxe
(
JOYRIGHT
, 
joy
)Ë{ 
joyExKey
 |= 1 << 3; }

411 
to
 = 
joy
->
numbuâ⁄s
;

412 i‡(
to
 > 32-4)Åo = 32-4;

413 
q
=0; q < 
to
; q++)

414 i‡(
joy
->
°©ebuâ⁄s
[
q
]Ë
joyExKey
 |= 1 << (q+4);

416  
joyExKey
;

417 
	}
}

421 
	$gp2x_usbjoy_deöô
 () {

422 
i
;

423 
i
=0; i<
num_of_joys
; i++) {

424 
	`joy_˛o£
 (
joys
[
i
]);

425 
joys
[
i
] = 
NULL
;

427 
num_of_joys
 = 0;

428 
	}
}

	@drivers/gp2x/usbjoy.h

23 #i‚de‡
USBJOY_H


24 
	#USBJOY_H


	)

28 
	mJOY_TYPE_GENERIC
,

29 
	mJOY_TYPE_LOGITECH


30 } 
	tjoy_ty≥
;

45 
	#JOYUP
 (0)

	)

46 
	#JOYDOWN
 (1)

	)

47 
	#JOYLEFT
 (2)

	)

48 
	#JOYRIGHT
 (3)

	)

66 
	susbjoy
 {

67 
	mfd
;

68 
	m«me
 [128];

69 
	mdevi˚
 [128];

70 
	mnumbuâ⁄s
;

71 
	mnumaxes
;

72 
	mnumh©s
;

73 
	m°©ebuâ⁄s
[32];

74 
	m°©óxes
[4];

75 
	maxevÆs
[2];

76 
joy_ty≥
 
	mty≥
;

93 
usbjoy
 * 
joy_›í
 (
joynumbî
);

109 * 
joy_«me
 (
usbjoy
 * 
joy
);

125 * 
joy_devi˚
 (
usbjoy
 * 
joy
);

140 
joy_buâ⁄s
 (
usbjoy
 * 
joy
);

155 
joy_axes
 (
usbjoy
 * 
joy
);

173 
joy_upd©e
 (
usbjoy
 * 
joy
);

192 
joy_gëbuâ⁄
 (
buâ⁄
, 
usbjoy
 * 
joy
);

211 
joy_gëaxe
 (
axe
, 
usbjoy
 * 
joy
);

227 
joy_˛o£
 (
usbjoy
 * 
joy
);

232 
num_of_joys
;

233 
usbjoy
 *
joys
[4];

235 
gp2x_usbjoy_upd©e
();

236 
gp2x_usbjoy_öô
();

237 
gp2x_usbjoy_check
(
joyno
);

238 
gp2x_usbjoy_check2
(
joyno
);

239 
gp2x_usbjoy_deöô
();

	@drivers/gp2x_test/minimal.c

3 
	~<°dio.h
>

4 
	~<SDL.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<f˙é.h
>

9 
	~<uni°d.h
>

10 
	~<sys/io˘l.h
>

11 
	~<sys/soundˇrd.h
>

12 
	~<î∫o.h
>

14 
	~"../gp2x/möimÆ.h
"

15 
	~"../gp2x/usbjoy.h
"

16 
	~"../gp2x/˝u˘æ.h
"

18 
SDL_SurÁ˚
 *
	gs¸ìn
;

19 *
	ggp2x_s¸ìn
;

20 
	gsounddev
 = 0;

24 
	$gp2x_video_Êù
()

26 if(
	`SDL_MUSTLOCK
(
s¸ìn
))

27 
	`SDL_LockSurÁ˚
(
s¸ìn
);

29 
	`mem˝y
(
s¸ìn
->
pixñs
, 
gp2x_s¸ìn
, 320*240*s¸ìn->
f‹m©
->
ByãsPîPixñ
);

31 if(
	`SDL_MUSTLOCK
(
s¸ìn
))

32 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

34 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

35 
	}
}

38 
	$gp2x_video_ch™gemode2
(
bµ
)

40 c⁄° 
SDL_VideoInfo
 *
vöf
;

41 
Êags
=0;

43 
vöf
=
	`SDL_GëVideoInfo
();

45 if(
vöf
->
hw_avaûabÀ
)

46 
Êags
|=
SDL_HWSURFACE
;

48 i‡(
bµ
 == 8)

49 
Êags
|=
SDL_HWPALETTE
;

51 
s¸ìn
 = 
	`SDL_SëVideoMode
(320, 240, 
bµ
, 
Êags
);

52 if(!
s¸ìn
)

54 
	`puts
(
	`SDL_GëEº‹
());

58 
	`SDL_WM_SëC≠ti⁄
("FCE Ultra","FCE Ultra");

59 
	}
}

62 
SDL_Cﬁ‹
 
	gpsdl
[256];

64 
	$gp2x_video_ch™gemode
(
bµ
)

66 
	`gp2x_video_ch™gemode2
(
bµ
);

67 i‡(
bµ
 == 8)

68 
	`SDL_SëPÆëã
(
s¸ìn
,
SDL_PHYSPAL
,
psdl
,0,256);

69 
	`gp2x_video_Êù
();

70 
	}
}

73 
	$gp2x_video_£çÆëã
(*
∑l
, 
Àn
)

75 
i
;

77 
i
 = 0; i < 
Àn
; i++)

79 
psdl
[
i
].
r
 = 
∑l
[i] >> 16;

80 
psdl
[
i
].
g
 = 
∑l
[i] >> 8;

81 
psdl
[
i
].
b
 = 
∑l
[i];

84 
	`SDL_SëPÆëã
(
s¸ìn
,
SDL_PHYSPAL
,
psdl
,0,
Àn
);

85 
	}
}

88 
	$gp2x_video_RGB_£tsˇlög
(
W
, 
H
)

90 
	}
}

92 
	$gp2x_video_£t_offs
(
offs
)

94 
	}
}

96 
	$gp2x_video_Êush_ˇche
()

98 
	}
}

100 
	$gp2x_mem˝y_buf„rs
(
buf„rs
, *
d©a
, 
off£t
, 
Àn
)

102 
	}
}

105 
	$gp2x_mem˝y_Æl_buf„rs
(*
d©a
, 
off£t
, 
Àn
)

107 
	}
}

110 
	$gp2x_mem£t_Æl_buf„rs
(
off£t
, 
byã
, 
Àn
)

112 
	`mem£t
((*)
gp2x_s¸ìn
 + 
off£t
, 
byã
, 
Àn
);

113 
	}
}

116 
	$gp2x_joy°ick_ªad
(
Ælow_usb_joy
)

118 
keys_out
 = 0;

119 
Uöt8
 *
keys
;

120 
i
;

122 
	`SDL_PumpEvíts
();

123 
keys
 = 
	`SDL_GëKeySèã
(
NULL
);

125 i‡(
keys
[
SDLK_UP
]Ë
keys_out
 |
GP2X_UP
;

126 i‡(
keys
[
SDLK_LEFT
]Ë
keys_out
 |
GP2X_LEFT
;

127 i‡(
keys
[
SDLK_DOWN
]Ë
keys_out
 |
GP2X_DOWN
;

128 i‡(
keys
[
SDLK_RIGHT
]Ë
keys_out
 |
GP2X_RIGHT
;

129 i‡(
keys
[
SDLK_RETURN
]Ë
keys_out
 |
GP2X_START
;

130 i‡(
keys
[
SDLK_BACKSLASH
]Ë
keys_out
 |
GP2X_SELECT
;

131 i‡(
keys
[
SDLK_s
]Ë
keys_out
 |
GP2X_L
;

132 i‡(
keys
[
SDLK_d
]Ë
keys_out
 |
GP2X_R
;

133 i‡(
keys
[
SDLK_z
]Ë
keys_out
 |
GP2X_A
;

134 i‡(
keys
[
SDLK_x
]Ë
keys_out
 |
GP2X_X
;

135 i‡(
keys
[
SDLK_c
]Ë
keys_out
 |
GP2X_B
;

136 i‡(
keys
[
SDLK_v
]Ë
keys_out
 |
GP2X_Y
;

137 i‡(
keys
[
SDLK_q
]Ë
keys_out
 |
GP2X_VOL_DOWN
;

138 i‡(
keys
[
SDLK_w
]Ë
keys_out
 |
GP2X_VOL_UP
;

139 i‡(
keys
[
SDLK_RIGHTBRACKET
]Ë
keys_out
 |
GP2X_PUSH
;

141 i‡(
Ælow_usb_joy
 && 
num_of_joys
 > 0) {

143 
	`gp2x_usbjoy_upd©e
();

144 
i
 = 0; i < 
num_of_joys
; i++)

145 
keys_out
 |
	`gp2x_usbjoy_check
(
i
);

148  
keys_out
;

149 
	}
}

151 
	gs_ﬁdøã
 = 0, 
	gs_ﬁdbôs
 = 0, 
	gs_ﬁd°îeo
 = 0;

153 
	$gp2x_°¨t_sound
(
øã
, 
bôs
, 
°îeo
)

155 
‰ag
 = 0, 
bsize
, 
buf„rs
;

158 i‡(
øã
 =
s_ﬁdøã
 && 
s_ﬁdbôs
 =
bôs
 && 
s_ﬁd°îeo
 =
°îeo
) ;

160 i‡(
sounddev
 > 0Ë
	`˛o£
(sounddev);

161 
sounddev
 = 
	`›í
("/dev/d•", 
O_WRONLY
|
O_ASYNC
);

162 i‡(
sounddev
 == -1)

164 
	`¥ötf
("›í(\"/dev/d•\"ËÁûed wôh %i\n", 
î∫o
);

168 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SPEED
, &
øã
);

169 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFMT
, &
bôs
);

170 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_STEREO
, &
°îeo
);

172 
buf„rs
 = 16;

173 
bsize
 = 
øã
 / 32;

174 i‡(
øã
 > 22050Ë{ 
bsize
*=4; 
buf„rs
*=2; }

175 (
bsize
>>=1)Ë
‰ag
++;

176 
‰ag
 |
buf„rs
<<16;

177 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFRAGMENT
, &
‰ag
);

178 
	`¥ötf
("gp2x_set_sound: %i/%ibit/%s, %i buffers of %i bytes\n",

179 
øã
, 
bôs
, 
°îeo
?"°îeo":"m⁄o", 
‰ag
>>16, 1<<(frag&0xffff));

181 
s_ﬁdøã
 = 
øã
; 
s_ﬁdbôs
 = 
bôs
; 
s_ﬁd°îeo
 = 
°îeo
;

182 
	`u¶ìp
(100000);

183 
	}
}

186 
	$gp2x_sound_wrôe
(*
buff
, 
Àn
)

188 i‡(
sounddev
 > 0)

189 
	`wrôe
(
sounddev
, 
buff
, 
Àn
);

190 
	}
}

192 
	$gp2x_sound_sync
()

194 i‡(
sounddev
 > 0)

195 
	`io˘l
(
sounddev
, 
SOUND_PCM_SYNC
, 0);

196 
	}
}

198 
	$gp2x_sound_vﬁume
(
l
, 
r
)

200 
	}
}

203 
	$gp2x_öô
()

205 
	`¥ötf
("íãrög inô()\n"); 
	`fÊush
(
°dout
);

207 
gp2x_s¸ìn
 = 
	`mÆloc
(320*240*2 + 32);

208 if(
gp2x_s¸ìn
 =
NULL
) ;

209 
	`mem£t
(
gp2x_s¸ìn
, 0, 320*240*2 + 32);

211 if(
	`SDL_Inô
(
SDL_INIT_NOPARACHUTE
))

213 
	`¥ötf
("CouldÇŸ inôülizêSDL: %s.\n", 
	`SDL_GëEº‹
());

217 if(
	`SDL_InôSubSy°em
(
SDL_INIT_VIDEO
)==-1)

219 
	`puts
(
	`SDL_GëEº‹
());

223 
	`SDL_ShowCurs‹
(0);

225 
	`gp2x_video_ch™gemode
(8);

228 
	`gp2x_usbjoy_öô
();

230 
	`SDL_PumpEvíts
();

232 
	`¥ötf
("gp2x_init done.\n");

233 
	}
}

236 *
	gext_míu
 = 0, *
	gext_°©e
 = 0;

238 
	$gp2x_deöô
()

240 
	`SDL_QuôSubSy°em
(
SDL_INIT_VIDEO
);

241 
	`SDL_Quô
();

243 
	`‰ì
(
gp2x_s¸ìn
);

244 i‡(
sounddev
 > 0Ë
	`˛o£
(sounddev);

245 
	`gp2x_usbjoy_deöô
();

246 
	}
}

250 
	$˝u˘æ_öô
()

252 
	}
}

254 
	$˝u˘æ_deöô
()

256 
	}
}

258 
	$£t_FCLK
(
MHZ
)

260 
	}
}

262 
	$£t_RAM_Timögs
(
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
)

264 
	}
}

266 
	$£t_gamma
(
g100
)

268 
	}
}

270 
	$£t_LCD_cu°om_øã
(
lcd_øã_t
 
øã
)

272 
	}
}

274 
	$un£t_LCD_cu°om_øã
()

276 
	}
}

279 
	$mmuhack
()

282 
	}
}

284 
	$mmuunhack
()

287 
	}
}

289 
	$mem£t32
(*
de°
, 
c
, 
cou¡
)

291 
	`mem£t
(
de°
, 
c
, 
cou¡
*4);

292 
	}
}

294 
	$•íd_cy˛es
(
c
)

296 
	`u¶ìp
(
c
/200);

297 
	}
}

299 
	$c⁄vît2RGB555
(*
d°
, *
§c
, *
∑l
, 
cou¡
)

301 
cou¡
--)

302 *
d°
++ = 
∑l
[*
§c
++];

303 
	}
}

306 
	$so·_sˇÀ
(*
d°
, *
∑l
, 
löe_offs
, 
löes
)

308 *
§c
 = (*)
d°
 + (
löe_offs
 + 
löes
) * 320;

309 *
de°
 = (*)
d°
 + (
löe_offs
 + 
löes
) * 320;

310 
cou¡
 = 
löes
*320;

312 
cou¡
--)

313 *(--
de°
Ë
∑l
[*(--
§c
)];

314 
	}
}

	@drivers/gp2x_test/throttle.c

1 
	~<sys/time.h
>

2 
	~<uni°d.h
>

4 
	~"../gp2x/maö.h
"

5 
	~"../gp2x/gp2x.h
"

6 
	~"../gp2x/thrŸée.h
"

9 
uöt8
 
PAL
;

10 
FSkù
;

11 
	gu£c_aim
 = 0, 
	gu£c_d⁄e
 = 0;

12 
	gskù_cou¡
 = 0;

14 
	$Re‰eshThrŸéeFPS
()

16 
u£c_aim
 = 
u£c_d⁄e
 = 
skù_cou¡
 = 0;

17 
	}
}

19 
	$S≥edThrŸée
()

21 
timevÆ
 
tv_¥ev
;

22 
timevÆ
 
tv_now
;

23 
dñè_nom
 = 
PAL
 ? 19997 : 16639;

26 i‡(
u£c_d⁄e
 == 0) {

27 
u£c_d⁄e
 = 1;

28 
	`gëtimeofday
(&
tv_¥ev
, 0);

32 
	`gëtimeofday
(&
tv_now
, 0);

34 
u£c_aim
 +
dñè_nom
;

35 i‡(
tv_now
.
tv_£c
 !
tv_¥ev
.tv_sec)

36 
u£c_d⁄e
 += 1000000;

37 
u£c_d⁄e
 +
tv_now
.
tv_u£c
 - 
tv_¥ev
.tv_usec;

39 #ifde‡
FRAMESKIP


40 i‡(
Sëtögs
.
‰ameskù
 >= 0)

42 i‡(
skù_cou¡
 >
Sëtögs
.
‰ameskù
)

43 
skù_cou¡
 = 0;

45 
skù_cou¡
++;

46 
FSkù
 = 1;

49 i‡(
u£c_d⁄e
 > 
u£c_aim
 + 1024*4)

52 i‡(
u£c_d⁄e
 - 
u£c_aim
 > 1024*32)

53 
u£c_d⁄e
 = 
u£c_aim
 = 1;

55 
FSkù
 = 1;

56 
tv_¥ev
 = 
tv_now
;

61 
tv_¥ev
 = 
tv_now
;

62 
u£c_d⁄e
 < 
u£c_aim
)

64 
	`u¶ìp
(300);

65 
	`gëtimeofday
(&
tv_now
, 0);

67 i‡(
tv_now
.
tv_£c
 !
tv_¥ev
.tv_sec)

68 
u£c_d⁄e
 += 1000000;

69 
u£c_d⁄e
 +
tv_now
.
tv_u£c
 - 
tv_¥ev
.tv_usec;

70 
tv_¥ev
 = 
tv_now
;

72 
u£c_d⁄e
 = u£c_d⁄ê- 
u£c_aim
 + 1;

73 
u£c_aim
 = 0;

74 
	}
}

	@endian.c

25 
	~<°dio.h
>

26 
	~"ty≥s.h
"

27 
	~"ídün.h
"

29 
uöt8
 
	gs
[4];

31 
	$wrôe16
(
uöt16
 
b
, 
FILE
 *
Â
)

33 
s
[0]=
b
;

34 
s
[1]=
b
>>8;

35 ((
	`fwrôe
(
s
,1,2,
Â
)<2)?0:2);

36 
	}
}

38 
	$wrôe32
(
uöt32
 
b
, 
FILE
 *
Â
)

40 
s
[0]=
b
;

41 
s
[1]=
b
>>8;

42 
s
[2]=
b
>>16;

43 
s
[3]=
b
>>24;

44 ((
	`fwrôe
(
s
,1,4,
Â
)<4)?0:4);

45 
	}
}

47 
	$ªad32
(*
Bufo
, 
FILE
 *
Â
)

49 
uöt32
 
buf
;

50 if(
	`‰ód
(&
buf
,1,4,
Â
)<4)

52 #ifde‡
LSB_FIRST


53 *(
uöt32
*)
Bufo
=
buf
;

55 *(
uöt32
*)
Bufo
=((
buf
&0xFF)<<24)|((buf&0xFF00)<<8)|((buf&0xFF0000)>>8)|((buf&0xFF000000)>>24);

58 
	}
}

60 
	$ªad16
(*
d
, 
FILE
 *
Â
)

62 #ifde‡
LSB_FIRST


63 ((
	`‰ód
(
d
,1,2,
Â
)<2)?0:2);

65 
ªt
;

66 
ªt
=
	`‰ód
(
d
+1,1,1,
Â
);

67 
ªt
+=
	`‰ód
(
d
,1,1,
Â
);

68  
ªt
<2?0:2;

70 
	}
}

	@endian.h

1 
wrôe16
(
uöt16
 
b
, 
FILE
 *
Â
);

2 
wrôe32
(
uöt32
 
b
, 
FILE
 *
Â
);

3 
ªad32
(*
Bufo
, 
FILE
 *
Â
);

5 
	#wrôe32À
 
wrôe32


	)

6 
	#ªad32À
 
ªad32


	)

	@fce.c

22 
	~<°rög.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

26 
	~"ty≥s.h
"

27 
	~"x6502.h
"

28 
	~"f˚.h
"

29 
	~"f˚u098.h
"

30 
	~"sound.h
"

31 
	~"svga.h
"

32 
	~"√çœy.h
"

33 
	~"gíîÆ.h
"

34 
	~"ídün.h
"

35 
	~"vîsi⁄.h
"

36 
	~"mem‹y.h
"

38 
	~"ˇπ.h
"

39 
	~"nsf.h
"

40 
	~"fds.h
"

41 
	~"öes.h
"

42 
	~"unif.h
"

43 
	~"vsuni.h
"

44 
	~"chót.h
"

46 
	~"°©e.h
"

47 
	~"video.h
"

48 
	~"öput.h
"

49 
	~"fûe.h
"

50 
	~"¸c32.h
"

51 
	~"µu.h
"

52 
	~"µu098.h
"

54 
	~"∑Àâe.h
"

55 
	~"movõ.h
"

57 
	~"d¥ötf.h
"

59 #ifde‡
GP2X


60 
	~"drivîs/gp2x/asmutûs.h
"

63 
	#PÆ
 (
PALRAM
)

	)

66 (*
Re‰eshLöe
)(
uöt8
 *
P
, 
uöt32
 
vofs
Ë
NULL
;

67 
	`PRe‰eshLöe
();

69 
	`Re£tPPU
();

70 
	`PowîPPU
();

72 
uöt64
 
time°ampba£
=0;

74 
µudód
=1;

75 
kook
=0;

77 
MMC5Hack
;

78 
uöt32
 
MMC5HackVROMMask
;

79 
uöt8
 *
MMC5HackExNTARAMPå
;

80 
uöt8
 *
MMC5HackVROMPTR
;

81 
uöt8
 
MMC5HackCHRMode
=0;

82 
uöt8
 
MMC5HackSPMode
;

83 
uöt8
 
MMC5HackSPS¸ﬁl
;

84 
uöt8
 
MMC5HackSPPage
;

86 
uöt8
 *
MMC5SPRVPage
[8];

87 
uöt8
 *
MMC5BGVPage
[8];

90 
uöt8
 
VRAMBuf„r
,
PPUGíL©ch
;

92 
uöt8
 *
v«∑ge
[4];

93 
uöt8
 
PPUNTARAM
;

94 
uöt8
 
PPUCHRRAM
;

97 
uöt8
 
dìmp
=0;

98 
dìmp˙t
[8];

100 
FCEUGI
 
FCEUGameInfo
;

101 (*
GameI¡îÁ˚
)(
h
, *
∑øm
);

103 
	`FP_FASTAPASS
(1Ë(*
PPU_hook
)(
uöt32
 
A
);

105 (*
GameSèãRe°‹e
)(
vîsi⁄
);

106 (*
GameHBIRQHook
)(), (*
GameHBIRQHook2
)();

108 
ªadfunc
 
ARód
[0x10000];

109 
wrôefunc
 
BWrôe
[0x10000];

110 
ªadfunc
 *
ARódG
;

111 
wrôefunc
 *
BWrôeG
;

112 
RWWøp
=0;

114 #ifde‡
ASM_6502


115 #ifde‡
DEBUG_ASM_6502


116 
uöt8
 
√s_öã∫Æ_øm
[0x800];

118 
	$asm˝u_upd©e
(
öt32
 
cy˛es
)

121 
fh˙t
-=
cy˛es
;

122 if(
fh˙t
<=0)

124 
	`FømeSoundUpd©e
();

125 
fh˙t
+=
fhöc
;

128 if(
PCMIRQCou¡
>0)

130 
PCMIRQCou¡
-=
cy˛es
;

131 if(
PCMIRQCou¡
<=0)

133 
vdis
=1;

134 if((
PSG
[0x10]&0x80) && !(PSG[0x10]&0x40))

136 
uöt8
 
SIRQSèt
;

137 
SIRQSèt
|=0x80;

138 
	`X6502_IRQBegö
(
FCEU_IQDPCM
);

142 
	}
}

145 
	$asm˝u_u≈ack
()

147 
√s_ªgi°îs
[0] = 
X
.
A
 << 24;

148 
√s_ªgi°îs
[1] = 
X
.X;

149 
√s_ªgi°îs
[2] = 
X
.
Y
;

150 
pc_ba£
 = 0;

151 
√s_ªgi°îs
[3] = 
X
.
PC
;

152 
	`X6502_Reba£_a
();

153 
√s_ªgi°îs
[4] = 
X
.
S
 << 24;

154 
√s_ªgi°îs
[4]|
X
.
IRQlow
 << 8;

155 i‡(
M≠IRQHook
)

156 
√s_ªgi°îs
[4] |= 1<<16;

157 
√s_ªgi°îs
[7] = (
uöt32
)
X
.
cou¡
 << 16;

160 
√s_ªgi°îs
[4]|
X
.
P
 & 0x5d;

161 
√s_ªgi°îs
[5] = 
X
.
P
 << 24;

162 i‡(!(
X
.
P
&0x02)Ë
√s_ªgi°îs
[5] |= 1;

164 #ifde‡
DEBUG_ASM_6502


165 
	`mem˝y
(
√s_öã∫Æ_øm
, 
RAM
, 0x800);

167 
	}
}

169 
	$asm˝u_∑ck
()

171 
X
.
A
 = 
√s_ªgi°îs
[0] >> 24;

172 
X
.X = 
√s_ªgi°îs
[1];

173 
X
.
Y
 = 
√s_ªgi°îs
[2];

174 
X
.
PC

√s_ªgi°îs
[3] - 
pc_ba£
;

175 
X
.
S
 = 
√s_ªgi°îs
[4] >> 24;

176 
X
.
IRQlow
 = 
√s_ªgi°îs
[4] >> 8;

177 
X
.
cou¡
 = (
öt32
Ë
√s_ªgi°îs
[7] >> 16;

180 
X
.
P
 = 
√s_ªgi°îs
[4] & 0x5d;

181 i‡–
√s_ªgi°îs
[5]&0x80000000Ë
X
.
P
 |= 0x80;

182 i‡(!(
√s_ªgi°îs
[5]&0x000000ff)Ë
X
.
P
 |= 0x02;

183 
	}
}

186 
	$DECLFW
(
BNuŒ
)

189 
	}
}

191 
	$DECLFR
(
ANuŒ
)

194 (
X
.
DB
);

195 
	}
}

197 
	$AŒocGíõRW
()

199 if(!(
ARódG
=
	`FCEU_mÆloc
(0x8000*(
ªadfunc
))))

201 if(!(
BWrôeG
=
	`FCEU_mÆloc
(0x8000*(
wrôefunc
))))

203 
RWWøp
=1;

205 
	}
}

207 
	$FlushGíõRW
()

209 
öt32
 
x
;

211 if(
RWWøp
)

213 
x
=0;x<0x8000;x++)

215 
ARód
[
x
+0x8000]=
ARódG
[x];

216 
BWrôe
[
x
+0x8000]=
BWrôeG
[x];

218 #ifde‡
ASM_6502


219 
	`GíõSëPages
(1);

221 
	`‰ì
(
ARódG
);

222 
	`‰ì
(
BWrôeG
);

223 
ARódG
=0;

224 
BWrôeG
=0;

225 
RWWøp
=0;

227 
	}
}

229 
ªadfunc
 
	$FASTAPASS
(1Ë
	$GëRódH™dÀr
(
öt32
 
a
)

231 if(
a
>=0x8000 && 
RWWøp
)

232  
ARódG
[
a
-0x8000];

234  
ARód
[
a
];

235 
	}
}

237 
	$FASTAPASS
(3Ë
	$SëRódH™dÀr
(
öt32
 
°¨t
, i¡32 
íd
, 
ªadfunc
 
func
)

239 
öt32
 
x
;

241 if(!
func
)

242 
func
=
ANuŒ
;

244 if(
RWWøp
)

245 
x
=
íd
;x>=
°¨t
;x--)

247 if(
x
>=0x8000)

248 
ARódG
[
x
-0x8000]=
func
;

250 
ARód
[
x
]=
func
;

254 
x
=
íd
;x>=
°¨t
;x--)

255 
ARód
[
x
]=
func
;

256 
	}
}

258 
wrôefunc
 
	$FASTAPASS
(1Ë
	$GëWrôeH™dÀr
(
öt32
 
a
)

260 if(
RWWøp
 && 
a
>=0x8000)

261  
BWrôeG
[
a
-0x8000];

263  
BWrôe
[
a
];

264 
	}
}

266 
	$FASTAPASS
(3Ë
	$SëWrôeH™dÀr
(
öt32
 
°¨t
, i¡32 
íd
, 
wrôefunc
 
func
)

268 
öt32
 
x
;

270 if(!
func
)

271 
func
=
BNuŒ
;

273 if(
RWWøp
)

274 
x
=
íd
;x>=
°¨t
;x--)

276 if(
x
>=0x8000)

277 
BWrôeG
[
x
-0x8000]=
func
;

279 
BWrôe
[
x
]=
func
;

282 
x
=
íd
;x>=
°¨t
;x--)

283 
BWrôe
[
x
]=
func
;

284 
	}
}

286 
uöt8
 
	gvtoggÀ
=0;

287 
uöt8
 
	gXOff£t
=0;

289 
uöt32
 
	gTempAddr
,
	gRe‰eshAddr
;

294 
	gsˇ∆öe
;

296 
uöt8
 
	gGameMemBlock
[131072] 
__©åibuã__
 ((
Æig√d
 (4)));

297 
uöt8
 
	gNTARAM
[0x800] 
__©åibuã__
 ((
Æig√d
 (4)));

298 
uöt8
 
	gPALRAM
[0x20] 
__©åibuã__
 ((
Æig√d
 (4)));

299 #i‡!
deföed
(
ASM_6502
Ë|| deföed(
DEBUG_ASM_6502
)

300 
uöt8
 
	gRAM
[0x800] 
__©åibuã__
 ((
Æig√d
 (4)));

303 
uöt8
 
	gPPU
[4];

304 
uöt8
 
	gPPUSPL
;

306 
uöt8
 
	gPAL
=0;

309 
	#MMC5BGVRAMADR
(
V
Ë&
MMC5BGVPage
[(V)>>10][(V)]

	)

310 
	#VRAMADR
(
V
Ë&
VPage
[(V)>>10][(V)]

	)

312 
	glöe°¨âs
;

313 
	gtofix
=0;

315 
uöt8
 *
	gPlöef
;

317 
uöt8
 
•æöebuf
[256+8];

318 
öt32
 
•hôx
;

319 
uöt8
 
•hôd©a
;

321 
•‹k
;

326 
	$Re£tRL
(
uöt8
 *
èrgë
)

328 if(
I≈utSˇ∆öeHook
)

329 
	`I≈utSˇ∆öeHook
(0,0,0,0);

330 
Plöef
=
èrgë
;

331 
löe°¨âs
=
time°amp
*48+
	`X6502_GëCy˛eCou¡
();

332 
tofix
=1;

333 
	}
}

335 
INLINE
 
Fixô1
();

338 
	$FakedLöeUpd©e
()

340 
	#TOFIXNUM
 (272-0x4)

	)

341 
œ°pixñ
;

343 i‡(
sˇ∆öe
 >= 240) ;

345 i‡(
tofix
 || 
•hôx
 != 0x100)

347 
œ°pixñ
 = (
time°amp
*48-
löe°¨âs
)>>4;

348 i‡(
PAL
Ë
œ°pixñ
 +=Üastpixel>>4;

352 i‡(
tofix
 && 
œ°pixñ
>=
TOFIXNUM
)

354 
	`Fixô1
();

355 
tofix
=0;

359 if(
•hôx
!=0x100)

361 
l
=
œ°pixñ
-16;

362 
x
;

364 
x
=
•hôx
;x<(•hôx+8Ë&& x<
l
;x++)

366 if((
•hôd©a
&(0x80>>(
x
-
•hôx
))Ë&& !(
Plöef
[x]&64))

368 
PPU_°©us
|=0x40;

369 
•hôx
=0x100;

374 
	}
}

377 
	$DECLFW
(
BRAML
)

379 
RAM
[
A
]=
V
;

380 
	}
}

382 
	$DECLFW
(
BRAMH
)

384 
RAM
[
A
&0x7FF]=
V
;

385 
	}
}

387 
	$DECLFR
(
ARAML
)

389  
RAM
[
A
];

390 
	}
}

392 
	$DECLFR
(
ARAMH
)

394  
RAM
[
A
&0x7FF];

395 
	}
}

398 
	$DECLFR
(
A2002
)

401 
uöt8
 
ªt
;

403 
	`FakedLöeUpd©e
();

404 
ªt
 = 
PPU_°©us
;

405 
ªt
|=
PPUGíL©ch
&0x1F;

406 
vtoggÀ
=0;

407 
PPU_°©us
&=0x7F;

408 
PPUGíL©ch
=
ªt
;

410  
ªt
;

411 
	}
}

413 
	$DECLFR
(
A200x
)

416 
	`FakedLöeUpd©e
();

417  
PPUGíL©ch
;

418 
	}
}

420 
	$DECLFR
(
A2007
)

423 
uöt8
 
ªt
;

424 
uöt32
 
tmp
=
Re‰eshAddr
&0x3FFF;

426 
	`FakedLöeUpd©e
();

428 
ªt
=
VRAMBuf„r
;

430 if(
PPU_hook
Ë
	`PPU_hook
(
tmp
);

431 
PPUGíL©ch
=
VRAMBuf„r
;

432 if(
tmp
<0x2000)

434 
VRAMBuf„r
=
VPage
[
tmp
>>10][tmp];

438 
VRAMBuf„r
=
v«∑ge
[(
tmp
>>10)&0x3][tmp&0x3FF];

441 i‡(
INC32
Ë
Re‰eshAddr
+=32;

442 
Re‰eshAddr
++;

443 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

444 
	`d¥ötf
("∏[2007] %02x",
ªt
);

445  
ªt
;

446 
	}
}

448 
	$DECLFW
(
B2000
)

451 
	`FakedLöeUpd©e
();

452 
PPUGíL©ch
=
V
;

453 
PPU
[0]=
V
;

454 
TempAddr
&=0xF3FF;

455 
TempAddr
|=(
V
&3)<<10;

456 
	}
}

458 
	$DECLFW
(
B2001
)

461 
	`FakedLöeUpd©e
();

462 
PPUGíL©ch
=
V
;

463 
PPU
[1]=
V
;

464 if(
V
&0xE0)

465 
dìmp
=
V
>>5;

467 
	}
}

469 
	$DECLFW
(
B2002
)

472 
PPUGíL©ch
=
V
;

473 
	}
}

475 
	$DECLFW
(
B2003
)

478 
PPUGíL©ch
=
V
;

479 
PPU
[3]=
V
;

480 
PPUSPL
=
V
&0x7;

481 
	}
}

483 
	$DECLFW
(
B2004
)

486 
PPUGíL©ch
=
V
;

487 if(
PPUSPL
>=8)

489 if(
PPU
[3]>=8)

490 
SPRAM
[
PPU
[3]]=
V
;

495 
SPRAM
[
PPUSPL
]=
V
;

497 
PPU
[3]++;

498 
PPUSPL
++;

500 
	}
}

502 
	$DECLFW
(
B2005
)

505 
uöt32
 
tmp
=
TempAddr
;

506 
	`FakedLöeUpd©e
();

507 
PPUGíL©ch
=
V
;

508 i‡(!
vtoggÀ
)

510 
tmp
&=0xFFE0;

511 
tmp
|=
V
>>3;

512 
XOff£t
=
V
&7;

516 
tmp
&=0x8C1F;

517 
tmp
|=((
V
&~0x7)<<2);

518 
tmp
|=(
V
&7)<<12;

521 
TempAddr
=
tmp
;

522 
vtoggÀ
^=1;

523 
	}
}

525 
	$DECLFW
(
B2006
)

528 
	`FakedLöeUpd©e
();

530 
PPUGíL©ch
=
V
;

531 if(!
vtoggÀ
)

533 
TempAddr
&=0x00FF;

534 
TempAddr
|=(
V
&0x3f)<<8;

538 
TempAddr
&=0xFF00;

539 
TempAddr
|=
V
;

541 
Re‰eshAddr
=
TempAddr
;

542 if(
PPU_hook
)

543 
	`PPU_hook
(
Re‰eshAddr
);

545 
vtoggÀ
^=1;

546 
	}
}

548 
	$DECLFW
(
B2007
)

551 
uöt32
 
tmp
=
Re‰eshAddr
&0x3FFF;

552 
PPUGíL©ch
=
V
;

553 if(
tmp
>=0x3F00)

556 if(!(
tmp
&0xf))

557 
PALRAM
[0x00]=PALRAM[0x04]=PALRAM[0x08]=PALRAM[0x0C]=
V
&0x3f;

558 if(
tmp
&3Ë
PALRAM
[—mp&0x1f)]=
V
&0x3f;

560 if(
tmp
<0x2000)

562 if(
PPUCHRRAM
&(1<<(
tmp
>>10)))

563 
VPage
[
tmp
>>10][tmp]=
V
;

567 if(
PPUNTARAM
&(1<<((
tmp
&0xF00)>>10)))

568 
v«∑ge
[((
tmp
&0xF00)>>10)][tmp&0x3FF]=
V
;

570 i‡(
INC32
Ë
Re‰eshAddr
+=32;

571 
Re‰eshAddr
++;

572 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

573 
	}
}

575 
	$DECLFW
(
B4014
)

577 
uöt32
 
t
=
V
<<8;

578 
x
;

580 
x
=0;x<256;x++)

581 
	`B2004
(0x2004,
X
.
DB
=
ARód
[
t
+
x
](t+x));

582 
	`X6502_AddCy˛es
(512);

583 
	}
}

585 
	$BGRídî
(
uöt8
 *
èrgë
)

587 
uöt32
 
ãm
, 
vofs
;

588 
vofs
=((
PPU
[0]&0x10)<<8Ë| ((
Re‰eshAddr
>>12)&7);

590 
PÆ
[0]|=64;

591 
PÆ
[4]|=64;

592 
PÆ
[8]|=64;

593 
PÆ
[0xC]|=64;

594 
	`Re‰eshLöe
(
èrgë
-
XOff£t
, 
vofs
);

595 
PÆ
[0]&=63;

596 
PÆ
[4]&=63;

597 
PÆ
[8]&=63;

598 
PÆ
[0xC]&=63;

600 if(!(
PPU
[1]&2))

602 
ãm
=
PÆ
[0]|0x40;

603 
ãm
|=tem<<8;

604 
ãm
|=tem<<16;

605 *(
uöt32
 *)
èrgë
=*(uöt32 *)—¨gë+4)=
ãm
;

607 
	}
}

609 #ifde‡
FRAMESKIP


610 
	gFSkù
=0;

611 
	$FCEUI_FømeSkù
(
x
)

613 
FSkù
=
x
;

614 
	}
}

618 
	$LöeUpd©e
(
uöt8
 *
èrgë
)

620 
uöt32
 
ãm
;

621 
y
;

627 if(
FSkù
)

629 
y
=()
SPRAM
[0] + 1;

630 if(
sˇ∆öe
==
y
 && 
S¥ôeON
Ë
PPU_°©us
|=0x40;

634 if(
sˇ∆öe
 < 
FSëtögs
.
Fú°SLöe
 || sˇ∆öê> FSëtögs.
La°SLöe
)

636 if(
PPU_hook
)

637 
	`PRe‰eshLöe
();

638 
y
=()
SPRAM
[0] + 1;

639 if(
sˇ∆öe
==
y
 && 
S¥ôeON
Ë
PPU_°©us
|=0x40;

643 if(
S¸ìnON
)

645 
	`BGRídî
(
èrgë
);

649 
ãm
=
PÆ
[0]|0x40;

650 
ãm
|=tem << 8;

651 
ãm
|=tem << 16;

652 
	`FCEU_dwmem£t
(
èrgë
,
ãm
,256);

656 if(
I≈utSˇ∆öeHook
)

657 
	`I≈utSˇ∆öeHook
(
èrgë
,
•‹k
?
•æöebuf
:0,
löe°¨âs
,256);

658 
	}
}

661 
	$LöeUpd©eEnd
(
uöt8
 *
èrgë
)

663 #ifde‡
GP2X


664 if(
S¸ìnON
 || 
S¥ôeON
)

666 if(
PPU
[1]&0x01)

667 
	`block_™d
(
èrgë
, 256, 0x30);

669 if((
PPU
[1]>>5)==0x7)

670 
	`block_‹
(
èrgë
, 256, 0xc0);

671 if(
PPU
[1]&0xE0)

672 
	`block_‹
(
èrgë
, 256, 0x40);

674 
	`block_™d‹
(
èrgë
, 256, 0x3f, 0x80);

676 
x
;

678 if(
S¸ìnON
 || 
S¥ôeON
)

680 if(
PPU
[1]&0x01)

682 
x
=63;x>=0;x--)

683 *(
uöt32
 *)&
èrgë
[
x
<<2]=(*(uint32*)&target[x<<2])&0x30303030;

686 if((
PPU
[1]>>5)==0x7)

688 
x
=63;x>=0;x--)

689 *(
uöt32
 *)&
èrgë
[
x
<<2]=((*(uint32*)&target[x<<2])&0x3f3f3f3f)|0xc0c0c0c0;

691 if(
PPU
[1]&0xE0)

692 
x
=63;x>=0;x--)

693 *(
uöt32
 *)&
èrgë
[
x
<<2]=(*(uint32*)&target[x<<2])|0x40404040;

695 
x
=63;x>=0;x--)

696 *(
uöt32
 *)&
èrgë
[
x
<<2]=((*(uint32*)&target[x<<2])&0x3f3f3f3f)|0x80808080;

700 ((
uöt32
 *)
èrgë
)[-2]=((uint32 *)target)[-1]=0;

701 ((
uöt32
 *)
èrgë
)[64]=((uint32 *)target)[65]=0;

702 
	}
}

704 
	#PAL
(
c
Ë((c)+
cc
)

	)

707 
	$PRe‰eshLöe
()

709 
uöt32
 
vofs
;

710 
X1
;

711 
vofs
=((
PPU
[0]&0x10)<<8Ë| ((
Re‰eshAddr
>>12)&7);

712 (*
PPU_hook_
)(
uöt32
 
A
Ë
PPU_hook
;

715 
X1
=33;X1;X1--)

717 
uöt32
 
zz2
;

718 
uöt32
 
vadr
;

720 
zz2
=(
Re‰eshAddr
>>10)&3;

721 
	`PPU_hook_
(0x2000|(
Re‰eshAddr
&0xFFF));

723 
vadr
=(
v«∑ge
[
zz2
][
Re‰eshAddr
&0x3ff]<<4)+
vofs
;

725 
	`PPU_hook_
(
vadr
);

727 if((
Re‰eshAddr
&0x1f)==0x1f)

728 
Re‰eshAddr
^=0x41F;

730 
Re‰eshAddr
++;

732 
	}
}

738 
	$Re‰eshLöe_MMC5Hack1
(
uöt8
 *
P
, 
uöt32
 
vofs
)

740 
öt8
 
toch™ge
, 
X1
;

742 
toch™ge
=
MMC5HackSPMode
&0x1F;

744 
X1
=33;X1;X1--,
P
+=8)

746 
uöt8
 *
C
;

747 
uöt8
 
cc
,
zz
,
zz2
;

748 
uöt32
 
vadr
;

750 if((
toch™ge
<=0 && 
MMC5HackSPMode
&0x40) ||

751 (
toch™ge
>0 && !(
MMC5HackSPMode
&0x40)))

753 
uöt8
 
xs
,
ys
;

755 
xs
=33-
X1
;

756 
ys
=((
sˇ∆öe
>>3)+
MMC5HackSPS¸ﬁl
)&0x1F;

757 if(
ys
>=0x1E) ys-=0x1E;

758 
vadr
=(
MMC5HackExNTARAMPå
[
xs
|(
ys
<<5)]<<4)+(
vofs
&7);

760 
C
 = 
MMC5HackVROMPTR
+
vadr
;

761 
C
 +((
MMC5HackSPPage
 & 0x3‡& 
MMC5HackVROMMask
) << 12);

763 
cc
=
MMC5HackExNTARAMPå
[0x3c0+(
xs
>>2)+((
ys
&0x1C)<<1)];

764 
cc
=((c¯>> ((
xs
&2Ë+ ((
ys
&0x2)<<1))) &3) <<2;

768 
zz
=
Re‰eshAddr
&0x1F;

769 
zz2
=(
Re‰eshAddr
>>10)&3;

770 
vadr
=(
v«∑ge
[
zz2
][
Re‰eshAddr
&0x3ff]<<4)+
vofs
;

771 
C
 = 
	`MMC5BGVRAMADR
(
vadr
);

772 
cc
=
v«∑ge
[
zz2
][0x3c0+(
zz
>>2)+((
Re‰eshAddr
&0x380)>>4)];

773 
cc
=((c¯>> ((
zz
&2Ë+ ((
Re‰eshAddr
&0x40)>>4))) &3) <<2;

775 
	~"f˚löe.h
"

777 if((
Re‰eshAddr
&0x1f)==0x1f)

778 
Re‰eshAddr
^=0x41F;

780 
Re‰eshAddr
++;

781 
toch™ge
--;

783 
	}
}

785 
	$Re‰eshLöe_MMC5Hack2
(
uöt8
 *
P
, 
uöt32
 
vofs
)

787 
öt8
 
toch™ge
, 
X1
;

789 
toch™ge
=
MMC5HackSPMode
&0x1F;

791 
X1
=33;X1;X1--,
P
+=8)

793 
uöt8
 *
C
;

794 
uöt8
 
cc
;

795 
uöt8
 
zz2
;

796 
uöt32
 
vadr
;

798 if((
toch™ge
<=0 && 
MMC5HackSPMode
&0x40) ||

799 (
toch™ge
>0 && !(
MMC5HackSPMode
&0x40)))

801 
uöt8
 
xs
,
ys
;

803 
xs
=33-
X1
;

804 
ys
=((
sˇ∆öe
>>3)+
MMC5HackSPS¸ﬁl
)&0x1F;

805 if(
ys
>=0x1E) ys-=0x1E;

806 
vadr
=(
MMC5HackExNTARAMPå
[
xs
|(
ys
<<5)]<<4)+(
vofs
&7);

808 
C
 = 
MMC5HackVROMPTR
+
vadr
;

809 
C
 +((
MMC5HackSPPage
 & 0x3‡& 
MMC5HackVROMMask
) << 12);

811 
cc
=
MMC5HackExNTARAMPå
[0x3c0+(
xs
>>2)+((
ys
&0x1C)<<1)];

812 
cc
=((c¯>> ((
xs
&2Ë+ ((
ys
&0x2)<<1))) &3) <<2;

816 
C
=
MMC5HackVROMPTR
;

817 
zz2
=(
Re‰eshAddr
>>10)&3;

818 
vadr
 = (
v«∑ge
[
zz2
][
Re‰eshAddr
 & 0x3ff] << 4Ë+ 
vofs
;

819 
C
 +(((
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff]) & 0x3f &

820 
MMC5HackVROMMask
Ë<< 12Ë+ (
vadr
 & 0xfff);

821 
vadr
 = (
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff] & 0xC0)>> 4;

822 
cc
 = 
vadr
;

824 
	~"f˚löe.h
"

825 if((
Re‰eshAddr
&0x1f)==0x1f)

826 
Re‰eshAddr
^=0x41F;

828 
Re‰eshAddr
++;

829 
toch™ge
--;

831 
	}
}

833 
	$Re‰eshLöe_MMC5Hack3
(
uöt8
 *
P
, 
uöt32
 
vofs
)

835 
öt8
 
X1
;

837 
X1
=33;X1;X1--,
P
+=8)

839 
uöt8
 *
C
;

840 
uöt8
 
cc
;

841 
uöt8
 
zz2
;

842 
uöt32
 
vadr
;

844 
C
=
MMC5HackVROMPTR
;

845 
zz2
=(
Re‰eshAddr
>>10)&3;

846 
vadr
 = (
v«∑ge
[
zz2
][
Re‰eshAddr
 & 0x3ff] << 4Ë+ 
vofs
;

847 
C
 +(((
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff]) & 0x3f &

848 
MMC5HackVROMMask
Ë<< 12Ë+ (
vadr
 & 0xfff);

849 
vadr
 = (
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff] & 0xC0)>> 4;

850 
cc
 = 
vadr
;

852 
	~"f˚löe.h
"

853 if((
Re‰eshAddr
&0x1f)==0x1f)

854 
Re‰eshAddr
^=0x41F;

856 
Re‰eshAddr
++;

858 
	}
}

860 
	$Re‰eshLöe_MMC5Hack4
(
uöt8
 *
P
, 
uöt32
 
vofs
)

862 
öt8
 
X1
;

864 
X1
=33;X1;X1--,
P
+=8)

866 
uöt8
 *
C
;

867 
uöt8
 
cc
,
zz
,
zz2
;

868 
uöt32
 
vadr
;

870 
zz
=
Re‰eshAddr
&0x1F;

871 
zz2
=(
Re‰eshAddr
>>10)&3;

872 
vadr
=(
v«∑ge
[
zz2
][
Re‰eshAddr
&0x3ff]<<4)+
vofs
;

873 
C
 = 
	`MMC5BGVRAMADR
(
vadr
);

874 
cc
=
v«∑ge
[
zz2
][0x3c0+(
zz
>>2)+((
Re‰eshAddr
&0x380)>>4)];

875 
cc
=((c¯>> ((
zz
&2Ë+ ((
Re‰eshAddr
&0x40)>>4))) &3) <<2;

877 
	~"f˚löe.h
"

879 if((
Re‰eshAddr
&0x1f)==0x1f)

880 
Re‰eshAddr
^=0x41F;

882 
Re‰eshAddr
++;

884 
	}
}

886 
	$Re‰eshLöe_PPU_hook
(
uöt8
 *
P
, 
uöt32
 
vofs
)

888 
öt8
 
X1
;

889 (*
PPU_hook_
)(
uöt32
 
A
Ë
PPU_hook
;

890 
uöt32
 
r‰addr
 = 
Re‰eshAddr
;

891 
uöt8
 *
∑ge
 = 
v«∑ge
[(
r‰addr
>>10)&3];

893 
X1
=33;X1;X1--,
P
+=8)

895 
uöt8
 *
C
;

896 
uöt8
 
cc
,
zz
;

897 
uöt32
 
vadr
;

899 
zz
=
r‰addr
&0x1F;

900 
	`PPU_hook_
(0x2000|(
r‰addr
&0xFFF));

901 
cc
=
∑ge
[0x3c0+(
zz
>>2)+((
r‰addr
&0x380)>>4)];

902 
cc
=((c¯>> ((
zz
&2Ë+ ((
r‰addr
&0x40)>>4))) &3) <<2;

903 
vadr
=(
∑ge
[
r‰addr
&0x3ff]<<4)+
vofs
;

904 
C
 = 
	`VRAMADR
(
vadr
);

906 
	~"f˚löe.h
"

908 
	`PPU_hook_
(
vadr
);

910 if((
r‰addr
&0x1f)==0x1f) {

911 
r‰addr
^=0x41F;

912 
∑ge
 = 
v«∑ge
[(
r‰addr
>>10)&3];

914 
r‰addr
++;

916 
Re‰eshAddr
 = 
r‰addr
;

917 
	}
}

919 
	$Re‰eshLöe_n‹mÆ
(
uöt8
 *
P
, 
uöt32
 
vofs
)

921 
öt8
 
X1
;

922 
uöt32
 
r‰addr
 = 
Re‰eshAddr
;

923 
uöt8
 *
∑ge
 = 
v«∑ge
[(
r‰addr
>>10)&3];

924 
uöt32
 
cc2
=0;

926 i‡((
r‰addr
&0xc)!=0)

927 
cc2
=*(
uöt32
 *Ë(
∑ge
 + ((
r‰addr
&0x380)>>4) + ((rfraddr&0x10)>>2) + 0x3c0);

929 
X1
=33;X1;X1--,
P
+=8)

931 
uöt8
 
cc
,*
C
;

932 
uöt32
 
vadr
;

934 
vadr
=(
∑ge
[
r‰addr
&0x3ff]<<4)+
vofs
;

935 
C
 = 
	`VRAMADR
(
vadr
);

936 i‡((
r‰addr
&0xc)==0)

937 
cc2
=*(
uöt32
 *Ë(
∑ge
 + ((
r‰addr
&0x380)>>4) + ((rfraddr&0x10)>>2) + 0x3c0);

938 
cc
=((
cc2
 >> ((
r‰addr
&2) + ((rfraddr&0x40)>>4) + ((rfraddr&0xc)<<1))) & 3) << 2;

940 
	~"f˚löe.h
"

942 if((
r‰addr
&0x1f)==0x1f) {

943 
r‰addr
^=0x41F;

944 
∑ge
 = 
v«∑ge
[(
r‰addr
>>10)&3];

946 
r‰addr
++;

948 
Re‰eshAddr
 = 
r‰addr
;

949 
	}
}

951 
	$SëRe‰eshLöe
()

953 if(
MMC5Hack
 && 
gíõ°age
!=1)

955 if(
MMC5HackCHRMode
==0 && (
MMC5HackSPMode
&0x80))

957 i‡(
Re‰eshLöe
 !
Re‰eshLöe_MMC5Hack1
Ë
	`¥ötf
("setÑefr RefreshLine_MMC5Hack1\n");

958 
Re‰eshLöe
 = 
Re‰eshLöe_MMC5Hack1
;

960 if(
MMC5HackCHRMode
==1 && (
MMC5HackSPMode
&0x80))

962 i‡(
Re‰eshLöe
 !
Re‰eshLöe_MMC5Hack2
Ë
	`¥ötf
("setÑefr RefreshLine_MMC5Hack2\n");

963 
Re‰eshLöe
 = 
Re‰eshLöe_MMC5Hack2
;

965 if(
MMC5HackCHRMode
==1)

967 i‡(
Re‰eshLöe
 !
Re‰eshLöe_MMC5Hack3
Ë
	`¥ötf
("setÑefr RefreshLine_MMC5Hack3\n");

968 
Re‰eshLöe
 = 
Re‰eshLöe_MMC5Hack3
;

972 i‡(
Re‰eshLöe
 !
Re‰eshLöe_MMC5Hack4
Ë
	`¥ötf
("setÑefr RefreshLine_MMC5Hack4\n");

973 
Re‰eshLöe
 = 
Re‰eshLöe_MMC5Hack4
;

976 if(
PPU_hook
)

978 i‡(
Re‰eshLöe
 !
Re‰eshLöe_PPU_hook
Ë
	`¥ötf
("setÑefr RefreshLine_PPU_hook\n");

979 
Re‰eshLöe
 = 
Re‰eshLöe_PPU_hook
;

983 i‡(
Re‰eshLöe
 !
Re‰eshLöe_n‹mÆ
Ë
	`¥ötf
("setÑefr RefreshLine_normal\n");

984 
Re‰eshLöe
 = 
Re‰eshLöe_n‹mÆ
;

986 
	}
}

988 
INLINE


989 
	$Fixô2
()

991 if(
S¸ìnON
 || 
S¥ôeON
)

993 
uöt32
 
ød
=
Re‰eshAddr
;

994 
ød
&=0xFBE0;

995 
ød
|=
TempAddr
&0x041f;

996 
Re‰eshAddr
=
ød
;

999 
	}
}

1001 
INLINE


1002 
	$Fixô1
()

1004 if(
S¸ìnON
 || 
S¥ôeON
)

1006 
uöt32
 
ød
=
Re‰eshAddr
;

1008 if((
ød
&0x7000)==0x7000)

1010 
ød
^=0x7000;

1011 if((
ød
&0x3E0)==0x3A0)

1013 
ød
^=0x3A0;

1014 
ød
^=0x800;

1018 if((
ød
&0x3E0)==0x3e0)

1019 
ød
^=0x3e0;

1020 
ød
+=0x20;

1024 
ød
+=0x1000;

1025 
Re‰eshAddr
=
ød
;

1028 
	}
}

1035 
	$Re£tM≠pög
()

1037 
x
;

1039 
	`SëRódH™dÀr
(0x0000,0xFFFF,
ANuŒ
);

1040 
	`SëWrôeH™dÀr
(0x0000,0xFFFF,
BNuŒ
);

1042 
	`SëRódH™dÀr
(0,0x7FF,
ARAML
);

1043 
	`SëWrôeH™dÀr
(0,0x7FF,
BRAML
);

1045 
	`SëRódH™dÀr
(0x800,0x1FFF,
ARAMH
);

1046 
	`SëWrôeH™dÀr
(0x800,0x1FFF,
BRAMH
);

1048 
x
=0x2000;x<0x4000;x+=8)

1050 
ARód
[
x
]=
A200x
;

1051 
BWrôe
[
x
]=
B2000
;

1052 
ARód
[
x
+1]=
A200x
;

1053 
BWrôe
[
x
+1]=
B2001
;

1054 
ARód
[
x
+2]=
A2002
;

1055 
BWrôe
[
x
+2]=
B2002
;

1056 
ARód
[
x
+3]=
A200x
;

1057 
BWrôe
[
x
+3]=
B2003
;

1058 
ARód
[
x
+4]=
A200x
;

1059 
BWrôe
[
x
+4]=
B2004
;

1060 
ARód
[
x
+5]=
A200x
;

1061 
BWrôe
[
x
+5]=
B2005
;

1062 
ARód
[
x
+6]=
A200x
;

1063 
BWrôe
[
x
+6]=
B2006
;

1064 
ARód
[
x
+7]=
A2007
;

1065 
BWrôe
[
x
+7]=
B2007
;

1068 
BWrôe
[0x4014]=
B4014
;

1069 
	`SëNESSoundM≠
();

1070 
	`InôülizeI≈ut
();

1071 
	}
}

1073 
	gGameLﬂded
=0;

1074 
	$Clo£Game
()

1076 
	`FCEUI_St›Movõ
();

1077 if(
GameLﬂded
)

1079 if(
FCEUGameInfo
.
ty≥
!=
GIT_NSF
)

1080 
	`FCEU_FlushGameChóts
(0,0);

1081 #ifde‡
NETWORK


1082 if(
FSëtögs
.
Nëw‹kPœy
Ë
	`KûlNë∂ay
();

1084 
	`GameI¡îÁ˚
(
GI_CLOSE
, 0);

1085 
	`Clo£Gíõ
();

1086 
GameLﬂded
=0;

1088 
	}
}

1090 
	$Re£tGameLﬂded
()

1092 if(
GameLﬂded
Ë
	`Clo£Game
();

1093 
GameSèãRe°‹e
=0;

1094 
PPU_hook
=0;

1095 
GameHBIRQHook
=
GameHBIRQHook2
=0;

1096 
GameExpSound
.
Fûl
=0;

1097 
GameExpSound
.
RCh™ge
=0;

1098 if(
GameExpSound
.
Kûl
)

1099 
GameExpSound
.
	`Kûl
();

1100 
GameExpSound
.
Kûl
=0;

1101 
M≠IRQHook
=0;

1102 
MMC5Hack
=0;

1103 
PAL
&=1;

1104 
∑À
=0;

1106 
FCEUGameInfo
.
«me
=0;

1107 
FCEUGameInfo
.
ty≥
=
GIT_CART
;

1108 
FCEUGameInfo
.
vidsys
=
GIV_USER
;

1109 
FCEUGameInfo
.
öput
[0]=FCEUGameInfo.input[1]=-1;

1110 
FCEUGameInfo
.
öputfc
=-1;

1112 
FCEUGameInfo
.
soundch™
=0;

1113 
FCEUGameInfo
.
soundøã
=0;

1114 
FCEUGameInfo
.
c•ecül
=0;

1115 
	}
}

1117 
	gœ°LﬂdedGameName
 [2048];

1118 
	gLﬂdGameLa°Eº‹
 = 0;

1119 
UNIFLﬂd
(c⁄° *
«me
, 
Â
);

1120 
iNESLﬂd
(c⁄° *
«me
, 
Â
);

1121 
FDSLﬂd
(c⁄° *
«me
, 
Â
);

1122 
NSFLﬂd
(
Â
);

1124 
FCEUGI
 *
	$FCEUI_LﬂdGame
(*
«me
)

1126 
«me2
[512];

1127 
have_movõ
 = 0, 
have_ùs
 = 0;

1128 
Â
;

1131 
LﬂdGameLa°Eº‹
 = 0;

1132 
	`Re£tGameLﬂded
();

1134 
	`°∫˝y
(
«me2
, 
«me
, (name2));

1135 
«me2
[(name2)-1] = 0;

1137 
Â
=
	`FCEU_f›í
(
«me2
,"rb");

1138 if(!
Â
)

1140 
	`FCEU_PrötEº‹
("Eº‹ o≥nög \"%s\"!",
«me
);

1141 
LﬂdGameLa°Eº‹
 = 1;

1146 *
p
 = 
«me2
 + 
	`°æí
(name2) - 4;

1147 i‡(
	`°rˇ£cmp
(
p
, ".fcm"Ë=0Ë
	`¥ötf
("movõ dëe˘ed\n"), 
have_movõ
 = 1;

1148 i‡(
	`°rˇ£cmp
(
p
, ".ùs"Ë=0Ë
	`¥ötf
("ù†dëe˘ed\n"), 
have_ùs
 = 1;

1149 i‡(
have_movõ
 || 
have_ùs
)

1152 
	`FCEU_f˛o£
(
Â
);

1153 *
p
 = 0;

1154 
Â
=
	`FCEU_f›í
(
«me2
,"rb");

1155 i‡(!
Â
 && 
p
 - 
«me2
 > 2)

1157 
p
--;Ö > 
«me2
 && *p != '.';Ö--);

1158 *
p
 = 0;

1159 
Â
=
	`FCEU_f›í
(
«me2
,"rb");

1161 i‡(!
Â
) {

1162 
	`¥ötf
("no ROM for ips/movie\n");

1163 
LﬂdGameLa°Eº‹
 = 2;

1170 i‡(
have_ùs
)

1172 
	`FCEU_f˛o£
(
Â
);

1173 
FILE
 *
ùs
 = 
	`f›í
(
«me
, "rb");

1174 i‡(!
ùs
)  0;

1175 
Â
=
	`FCEU_f›í_f‹˚mem
(
«me2
);

1176 i‡(!
Â
Ë{ 
	`f˛o£
(
ùs
);  0; }

1177 
	`AµlyIPS
(
ùs
, 
Â
);

1180 
	`GëFûeBa£
(
«me2
);

1181 if(
	`iNESLﬂd
(
«me2
,
Â
))

1182 
ídl£q
;

1183 if(
	`NSFLﬂd
(
Â
))

1184 
ídl£q
;

1185 if(
	`FDSLﬂd
(
«me2
,
Â
))

1186 
ídl£q
;

1187 if(
	`UNIFLﬂd
(
«me2
,
Â
))

1188 
ídl£q
;

1190 
	`FCEU_PrötEº‹
("AnÉrror occurred whileÜoadingÅhe file.");

1191 
	`FCEU_f˛o£
(
Â
);

1193 i‡(
LﬂdGameLa°Eº‹
 == 0) LoadGameLastError = 3;

1196 
ídl£q
:

1197 
	`FCEU_f˛o£
(
Â
);

1198 
GameLﬂded
=1;

1200 
	`FCEU_Re£tVidSys
();

1201 if(
FCEUGameInfo
.
ty≥
!=
GIT_NSF
)

1202 if(
FSëtögs
.
GameGíõ
)

1203 
	`O≥nGíõ
();

1205 
	`PowîNES
();

1206 #ifde‡
NETWORK


1207 if(
FSëtögs
.
Nëw‹kPœy
Ë
	`InôNë∂ay
();

1209 
	`SaveSèãRe‰esh
();

1210 if(
FCEUGameInfo
.
ty≥
!=
GIT_NSF
)

1212 
	`FCEU_LﬂdGamePÆëã
();

1213 
	`FCEU_LﬂdGameChóts
(0);

1216 
	`FCEU_Re£tPÆëã
();

1217 
Exô
=0;

1219 i‡(
have_movõ
)

1220 
	`FCEUI_LﬂdMovõ
(
«me
, 1);

1222 
	`°r˝y
(
œ°LﬂdedGameName
, 
«me2
);

1224 (&
FCEUGameInfo
);

1225 
	}
}

1228 
	$FCEU_Re£tVidSys
()

1230 
w
;

1232 if(
FCEUGameInfo
.
vidsys
==
GIV_NTSC
)

1233 
w
=0;

1234 if(
FCEUGameInfo
.
vidsys
==
GIV_PAL
)

1235 
w
=1;

1237 
w
=
FSëtögs
.
PAL
;

1239 if(
w
)

1241 
PAL
=1;

1242 
FSëtögs
.
Fú°SLöe
=FSëtögs.
U§Fú°SLöe
[1];

1243 
FSëtögs
.
La°SLöe
=FSëtögs.
U§La°SLöe
[1];

1247 
PAL
=0;

1248 
FSëtögs
.
Fú°SLöe
=FSëtögs.
U§Fú°SLöe
[0];

1249 
FSëtögs
.
La°SLöe
=FSëtögs.
U§La°SLöe
[0];

1251 
	`¥ötf
("Re£tVidSys: PAL = %i\n", 
PAL
);

1252 
	`SëSoundV¨übÀs
();

1253 
	}
}

1255 
	$FCEUI_Inôülize
()

1257 if(!
	`InôVútuÆVideo
())

1259 
	`mem£t
(&
FSëtögs
,0,(FSettings));

1260 
FSëtögs
.
U§Fú°SLöe
[0]=8;

1261 
FSëtögs
.
U§Fú°SLöe
[1]=0;

1262 
FSëtögs
.
U§La°SLöe
[0]=FSettings.UsrLastSLine[1]=239;

1263 
FSëtögs
.
SoundVﬁume
=100;

1265 
	`FCEUI_Inôülize098
();

1266 
	`FCEUI_SëEmuMode
(0);

1269 
	}
}

1271 
	$FCEUI_Kûl
()

1273 
	`FCEU_KûlGíõ
();

1274 
	}
}

1276 
EmLo›
();

1278 
	gu£098code
 = 0;

1279 (*
Re£tNES
)() = 0;

1280 (*
FCEUI_Emuœã
)() = 0;

1282 
	$FCEUI_SëEmuMode
(
is_√w
)

1284 
u£098code
 = 
is_√w
;

1285 i‡(
is_√w
)

1287 
Re£tNES
=
Re£tNES098
;

1288 
FCEUI_Emuœã
=
FCEUI_Emuœã098
;

1292 
Re£tNES
=
Re£tNES081
;

1293 
FCEUI_Emuœã
=
EmLo›
;

1295 
	}
}

1297 
MMC5_hb
();

1298 
	$DoLöe
()

1300 
uöt8
 *
èrgë
=
XBuf
+
sˇ∆öe
*320+32;

1302 
	`LöeUpd©e
(
èrgë
);

1304 if(
MMC5Hack
 && (
S¸ìnON
 || 
S¥ôeON
)Ë
	`MMC5_hb
(
sˇ∆öe
);

1306 
	`X6502_Run
(256);

1310 
	`FakedLöeUpd©e
();

1312 #ifde‡
FRAMESKIP


1313 if(!
FSkù
)

1315 if(
sˇ∆öe
>=
FSëtögs
.
Fú°SLöe
 && sˇ∆öe<=FSëtögs.
La°SLöe
)

1317 if(
S¥ôeON
 && 
•‹k
)

1318 
	`C›yS¥ôes
(
èrgë
);

1320 
	`LöeUpd©eEnd
(
èrgë
);

1322 
•hôx
=0x100;

1324 if(
S¸ìnON
 || 
S¥ôeON
)

1325 
	`FëchS¥ôeD©a
();

1328 if(
GameHBIRQHook
 && (
S¸ìnON
 || 
S¥ôeON
Ë&& ((
PPU
[0]&0x38)!=0x18))

1330 
	`X6502_Run
(6);

1331 
	`Fixô2
();

1332 
	`X6502_Run
(4);

1333 
	`GameHBIRQHook
();

1334 
	`X6502_Run
(85-10-16);

1338 
	`X6502_Run
(6);

1339 
	`Fixô2
();

1340 
	`X6502_Run
(85-6-16);

1343 if(
S¥ôeON
)

1344 
	`Re‰eshS¥ôes
();

1345 if(
GameHBIRQHook2
 && (
S¸ìnON
 || 
S¥ôeON
))

1346 
	`GameHBIRQHook2
();

1347 
sˇ∆öe
++;

1348 i‡(
sˇ∆öe
<240)

1349 
	`Re£tRL
(
XBuf
+
sˇ∆öe
*320+32);

1350 
	`X6502_Run
(16);

1351 
	}
}

1354 
	$EmLo›
()

1358 
x
;

1359 
uöt32
 
sˇ∆öes_≥r_‰ame
 = 
PAL
 ? 312 : 262;

1360 
	`Upd©eI≈ut
();

1361 
	`FCEU_AµlyPîiodicChóts
();

1364 if(
µudód
)

1368 
löes
;

1369 
löes
=
sˇ∆öes_≥r_‰ame
;lines;lines--)

1370 
	`X6502_Run
(256+85);

1371 
µudód
--;

1372 
upd©e
;

1375 
	`X6502_Run
(256+85);

1377 
PPU
[2]|=0x80;

1378 
PPU
[3]=
PPUSPL
=0;

1383 
	`X6502_Run
(12);

1386 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

1387 
	`DoNSFFøme
();

1388 if(
VBœnkON
)

1389 
	`TriggîNMI
();

1394 
löes
;

1395 
	`X6502_Run
(256+85-12);

1396 
löes
=
sˇ∆öes_≥r_‰ame
-242-1;lines;lines--)

1397 
	`X6502_Run
(256+85);

1400 
PPU_°©us
&=0x1f;

1401 
	`X6502_Run
(256);

1404 if(
S¸ìnON
 || 
S¥ôeON
)

1406 if(
GameHBIRQHook
)

1407 
	`GameHBIRQHook
();

1408 if(
PPU_hook
)

1409 
x
=0;x<42;x++Ë{
	`PPU_hook
(0x2000); PPU_hook(0);}

1410 if(
GameHBIRQHook2
)

1411 
	`GameHBIRQHook2
();

1414 
	`X6502_Run
(85-16);

1416 if(
S¸ìnON
 || 
S¥ôeON
)

1418 
Re‰eshAddr
=
TempAddr
;

1419 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

1421 
•‹k
=0;

1422 
	`Re£tRL
(
XBuf
+32);

1424 
	`X6502_Run
(16-
kook
);

1425 
kook
 ^= 1;

1428 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

1431 
sˇ∆öe
=0;scanline<240;scanline++)

1432 
	`X6502_Run
(256+85);

1436 
x
,
max
,
maxªf
;

1438 
dìmp
=
PPU
[1]>>5;

1439 
	`SëRe‰eshLöe
();

1440 
sˇ∆öe
=0;scanline<240;)

1442 
dìmp˙t
[
dìmp
]++;

1443 
	`DoLöe
();

1445 if(
MMC5Hack
 && (
S¸ìnON
 || 
S¥ôeON
)Ë
	`MMC5_hb
(
sˇ∆öe
);

1446 
x
=1,
max
=0,
maxªf
=0;x<7;x++)

1448 if(
dìmp˙t
[
x
]>
max
)

1450 
max
=
dìmp˙t
[
x
];

1451 
maxªf
=
x
;

1453 
dìmp˙t
[
x
]=0;

1455 
	`SëNESDìmph
(
maxªf
,0);

1458 
upd©e
:

1459 if(
Exô
)

1466 
ssize
;

1468 
ssize
=
	`FlushEmuœãSound
();

1470 
time°ampba£
 +
time°amp
;

1471 
time°amp
 = 0;

1473 #ifde‡
FRAMESKIP


1474 if(
FSkù
)

1476 
	`FCEU_PutImageDummy
();

1477 
FSkù
--;

1478 
	`FCEUD_Upd©e
(0,
WaveFöÆM⁄o
,
ssize
);

1483 
	`FCEU_PutImage
();

1484 
	`FCEUD_Upd©e
(
XBuf
+8,
WaveFöÆM⁄o
,
ssize
);

1489 
	}
}

1491 
	$FCEUI_Clo£Game
()

1493 
Exô
=1;

1494 
	}
}

1496 
	$Re£tPPU
()

1498 
VRAMBuf„r
=
PPU
[0]=PPU[1]=PPU[2]=PPU[3]=0;

1499 
PPUSPL
=0;

1500 
PPUGíL©ch
=0;

1501 
Re‰eshAddr
=
TempAddr
=0;

1502 
vtoggÀ
 = 0;

1503 
µudód
 = 2;

1504 
kook
 = 0;

1505 
	}
}

1507 
	$PowîPPU
()

1509 
	`mem£t
(
NTARAM
,0x00,0x800);

1510 
	`mem£t
(
PALRAM
,0x00,0x20);

1511 
	`mem£t
(
SPRAM
,0x00,0x100);

1512 
	`Re£tPPU
();

1513 
	}
}

1515 
	$Re£tNES081
()

1517 if(!
GameLﬂded
) ;

1518 
	`GameI¡îÁ˚
(
GI_RESETM2
, 0);

1519 
	`Re£tSound
();

1520 
	`Re£tPPU
();

1521 
	`X6502_Re£t
();

1522 
	}
}

1524 #i‚de‡
DEBUG_ASM_6502


1525 
	$FCEU_Mem‹yR™d
(
uöt8
 *
±r
, 
uöt32
 
size
)

1527 
x
=0;

1528 
size
)

1530 *
±r
=(
x
&4)?0xFF:0x00;

1531 
x
++;

1532 
size
--;

1533 
±r
++;

1535 
	}
}

1538 
	$PowîNES
()

1540 if(!
GameLﬂded
) ;

1542 
	`FCEU_ChótRe£tRAM
();

1543 
	`FCEU_ChótAddRAM
(2,0,
RAM
);

1545 
	`GíõPowî
();

1547 #i‚de‡
DEBUG_ASM_6502


1548 
	`FCEU_Mem‹yR™d
(
RAM
,0x800);

1550 
	`mem£t
(
RAM
,0x00,0x800);

1551 
	`mem£t
(
√s_öã∫Æ_øm
,0x00,0x800);

1553 
	`Re£tM≠pög
();

1554 
	`PowîSound
();

1555 
	`PowîPPU
();

1557 i‡(
u£098code
)

1558 
	`FCEUPPU_Powî
();

1563 
	`GameI¡îÁ˚
(
GI_POWER
, 0);

1564 if(
FCEUGameInfo
.
ty≥
==
GIT_VSUNI
)

1565 
	`FCEU_VSUniPowî
();

1566 #ifde‡
ASM_6502


1567 i‡(
gíõ°age
)

1568 
	`GíõSëPages
(0);

1570 
time°ampba£
=0;

1571 
	`X6502_Powî
();

1572 
	`FCEU_PowîChóts
();

1573 
	}
}

1577 
uöt16
 
	gTempAddrT
,
	gRe‰eshAddrT
;

1579 
SFORMAT
 
	gFCEUPPU_STATEINFO
[]={

1580 { 
NTARAM
, 0x800, "NTAR"},

1581 { 
PALRAM
, 0x20, "PRAM"},

1582 { 
SPRAM
, 0x100, "SPRA"},

1583 { 
PPU
, 0x4, "PPUR"},

1584 { &
XOff£t
, 1, "XOFF"},

1585 { &
vtoggÀ
, 1, "VTOG"},

1586 { &
Re‰eshAddrT
, 2|
RLSB
, "RADD"},

1587 { &
TempAddrT
, 2|
RLSB
, "TADD"},

1588 { &
VRAMBuf„r
, 1, "VBUF"},

1589 { &
PPUGíL©ch
, 1, "PGEN"},

1591 { &
kook
, 1, "KOOK"},

1592 { &
µudód
, 1, "DEAD"},

1593 { &
PPUSPL
, 1, "PSPL"},

	@fce.h

1 #i‚de‡
_FCEH


3 #ifde‡
ASM_6502


4 
asm˝u_u≈ack
();

5 
asm˝u_∑ck
();

8 
	#f˚uödbg
 0

	)

10 
u£098code
;

12 
GameLﬂded
;

13 
Re£tGameLﬂded
();

15 
	#DECLFR
(
x
Ë
uöt8
 
	`FP_FASTAPASS
(1Ë
	`x
 (
uöt32
 
A
)

	)

16 
	#DECLFW
(
x
Ë
	`FP_FASTAPASS
(2Ë
	`x
 (
uöt32
 
A
, 
uöt8
 
V
)

	)

18 
	$FASTAPASS
(3Ë
	`SëRódH™dÀr
(
öt32
 
°¨t
, i¡32 
íd
, 
ªadfunc
 
func
);

19 
	$FASTAPASS
(3Ë
	`SëWrôeH™dÀr
(
öt32
 
°¨t
, i¡32 
íd
, 
wrôefunc
 
func
);

20 
wrôefunc
 
	$FASTAPASS
(1Ë
	`GëWrôeH™dÀr
(
öt32
 
a
);

21 
ªadfunc
 
	$FASTAPASS
(1Ë
	`GëRódH™dÀr
(
öt32
 
a
);

23 
	`AŒocGíõRW
();

24 
	`FlushGíõRW
();

26 
	`FCEU_Re£tVidSys
();

28 
	`Re£tM≠pög
();

30 (*
Re£tNES
)();

32 
	`Re£tNES081
();

33 
	`PowîNES
();

36 
uöt64
 
time°ampba£
;

37 
uöt32
 
MMC5HackVROMMask
;

38 
uöt8
 *
MMC5HackExNTARAMPå
;

39 
MMC5Hack
;

40 
uöt8
 *
MMC5HackVROMPTR
;

41 
uöt8
 
MMC5HackCHRMode
;

42 
uöt8
 
MMC5HackSPMode
;

43 
uöt8
 
MMC5HackSPS¸ﬁl
;

44 
uöt8
 
MMC5HackSPPage
;

46 
uöt8
 
GameMemBlock
[131072];

47 
uöt8
 
NTARAM
[0x800],
PALRAM
[0x20];

49 
uöt8
 
RAM
[0x800];

52 
uöt32
 
Re‰eshAddr
,
TempAddr
;

53 
uöt8
 
vtoggÀ
,
XOff£t
,
VRAMBuf„r
,
PPUGíL©ch
;

54 
uöt8
 
PPU
[4];

56 
sˇ∆öe
;

57 
uöt8
 *
v«∑ge
[4];

59 
uöt8
 
PPUNTARAM
;

60 
uöt8
 
PPUCHRRAM
;

61 
uöt8
 
VPAL
[8];

62 
uöt8
 
PAL
;

64 
ªadfunc
 
ARód
[0x10000];

65 
wrôefunc
 
BWrôe
[0x10000];

67 
	#VBœnkON
 (
PPU
[0]&0x80Ë

	)

68 
	#SpHôON
 (
PPU
[0]&0x40)

	)

69 
	#S¥ôe16
 (
PPU
[0]&0x20Ë

	)

70 
	#BGAdrHI
 (
PPU
[0]&0x10Ë

	)

71 
	#SpAdrHI
 (
PPU
[0]&0x08Ë

	)

72 
	#INC32
 (
PPU
[0]&0x04Ë

	)

73 
	#NameTabÀ
 (
PPU
[0]&0x3Ë

	)

75 
	#S¥ôeON
 (
PPU
[1]&0x10Ë

	)

76 
	#S¸ìnON
 (
PPU
[1]&0x08Ë

	)

77 
	#PPU_°©us
 (
PPU
[2])

	)

80 (*
GameI¡îÁ˚
)(
h
, *
∑øm
);

81 
	`FP_FASTAPASS
(1Ë(*
PPU_hook
)(
uöt32
 
A
);

82 (*
GameHBIRQHook
)(), (*
GameHBIRQHook2
)();

83 (*
GameSèãRe°‹e
)(
vîsi⁄
);

85 
	#GI_RESETM2
 1

	)

86 
	#GI_POWER
 2

	)

87 
	#GI_CLOSE
 3

	)

88 
	#GI_INFOSTRING
 11

	)

90 
	~"gô.h
"

91 
FCEUGI
 
FCEUGameInfo
;

92 
GameAâribuãs
;

94 
uöt8
 
∑À
;

95 
uöt8
 
vsdù
;

100 
	#_FCEH


	)

	@fceline.h

2 
uöt8
 *
	gS
=
PALRAM
+
cc
;

3 
uöt8
 
	gc1
,
	gc2
;

5 
	gc1
=((
C
[0]>>1)&0x55)|(C[8]&0xAA);

6 
	gc2
=(
C
[0]&0x55)|((C[8]<<1)&0xAA);

8 
	gP
[6]=
S
[
c1
&3];

9 
	gP
[7]=
S
[
c2
&3];

10 
	gP
[4]=
S
[(
c1
>>2)&3];

11 
	gP
[5]=
S
[(
c2
>>2)&3];

12 
	gP
[2]=
S
[(
c1
>>4)&3];

13 
	gP
[3]=
S
[(
c2
>>4)&3];

15 
	gP
[0]=
S
[
c1
>>6];

16 
	gP
[1]=
S
[
c2
>>6];

	@fceu098.c

21 
	~<°dio.h
>

23 
	~"ty≥s.h
"

24 
	~"f˚.h
"

25 
	~"µu098.h
"

26 
	~"sound.h
"

27 
	~"öput.h
"

28 
	~"ˇπ.h
"

29 
	~"chót.h
"

30 
	~"x6502.h
"

31 
	~"video.h
"

32 
	~"svga.h
"

35 
	$FCEUI_Inôülize098
()

37 
	`FCEUPPU_Inô
();

39 
	}
}

42 #ifde‡
FRAMESKIP


43 
FSkù
;

46 
	$FCEUI_Emuœã098
()

50 
ssize
;

52 
	`Upd©eI≈ut
();

53 if(
gíõ°age
!=1Ë
	`FCEU_AµlyPîiodicChóts
();

54 
	`FCEUPPU_Lo›
(
FSkù
);

56 if(
Exô
)

61 
ssize
=
	`FlushEmuœãSound
();

63 
time°ampba£
 +
time°amp
;

64 
time°amp
 = 0;

66 #ifde‡
FRAMESKIP


67 if(
FSkù
)

69 
	`FCEU_PutImageDummy
();

70 
FSkù
--;

71 
	`FCEUD_Upd©e
(0,
WaveFöÆM⁄o
,
ssize
);

76 
	`FCEU_PutImage
();

77 
	`FCEUD_Upd©e
(
XBuf
+8,
WaveFöÆM⁄o
,
ssize
);

80 
	}
}

83 
	$Re£tNES098
()

85 
	`Re£tNES081
();

88 
	`FCEUPPU_Re£t
();

89 
	}
}

	@fceu098.h

1 
FCEUI_Inôülize098
();

2 
FCEUI_Emuœã098
();

3 
Re£tNES098
();

	@fds.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 #ifde‡
GP2X


26 
	~<uni°d.h
>

29 
	~"ty≥s.h
"

30 
	~"x6502.h
"

31 
	~"f˚.h
"

32 
	~"fds.h
"

33 
	~"sound.h
"

34 
	~"gíîÆ.h
"

35 
	~"°©e.h
"

36 
	~"fûe.h
"

37 
	~"mem‹y.h
"

38 
	~"ˇπ.h
"

39 
	~"md5.h
"

40 
	~"√çœy.h
"

42 
	~"svga.h
"

50 
DECLFR
(
FDSRód4030
);

51 
DECLFR
(
FDSRód4031
);

52 
DECLFR
(
FDSRód4032
);

53 
DECLFR
(
FDSRód4033
);

55 
DECLFW
(
FDSWrôe
);

57 
DECLFW
(
FDSWaveWrôe
);

58 
DECLFR
(
FDSWaveRód
);

60 
DECLFR
(
FDSSRód
);

61 
DECLFW
(
FDSSWrôe
);

62 
DECLFR
(
FDSBIOSRód
);

63 
DECLFR
(
FDSRAMRód
);

64 
DECLFW
(
FDSRAMWrôe
);

65 
FDSInô
();

66 
	$FP_FASTAPASS
(1Ë
	`FDSFix
(
a
);

68 
	#FDSRAM
 
GameMemBlock


	)

69 
	#CHRRAM
 (
GameMemBlock
+32768)

	)

71 
uöt8
 
FDSRegs
[6];

72 
öt32
 
IRQL©ch
,
IRQCou¡
;

73 
uöt8
 
IRQa
;

74 
	`FDSClo£
();

76 
uöt8
 
FDSBIOS
[8192];

79 
uöt8
 *
diskd©ao
[8]={0,0,0,0,0,0,0,0
	}
};

81 
uöt8
 *
	gdiskd©a
[8]={0,0,0,0,0,0,0,0};

83 
	gTŸÆSides
;

84 
uöt8
 
	gDiskWrôãn
=0;

85 
uöt8
 
	gwrôeskù
;

86 
uöt32
 
	gDiskPå
;

87 
öt32
 
	gDiskSìkIRQ
;

88 
uöt8
 
	gSñe˘Disk
,
	gInDisk
;

90 
	#DC_INC
 1

	)

92 
	$FDSGI
(
h
, *
∑øm
)

94 
h
)

96 
GI_CLOSE
: 
	`FDSClo£
();;

97 
GI_POWER
: 
	`FDSInô
();;

98 
GI_INFOSTRING
: 
	`•rötf
(
∑øm
, "FDS, Sides: %d", 
TŸÆSides
);;

100 
	}
}

102 
	$FDSSèãRe°‹e
(
vîsi⁄
)

104 
x
;

106 
	`£tmúr‹
(((
FDSRegs
[5]&8)>>3)^1);

108 if(
vîsi⁄
 >= 9810)

109 
x
=0;x<
TŸÆSides
;x++)

111 
b
;

112 
b
=0; b<65500; b++)

113 
diskd©a
[
x
][
b
] ^
diskd©ao
[x][b];

116 
	}
}

118 
FDSSound
();

119 
FDSSoundRe£t
();

120 
FDSSoundSèãAdd
();

121 
RídîSound
();

124 
	$FDSInô
()

126 
	`mem£t
(
FDSRegs
,0,(FDSRegs));

127 
wrôeskù
=
DiskPå
=
DiskSìkIRQ
=0;

128 
	`£tmúr‹
(1);

130 
	`£çrg8r
(0,0xe000,0);

131 
	`£çrg32r
(1,0x6000,0);

132 
	`£tchr8
(0);

134 
M≠IRQHook
=
FDSFix
;

135 
GameSèãRe°‹e
=
FDSSèãRe°‹e
;

137 
	`SëRódH™dÀr
(0x4030,0x4030,
FDSRód4030
);

138 
	`SëRódH™dÀr
(0x4031,0x4031,
FDSRód4031
);

139 
	`SëRódH™dÀr
(0x4032,0x4032,
FDSRód4032
);

140 
	`SëRódH™dÀr
(0x4033,0x4033,
FDSRód4033
);

142 
	`SëWrôeH™dÀr
(0x4020,0x4025,
FDSWrôe
);

144 
	`SëWrôeH™dÀr
(0x6000,0xdfff,
FDSRAMWrôe
);

145 
	`SëRódH™dÀr
(0x6000,0xdfff,
FDSRAMRód
);

146 
	`SëRódH™dÀr
(0xE000,0xFFFF,
FDSBIOSRód
);

147 
IRQCou¡
=
IRQL©ch
=
IRQa
=0;

149 
	`FDSSoundRe£t
();

150 
InDisk
=0;

151 
Sñe˘Disk
=0;

153 #ifde‡
ASM_6502


155 
∑ge
;

157 
∑ge
=12;Öage<28;Öage++)

158 
Page
[
∑ge
]=
FDSRAM
 - (12<<11);

159 ; 
∑ge
<32;Öage++)

160 
Page
[
∑ge
]=
FDSBIOS
 - (28<<11);

163 
	}
}

165 
	$FCEU_FDSIn£π
()

167 if(
TŸÆSides
==0)

169 
	`FCEU_Di•Mesßge
("Not FDS; can'tÉject disk.");

172 if(
InDisk
==255)

174 
	`FCEU_Di•Mesßge
("Disk %d Sidê%†In£πed",
Sñe˘Disk
>>1,(SelectDisk&1)?"B":"A");

175 
InDisk
=
Sñe˘Disk
;

179 
	`FCEU_Di•Mesßge
("Disk %d Sidê%†Eje˘ed",
Sñe˘Disk
>>1,(SelectDisk&1)?"B":"A");

180 
InDisk
=255;

182 
	}
}

189 
	$FCEU_FDSSñe˘
()

191 if(
TŸÆSides
==0)

193 
	`FCEU_Di•Mesßge
("Not FDS; can't select disk.");

196 if(
InDisk
!=255)

198 
	`FCEU_Di•Mesßge
("Eject disk before selecting.");

201 
Sñe˘Disk
=((Sñe˘Disk+1)%
TŸÆSides
)&3;

202 
	`FCEU_Di•Mesßge
("Disk %d Sidê%¯Sñe˘ed",
Sñe˘Disk
>>1,(SelectDisk&1)?'B':'A');

203 
	}
}

205 
	$FP_FASTAPASS
(1Ë
	$FDSFix
(
a
)

207 if(
IRQCou¡
 && (
IRQa
&2))

209 
IRQCou¡
-=
a
;

210 if(
IRQCou¡
<=0)

212 if(!(
IRQa
&1))

214 
IRQa
&=~2;

215 
IRQCou¡
=
IRQL©ch
=0;

218 
IRQCou¡
=
IRQL©ch
;

220 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

225 if(
DiskSìkIRQ
>0)

227 
DiskSìkIRQ
-=
a
;

228 if(
DiskSìkIRQ
<=0)

230 if(
FDSRegs
[5]&0x80)

232 
	`X6502_IRQBegö
(
FCEU_IQEXT2
);

236 
	}
}

238 
	$DECLFR
(
FDSRód4030
)

240 
uöt8
 
ªt
=0;

243 #i‚de‡
ASM_6502


244 if(
X
.
IRQlow
&
FCEU_IQEXT
Ë
ªt
|=1;

245 if(
X
.
IRQlow
&
FCEU_IQEXT2
Ë
ªt
|=2;

247 if((
√s_ªgi°îs
[4]>>8)&
FCEU_IQEXT
Ë
ªt
|=1;

248 if((
√s_ªgi°îs
[4]>>8)&
FCEU_IQEXT2
Ë
ªt
|=2;

251 if(!
f˚uödbg
)

253 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

254 
	`X6502_IRQEnd
(
FCEU_IQEXT2
);

256  
ªt
;

257 
	}
}

259 
	$DECLFR
(
FDSRód4031
)

261 
uöt8
 
z
=0;

262 if(
InDisk
!=255)

264 
z
=
diskd©a
[
InDisk
][
DiskPå
];

265 if(!
f˚uödbg
)

267 if(
DiskPå
<64999) DiskPtr++;

268 
DiskSìkIRQ
=150;

269 
	`X6502_IRQEnd
(
FCEU_IQEXT2
);

272  
z
;

273 
	}
}

274 
	$DECLFR
(
FDSRód4032
)

276 
uöt8
 
ªt
;

278 
ªt
=
X
.
DB
&~7;

279 if(
InDisk
==255)

280 
ªt
|=5;

282 if(
InDisk
==255 || !(
FDSRegs
[5]&1) || (FDSRegs[5]&2))

283 
ªt
|=2;

284  
ªt
;

285 
	}
}

287 
	$DECLFR
(
FDSRód4033
)

290 
	}
}

292 
	$DECLFW
(
FDSRAMWrôe
)

294 (
FDSRAM
-0x6000)[
A
]=
V
;

295 
	}
}

297 
	$DECLFR
(
FDSBIOSRód
)

299  (
FDSBIOS
-0xE000)[
A
];

300 
	}
}

302 
	$DECLFR
(
FDSRAMRód
)

304  (
FDSRAM
-0x6000)[
A
];

305 
	}
}

309 
	#FDSClock
 (1789772.7272727272727272/2)

	)

312 
öt64
 
	mcy˛es
;

313 
öt64
 
	mcou¡
;

314 
öt64
 
	mívcou¡
;

315 
uöt32
 
	mb19shi·ªg60
;

316 
uöt32
 
	mb24addî66
;

317 
uöt32
 
	mb24œtch68
;

318 
uöt32
 
	mb17œtch76
;

319 
öt32
 
	m˛ockcou¡
;

320 
uöt8
 
	mb8shi·ªg88
;

321 
uöt8
 
	mam∂ôude
[2];

322 
uöt8
 
	m•ìdo
[2];

323 
uöt8
 
	mmwcou¡
;

324 
uöt8
 
	mmw°¨t
;

325 
uöt8
 
	mmwave
[0x20];

326 
uöt8
 
	mcwave
[0x40];

327 
uöt8
 
	mSPSG
[0xB];

328 } 
	tFDSSOUND
;

330 
FDSSOUND
 
	gfdso
;

332 
	#SPSG
 
fdso
.
SPSG


	)

333 
	#b19shi·ªg60
 
fdso
.
b19shi·ªg60


	)

334 
	#b24addî66
 
fdso
.
b24addî66


	)

335 
	#b24œtch68
 
fdso
.
b24œtch68


	)

336 
	#b17œtch76
 
fdso
.
b17œtch76


	)

337 
	#b8shi·ªg88
 
fdso
.
b8shi·ªg88


	)

338 
	#˛ockcou¡
 
fdso
.
˛ockcou¡


	)

339 
	#am∂ôude
 
fdso
.
am∂ôude


	)

340 
	#•ìdo
 
fdso
.
•ìdo


	)

342 
	$FDSSoundSèãAdd
()

344 
	`AddExSèã
(
fdso
.
cwave
,64,0,"WAVE");

345 
	`AddExSèã
(
fdso
.
mwave
,32,0,"MWAV");

346 
	`AddExSèã
(
am∂ôude
,2,0,"AMPL");

347 
	`AddExSèã
(
SPSG
,0xB,0,"SPSG");

349 
	`AddExSèã
(&
b8shi·ªg88
,1,0,"B88");

351 
	`AddExSèã
(&
˛ockcou¡
, 4, 1, "CLOC");

352 
	`AddExSèã
(&
b19shi·ªg60
,4,1,"B60");

353 
	`AddExSèã
(&
b24addî66
,4,1,"B66");

354 
	`AddExSèã
(&
b24œtch68
,4,1,"B68");

355 
	`AddExSèã
(&
b17œtch76
,4,1,"B76");

357 
	}
}

359 
	$DECLFR
(
FDSSRód
)

361 
A
&0xF)

363 0x0:(
am∂ôude
[0]|(
X
.
DB
&0xC0));

364 0x2:(
am∂ôude
[1]|(
X
.
DB
&0xC0));

366 (
X
.
DB
);

367 
	}
}

369 
	$DECLFW
(
FDSSWrôe
)

371 if(
FSëtögs
.
SndR©e
)

374 if(
FSëtögs
.
soundq
>=1)

375 
	`RídîSoundHQ
();

378 
	`RídîSound
();

380 
A
-=0x4080;

381 
A
)

384 0x4: if(
V
&0x80)

385 
am∂ôude
[(
A
&0xF)>>2]=
V
&0x3F;

389 0x7: 
b17œtch76
=0;
SPSG
[0x5]=0;

392 
b17œtch76
=0;

394 
fdso
.
mwave
[
SPSG
[0x5]&0x1F]=
V
&0x7;

395 
SPSG
[0x5]=(SPSG[0x5]+1)&0x1F;

401 
SPSG
[
A
]=
V
;

402 
	}
}

413 
	$DoEnv
()

415 
x
;

417 
x
=0;x<2;x++)

418 if(!(
SPSG
[
x
<<2]&0x80) && !(SPSG[0x3]&0x40))

420 
cou¡o
[2]={0,0};

422 if(
cou¡o
[
x
]<=0)

424 if(!(
SPSG
[
x
<<2]&0x80))

426 if(
SPSG
[
x
<<2]&0x40)

428 if(
am∂ôude
[
x
]<0x3F)

429 
am∂ôude
[
x
]++;

433 if(
am∂ôude
[
x
]>0)

434 
am∂ôude
[
x
]--;

437 
cou¡o
[
x
]=(
SPSG
[x<<2]&0x3F);

440 
cou¡o
[
x
]--;

442 
	}
}

444 
	$DECLFR
(
FDSWaveRód
)

446 (
fdso
.
cwave
[
A
&0x3f]|(
X
.
DB
&0xC0));

447 
	}
}

449 
	$DECLFW
(
FDSWaveWrôe
)

452 if(
SPSG
[0x9]&0x80)

453 
fdso
.
cwave
[
A
&0x3f]=
V
&0x3F;

454 
	}
}

456 
	gè
;

457 
INLINE
 
	$ClockRi£
()

459 if(!
˛ockcou¡
)

461 
è
++;

463 
b19shi·ªg60
=(
SPSG
[0x2]|((SPSG[0x3]&0xF)<<8));

464 
b17œtch76
=(
SPSG
[0x6]|((SPSG[0x07]&0xF)<<8))+b17latch76;

466 if(!(
SPSG
[0x7]&0x80))

468 
t
=
fdso
.
mwave
[(
b17œtch76
>>13)&0x1F]&7;

469 
t2
=
am∂ôude
[1];

470 
adj
 = 0;

472 if((
t
&3))

474 if((
t
&4))

475 
adj
 -(
t2
 * ((4 - (
t
&3) ) ));

477 
adj
 +(
t2
 * ( (
t
&3) ));

479 
adj
 *= 2;

480 if(
adj
 > 0x7F)ádj = 0x7F;

481 if(
adj
 < -0x80)ádj = -0x80;

483 
b8shi·ªg88
=0x80 + 
adj
;

487 
b8shi·ªg88
=0x80;

492 
b19shi·ªg60
<<=1;

493 
b8shi·ªg88
>>=1;

496 
b24addî66
=(
b24œtch68
+
b19shi·ªg60
)&0x1FFFFFF;

497 
	}
}

499 
INLINE
 
	$ClockFÆl
()

503 if((
b8shi·ªg88
&1))

504 
b24œtch68
=
b24addî66
;

506 
˛ockcou¡
=(clockcount+1)&7;

507 
	}
}

509 
INLINE
 
öt32
 
	$FDSDoSound
(
öt32
 
mul
)

511 
fdso
.
cou¡
+=fdso.
cy˛es
;

512 if(
fdso
.
cou¡
>=((
öt64
)1<<40))

514 
dogk
:

515 
fdso
.
cou¡
-=(
öt64
)1<<40;

516 
	`ClockRi£
();

517 
	`ClockFÆl
();

518 
fdso
.
ívcou¡
--;

519 if(
fdso
.
ívcou¡
<=0)

521 
fdso
.
ívcou¡
+=
SPSG
[0xA]*3;

522 
	`DoEnv
();

525 if(
fdso
.
cou¡
>=32768Ë
dogk
;

535  (
fdso
.
cwave
[
b24œtch68
>>19]*
mul
)>>16;

536 
	}
}

538 
öt32
 
	gFBC
=0;

540 
	$RídîSound
()

542 
öt32
 
íd
, 
°¨t
;

543 
öt32
 
x
;

544 
öt32
 
mul
;

546 
°¨t
=
FBC
;

547 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

548 if(
íd
<=
°¨t
)

550 
FBC
=
íd
;

553 i‡(!
am∂ôude
[0])

556 
SPSG
[0x9]&0x3)

558 :
mul
 = (4<<16)/2;

559 1: 
mul
 = (4<<16)/3;

560 2: 
mul
 = (4<<16)/4;

561 3: 
mul
 = (4<<16)/5;

564 
k
=
am∂ôude
[0];

565 if(
k
>0x20) k=0x20;

566 
mul
 *
k
;

569 if(!(
SPSG
[0x9]&0x80))

570 
x
=
°¨t
;x<
íd
;x++)

572 
uöt32
 
t
=
	`FDSDoSound
(
mul
);

573 
t
+=t>>1;

574 
t
>>=4;

575 
Wave
[
x
>>4]+=
t
;

577 
	}
}

580 
	$RídîSoundHQ
()

582 
öt32
 
x
;

584 if(!(
SPSG
[0x9]&0x80))

585 
x
=
FBC
;x<
SOUNDTS
;x++)

587 
uöt32
 
t
=
	`FDSDoSound
();

588 
t
+=t>>1;

589 
WaveHi
[
x
]+=
t
;

591 
FBC
=
SOUNDTS
;

592 
	}
}

595 
	$HQSync
(
öt32
 
ts
)

597 
FBC
=
ts
;

598 
	}
}

600 
	$FDSSound
(
c
)

602 
	`RídîSound
();

603 
FBC
=
c
;

604 
	}
}

624 
	$FDS_ESI
()

626 if(
FSëtögs
.
SndR©e
)

629 if(
FSëtögs
.
soundq
>=1)

631 
fdso
.
cy˛es
=(
öt64
)1<<39;

636 
fdso
.
cy˛es
=((
öt64
)1<<40)*
FDSClock
;

637 
fdso
.
cy˛es
/=
FSëtögs
.
SndR©e
 *16;

641 
	`SëRódH™dÀr
(0x4040,0x407f,
FDSWaveRód
);

642 
	`SëWrôeH™dÀr
(0x4040,0x407f,
FDSWaveWrôe
);

643 
	`SëWrôeH™dÀr
(0x4080,0x408A,
FDSSWrôe
);

644 
	`SëRódH™dÀr
(0x4090,0x4092,
FDSSRód
);

647 
	}
}

649 
	$FDSSoundRe£t
()

651 
	`mem£t
(&
fdso
,0,(fdso));

652 
	`FDS_ESI
();

653 
GameExpSound
.
HiSync
=
HQSync
;

654 
GameExpSound
.
HiFûl
=0;

655 
GameExpSound
.
Fûl
=
FDSSound
;

656 
GameExpSound
.
RCh™ge
=
FDS_ESI
;

657 
	}
}

659 
	$DECLFW
(
FDSWrôe
)

663 
A
)

666 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

667 
IRQL©ch
&=0xFF00;

668 
IRQL©ch
|=
V
;

672 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

673 
IRQL©ch
&=0xFF;

674 
IRQL©ch
|=
V
<<8;

678 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

679 
IRQCou¡
=
IRQL©ch
;

680 
IRQa
=
V
&3;

685 if(
InDisk
!=255 && !(
FDSRegs
[5]&0x4) && (FDSRegs[3]&0x1))

687 if(
DiskPå
>=0 && DiskPtr<65500)

689 if(
wrôeskù
) writeskip--;

690 if(
DiskPå
>=2)

692 
DiskWrôãn
=1;

693 
diskd©a
[
InDisk
][
DiskPå
-2]=
V
;

699 
	`X6502_IRQEnd
(
FCEU_IQEXT2
);

700 if(
InDisk
!=255)

702 if(!(
V
&0x40))

704 if(
FDSRegs
[5]&0x40 && !(
V
&0x10))

706 
DiskSìkIRQ
=200;

707 
DiskPå
-=2;

709 if(
DiskPå
<0) DiskPtr=0;

711 if(!(
V
&0x4)Ë
wrôeskù
=2;

712 if(
V
&2Ë{
DiskPå
=0;
DiskSìkIRQ
=200;}

713 if(
V
&0x40Ë
DiskSìkIRQ
=200;

715 
	`£tmúr‹
(((
V
>>3)&1)^1);

718 
FDSRegs
[
A
&7]=
V
;

719 
	}
}

721 
	$FªeFDSMem‹y
()

723 
x
;

725 
x
=0;x<
TŸÆSides
;x++)

726 if(
diskd©a
[
x
])

728 
	`‰ì
(
diskd©a
[
x
]);

729 
diskd©a
[
x
]=0;

731 
	}
}

733 
	$SubLﬂd
(
Â
)

735 
md5_c⁄ãxt
 
md5
;

736 
uöt8
 
hódî
[16];

737 
x
;

739 
	`FCEU_‰ód
(
hódî
,16,1,
Â
);

741 if(
	`memcmp
(
hódî
,"FDS\x1a",4))

743 if(!(
	`memcmp
(
hódî
+1,"*NINTENDO-HVC*",14)))

745 
t
;

746 
t
=
	`FCEU_fgësize
(
Â
);

747 if(
t
<65500)

748 
t
=65500;

749 
TŸÆSides
=
t
/65500;

750 
	`FCEU_f£ek
(
Â
,0,
SEEK_SET
);

756 
TŸÆSides
=
hódî
[4];

758 
	`md5_°¨ts
(&
md5
);

760 if(
TŸÆSides
>8) TotalSides=8;

761 if(
TŸÆSides
<1) TotalSides=1;

763 
x
=0;x<
TŸÆSides
;x++)

765 
diskd©a
[
x
]=(
uöt8
 *)
	`FCEU_mÆloc
(65500);

766 if(!
diskd©a
[
x
])

768 
zﬁ
;

769 
zﬁ
=0;zﬁ<
x
;zol++)

770 
	`‰ì
(
diskd©a
[
zﬁ
]);

773 
	`FCEU_‰ód
(
diskd©a
[
x
],1,65500,
Â
);

774 
	`md5_upd©e
(&
md5
,
diskd©a
[
x
],65500);

776 
	`md5_föish
(&
md5
,
FCEUGameInfo
.
MD5
);

778 
	}
}

780 
	$PªSave
()

782 
x
;

785 
x
=0;x<
TŸÆSides
;x++)

787 
b
;

788 
b
=0; b<65500; b++)

789 
diskd©a
[
x
][
b
] ^
diskd©ao
[x][b];

791 
	}
}

793 
	$Po°Save
()

795 
x
;

798 
x
=0;x<
TŸÆSides
;x++)

800 
b
;

802 
b
=0; b<65500; b++)

803 
diskd©a
[
x
][
b
] ^
diskd©ao
[x][b];

806 
	}
}

808 
	$FDSLﬂd
(c⁄° *
«me
, 
Â
)

810 
FILE
 *
zp
;

811 
x
;

812 *
‚
;

814 
	`FCEU_f£ek
(
Â
,0,
SEEK_SET
);

816 if(!
	`SubLﬂd
(
Â
))

820 
‚
 = 
	`FCEU_MakeFName
(
FCEUMKF_FDSROM
,0,0);

822 if(!(
zp
=
	`FCEUD_UTF8f›í
(
‚
,"rb")))

824 
	`FCEU_PrötEº‹
("FDS BIOS ROM image missing!");

825 
	`FªeFDSMem‹y
();

826 
	`‰ì
(
‚
);

827 
LﬂdGameLa°Eº‹
 = 10;

831 
	`‰ì
(
‚
);

833 if(
	`‰ód
(
FDSBIOS
,1,8192,
zp
)!=8192)

835 
	`f˛o£
(
zp
);

836 
	`FªeFDSMem‹y
();

837 
	`FCEU_PrötEº‹
("ErrorÑeading FDS BIOS ROM image.");

838 
LﬂdGameLa°Eº‹
 = 10;

842 
	`f˛o£
(
zp
);

846 
ç
;

847 *
‚
=
	`FCEU_MakeFName
(
FCEUMKF_FDS
,0,0);

849 
x
;

850 
x
=0;x<
TŸÆSides
;x++)

852 
diskd©ao
[
x
]=(
uöt8
 *)
	`FCEU_mÆloc
(65500);

853 
	`mem˝y
(
diskd©ao
[
x
],
diskd©a
[x],65500);

856 if((
ç
=
	`FCEU_f›í
(
‚
,"rb")))

858 
	`FªeFDSMem‹y
();

859 if(!
	`SubLﬂd
(
ç
))

861 
	`FCEU_PrötEº‹
("ErrorÑeadingáuxillary FDS file.");

862 
	`‰ì
(
‚
);

863 
LﬂdGameLa°Eº‹
 = 11;

866 
	`FCEU_f˛o£
(
ç
);

867 
DiskWrôãn
=1;

869 
	`‰ì
(
‚
);

872 
FCEUGameInfo
.
ty≥
=
GIT_FDS
;

873 
GameI¡îÁ˚
=
FDSGI
;

875 
Sñe˘Disk
=0;

876 
InDisk
=255;

878 
	`Re£tExSèã
(
PªSave
,
Po°Save
);

879 
	`FDSSoundSèãAdd
();

881 
x
=0;x<
TŸÆSides
;x++)

883 
ãmp
[5];

884 
	`•rötf
(
ãmp
,"DDT%d",
x
);

885 
	`AddExSèã
(
diskd©a
[
x
],65500,0,
ãmp
);

888 
	`AddExSèã
(
FDSRAM
,32768,0,"FDSR");

889 
	`AddExSèã
(
FDSRegs
,(FDSRegs),0,"FREG");

890 
	`AddExSèã
(
CHRRAM
,8192,0,"CHRR");

891 
	`AddExSèã
(&
IRQCou¡
, 4, 1, "IRQC");

892 
	`AddExSèã
(&
IRQL©ch
, 4, 1, "IQL1");

893 
	`AddExSèã
(&
IRQa
, 1, 0, "IRQA");

894 
	`AddExSèã
(&
wrôeskù
,1,0,"WSKI");

895 
	`AddExSèã
(&
DiskPå
,4,1,"DPTR");

896 
	`AddExSèã
(&
DiskSìkIRQ
,4,1,"DSIR");

897 
	`AddExSèã
(&
Sñe˘Disk
,1,0,"SELD");

898 
	`AddExSèã
(&
InDisk
,1,0,"INDI");

899 
	`AddExSèã
(&
DiskWrôãn
,1,0,"DSKW");

901 
	`Re£tC¨tM≠pög
();

902 
	`SëupC¨tCHRM≠pög
(0,
CHRRAM
,8192,1);

903 
	`SëupC¨tMúr‹ög
(0,0,0);

904 
	`mem£t
(
CHRRAM
,0,8192);

905 
	`mem£t
(
FDSRAM
,0,32768);

907 
	`FCEU_¥ötf
(" Sides: %d\n\n",
TŸÆSides
);

909 
	`FCEUI_SëVidSy°em
(0);

912 
	}
}

914 
	$FDSClo£
()

916 
FILE
 *
Â
;

917 
x
;

918 *
‚
;

920 if(!
DiskWrôãn
)

922 
‚
=
	`FCEU_MakeFName
(
FCEUMKF_FDS
,0,0);

924 if(!(
Â
=
	`FCEUD_UTF8f›í
(
‚
,"wb")))

926 
	`‰ì
(
‚
);

929 
	`‰ì
(
‚
);

931 
x
=0;x<
TŸÆSides
;x++)

933 if(
	`fwrôe
(
diskd©a
[
x
],1,65500,
Â
)!=65500)

935 
	`FCEU_PrötEº‹
("Error saving FDS image!");

936 
	`f˛o£
(
Â
);

940 
	`f˛o£
(
Â
);

941 #ifde‡
GP2X


942 
	`sync
();

946 
	`FªeFDSMem‹y
();

947 
x
=0;x<
TŸÆSides
;x++)

948 if(
diskd©ao
[
x
])

950 
	`‰ì
(
diskd©ao
[
x
]);

951 
diskd©ao
[
x
]=0;

953 
	`Re£tExSèã
(0,0);

954 
	}
}

	@fds.h

1 
FDSSoundRe£t
();

3 
FCEU_FDSIn£π
();

5 
FCEU_FDSSñe˘
();

	@file.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 #ifde‡
ZLIB


26 
	~<zlib.h
>

27 
	~"zlib/unzù.h
"

30 
	~"ty≥s.h
"

31 
	~"fûe.h
"

32 
	~"ídün.h
"

33 
	~"mem‹y.h
"

34 
	~"drivî.h
"

35 
	~"svga.h
"

37 *
	gdes˘abÀ
[8]={0,0,0,0,0,0,0,0};

38 
	gx
;

48 
uöt8
 *
	md©a
;

49 
uöt32
 
	msize
;

50 
uöt32
 
	mloˇti⁄
;

51 } 
	tZIPWRAP
;

52 
	#MEMWRAP
 
ZIPWRAP


	)

54 
	$AµlyIPS
(
FILE
 *
ùs
, 
de°f
)

56 
uöt8
 
hódî
[5];

57 
uöt32
 
cou¡
=0;

58 
MEMWRAP
 *
de°
;

60 
	`FCEU_¥ötf
(" Applying IPS...\n");

61 if(!(
de°f
&0x8000))

63 
	`FCEU_¥ötf
("failed (bad destf).\n");

67 
de°
=(
MEMWRAP
*)
des˘abÀ
[(
de°f
&255)-1];

69 if(
	`‰ód
(
hódî
,1,5,
ùs
)!=5)

71 
	`FCEU_¥ötf
("failed (bad header).\n");

72 
	`f˛o£
(
ùs
);

75 if(
	`memcmp
(
hódî
,"PATCH",5))

77 
	`FCEU_¥ötf
("failed (bad header).\n");

78 
	`f˛o£
(
ùs
);

82 
	`‰ód
(
hódî
,1,3,
ùs
)==3)

84 
uöt32
 
off£t
=(
hódî
[0]<<16)|(header[1]<<8)|header[2];

85 
uöt16
 
size
;

87 if(!
	`memcmp
(
hódî
,"EOF",3))

89 
	`FCEU_¥ötf
(" IPS EOF: Did %dÖ©ches\n\n",
cou¡
);

90 
	`f˛o£
(
ùs
);

94 
size
=
	`fgëc
(
ùs
)<<8;

95 
size
|=
	`fgëc
(
ùs
);

96 if(!
size
)

98 
uöt8
 *
°¨t
;

99 
uöt8
 
b
;

100 
size
=
	`fgëc
(
ùs
)<<8;

101 
size
|=
	`fgëc
(
ùs
);

105 if((
off£t
+
size
)>
de°
->size)

107 
uöt8
 *
tmp
;

110 
tmp
=(
uöt8
 *)
	`ªÆloc
(
de°
->
d©a
,
off£t
+
size
);

111 if(!
tmp
)

113 
	`FCEU_¥ötf
(" O›s. IPSÖ©ch %d—y≥ RLEËg€†bey⁄dÉnd o‡fûe. CouldÇŸáŒoˇã mem‹y.\n",
cou¡
);

114 
	`f˛o£
(
ùs
);

117 
de°
->
size
=
off£t
+size;

118 
de°
->
d©a
=
tmp
;

119 
	`mem£t
(
de°
->
d©a
+de°->
size
,0,
off£t
+size-dest->size);

121 
b
=
	`fgëc
(
ùs
);

122 
°¨t
=
de°
->
d©a
+
off£t
;

125 *
°¨t
=
b
;

126 
°¨t
++;

127 } --
size
);

132 if((
off£t
+
size
)>
de°
->size)

134 
uöt8
 *
tmp
;

137 
tmp
=(
uöt8
 *)
	`ªÆloc
(
de°
->
d©a
,
off£t
+
size
);

138 if(!
tmp
)

140 
	`FCEU_¥ötf
(" O›s. IPSÖ©ch %d—y≥Ç‹mÆËg€†bey⁄dÉnd o‡fûe. CouldÇŸáŒoˇã mem‹y.\n",
cou¡
);

141 
	`f˛o£
(
ùs
);

144 
de°
->
d©a
=
tmp
;

145 
	`mem£t
(
de°
->
d©a
+de°->
size
,0,
off£t
+size-dest->size);

147 
	`‰ód
(
de°
->
d©a
+
off£t
,1,
size
,
ùs
);

149 
cou¡
++;

151 
	`f˛o£
(
ùs
);

152 
	`FCEU_¥ötf
(" Hard IPSÉnd!\n");

153 
	}
}

156 #ifde‡
ZLIB


159 *
	$MakeZùWøp
(*
tz
)

161 
unz_fûe_öfo
 
ufo
;

162 
ZIPWRAP
 *
tmp
;

164 if(!(
tmp
=
	`FCEU_mÆloc
((
ZIPWRAP
))))

165 
d‹ë
;

167 
	`unzGëCuºítFûeInfo
(
tz
,&
ufo
,0,0,0,0,0,0);

169 
tmp
->
loˇti⁄
=0;

170 
tmp
->
size
=
ufo
.
uncom¥es£d_size
;

171 if(!(
tmp
->
d©a
=
	`FCEU_mÆloc
(
ufo
.
uncom¥es£d_size
)))

173 
tmp
=0;

174 
d‹ë
;

177 
	`unzRódCuºítFûe
(
tz
,
tmp
->
d©a
,
ufo
.
uncom¥es£d_size
);

179 
d‹ë
:

181 
	`unzClo£CuºítFûe
(
tz
);

182 
	`unzClo£
(
tz
);

184  
tmp
;

185 
	}
}

188 #i‚de‡
__GNUC__


189 
	#°rˇ£cmp
 
°rcmp


	)

192 
	$FASTAPASS
(2Ë
	$FCEU_f›í
(*
∑th
, *
mode
)

194 *
t
;

196 #ifde‡
ZLIB


197 
unzFûe
 
tz
;

198 if((
tz
=
	`unzO≥n
(
∑th
)))

202 if(
	`unzGoToFú°Fûe
(
tz
)==
UNZ_OK
)

206 
ãmpu
[512];

208 
	`unzGëCuºítFûeInfo
(
tz
,0,
ãmpu
,512,0,0,0,0);

209 
ãmpu
[511]=0;

210 if(
	`°æí
(
ãmpu
)>=4)

212 *
za
=
ãmpu
+
	`°æí
(tempu)-4;

213 if(!
	`°rˇ£cmp
(
za
,".nes") || !strcasecmp(za,".fds") ||

214 !
	`°rˇ£cmp
(
za
,".nsf") || !strcasecmp(za,".unf") ||

215 !
	`°rˇ£cmp
(
za
,".nez"))

218 if(
	`°æí
(
ãmpu
)>=5)

220 if(!
	`°rˇ£cmp
(
ãmpu
+
	`°æí
(tempu)-5,".unif"))

223 if(
	`unzGoToNextFûe
(
tz
)!=
UNZ_OK
)

225 if(
	`unzGoToFú°Fûe
(
tz
)!=
UNZ_OK
Ë
zpÁû
;

229 if(
	`unzO≥nCuºítFûe
(
tz
)!=
UNZ_OK
)

230 
zpÁû
;

234 
zpÁû
:

235 
	`unzClo£
(
tz
);

239 
x
=0;x<8;x++)

240 if(!
des˘abÀ
[
x
])

242 if(!(
des˘abÀ
[
x
]=
	`MakeZùWøp
(
tz
)))

244 ((
x
+1)|0x8000);

249 #ifde‡
ZLIB


250 if((
t
=
	`f›í
(
∑th
,"rb")))

252 
uöt32
 
magic
;

254 
magic
=
	`fgëc
(
t
);

255 
magic
|=
	`fgëc
(
t
)<<8;

256 
magic
|=
	`fgëc
(
t
)<<16;

258 
	`f˛o£
(
t
);

260 if(
magic
==0x088b1f)

262 if((
t
=
	`gz›í
(
∑th
,
mode
)))

263 
x
=0;x<8;x++)

264 if(!
des˘abÀ
[
x
])

266 
des˘abÀ
[
x
]=
t
;

267 ((
x
+1)|0x4000);

273 if((
t
=
	`f›í
(
∑th
,
mode
)))

275 
	`f£ek
(
t
,0,
SEEK_SET
);

276 
x
=0;x<8;x++)

277 if(!
des˘abÀ
[
x
])

279 
des˘abÀ
[
x
]=
t
;

280 (
x
+1);

284 
	}
}

286 
	$FASTAPASS
(1Ë
	$FCEU_f›í_f‹˚mem
(*
∑th
)

288 
MEMWRAP
 *
tmp
;

289 
size
;

290 
Â
;

292 
Â
=
	`FCEU_f›í
(
∑th
, "rb");

293 i‡(!
Â
)  0;

295 i‡(
Â
&0x8000)  fp;

297 i‡(!(
tmp
=
	`FCEU_mÆloc
((*tmp))))

298 
ªå
;

300 
size
=
	`FCEU_fgësize
(
Â
);

301 i‡(
size
 <0Ë
ªå
;

302 
tmp
->
size
=size;

303 
tmp
->
d©a
=
	`FCEU_mÆloc
(
size
);

304 i‡(!
tmp
->
d©a
Ë
ªå
;

305 
	`FCEU_‰ód
(
tmp
->
d©a
, 1, 
size
, 
Â
);

306 
	`FCEU_f˛o£
(
Â
); fp=0;

307 
tmp
->
loˇti⁄
=0;

309 
x
=0;x<8;x++)

310 if(!
des˘abÀ
[
x
])

312 
des˘abÀ
[
x
]=
tmp
;

313  (
x
+1)|0x8000;

316 
ªå
:

317 i‡(
Â
Ë
	`FCEU_f˛o£
(fp);

318 i‡(
tmp
 &&Åmp->
d©a
Ë
	`FCEU_‰ì
(tmp->data);

319 i‡(
tmp
Ë
	`FCEU_‰ì
(tmp);

321 
	}
}

323 
	$FASTAPASS
(1Ë
	$FCEU_f˛o£
(
°ªam
)

325 #ifde‡
ZLIB


326 if(
°ªam
&0x4000)

328 
	`gz˛o£
(
des˘abÀ
[(
°ªam
&255)-1]);

329 
des˘abÀ
[(
°ªam
&255)-1]=0;

331 if(
°ªam
&0x8000)

333 
	`‰ì
(((
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1])->
d©a
);

334 
	`‰ì
(
des˘abÀ
[(
°ªam
&255)-1]);

335 
des˘abÀ
[(
°ªam
&255)-1]=0;

340 
	`f˛o£
(
des˘abÀ
[
°ªam
-1]);

341 
des˘abÀ
[
°ªam
-1]=0;

342 #ifde‡
ZLIB


346 
	}
}

348 
size_t
 
	$FASTAPASS
(3Ë
	$FCEU_‰ód
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
°ªam
)

350 #ifde‡
ZLIB


351 if(
°ªam
&0x4000)

353  
	`gzªad
(
des˘abÀ
[(
°ªam
&255)-1],
±r
,
size
*
nmemb
);

355 if(
°ªam
&0x8000)

357 
ZIPWRAP
 *
wz
;

358 
uöt32
 
tŸÆ
=
size
*
nmemb
;

360 
wz
=(
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1];

361 if(
wz
->
loˇti⁄
>=wz->
size
)  0;

363 if((
wz
->
loˇti⁄
+
tŸÆ
)>wz->
size
)

365 
ak
=
wz
->
size
-wz->
loˇti⁄
;

366 
	`mem˝y
((
uöt8
*)
±r
,
wz
->
d©a
+wz->
loˇti⁄
,
ak
);

367 
wz
->
loˇti⁄
=wz->
size
;

368 (
ak
/
size
);

372 
	`mem˝y
((
uöt8
*)
±r
,
wz
->
d©a
+wz->
loˇti⁄
,
tŸÆ
);

373 
wz
->
loˇti⁄
+=
tŸÆ
;

374  
nmemb
;

380  
	`‰ód
(
±r
,
size
,
nmemb
,
des˘abÀ
[
°ªam
-1]);

381 #ifde‡
ZLIB


384 
	}
}

386 
size_t
 
	$FASTAPASS
(3Ë
	$FCEU_fwrôe
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
°ªam
)

388 #ifde‡
ZLIB


389 if(
°ªam
&0x4000)

391  
	`gzwrôe
(
des˘abÀ
[(
°ªam
&255)-1],
±r
,
size
*
nmemb
);

393 if(
°ªam
&0x8000)

399  
	`fwrôe
(
±r
,
size
,
nmemb
,
des˘abÀ
[
°ªam
-1]);

400 
	}
}

402 
	$FASTAPASS
(3Ë
	$FCEU_f£ek
(
°ªam
, 
off£t
, 
whí˚
)

404 #ifde‡
ZLIB


405 if(
°ªam
&0x4000)

407  
	`gz£ek
(
des˘abÀ
[(
°ªam
&255)-1],
off£t
,
whí˚
);

409 if(
°ªam
&0x8000)

411 
ZIPWRAP
 *
wz
;

412 
wz
=(
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1];

414 
whí˚
)

416 
SEEK_SET
:if(
off£t
>=
wz
->
size
)

418 
wz
->
loˇti⁄
=
off£t
;;

419 
SEEK_CUR
:if(
off£t
+
wz
->
loˇti⁄
>wz->
size
)

421 
wz
->
loˇti⁄
+=
off£t
;

428  
	`f£ek
(
des˘abÀ
[
°ªam
-1],
off£t
,
whí˚
);

429 
	}
}

431 
	$FASTAPASS
(1Ë
	$FCEU_·ñl
(
°ªam
)

433 #ifde‡
ZLIB


434 if(
°ªam
&0x4000)

436  
	`gzãŒ
(
des˘abÀ
[(
°ªam
&255)-1]);

438 if(
°ªam
&0x8000)

440  (((
ZIPWRAP
 *)
des˘abÀ
[(
°ªam
&255)-1])->
loˇti⁄
);

444  
	`·ñl
(
des˘abÀ
[
°ªam
-1]);

445 
	}
}

447 
	$FASTAPASS
(1)
	$FCEU_ªwöd
(
°ªam
)

449 #ifde‡
ZLIB


450 if(
°ªam
&0x4000)

452 
	`gzªwöd
(
des˘abÀ
[(
°ªam
&255)-1]);

454 if(
°ªam
&0x8000)

456 ((
ZIPWRAP
 *)
des˘abÀ
[(
°ªam
&255)-1])->
loˇti⁄
=0;

460 #ifde‡
_WIN32_WCE


461 
	`f£ek
(
des˘abÀ
[
°ªam
-1],0,
SEEK_SET
);

463 
	`ªwöd
(
des˘abÀ
[
°ªam
-1]);

465 
	}
}

467 
	$FASTAPASS
(2Ë
	$FCEU_ªad32
(*
Bufo
, 
°ªam
)

469 #ifde‡
ZLIB


470 if(
°ªam
&0xC000)

472 
uöt32
 
t
;

473 #i‚de‡
LSB_FIRST


474 
uöt8
 
x
[4];

476 if(
°ªam
&0x8000)

478 
ZIPWRAP
 *
wz
;

479 
wz
=(
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1];

480 if(
wz
->
loˇti⁄
+4>wz->
size
)

482 
	`mem˝y
(&
t
, 
wz
->
d©a
+wz->
loˇti⁄
, 4);

483 
wz
->
loˇti⁄
+=4;

485 if(
°ªam
&0x4000)

486 
	`gzªad
(
des˘abÀ
[(
°ªam
&255)-1],&
t
,4);

487 #i‚de‡
LSB_FIRST


488 
x
[0]=
t
[3];

489 
x
[1]=
t
[2];

490 
x
[2]=
t
[1];

491 
x
[3]=
t
[0];

492 *(
uöt32
*)
Bufo
=*(uöt32*)
x
;

494 
	`mem˝y
(
Bufo
, &
t
, 4);

501  
	`ªad32
(
Bufo
,
des˘abÀ
[
°ªam
-1]);

503 
	}
}

505 
	$FASTAPASS
(1Ë
	$FCEU_fgëc
(
°ªam
)

507 #ifde‡
ZLIB


508 if(
°ªam
&0x4000)

509  
	`gzgëc
(
des˘abÀ
[(
°ªam
&255)-1]);

510 if(
°ªam
&0x8000)

512 
ZIPWRAP
 *
wz
;

513 
wz
=(
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1];

514 if(
wz
->
loˇti⁄
<wz->
size
)

515  
wz
->
d©a
[wz->
loˇti⁄
++];

516  
EOF
;

520  
	`fgëc
(
des˘abÀ
[
°ªam
-1]);

521 
	}
}

523 
	$FASTAPASS
(1Ë
	$FCEU_fgësize
(
°ªam
)

525 #ifde‡
ZLIB


526 if(
°ªam
&0x4000)

528 
x
,
t
;

529 
t
=
	`gzãŒ
(
des˘abÀ
[(
°ªam
&255)-1]);

530 
	`gzªwöd
(
des˘abÀ
[(
°ªam
&255)-1]);

531 
x
=0;
	`gzgëc
(
des˘abÀ
[(
°ªam
&255)-1]Ë!
EOF
; x++);

532 
	`gz£ek
(
des˘abÀ
[(
°ªam
&255)-1],
t
,
SEEK_SET
);

533 (
x
);

535 if(
°ªam
&0x8000)

536  ((
ZIPWRAP
*)
des˘abÀ
[(
°ªam
&255)-1])->
size
;

540 
t
,
r
;

541 
t
=
	`·ñl
(
des˘abÀ
[
°ªam
-1]);

542 
	`f£ek
(
des˘abÀ
[
°ªam
-1],0,
SEEK_END
);

543 
r
=
	`·ñl
(
des˘abÀ
[
°ªam
-1]);

544 
	`f£ek
(
des˘abÀ
[
°ªam
-1],
t
,
SEEK_SET
);

545  
r
;

547 
	}
}

549 
	$FASTAPASS
(1Ë
	$FCEU_fißrchive
(
°ªam
)

551 #ifde‡
ZLIB


552 if(
°ªam
&0x8000)

556 
	}
}

	@file.h

1 
	$FASTAPASS
(2Ë
	`FCEU_f›í
(*
∑th
, *
mode
);

2 
	$FASTAPASS
(1Ë
	`FCEU_f˛o£
(
°ªam
);

3 
size_t
 
	$FASTAPASS
(3Ë
	`FCEU_‰ód
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
°ªam
);

4 
size_t
 
	$FASTAPASS
(3Ë
	`FCEU_fwrôe
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
°ªam
);

5 
	$FASTAPASS
(3Ë
	`FCEU_f£ek
(
°ªam
, 
off£t
, 
whí˚
);

6 
	$FASTAPASS
(1Ë
	`FCEU_·ñl
(
°ªam
);

7 
	$FASTAPASS
(1Ë
	`FCEU_ªwöd
(
°ªam
);

8 
	$FASTAPASS
(2Ë
	`FCEU_ªad32
(*
Bufo
, 
Â
);

9 
	$FASTAPASS
(1Ë
	`FCEU_fgëc
(
°ªam
);

10 
	$FASTAPASS
(1Ë
	`FCEU_fgësize
(
°ªam
);

11 
	$FASTAPASS
(1Ë
	`FCEU_fißrchive
(
°ªam
);

13 
	`AµlyIPS
(
FILE
 *
ùs
, 
de°f
);

14 
	$FASTAPASS
(1Ë
	`FCEU_f›í_f‹˚mem
(*
∑th
);

16 
	#FCEUD_UTF8f›í
 
f›í


	)

	@general.c

21 #i‚de‡
_GNU_SOURCE


22 
	#_GNU_SOURCE


24 

	)

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<°d¨g.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

34 
	~"ty≥s.h
"

35 
	~"f˚.h
"

37 
	~"gíîÆ.h
"

38 
	~"°©e.h
"

39 
	~"movõ.h
"

41 
	~"drivî.h
"

43 
	~"md5.h
"

44 
	~"svga.h
"

46 
	gBa£Dúe˘‹y
[2048];

47 
	gFûeBa£
[2048];

48 
	gFûeExt
[2048];

50 
	gFûeBa£Dúe˘‹y
[2048];

52 
	$FCEUI_SëBa£Dúe˘‹y
(*
dú
)

54 
	`°∫˝y
(
Ba£Dúe˘‹y
,
dú
,2047);

55 
Ba£Dúe˘‹y
[2047]=0;

56 
	}
}

58 *
	godús
[
FCEUIOD__COUNT
]={0,0,0,0,0};

60 
	$FCEUI_SëDúOvîride
(
which
, *
n
)

63 if(
which
 < 
FCEUIOD__COUNT
)

64 
odús
[
which
]=
n
;

67 if(
FCEUGameInfo
)

69 if(
which
==
FCEUIOD_STATE
)

70 
	`FCEUSS_CheckSèãs
();

71 if(
which
 =
FCEUIOD_MISC
)

72 
	`FCEUMOV_CheckMovõs
();

75 
	}
}

77 #i‚de‡
HAVE_ASPRINTF


78 
	$a•rötf
(**
°Ω
, c⁄° *
fmt
, ...)

80 
va_li°
 
≠
;

81 
ªt
;

83 
	`va_°¨t
(
≠
,
fmt
);

84 if(!(*
°Ω
=
	`mÆloc
(2048)))

86 
ªt
=
	`v¢¥ötf
(*
°Ω
,2048,
fmt
,
≠
);

87 
	`va_íd
(
≠
);

88 (
ªt
);

89 
	}
}

92 * 
	$FCEU_GëP©h
(
ty≥
)

94 *
ªt
=0;

95 
ty≥
)

97 
FCEUMKF_STATE
:if(
odús
[
FCEUIOD_STATE
])

98 
ªt
=
	`°rdup
(
odús
[
FCEUIOD_STATE
]);

100 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ",
Ba£Dúe˘‹y
);

102 
FCEUMKF_MOVIE
:if(
odús
[
FCEUIOD_MISC
])

103 
ªt
=
	`°rdup
(
odús
[
FCEUIOD_MISC
]);

105 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ",
Ba£Dúe˘‹y
);

108 (
ªt
);

109 
	}
}

111 *
	$FCEU_MakeP©h
(
ty≥
, c⁄° * 
fûeba£
)

113 *
ªt
=0;

115 
ty≥
)

117 
FCEUMKF_MOVIE
:if(
odús
[
FCEUIOD_MISC
])

118 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s",
odús
[
FCEUIOD_MISC
],
fûeba£
);

120 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ"PSS"%s",
Ba£Dúe˘‹y
,
fûeba£
);

123 (
ªt
);

124 
	}
}

126 *
	$FCEU_MakeFName
(
ty≥
, 
id1
, *
cd1
)

128 *
ªt
=0;

129 
°©
 
tmp°©
;

131 
ty≥
)

133 
FCEUMKF_NPTEMP
: 
	`a•rötf
(&
ªt
,"%s"
PSS
"m590∂qd94fo.tmp",
Ba£Dúe˘‹y
);;

134 
FCEUMKF_MOVIE
:if(
id1
>=0)

136 if(
odús
[
FCEUIOD_MISC
])

137 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.%d.fcm",
odús
[
FCEUIOD_MISC
],
FûeBa£
,
id1
);

139 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ"PSS"%s.%d.fcm",
Ba£Dúe˘‹y
,
FûeBa£
,
id1
);

140 if(
	`°©
(
ªt
,&
tmp°©
)==-1)

142 if(
odús
[
FCEUIOD_MISC
])

143 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.%d.fcm",
odús
[
FCEUIOD_MISC
],
FûeBa£
,
id1
);

145 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ"PSS"%s.%d.fcm",
Ba£Dúe˘‹y
,
FûeBa£
,
id1
);

150 if(
odús
[
FCEUIOD_MISC
])

151 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.fcm",
odús
[
FCEUIOD_MISC
],
FûeBa£
);

153 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ"PSS"%s.fcm",
Ba£Dúe˘‹y
,
FûeBa£
);

156 
FCEUMKF_STATE
:if(
odús
[
FCEUIOD_STATE
])

158 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.fc%d",
odús
[
FCEUIOD_STATE
],
FûeBa£
,
id1
);

163 
	`a•rötf
(&
ªt
,"%s"
PSS
"fcs"PSS"%s.fc%d",
Ba£Dúe˘‹y
,
FûeBa£
,
id1
);

166 if(
	`°©
(
ªt
,&
tmp°©
)==-1)

168 if(
odús
[
FCEUIOD_STATE
])

170 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.fc%d",
odús
[
FCEUIOD_STATE
],
FûeBa£
,
id1
);

175 
	`a•rötf
(&
ªt
,"%s"
PSS
"fcs"PSS"%s.fc%d",
Ba£Dúe˘‹y
,
FûeBa£
,
id1
);

180 
FCEUMKF_SNAP
:

181 if(
FSëtögs
.
S«pName
)

183 if(
odús
[
FCEUIOD_SNAPS
])

184 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s-%d.%s",
odús
[
FCEUIOD_SNAPS
],
FûeBa£
,
id1
,
cd1
);

186 
	`a•rötf
(&
ªt
,"%s"
PSS
"¢≠s"PSS"%s-%d.%s",
Ba£Dúe˘‹y
,
FûeBa£
,
id1
,
cd1
);

190 if(
odús
[
FCEUIOD_SNAPS
])

191 
	`a•rötf
(&
ªt
,"%s"
PSS
"%d.%s",
odús
[
FCEUIOD_SNAPS
],
id1
,
cd1
);

193 
	`a•rötf
(&
ªt
,"%s"
PSS
"¢≠s"PSS"%d.%s",
Ba£Dúe˘‹y
,
id1
,
cd1
);

196 
FCEUMKF_FDS
:if(
odús
[
FCEUIOD_NV
])

197 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.fds",
odús
[
FCEUIOD_NV
],
FûeBa£
);

199 
	`a•rötf
(&
ªt
,"%s"
PSS
"ßv"PSS"%s.fds",
Ba£Dúe˘‹y
,
FûeBa£
);

201 
FCEUMKF_SAV
:if(
odús
[
FCEUIOD_NV
])

202 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.%s",
odús
[
FCEUIOD_NV
],
FûeBa£
,
cd1
);

204 
	`a•rötf
(&
ªt
,"%s"
PSS
"ßv"PSS"%s.%s",
Ba£Dúe˘‹y
,
FûeBa£
,
cd1
);

206 
FCEUMKF_CHEAT
:

207 if(
odús
[
FCEUIOD_CHEATS
])

208 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.cht",
odús
[
FCEUIOD_CHEATS
],
FûeBa£
);

210 
	`a•rötf
(&
ªt
,"%s"
PSS
"chóts"PSS"%s.cht",
Ba£Dúe˘‹y
,
FûeBa£
);

212 
FCEUMKF_IPS
: 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s%s.ùs",
FûeBa£Dúe˘‹y
,
FûeBa£
,
FûeExt
);

214 
FCEUMKF_GGROM
:
	`a•rötf
(&
ªt
,"%s"
PSS
"gg.rom",
Ba£Dúe˘‹y
);;

215 
FCEUMKF_FDSROM
:
	`a•rötf
(&
ªt
,"%s"
PSS
"disksys.rom",
Ba£Dúe˘‹y
);;

216 
FCEUMKF_PALETTE
:

217 if(
odús
[
FCEUIOD_MISC
])

218 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s.∑l",
odús
[
FCEUIOD_MISC
],
FûeBa£
);

220 
	`a•rötf
(&
ªt
,"%s"
PSS
"∑l"PSS"%s.∑l",
Ba£Dúe˘‹y
,
FûeBa£
);

222 
FCEUMKF_MOVIEGLOB
:

223 if(
odús
[
FCEUIOD_MISC
])

225 
	`a•rötf
(&
ªt
,"%s"
PSS
"*.???",
odús
[
FCEUIOD_MISC
]);

228 
	`a•rötf
(&
ªt
,"%s"
PSS
"movõ"PSS"*.???",
Ba£Dúe˘‹y
);

230 
FCEUMKF_MOVIEGLOB2
:

231 
	`a•rötf
(&
ªt
,"%s"
PSS
"*.???",
Ba£Dúe˘‹y
);

233 
FCEUMKF_STATEGLOB
:

234 if(
odús
[
FCEUIOD_STATE
])

235 
	`a•rötf
(&
ªt
,"%s"
PSS
"%s*.fc?",
odús
[
FCEUIOD_STATE
],
FûeBa£
);

237 
	`a•rötf
(&
ªt
,"%s"
PSS
"fcs"PSS"%s*.fc?",
Ba£Dúe˘‹y
,
FûeBa£
);

240 (
ªt
);

241 
	}
}

243 
	$GëFûeBa£
(c⁄° *
f
)

245 c⁄° *
ç1
,*
ç3
;

247 #i‡
PSS_STYLE
==4

248 
ç1
=((*)
	`°ºchr
(
f
,':'));

249 #ñi‡
PSS_STYLE
==1

250 
ç1
=((*)
	`°ºchr
(
f
,'/'));

252 
ç1
=((*)
	`°ºchr
(
f
,'\\'));

253 #i‡
PSS_STYLE
!=3

254 
ç3
=((*)
	`°ºchr
(
f
,'/'));

255 if(
ç1
<
ç3
)Åp1=tp3;

258 if(!
ç1
)

260 
ç1
=
f
;

261 
	`°r˝y
(
FûeBa£Dúe˘‹y
,".");

265 
	`mem˝y
(
FûeBa£Dúe˘‹y
,
f
,
ç1
-f);

266 
FûeBa£Dúe˘‹y
[
ç1
-
f
]=0;

267 
ç1
++;

270 if(((
ç3
=
	`°ºchr
(
f
,'.'))!=
NULL
Ë&& (ç3>
ç1
))

272 
	`mem˝y
(
FûeBa£
,
ç1
,
ç3
-tp1);

273 
FûeBa£
[
ç3
-
ç1
]=0;

274 
	`°r˝y
(
FûeExt
,
ç3
);

278 
	`°r˝y
(
FûeBa£
,
ç1
);

279 
FûeExt
[0]=0;

281 
	}
}

283 
uöt32
 
	$uµow2
(
uöt32
 
n
)

285 
x
;

287 
x
=31;x>=0;x--)

288 if(
n
&(1<<
x
))

290 if((1<<
x
)!=
n
)

291 (1<<(
x
+1));

294  
n
;

295 
	}
}

	@general.h

1 
GëFûeBa£
(c⁄° *
f
);

2 
uöt32
 
uµow2
(uöt32 
n
);

4 * 
FCEU_GëP©h
(
ty≥
);

5 *
FCEU_MakeP©h
(
ty≥
, c⁄° * 
fûeba£
);

6 *
FCEU_MakeFName
(
ty≥
, 
id1
, *
cd1
);

8 
	#FCEUMKF_STATE
 1

	)

9 
	#FCEUMKF_SNAP
 2

	)

10 
	#FCEUMKF_SAV
 3

	)

11 
	#FCEUMKF_CHEAT
 4

	)

12 
	#FCEUMKF_FDSROM
 5

	)

13 
	#FCEUMKF_PALETTE
 6

	)

14 
	#FCEUMKF_GGROM
 7

	)

15 
	#FCEUMKF_IPS
 8

	)

16 
	#FCEUMKF_FDS
 9

	)

17 
	#FCEUMKF_MOVIE
 10

	)

18 
	#FCEUMKF_NPTEMP
 11

	)

19 
	#FCEUMKF_MOVIEGLOB
 12

	)

20 
	#FCEUMKF_STATEGLOB
 13

	)

21 
	#FCEUMKF_MOVIEGLOB2
 14

	)

	@git.h

1 #i‚de‡
__FCEU_GIT


2 
	#__FCEU_GIT


	)

4 
	#GIT_CART
 0

	)

5 
	#GIT_VSUNI
 1

	)

6 
	#GIT_FDS
 2

	)

7 
	#GIT_NSF
 3

	)

9 
	#GIV_NTSC
 0

	)

10 
	#GIV_PAL
 1

	)

11 
	#GIV_USER
 2

	)

14 
uöt8
 *
	m«me
;

16 
	mty≥
;

17 
	mvidsys
;

18 
	möput
[2];

20 
	möputfc
;

22 
	mc•ecül
;

25 
uöt8
 
	mMD5
[16];

26 
	msoundøã
;

27 
	msoundch™
;

28 } 
	tFCEUGI
;

	@ines-bad.h

1 { 0xecf78d8a13a030a6LL, "AòSí£ònÿOshõã", 
	gINESB_HACKED
 },

2 { 0x10f90ba5bd55c22eLL, "Alõ¿Syndrome", 
	gINESB_HACKED
 },

3 { 0x4712856d3e12f21fLL, "Akumajou Dí£tsu", 
	gINESB_HACKED
 },

4 { 0x0d69ab3ad28ad1c2LL, "B™™a", 
	gINESB_INCOMPLETE
 },

5 { 0x85d2c348a161cdbfLL, "BiÿSíshòD™", 
	gINESB_HACKED
 },

6 { 0x18fdb7c16Ø8cb5cLL, "Bucky O'H¨e", 
	gINESB_CORRUPT
 },

7 { 0xe27c48302108d11bLL, "ChibòM¨ukÿCh™", 
	gINESB_HACKED
 },

8 { 0x9d1f505c6ba507bfLL, "C⁄åa", 
	gINESB_HACKED
 },

9 { 0x60936436d3ó0ab6LL, "Crisi†F‹˚", 
	gINESB_HACKED
 },

10 { 0xcf31097ddbb03c5dLL, "Cry°Æi†(PrŸŸy≥)", 
	gINESB_CORRUPT
 },

11 { 0x92080a8˚94200óLL, "DigôÆ Devû St‹y II", 
	gINESB_HACKED
 },

12 { 0x97f133d8bc1c28dbLL, "Døg⁄ BÆl", 
	gINESB_HACKED
 },

13 { 0x6c2a2f95c2„4b6eLL, "Døg⁄ BÆl", 
	gINESB_HACKED
 },

14 { 0x767Øff62963c58fLL, "Døg⁄ BÆl", 
	gINESB_HACKED
 },

15 { 0x500b267abb323005LL, "Døg⁄ W¨ri‹ 4", 
	gINESB_CORRUPT
 },

16 { 0x02bdcf375704784bLL, "Erik®tÿS©‹uÇÿYumêBoukí", 
	gINESB_HACKED
 },

17 { 0xd4„a9d2633b9186LL, "Fami°®91", 
	gINESB_HACKED
 },

18 { 0xfdf8c812839b61f0LL, "Fami°®92", 
	gINESB_HACKED
 },

19 { 0xb5bb1d0fb47d0850LL, "Fami°®93", 
	gINESB_HACKED
 },

20 { 0x30471e773f7cdc89LL, "Fami°®94", 
	gINESB_HACKED
 },

21 { 0x76c5c44ffb4a0bd7LL, "F™èsy Z⁄e", 
	gINESB_HACKED
 },

22 { 0x27da2b0c500dc346LL, "FúêEmbÀm", 
	gINESB_HACKED
 },

23 { 0xb470bfb90e2b1049LL, "FúêEmbÀm Gaidí", 
	gINESB_HACKED
 },

24 { 0x23214„456fba2˚LL, "G™b¨êG€m⁄ 2", 
	gINESB_HACKED
 },

25 { 0xbf8b22524e8329d9LL, "G™b¨êG€m⁄ Gaidí", 
	gINESB_HACKED
 },

26 { 0xa97041c3da0134e3LL, "GegegênÿKô¨ou 2", 
	gINESB_INCOMPLETE
 },

27 { 0x805db49a86db5449LL, "Go⁄õs", 
	gINESB_HACKED
 },

28 { 0xc5abdØ65ac49b6bLL, "Gødiu†2", 
	gINESB_HACKED
 },

29 { 0x04aÁe4ad480c11cLL, "Gødiu†2", 
	gINESB_HACKED
 },

30 { 0x9b4bad37b5498992LL, "Gødiu†2", 
	gINESB_HACKED
 },

31 { 0xb068d4ac10ef848eLL, "Highway Sèr", 
	gINESB_HACKED
 },

32 { 0xbf5175271e5019c3LL, "Kaikësu Y™cham¨u 3", 
	gINESB_HACKED
 },

33 { 0xfb4b508a236bbba3LL, "SÆam™dî", 
	gINESB_HACKED
 },

34 { 0x3716c4bebf885344LL, "Su≥∏M¨iÿBros.", 
	gINESB_HACKED
 },

35 { 0x1895afc6ìf26c7dLL, "Su≥∏M¨iÿBros.", 
	gINESB_HACKED
 },

36 { 0x103fc85d978b861bLL, "SwìàHome", 
	gINESB_CORRUPT
 },

37 { 0xfffda4407d80885aLL, "SwìàHome", 
	gINESB_CORRUPT
 },

	@ines-correct.h

	@ines.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"ty≥s.h
"

27 
	~"x6502.h
"

28 
	~"f˚.h
"

29 
	~"ˇπ.h
"

30 
	~"µu.h
"

32 
	#INESPRIV


	)

33 
	~"öes.h
"

34 
	~"unif.h
"

35 
	~"gíîÆ.h
"

36 
	~"°©e.h
"

37 
	~"fûe.h
"

38 
	~"mem‹y.h
"

39 
	~"¸c32.h
"

40 
	~"md5.h
"

41 
	~"chót.h
"

42 
	~"vsuni.h
"

44 
	~"drivî.h
"

45 
	~"svga.h
"

47 
SFORMAT
 
FCEUVSUNI_STATEINFO
[];

49 
uöt8
 *
	gåaöîpoo
=0;

50 
uöt8
 *
	gROM
=
NULL
;

52 
uöt8
 *
	gVROM
=
NULL
;

54 
C¨tInfo
 
	giNESC¨t
;

56 
uöt8
 
	giNESMúr‹ög
=0;

57 
uöt16
 
	giNESCHRB™kLi°
[8]={0,0,0,0,0,0,0,0};

58 
öt32
 
	giNESIRQL©ch
=0,
	giNESIRQCou¡
=0;

59 
uöt8
 
	giNESIRQa
=0;

61 
uöt32
 
	gROM_size
=0;

62 
uöt32
 
	gVROM_size
=0;

64 
iNESPowî
();

65 
NewiNES_Inô
(
num
);

67 (*
M≠Clo£
)();

68 (*
M≠≥rRe£t
)();

70 
M≠≥rNo
=0;

72 
iNES_HEADER
 
hód
;

78 
	$DECLFR
(
TøöîRód
)

80 (
åaöîpoo
[
A
&0x1FF]);

81 
	}
}

83 
	$iNESGI
(
h
, *
∑øm
)

85 
h
)

87 
GI_RESETM2
:

88 if(
M≠≥rRe£t
)

89 
	`M≠≥rRe£t
();

90 if(
iNESC¨t
.
Re£t
)

91 
iNESC¨t
.
	`Re£t
();

93 
GI_POWER
:

94 if(
iNESC¨t
.
Powî
)

95 
iNESC¨t
.
	`Powî
();

96 if(
åaöîpoo
)

98 
x
;

99 
x
=0;x<512;x++)

103 
A
=0x7000+
x
;

104 
BWrôe
[
A
](A,
åaöîpoo
[
x
]);

105 if(
ARód
[
A
](A)!=
åaöîpoo
[
x
])

107 
	`SëRódH™dÀr
(0x7000,0x71FF,
TøöîRód
);

113 
GI_CLOSE
:

115 
	`FCEU_SaveGameSave
(&
iNESC¨t
);

117 if(
iNESC¨t
.
Clo£
ËiNESC¨t.
	`Clo£
();

118 if(
ROM
Ë{
	`‰ì
(ROM);ROM=0;}

119 if(
VROM
Ë{
	`‰ì
(VROM);VROM=0;}

120 if(
M≠Clo£
Ë
	`M≠Clo£
();

121 if(
åaöîpoo
Ë{
	`FCEU_g‰ì
(trainerpoo);trainerpoo=0;}

122 
	`Re£tExSèã
(0,0);

125 
GI_INFOSTRING
:

127 
M≠≥rNo
;

128 
M≠≥rNo
 = (
hód
.
ROM_ty≥
>>4);

129 
M≠≥rNo
|=(
hód
.
ROM_ty≥2
&0xF0);

130 
	`•rötf
(
∑øm
, "iNES, %s, M≠≥r: %d%s%s", 
PAL
?"PAL":"NTSC",

131 
M≠≥rNo
, (
hód
.
ROM_ty≥
&2)?", BB":"", (head.ROM_type&4)?", T":"");

135 
	}
}

137 
uöt32
 
	giNESGameCRC32
=0;

139 
	sCRCMATCH
 {

140 
uöt32
 
	m¸c
;

141 *
	m«me
;

144 
	sINPSEL
 {

145 
uöt32
 
	m¸c32
;

146 
	möput1
;

147 
	möput2
;

148 
	möputfc
;

152 
	$SëI≈ut
()

154 
INPSEL
 
moo
[]=

156 {0x3a1694f9,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_4PLAYER
},

159 {0xc3c0811d,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_OEKAKIDS
},

160 {0x9d048ó4,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_OEKAKIDS
},

162 {0xaf4010ó,
SI_GAMEPAD
,
SI_POWERPADB
,-1},

163 {0xd74b2719,
SI_GAMEPAD
,
SI_POWERPADB
,-1},

164 {0x61d86167,
SI_GAMEPAD
,
SI_POWERPADB
,-1},

165 {0x6435c095,
SI_GAMEPAD
,
SI_POWERPADB
,-1},

168 {0x47232739,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_TOPRIDER
},

170 {0x48ˇ0ì1,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_BWORLD
},

171 {0x9f8f200a,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERA
},

172 {0x9044550e,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERA
},

173 {0x2f128512,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERA
},

174 {0x60ad090a,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERA
},

176 {0x8a12a7d9,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

177 {0xó90f3e2,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

178 {0x370˚b65,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

180 {0x6cˇ1c1f,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

181 {0x29de87af,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

182 {0xbba58be5,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

183 {0xó90f3e2,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_FTRAINERB
},

185 {0xd9f45be9,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_QUIZKING
},

186 {0x1545bd13,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_QUIZKING
},

188 {0x7b44fb2a,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_MAHJONG
},

189 {0x9Áe4d46,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_MAHJONG
},

191 {0x980be936,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_HYPERSHOT
},

192 {0x21f85681,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_HYPERSHOT
},

193 {0x915a53a7,
SI_GAMEPAD
,SI_GAMEPAD,
SIFC_HYPERSHOT
},

195 {0xad9c63e2,
SI_GAMEPAD
,-1,
SIFC_SHADOW
},

197 {0x24598791,-1,
SI_ZAPPER
,0},

198 {0xff24d794,-1,
SI_ZAPPER
,0},

199 {0xbeb8ab01,-1,
SI_ZAPPER
,0},

200 {0xde8fd935,-1,
SI_ZAPPER
,0},

201 {0xedc3662b,-1,
SI_ZAPPER
,0},

202 {0x2a6559a1,-1,
SI_ZAPPER
,0},

204 {0x23d17f5e,
SI_GAMEPAD
,
SI_ZAPPER
,0},

205 {0xb8b9aˇ3,-1,
SI_ZAPPER
,0},

206 {0x5112dc21,-1,
SI_ZAPPER
,0},

207 {0x4318a2f8,-1,
SI_ZAPPER
,0},

208 {0x5ì6008e,-1,
SI_ZAPPER
,0},

209 {0x3e58a87e,-1,
SI_ZAPPER
,0},

210 {0x851eb9be,
SI_GAMEPAD
,
SI_ZAPPER
,0},

211 {0x74bó652,
SI_GAMEPAD
,
SI_ZAPPER
,0},

212 {0x32fb0583,-1,
SI_ARKANOID
,0},

213 {0xd89e5a67,-1,-1,
SIFC_ARKANOID
},

214 {0x0f141525,-1,-1,
SIFC_ARKANOID
},

216 {0x912989dc,-1,-1,
SIFC_FKB
},

217 {0xf7606810,-1,-1,
SIFC_FKB
},

218 {0x895037bc,-1,-1,
SIFC_FKB
},

219 {0xb2530afc,-1,-1,
SIFC_FKB
},

221 {0x82f1fb96,-1,-1,
SIFC_SUBORKB
},

222 {0xabb2f974,-1,-1,
SIFC_SUBORKB
},

223 {0xd5d6óc4,-1,-1,
SIFC_SUBORKB
},

224 {0x589b6b0d,-1,-1,
SIFC_SUBORKB
},

225 {0x5e073a1b,-1,-1,
SIFC_SUBORKB
},

226 {0x8b265862,-1,-1,
SIFC_SUBORKB
},

227 {0x41401c6d,-1,-1,
SIFC_SUBORKB
},

228 {0x41ef9ac4,-1,-1,
SIFC_SUBORKB
},

229 {0x368c19a8,-1,-1,
SIFC_SUBORKB
},

230 {0x543ab532,-1,-1,
SIFC_SUBORKB
},

234 
x
=0;

236 
moo
[
x
].
öput1
>=0 || moo[x].
öput2
>=0 || moo[x].
öputfc
>=0)

238 if(
moo
[
x
].
¸c32
==
iNESGameCRC32
)

240 
FCEUGameInfo
.
öput
[0]=
moo
[
x
].
öput1
;

241 
FCEUGameInfo
.
öput
[1]=
moo
[
x
].
öput2
;

242 
FCEUGameInfo
.
öputfc
=
moo
[
x
].inputfc;

245 
x
++;

247 
	}
}

249 
	#INESB_INCOMPLETE
 1

	)

250 
	#INESB_CORRUPT
 2

	)

251 
	#INESB_HACKED
 4

	)

253 
	sBADINF
 {

254 
uöt64
 
	mmd5∑πül
;

255 *
	m«me
;

256 
uöt32
 
	mty≥
;

260 
BADINF
 
	gBadROMImages
[]=

262 
	~"öes-bad.h
"

265 
	$CheckBad
(
uöt64
 
md5∑πül
)

267 
x
;

269 
x
=0;

271 
BadROMImages
[
x
].
«me
)

273 if(
BadROMImages
[
x
].
md5∑πül
 == md5partial)

275 
	`FCEU_PrötEº‹
("Thêc›y gamêyou havêlﬂded, \"%s\", i†bad,ánd wû»nŸ w‹kÖr›îly o¿FCE U…ø.", 
BadROMImages
[
x
].
«me
);

278 
x
++;

281 
	}
}

284 
	sCHINF
 {

285 
uöt32
 
	m¸c32
;

286 
öt32
 
	mm≠≥r
;

287 
öt32
 
	mmúr‹
;

290 
	$CheckHInfo
()

299 
uöt64
 
ßvõ
[]=

350 
CHINF
 
moo
[]=

352 
	~"öes-c‹ª˘.h
"

354 
tofix
=0;

355 
x
;

356 
uöt64
 
∑πülmd5
=0;

358 
x
=0;x<8;x++)

360 
∑πülmd5
 |(
uöt64
)
iNESC¨t
.
MD5
[15-
x
] << (x*8);

363 
	`CheckBad
(
∑πülmd5
);

365 
x
=0;

369 if(
moo
[
x
].
¸c32
==
iNESGameCRC32
)

371 if(
moo
[
x
].
m≠≥r
>=0)

373 if(
moo
[
x
].
m≠≥r
&0x800 && 
VROM_size
)

375 
VROM_size
=0;

376 
	`‰ì
(
VROM
);

377 
VROM
=0;

378 
tofix
|=8;

380 if(
M≠≥rNo
!=(
moo
[
x
].
m≠≥r
&0xFF))

382 
tofix
|=1;

383 
M≠≥rNo
=
moo
[
x
].
m≠≥r
&0xFF;

386 if(
moo
[
x
].
múr‹
>=0)

388 if(
moo
[
x
].
múr‹
==8)

390 if(
Múr‹ög
==2)

392 
tofix
|=2;

393 
Múr‹ög
=0;

396 if(
Múr‹ög
!=
moo
[
x
].
múr‹
)

398 if(
Múr‹ög
!=(
moo
[
x
].
múr‹
&~4))

399 if((
moo
[
x
].
múr‹
&~4)<=2)

403 
tofix
|=2;

404 
Múr‹ög
=
moo
[
x
].
múr‹
;

409 
x
++;

410 } 
moo
[
x
].
múr‹
>=0 || moo[x].
m≠≥r
>=0);

412 
x
=0;

413 
ßvõ
[
x
] != 0)

415 if(
ßvõ
[
x
] =
∑πülmd5
)

417 if(!(
hód
.
ROM_ty≥
&2))

419 
tofix
|=4;

420 
hód
.
ROM_ty≥
|=2;

423 
x
++;

429 if((
M≠≥rNo
==118 || M≠≥rNo==24 || M≠≥rNo==26Ë&& (
Múr‹ög
==2))

431 
Múr‹ög
=0;

432 
tofix
|=2;

436 if(
M≠≥rNo
==99)

437 
Múr‹ög
=2;

439 if(
tofix
)

441 
giga°r
[768];

442 
	`°r˝y
(
giga°r
,"The iNES header contains incorrect information. ForÇow,Åhe information will be corrected in RAM. ");

443 if(
tofix
&1)

444 
	`•rötf
(
giga°r
+
	`°æí
(giga°r),"Thêm≠≥∏numbî should bê£àtÿ%d. ",
M≠≥rNo
);

445 if(
tofix
&2)

447 *
m°r
[3]={"Horizontal","Vertical","Four-screen"};

448 
	`•rötf
(
giga°r
+
	`°æí
(giga°r),"Múr‹ög should bê£àtÿ\"%s\". ",
m°r
[
Múr‹ög
&3]);

450 if(
tofix
&4)

451 
	`°rˇt
(
giga°r
,"The battery-backed bit should be set. ");

452 if(
tofix
&8)

453 
	`°rˇt
(
giga°r
,"This game shouldÇot haveány CHR ROM. ");

454 
	`°rˇt
(
giga°r
,"\n");

455 
	`FCEU_¥ötf
("%s",
giga°r
);

457 
	}
}

460 
	mm≠≥r
;

461 (*
	möô
)(
	mC¨tInfo
 *);

462 } 
	tNewMI
;

464 
	$iNESLﬂd
(c⁄° *
«me
, 
Â
)

466 
md5_c⁄ãxt
 
md5
;

468 if(
	`FCEU_‰ód
(&
hód
,1,16,
Â
)!=16)

471 if(
	`memcmp
(&
hód
,"NES\x1a",4))

474 
	`mem£t
(&
iNESC¨t
,0,(iNESCart));

476 if(!
	`memcmp
((*)(&
hód
)+0x7,"DiskDude",8))

478 
	`mem£t
((*)(&
hód
)+0x7,0,0x9);

481 if(!
	`memcmp
((*)(&
hód
)+0x7,"demiforce",9))

483 
	`mem£t
((*)(&
hód
)+0x7,0,0x9);

486 if(!
	`memcmp
((*)(&
hód
)+0xA,"Ni03",4))

488 if(!
	`memcmp
((*)(&
hód
)+0x7,"Dis",3))

489 
	`mem£t
((*)(&
hód
)+0x7,0,0x9);

491 
	`mem£t
((*)(&
hód
)+0xA,0,0x6);

495 if(!
hód
.
ROM_size
)

499 
ROM_size
=256;

503 
ROM_size
=
hód
.ROM_size;

506 
VROM_size
 = 
hód
.VROM_size;

507 
ROM_size
=
	`uµow2
(ROM_size);

509 if(
VROM_size
)

510 
VROM_size
=
	`uµow2
(VROM_size);

512 
M≠≥rNo
 = (
hód
.
ROM_ty≥
>>4);

513 
M≠≥rNo
|=(
hód
.
ROM_ty≥2
&0xF0);

514 
Múr‹ög
 = (
hód
.
ROM_ty≥
&1);

516 if(
hód
.
ROM_ty≥
&8Ë
Múr‹ög
=2;

518 if(!(
ROM
=(
uöt8
 *)
	`FCEU_mÆloc
(
ROM_size
<<14)))

521 if(
VROM_size
)

522 if(!(
VROM
=(
uöt8
 *)
	`FCEU_mÆloc
(
VROM_size
<<13)))

524 
	`‰ì
(
ROM
);

528 
	`mem£t
(
ROM
,0xFF,
ROM_size
<<14);

529 if(
VROM_size
Ë
	`mem£t
(
VROM
,0xFF,VROM_size<<13);

530 if(
hód
.
ROM_ty≥
&4)

532 
åaöîpoo
=(
uöt8
 *)
	`FCEU_gmÆloc
(512);

533 
	`FCEU_‰ód
(
åaöîpoo
,512,1,
Â
);

536 
	`Re£tC¨tM≠pög
();

537 
	`Re£tExSèã
(0,0);

539 
	`SëupC¨tPRGM≠pög
(0,
ROM
,
ROM_size
*0x4000,0);

540 
	`SëupC¨tPRGM≠pög
(1,
WRAM
,8192,1);

542 
	`FCEU_‰ód
(
ROM
,0x4000,
hód
.
ROM_size
,
Â
);

544 if(
VROM_size
)

545 
	`FCEU_‰ód
(
VROM
,0x2000,
hód
.
VROM_size
,
Â
);

547 
	`md5_°¨ts
(&
md5
);

548 
	`md5_upd©e
(&
md5
,
ROM
,
ROM_size
<<14);

550 
iNESGameCRC32
=
	`CÆcCRC32
(0,
ROM
,
ROM_size
<<14);

552 if(
VROM_size
)

554 
iNESGameCRC32
=
	`CÆcCRC32
(iNESGameCRC32,
VROM
,
VROM_size
<<13);

555 
	`md5_upd©e
(&
md5
,
VROM
,
VROM_size
<<13);

557 
	`md5_föish
(&
md5
,
iNESC¨t
.
MD5
);

558 
	`mem˝y
(
FCEUGameInfo
.
MD5
,
iNESC¨t
.MD5,(iNESCart.MD5));

560 
iNESC¨t
.
CRC32
=
iNESGameCRC32
;

562 
	`FCEU_¥ötf
(" PRG ROM: %3d x 16KiB\n CHR ROM: %3d x 8KiB\n ROM CRC32: 0x%08x\n",

563 
hód
.
ROM_size
,hód.
VROM_size
,
iNESGameCRC32
);

566 
x
;

567 
	`FCEU_¥ötf
(" ROM MD5: 0x");

568 
x
=0;x<16;x++)

569 
	`FCEU_¥ötf
("%02x",
iNESC¨t
.
MD5
[
x
]);

570 
	`FCEU_¥ötf
("\n");

572 
	`FCEU_¥ötf
(" M≠≥r: %d\¿Múr‹ög: %s\n", 
M≠≥rNo
,
Múr‹ög
==2?"None(Four-screen)":Mirroring?"Vertical":"Horizontal");

573 if(
hód
.
ROM_ty≥
&2Ë
	`FCEU_¥ötf
(" Battery-backed.\n");

574 if(
hód
.
ROM_ty≥
&4Ë
	`FCEU_¥ötf
(" Trained.\n");

576 
	`SëI≈ut
();

577 
	`CheckHInfo
();

579 
x
;

580 
uöt64
 
∑πülmd5
=0;

582 
x
=0;x<8;x++)

584 
∑πülmd5
 |(
uöt64
)
iNESC¨t
.
MD5
[7-
x
] << (x*8);

587 
	`FCEU_VSUniCheck
(
∑πülmd5
, &
M≠≥rNo
, &
Múr‹ög
);

592 if(
VROM_size
)

593 
	`SëupC¨tCHRM≠pög
(0,
VROM
,
VROM_size
*0x2000,0);

595 if(
Múr‹ög
==2)

596 
	`SëupC¨tMúr‹ög
(4,1,
ExåaNTARAM
);

597 if(
Múr‹ög
>=0x10)

598 
	`SëupC¨tMúr‹ög
(2+(
Múr‹ög
&1),1,0);

600 
	`SëupC¨tMúr‹ög
(
Múr‹ög
&1,(Mirroring&4)>>2,0);

602 
iNESC¨t
.
b©ãry
=(
hód
.
ROM_ty≥
&2)?1:0;

603 
iNESC¨t
.
múr‹
=
Múr‹ög
;

612 if(
	`NewiNES_Inô
(
M≠≥rNo
))

618 
iNESC¨t
.
Powî
=
iNESPowî
;

619 if(
hód
.
ROM_ty≥
&2)

621 
iNESC¨t
.
SaveGame
[0]=
WRAM
;

622 
iNESC¨t
.
SaveGameLí
[0]=8192;

625 
	`FCEU_LﬂdGameSave
(&
iNESC¨t
);

627 
GameI¡îÁ˚
=
iNESGI
;

628 
	`FCEU_¥ötf
("\n");

633 if(
	`°r°r
(
«me
,"(E)") || strstr(name,"(e)")

634 || 
	`°r°r
(
«me
,"(F)") || strstr(name,"(f)")

635 || 
	`°r°r
(
«me
,"(G)") || strstr(name,"(g)")

636 || 
	`°r°r
(
«me
,"(I)") || strstr(name,"(i)"))

637 
	`FCEUI_SëVidSy°em
(1);

639 
	`FCEUI_SëVidSy°em
(0);

642 
	}
}

644 
	$FASTAPASS
(2Ë
	$VRAM_BANK1
(
uöt32
 
A
, 
uöt8
 
V
)

646 
V
&=7;

647 
PPUCHRRAM
|=(1<<(
A
>>10));

648 
CHRB™kLi°
[(
A
)>>10]=
V
;

649 
VPage
[(
A
)>>10]=&
CHRRAM
[
V
<<10]-(A);

650 
	}
}

652 
	$FASTAPASS
(2Ë
	$VRAM_BANK4
(
uöt32
 
A
, uöt32 
V
)

654 
V
&=1;

655 
PPUCHRRAM
|=(0xF<<(
A
>>10));

656 
CHRB™kLi°
[(
A
)>>10]=(
V
<<2);

657 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<2)+1;

658 
CHRB™kLi°
[((
A
)>>10)+2]=(
V
<<2)+2;

659 
CHRB™kLi°
[((
A
)>>10)+3]=(
V
<<2)+3;

660 
VPage
[(
A
)>>10]=&
CHRRAM
[
V
<<10]-(A);

661 
	}
}

662 
	$FASTAPASS
(2Ë
	$VROM_BANK1
(
uöt32
 
A
,uöt32 
V
)

664 
	`£tchr1
(
A
,
V
);

665 
CHRB™kLi°
[(
A
)>>10]=
V
;

666 
	}
}

668 
	$FASTAPASS
(2Ë
	$VROM_BANK2
(
uöt32
 
A
,uöt32 
V
)

670 
	`£tchr2
(
A
,
V
);

671 
CHRB™kLi°
[(
A
)>>10]=(
V
<<1);

672 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<1)+1;

673 
	}
}

675 
	$FASTAPASS
(2Ë
	$VROM_BANK4
(
uöt32
 
A
, uöt32 
V
)

677 
	`£tchr4
(
A
,
V
);

678 
CHRB™kLi°
[(
A
)>>10]=(
V
<<2);

679 
CHRB™kLi°
[((
A
)>>10)+1]=(
V
<<2)+1;

680 
CHRB™kLi°
[((
A
)>>10)+2]=(
V
<<2)+2;

681 
CHRB™kLi°
[((
A
)>>10)+3]=(
V
<<2)+3;

682 
	}
}

684 
	$FASTAPASS
(1Ë
	$VROM_BANK8
(
uöt32
 
V
)

686 
	`£tchr8
(
V
);

687 
CHRB™kLi°
[0]=(
V
<<3);

688 
CHRB™kLi°
[1]=(
V
<<3)+1;

689 
CHRB™kLi°
[2]=(
V
<<3)+2;

690 
CHRB™kLi°
[3]=(
V
<<3)+3;

691 
CHRB™kLi°
[4]=(
V
<<3)+4;

692 
CHRB™kLi°
[5]=(
V
<<3)+5;

693 
CHRB™kLi°
[6]=(
V
<<3)+6;

694 
CHRB™kLi°
[7]=(
V
<<3)+7;

695 
	}
}

697 
	$FASTAPASS
(2Ë
	$ROM_BANK8
(
uöt32
 
A
, uöt32 
V
)

699 
	`£çrg8
(
A
,
V
);

700 if(
A
>=0x8000)

701 
PRGB™kLi°
[((
A
-0x8000)>>13)]=
V
;

702 
	}
}

704 
	$FASTAPASS
(2Ë
	$ROM_BANK16
(
uöt32
 
A
, uöt32 
V
)

706 
	`£çrg16
(
A
,
V
);

707 if(
A
>=0x8000)

709 
PRGB™kLi°
[((
A
-0x8000)>>13)]=
V
<<1;

710 
PRGB™kLi°
[((
A
-0x8000)>>13)+1]=(
V
<<1)+1;

712 
	}
}

714 
	$FASTAPASS
(1Ë
	$ROM_BANK32
(
uöt32
 
V
)

716 
	`£çrg32
(0x8000,
V
);

717 
PRGB™kLi°
[0]=
V
<<2;

718 
PRGB™kLi°
[1]=(
V
<<2)+1;

719 
PRGB™kLi°
[2]=(
V
<<2)+2;

720 
PRGB™kLi°
[3]=(
V
<<2)+3;

721 
	}
}

723 
	$FASTAPASS
(1Ë
	$⁄emú
(
uöt8
 
V
)

725 if(
Múr‹ög
==2) ;

726 if(
V
>1)

727 
V
=1;

728 
Múr‹ög
=0x10|
V
;

729 
	`£tmúr‹
(
MI_0
+
V
);

730 
	}
}

732 
	$FASTAPASS
(1Ë
	$MIRROR_SET2
(
uöt8
 
V
)

734 if(
Múr‹ög
==2) ;

735 
Múr‹ög
=
V
;

736 
	`£tmúr‹
(
V
);

737 
	}
}

739 
	$FASTAPASS
(1Ë
	$MIRROR_SET
(
uöt8
 
V
)

741 if(
Múr‹ög
==2) ;

742 
V
^=1;

743 
Múr‹ög
=
V
;

744 
	`£tmúr‹
(
V
);

745 
	}
}

747 
	$NONE_öô
()

749 
	`ROM_BANK16
(0x8000,0);

750 
	`ROM_BANK16
(0xC000,~0);

752 if(
VROM_size
)

753 
	`VROM_BANK8
(0);

755 
	`£tvøm8
(
CHRRAM
);

756 
	}
}

758 (*
M≠InôTab
[256])()=

763 
M≠≥r6_öô
,

765 
M≠≥r8_öô
,
M≠≥r9_öô
,

766 
M≠≥r10_öô
,

771 
M≠≥r15_öô
,
M≠≥r16_öô
,
M≠≥r17_öô
,
M≠≥r18_öô
,

773 
M≠≥r21_öô
,
M≠≥r22_öô
,
M≠≥r23_öô
,
M≠≥r24_öô
,

774 
M≠≥r25_öô
,
M≠≥r26_öô
,
M≠≥r27_öô
,

776 
M≠≥r32_öô
,
M≠≥r33_öô
,
M≠≥r34_öô
,

778 
M≠≥r40_öô
,
M≠≥r41_öô
,
M≠≥r42_öô
,
M≠≥r43_öô
,

780 
M≠≥r46_öô
,

782 
M≠≥r48_öô
,

784 
M≠≥r50_öô
,
M≠≥r51_öô
,

788 
M≠≥r59_öô
,
M≠≥r60_öô
,

789 
M≠≥r61_öô
,
M≠≥r62_öô
,

791 
M≠≥r64_öô
,
M≠≥r65_öô
,

793 
M≠≥r67_öô
,

794 
M≠≥r68_öô
,
M≠≥r69_öô
,

796 
M≠≥r71_öô
,

797 
M≠≥r72_öô
,
M≠≥r73_öô
,

799 
M≠≥r75_öô
,
M≠≥r76_öô
,
M≠≥r77_öô
,

801 
M≠≥r79_öô
,
M≠≥r80_öô
,

803 
M≠≥r82_öô
,
M≠≥r83_öô
,

805 
M≠≥r85_öô
,
M≠≥r86_öô
,

808 
M≠≥r89_öô
,

810 
M≠≥r91_öô
,
M≠≥r92_öô
,

814 
M≠≥r96_öô
,
M≠≥r97_öô
,

816 
M≠≥r99_öô
,

820 0,
M≠≥r113_öô
,

828 
M≠≥r151_öô
,

830 
M≠≥r153_öô
,

833 
M≠≥r156_öô
,
M≠≥r157_öô
,
M≠≥r158_öô
,0,

835 
M≠≥r166_öô
,
M≠≥r167_öô
,

837 
M≠≥r180_öô
,

839 
M≠≥r184_öô
,

846 
M≠≥r193_öô
,

848 
M≠≥r200_öô
,
M≠≥r201_öô
,
M≠≥r202_öô
,
M≠≥r203_öô
,

849 
M≠≥r204_öô
,

851 
M≠≥r207_öô
,

854 
M≠≥r212_öô
,
M≠≥r213_öô
,
M≠≥r214_öô
,

856 
M≠≥r225_öô
,
M≠≥r226_öô
,
M≠≥r227_öô
,
M≠≥r228_öô
,

857 
M≠≥r229_öô
,
M≠≥r230_öô
,
M≠≥r231_öô
,
M≠≥r232_öô
,

859 
M≠≥r234_öô
,

862 
M≠≥r240_öô
,
M≠≥r241_öô
,
M≠≥r242_öô
,0,

863 
M≠≥r244_öô
,

865 
M≠≥r246_öô
,

867 
M≠≥r255_öô


868 
	}
};

872 
	$DECLFW
(
BWRAM
)

874 
WRAM
[
A
-0x6000]=
V
;

875 
	}
}

877 
	$DECLFR
(
AWRAM
)

879  
WRAM
[
A
-0x6000];

880 
	}
}

882 #ifde‡
DEBUG_MAPPER


883 
	$DECLFW
(
WrôeH™dÀr
)

885 
	`FCEU_¥ötf
("$%04x:$%02x\n",
A
,
V
);

886 
	}
}

889 (*
M≠SèãRe°‹e
)(
vîsi⁄
);

890 
	$iNESSèãRe°‹e
(
vîsi⁄
)

892 
x
;

894 if(!
M≠≥rNo
) ;

896 
x
=0;x<4;x++)

897 
	`£çrg8
(0x8000+
x
*8192,
PRGB™kLi°
[x]);

899 if(
VROM_size
)

900 
x
=0;x<8;x++)

901 
	`£tchr1
(0x400*
x
,
CHRB™kLi°
[x]);

903 if(0Ë
Múr‹ög
)

905 0:
	`£tmúr‹
(
MI_H
);;

906 1:
	`£tmúr‹
(
MI_V
);;

908 0x10:
	`£tmúr‹
(
MI_0
);;

910 0x11:
	`£tmúr‹
(
MI_1
);;

912 if(
M≠SèãRe°‹e
Ë
	`M≠SèãRe°‹e
(
vîsi⁄
);

913 
	}
}

915 
	$iNESPowî
()

917 
x
;

918 
ty≥
=
M≠≥rNo
;

920 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

921 
GameSèãRe°‹e
=
iNESSèãRe°‹e
;

922 
M≠Clo£
=0;

923 
M≠≥rRe£t
=0;

924 
M≠SèãRe°‹e
=0;

926 
	`£çrg8r
(1,0x6000,0);

928 
	`SëRódH™dÀr
(0x6000,0x7FFF,
AWRAM
);

929 #ifde‡
ASM_6502


931 
Page
[12]=Page[13]=Page[14]=Page[15]=
WRAM
-0x6000;

933 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
BWRAM
);

934 
	`FCEU_ChótAddRAM
(8,0x6000,
WRAM
);

936 #ifde‡
DEBUG_MAPPER


937 if(
ty≥
==0Ë
	`SëWrôeH™dÀr
(0x4020,0xFFFF,
WrôeH™dÀr
);

942 
IRQCou¡
=
IRQL©ch
=
IRQa
=0;

943 if(
hód
.
ROM_ty≥
&2)

944 
	`mem£t
(
GameMemBlock
+8192,0,(GameMemBlock)-8192);

946 
	`mem£t
(
GameMemBlock
,0,(GameMemBlock));

948 
	`NONE_öô
();

950 
	`Re£tExSèã
(0,0);

951 if(
FCEUGameInfo
.
ty≥
 =
GIT_VSUNI
)

952 
	`AddExSèã
(
FCEUVSUNI_STATEINFO
, ~0, 0, 0);

954 
	`AddExSèã
(
WRAM
, 8192, 0, "WRAM");

955 if(
ty≥
==19 ||Åype==6 ||Åype==69 ||Åype==85 ||Åype==96)

956 
	`AddExSèã
(
M≠≥rExRAM
, 32768, 0, "MEXR");

957 if((!
VROM_size
 || 
ty≥
==6 ||Åype==19) && (type!=13 &&Åype!=96))

958 
	`AddExSèã
(
CHRRAM
, 8192, 0, "CHRR");

959 if(
hód
.
ROM_ty≥
&8)

960 
	`AddExSèã
(
ExåaNTARAM
, 2048, 0, "EXNR");

964 if(
ty≥
 &&Åype!=13 &&Åype!=96)

966 
	`AddExSèã
(
m≠byã1
, 32, 0, "MPBY");

967 
	`AddExSèã
(&
Múr‹ög
, 1, 0, "MIRR");

968 
	`AddExSèã
(&
IRQCou¡
, 4, 1, "IRQC");

969 
	`AddExSèã
(&
IRQL©ch
, 4, 1, "IQL1");

970 
	`AddExSèã
(&
IRQa
, 1, 0, "IRQA");

971 
	`AddExSèã
(
PRGB™kLi°
, 4, 0, "PBL");

972 
x
=0;x<8;x++)

974 
èk
[8];

975 
	`•rötf
(
èk
,"CBL%d",
x
);

976 
	`AddExSèã
(&
CHRB™kLi°
[
x
], 2, 1,
èk
);

980 if(
M≠InôTab
[
ty≥
]) MapInitTab[type]();

981 if(
ty≥
)

983 
	`FCEU_PrötEº‹
("iNES m≠≥∏#%d i†nŸ suµ‹ãdáàÆl.",
ty≥
);

985 
	}
}

989 
	mnumbî
;

990 (*
	möô
)(
	mC¨tInfo
 *);

991 } 
	tBMAPPING
;

993 
BMAPPING
 
	gbm≠
[] = {

994 {0, 
NROM_Inô
},

995 {1, 
M≠≥r1_Inô
},

996 {2, 
UNROM_Inô
},

997 {3, 
CNROM_Inô
},

998 {4, 
M≠≥r4_Inô
},

999 {5, 
M≠≥r5_Inô
},

1000 {7, 
ANROM_Inô
},

1001 {11, 
M≠≥r11_Inô
},

1002 {12, 
M≠≥r12_Inô
},

1003 {13, 
CPROM_Inô
},

1004 {19, 
M≠≥r19_Inô
},

1005 {37, 
M≠≥r37_Inô
},

1006 {44, 
M≠≥r44_Inô
},

1007 {45, 
M≠≥r45_Inô
},

1008 {47, 
M≠≥r47_Inô
},

1009 {49, 
M≠≥r49_Inô
},

1010 {52, 
M≠≥r52_Inô
},

1011 {57, 
M≠≥r57_Inô
},

1012 {58, 
M≠≥r58_Inô
},

1013 {66, 
MHROM_Inô
},

1014 {70, 
M≠≥r70_Inô
},

1015 {74, 
M≠≥r74_Inô
},

1016 {78, 
M≠≥r78_Inô
},

1017 {87, 
M≠≥r87_Inô
},

1018 {88, 
M≠≥r88_Inô
},

1019 {90, 
M≠≥r90_Inô
},

1020 {93, 
SUNSOFT_UNROM_Inô
},

1021 {94, 
M≠≥r94_Inô
},

1022 {95, 
M≠≥r95_Inô
},

1023 {105, 
M≠≥r105_Inô
},

1024 {107, 
M≠≥r107_Inô
},

1025 {112, 
M≠≥r112_Inô
},

1026 {114, 
M≠≥r114_Inô
},

1027 {115, 
M≠≥r115_Inô
},

1028 {116, 
M≠≥r116_Inô
},

1029 {117, 
M≠≥r117_Inô
},

1030 {118, 
M≠≥r118_Inô
},

1031 {119, 
M≠≥r119_Inô
},

1032 {133, 
SA72008_Inô
},

1033 {137, 
S8259D_Inô
},

1034 {138, 
S8259B_Inô
},

1035 {139, 
S8259C_Inô
},

1036 {140, 
M≠≥r140_Inô
},

1037 {141, 
S8259A_Inô
},

1038 {143, 
TCA01_Inô
},

1039 {144, 
M≠≥r144_Inô
},

1040 {145, 
SA72007_Inô
},

1041 {146, 
SA0161M_Inô
},

1042 {147, 
TCU01_Inô
},

1043 {148, 
SA0037_Inô
},

1044 {149, 
SA0036_Inô
},

1045 {150, 
S74LS374N_Inô
},

1046 {152, 
M≠≥r152_Inô
},

1047 {154, 
M≠≥r154_Inô
},

1048 {155, 
M≠≥r155_Inô
},

1049 {160, 
M≠≥r90_Inô
},

1050 {163, 
M≠≥r163_Inô
},

1051 {164, 
M≠≥r164_Inô
},

1052 {165, 
M≠≥r165_Inô
},

1053 {181, 
M≠≥r181_Inô
},

1054 {182, 
M≠≥r182_Inô
},

1055 {183, 
M≠≥r183_Inô
},

1056 {185, 
M≠≥r185_Inô
},

1057 {186, 
M≠≥r186_Inô
},

1058 {187, 
M≠≥r187_Inô
},

1059 {188, 
M≠≥r188_Inô
},

1060 {189, 
M≠≥r189_Inô
},

1061 {191, 
M≠≥r191_Inô
},

1062 {192, 
M≠≥r192_Inô
},

1063 {194, 
M≠≥r194_Inô
},

1064 {198, 
M≠≥r198_Inô
},

1065 {199, 
M≠≥r199_Inô
},

1066 {205, 
M≠≥r205_Inô
},

1067 {206, 
DEIROM_Inô
},

1068 {208, 
M≠≥r208_Inô
},

1069 {209, 
M≠≥r209_Inô
},

1070 {210, 
M≠≥r210_Inô
},

1071 {211, 
M≠≥r211_Inô
},

1072 {215, 
M≠≥r215_Inô
},

1073 {216, 
M≠≥r216_Inô
},

1074 {217, 
M≠≥r217_Inô
},

1075 {218, 
UNLS⁄ic_Inô
},

1076 {219, 
UNLSL1632_Inô
},

1078 {222, 
M≠≥r222_Inô
},

1079 {235, 
M≠≥r235_Inô
},

1080 {243, 
S74LS374NA_Inô
},

1081 {245, 
M≠≥r245_Inô
},

1082 {249, 
M≠≥r249_Inô
},

1083 {250, 
M≠≥r250_Inô
},

1084 {254, 
M≠≥r254_Inô
},

1089 
	$NewiNES_Inô
(
num
)

1091 
BMAPPING
 *
tmp
=
bm≠
;

1093 if(
FCEUGameInfo
.
ty≥
 =
GIT_VSUNI
)

1094 
	`AddExSèã
(
FCEUVSUNI_STATEINFO
, ~0, 0, 0);

1096 
tmp
->
öô
)

1098 if(
num
==
tmp
->
numbî
)

1100 
UNIFchºama
=0;

1101 if(!
VROM_size
)

1103 
CHRRAMSize
;

1104 if(
num
==13)

1105 
CHRRAMSize
=16384;

1107 
CHRRAMSize
=8192;

1108 
VROM
=(
uöt8
 *)
	`mÆloc
(
CHRRAMSize
);

1109 
UNIFchºama
=
VROM
;

1110 
	`SëupC¨tCHRM≠pög
(0,
VROM
,
CHRRAMSize
,1);

1111 
	`AddExSèã
(
VROM
,
CHRRAMSize
, 0, "CHRR");

1113 if(
hód
.
ROM_ty≥
&8)

1114 
	`AddExSèã
(
ExåaNTARAM
, 2048, 0, "EXNR");

1115 
tmp
->
	`öô
(&
iNESC¨t
);

1118 
tmp
++;

1121 
	}
}

	@ines.h

22 
	~"ˇπ.h
"

23 #ifde‡
INESPRIV


25 
iNESSèãRe°‹e
(
vîsi⁄
);

26 
uöt32
 
iNESGameCRC32
;

28 
uöt32
 
VROM_size
;

29 
uöt32
 
ROM_size
;

31 (*
M≠SèãRe°‹e
)(
vîsi⁄
);

32 (*
M≠Clo£
)();

33 (*
M≠≥rRe£t
)();

36 
	#WRAM
 (
GameMemBlock
)

	)

37 
	#sizeofWRAM
 8192

	)

39 
	#M≠≥rExRAM
 (
GameMemBlock
+
sizeofWRAM
)

	)

40 
	#sizeofM≠≥rExRAM
 32768

	)

43 
	#CHRRAM
 (
GameMemBlock
+
sizeofWRAM
+
sizeofM≠≥rExRAM
)

	)

44 
	#sizeofCHRRAM
 8192

	)

46 
	#ExåaNTARAM
 (
GameMemBlock
+
sizeofWRAM
+
sizeofM≠≥rExRAM
+
sizeofCHRRAM
)

	)

47 
	#sizeofExåaNTARAM
 2048

	)

49 
	#PRGB™kLi°
 (
ExåaNTARAM
+
sizeofExåaNTARAM
)

	)

51 
	#m≠byã1
 (
PRGB™kLi°
+4)

	)

52 
	#m≠byã2
 (
m≠byã1
+8)

	)

53 
	#m≠byã3
 (
m≠byã2
+8)

	)

54 
	#m≠byã4
 (
m≠byã3
+8)

	)

55 
uöt16
 
iNESCHRB™kLi°
[8];

56 
öt32
 
iNESIRQL©ch
,
iNESIRQCou¡
;

57 
uöt8
 
iNESMúr‹ög
;

58 
uöt8
 
iNESIRQa
;

60 
	#IRQa
 
iNESIRQa


	)

61 
	#Múr‹ög
 
iNESMúr‹ög


	)

62 
	#IRQCou¡
 
iNESIRQCou¡


	)

63 
	#IRQL©ch
 
iNESIRQL©ch


	)

64 
	#CHRB™kLi°
 
iNESCHRB™kLi°


	)

69 
ID
[4];

70 
uöt8
 
ROM_size
;

71 
uöt8
 
VROM_size
;

72 
uöt8
 
ROM_ty≥
;

73 
uöt8
 
ROM_ty≥2
;

74 
uöt8
 
ª£rve
[8];

75 } 
	tiNES_HEADER
;

77 
	$FASTAPASS
(2Ë
	`VRAM_BANK1
(
uöt32
 
A
, 
uöt8
 
V
);

78 
	$FASTAPASS
(2Ë
	`VRAM_BANK4
(
uöt32
 
A
,uöt32 
V
);

80 
	$FASTAPASS
(2Ë
	`VROM_BANK1
(
uöt32
 
A
,uöt32 
V
);

81 
	$FASTAPASS
(2Ë
	`VROM_BANK2
(
uöt32
 
A
,uöt32 
V
);

82 
	$FASTAPASS
(2Ë
	`VROM_BANK4
(
uöt32
 
A
, uöt32 
V
);

83 
	$FASTAPASS
(1Ë
	`VROM_BANK8
(
uöt32
 
V
);

84 
	$FASTAPASS
(2Ë
	`ROM_BANK8
(
uöt32
 
A
, uöt32 
V
);

85 
	$FASTAPASS
(2Ë
	`ROM_BANK16
(
uöt32
 
A
, uöt32 
V
);

86 
	$FASTAPASS
(1Ë
	`ROM_BANK32
(
uöt32
 
V
);

88 
uöt8
 
vmask
;

89 
uöt32
 
vmask1
;

90 
uöt32
 
vmask2
;

91 
uöt32
 
vmask4
;

92 
uöt32
 
pmask8
;

93 
uöt8
 
pmask16
;

94 
uöt8
 
pmask32
;

96 
	$FASTAPASS
(1Ë
	`⁄emú
(
uöt8
 
V
);

97 
	$FASTAPASS
(1Ë
	`MIRROR_SET2
(
uöt8
 
V
);

98 
	$FASTAPASS
(1Ë
	`MIRROR_SET
(
uöt8
 
V
);

100 
	`M≠≥r0_öô
();

101 
	`M≠≥r1_öô
();

104 
	`M≠≥r6_öô
();

106 
	`M≠≥r8_öô
();

107 
	`M≠≥r9_öô
();

108 
	`M≠≥r10_öô
();

110 
	`M≠≥r12_öô
();

112 
	`M≠≥r14_öô
();

113 
	`M≠≥r15_öô
();

114 
	`M≠≥r16_öô
();

115 
	`M≠≥r17_öô
();

116 
	`M≠≥r18_öô
();

117 
	`M≠≥r19_öô
();

118 
	`M≠≥r20_öô
();

119 
	`M≠≥r21_öô
();

120 
	`M≠≥r22_öô
();

121 
	`M≠≥r23_öô
();

122 
	`M≠≥r24_öô
();

123 
	`M≠≥r25_öô
();

124 
	`M≠≥r26_öô
();

125 
	`M≠≥r27_öô
();

126 
	`M≠≥r28_öô
();

127 
	`M≠≥r29_öô
();

128 
	`M≠≥r30_öô
();

129 
	`M≠≥r31_öô
();

130 
	`M≠≥r32_öô
();

131 
	`M≠≥r33_öô
();

132 
	`M≠≥r34_öô
();

133 
	`M≠≥r35_öô
();

134 
	`M≠≥r36_öô
();

136 
	`M≠≥r38_öô
();

137 
	`M≠≥r39_öô
();

138 
	`M≠≥r40_öô
();

139 
	`M≠≥r41_öô
();

140 
	`M≠≥r42_öô
();

141 
	`M≠≥r43_öô
();

142 
	`M≠≥r44_öô
();

143 
	`M≠≥r45_öô
();

144 
	`M≠≥r46_öô
();

145 
	`M≠≥r47_öô
();

146 
	`M≠≥r48_öô
();

147 
	`M≠≥r49_öô
();

148 
	`M≠≥r50_öô
();

149 
	`M≠≥r51_öô
();

150 
	`M≠≥r53_öô
();

151 
	`M≠≥r54_öô
();

152 
	`M≠≥r55_öô
();

153 
	`M≠≥r56_öô
();

154 
	`M≠≥r59_öô
();

155 
	`M≠≥r60_öô
();

156 
	`M≠≥r61_öô
();

157 
	`M≠≥r62_öô
();

158 
	`M≠≥r63_öô
();

159 
	`M≠≥r64_öô
();

160 
	`M≠≥r65_öô
();

162 
	`M≠≥r67_öô
();

163 
	`M≠≥r68_öô
();

164 
	`M≠≥r69_öô
();

166 
	`M≠≥r71_öô
();

167 
	`M≠≥r72_öô
();

168 
	`M≠≥r73_öô
();

169 
	`M≠≥r74_öô
();

170 
	`M≠≥r75_öô
();

171 
	`M≠≥r76_öô
();

172 
	`M≠≥r77_öô
();

174 
	`M≠≥r79_öô
();

175 
	`M≠≥r80_öô
();

176 
	`M≠≥r81_öô
();

177 
	`M≠≥r82_öô
();

178 
	`M≠≥r83_öô
();

179 
	`M≠≥r84_öô
();

180 
	`M≠≥r85_öô
();

181 
	`M≠≥r86_öô
();

183 
	`M≠≥r88_öô
();

184 
	`M≠≥r89_öô
();

185 
	`M≠≥r91_öô
();

186 
	`M≠≥r92_öô
();

189 
	`M≠≥r96_öô
();

190 
	`M≠≥r97_öô
();

191 
	`M≠≥r98_öô
();

192 
	`M≠≥r99_öô
();

193 
	`M≠≥r100_öô
();

194 
	`M≠≥r101_öô
();

195 
	`M≠≥r103_öô
();

196 
	`M≠≥r104_öô
();

197 
	`M≠≥r106_öô
();

199 
	`M≠≥r108_öô
();

200 
	`M≠≥r109_öô
();

201 
	`M≠≥r110_öô
();

202 
	`M≠≥r111_öô
();

203 
	`M≠≥r113_öô
();

204 
	`M≠≥r115_öô
();

205 
	`M≠≥r116_öô
();

207 
	`M≠≥r120_öô
();

208 
	`M≠≥r121_öô
();

209 
	`M≠≥r122_öô
();

210 
	`M≠≥r123_öô
();

211 
	`M≠≥r124_öô
();

212 
	`M≠≥r126_öô
();

213 
	`M≠≥r127_öô
();

214 
	`M≠≥r128_öô
();

215 
	`M≠≥r129_öô
();

216 
	`M≠≥r130_öô
();

217 
	`M≠≥r131_öô
();

218 
	`M≠≥r132_öô
();

219 
	`M≠≥r134_öô
();

220 
	`M≠≥r135_öô
();

221 
	`M≠≥r136_öô
();

222 
	`M≠≥r137_öô
();

223 
	`M≠≥r139_öô
();

225 
	`M≠≥r141_öô
();

226 
	`M≠≥r142_öô
();

227 
	`M≠≥r143_öô
();

229 
	`M≠≥r150_öô
();

230 
	`M≠≥r151_öô
();

232 
	`M≠≥r153_öô
();

233 
	`M≠≥r154_öô
();

234 
	`M≠≥r156_öô
();

235 
	`M≠≥r157_öô
();

236 
	`M≠≥r158_öô
();

237 
	`M≠≥r159_öô
();

238 
	`M≠≥r160_öô
();

239 
	`M≠≥r161_öô
();

240 
	`M≠≥r162_öô
();

241 
	`M≠≥r166_öô
();

242 
	`M≠≥r167_öô
();

243 
	`M≠≥r168_öô
();

244 
	`M≠≥r169_öô
();

245 
	`M≠≥r170_öô
();

246 
	`M≠≥r171_öô
();

247 
	`M≠≥r172_öô
();

248 
	`M≠≥r173_öô
();

249 
	`M≠≥r174_öô
();

250 
	`M≠≥r175_öô
();

251 
	`M≠≥r176_öô
();

252 
	`M≠≥r177_öô
();

253 
	`M≠≥r178_öô
();

254 
	`M≠≥r179_öô
();

255 
	`M≠≥r180_öô
();

257 
	`M≠≥r184_öô
();

261 
	`M≠≥r193_öô
();

263 
	`M≠≥r195_öô
();

264 
	`M≠≥r196_öô
();

265 
	`M≠≥r197_öô
();

267 
	`M≠≥r199_öô
();

268 
	`M≠≥r200_öô
();

269 
	`M≠≥r201_öô
();

270 
	`M≠≥r202_öô
();

271 
	`M≠≥r203_öô
();

272 
	`M≠≥r204_öô
();

273 
	`M≠≥r207_öô
();

275 
	`M≠≥r212_öô
();

276 
	`M≠≥r213_öô
();

277 
	`M≠≥r214_öô
();

279 
	`M≠≥r219_öô
();

281 
	`M≠≥r221_öô
();

283 
	`M≠≥r223_öô
();

284 
	`M≠≥r224_öô
();

285 
	`M≠≥r225_öô
();

286 
	`M≠≥r226_öô
();

287 
	`M≠≥r227_öô
();

288 
	`M≠≥r228_öô
();

289 
	`M≠≥r229_öô
();

290 
	`M≠≥r230_öô
();

291 
	`M≠≥r231_öô
();

292 
	`M≠≥r232_öô
();

293 
	`M≠≥r233_öô
();

294 
	`M≠≥r234_öô
();

296 
	`M≠≥r236_öô
();

297 
	`M≠≥r237_öô
();

298 
	`M≠≥r238_öô
();

299 
	`M≠≥r239_öô
();

300 
	`M≠≥r240_öô
();

301 
	`M≠≥r241_öô
();

302 
	`M≠≥r242_öô
();

303 
	`M≠≥r244_öô
();

304 
	`M≠≥r245_öô
();

305 
	`M≠≥r246_öô
();

306 
	`M≠≥r247_öô
();

307 
	`M≠≥r249_öô
();

308 
	`M≠≥r251_öô
();

309 
	`M≠≥r252_öô
();

310 
	`M≠≥r253_öô
();

311 
	`M≠≥r255_öô
();

313 
	`NSFVRC6_Inô
();

314 
	`NSFMMC5_Inô
();

315 
	`NSFAY_Inô
();

316 
	`NSFN106_Inô
();

317 
	`NSFVRC7_Inô
();

318 
	`M≠≥r19_ESI
();

320 
	`M≠≥r1_Inô
(
C¨tInfo
 *);

321 
	`M≠≥r4_Inô
(
C¨tInfo
 *);

322 
	`M≠≥r5_Inô
(
C¨tInfo
 *);

323 
	`M≠≥r11_Inô
(
C¨tInfo
 *);

324 
	`M≠≥r12_Inô
(
C¨tInfo
 *);

325 
	`M≠≥r19_Inô
(
C¨tInfo
 *);

326 
	`M≠≥r37_Inô
(
C¨tInfo
 *);

327 
	`M≠≥r44_Inô
(
C¨tInfo
 *);

328 
	`M≠≥r45_Inô
(
C¨tInfo
 *);

329 
	`M≠≥r47_Inô
(
C¨tInfo
 *);

330 
	`M≠≥r49_Inô
(
C¨tInfo
 *);

331 
	`M≠≥r52_Inô
(
C¨tInfo
 *);

332 
	`M≠≥r57_Inô
(
C¨tInfo
 *);

333 
	`M≠≥r58_Inô
(
C¨tInfo
 *);

334 
	`M≠≥r70_Inô
(
C¨tInfo
 *);

335 
	`M≠≥r74_Inô
(
C¨tInfo
 *);

336 
	`M≠≥r78_Inô
(
C¨tInfo
 *);

337 
	`M≠≥r87_Inô
(
C¨tInfo
 *);

338 
	`M≠≥r88_Inô
(
C¨tInfo
 *);

339 
	`M≠≥r90_Inô
(
C¨tInfo
 *);

340 
	`M≠≥r93_Inô
(
C¨tInfo
 *);

341 
	`M≠≥r94_Inô
(
C¨tInfo
 *);

342 
	`M≠≥r95_Inô
(
C¨tInfo
 *);

343 
	`M≠≥r105_Inô
(
C¨tInfo
 *);

344 
	`M≠≥r107_Inô
(
C¨tInfo
 *);

345 
	`M≠≥r112_Inô
(
C¨tInfo
 *);

346 
	`M≠≥r114_Inô
(
C¨tInfo
 *);

347 
	`M≠≥r115_Inô
(
C¨tInfo
 *);

348 
	`M≠≥r116_Inô
(
C¨tInfo
 *);

349 
	`M≠≥r117_Inô
(
C¨tInfo
 *);

350 
	`M≠≥r118_Inô
(
C¨tInfo
 *);

351 
	`M≠≥r119_Inô
(
C¨tInfo
 *);

352 
	`M≠≥r125_Inô
(
C¨tInfo
 *);

353 
	`M≠≥r140_Inô
(
C¨tInfo
 *);

354 
	`M≠≥r144_Inô
(
C¨tInfo
 *);

355 
	`M≠≥r152_Inô
(
C¨tInfo
 *);

356 
	`M≠≥r154_Inô
(
C¨tInfo
 *);

357 
	`M≠≥r155_Inô
(
C¨tInfo
 *);

358 
	`M≠≥r163_Inô
(
C¨tInfo
 *);

359 
	`M≠≥r164_Inô
(
C¨tInfo
 *);

360 
	`M≠≥r165_Inô
(
C¨tInfo
 *);

361 
	`M≠≥r181_Inô
(
C¨tInfo
 *);

362 
	`M≠≥r182_Inô
(
C¨tInfo
 *);

363 
	`M≠≥r183_Inô
(
C¨tInfo
 *);

364 
	`M≠≥r185_Inô
(
C¨tInfo
 *);

365 
	`M≠≥r186_Inô
(
C¨tInfo
 *);

366 
	`M≠≥r187_Inô
(
C¨tInfo
 *);

367 
	`M≠≥r188_Inô
(
C¨tInfo
 *);

368 
	`M≠≥r189_Inô
(
C¨tInfo
 *);

369 
	`M≠≥r191_Inô
(
C¨tInfo
 *);

370 
	`M≠≥r192_Inô
(
C¨tInfo
 *);

371 
	`M≠≥r194_Inô
(
C¨tInfo
 *);

372 
	`M≠≥r198_Inô
(
C¨tInfo
 *);

373 
	`M≠≥r199_Inô
(
C¨tInfo
 *);

374 
	`M≠≥r205_Inô
(
C¨tInfo
 *);

375 
	`M≠≥r208_Inô
(
C¨tInfo
 *);

376 
	`M≠≥r209_Inô
(
C¨tInfo
 *);

377 
	`M≠≥r210_Inô
(
C¨tInfo
 *);

378 
	`M≠≥r211_Inô
(
C¨tInfo
 *);

379 
	`M≠≥r215_Inô
(
C¨tInfo
 *);

380 
	`M≠≥r216_Inô
(
C¨tInfo
 *);

381 
	`M≠≥r217_Inô
(
C¨tInfo
 *);

382 
	`M≠≥r220_Inô
(
C¨tInfo
 *);

383 
	`M≠≥r222_Inô
(
C¨tInfo
 *);

384 
	`M≠≥r235_Inô
(
C¨tInfo
 *);

385 
	`M≠≥r236_Inô
(
C¨tInfo
 *);

386 
	`M≠≥r237_Inô
(
C¨tInfo
 *);

387 
	`M≠≥r245_Inô
(
C¨tInfo
 *);

388 
	`M≠≥r249_Inô
(
C¨tInfo
 *);

389 
	`M≠≥r250_Inô
(
C¨tInfo
 *);

390 
	`M≠≥r254_Inô
(
C¨tInfo
 *);

	@input.c

21 
	~<°rög.h
>

22 
	~"ty≥s.h
"

23 
	~"x6502.h
"

25 
	~"f˚.h
"

26 
	~"sound.h
"

27 
	~"√çœy.h
"

28 
	~"svga.h
"

30 
	~"öput.h
"

31 
	~"°©e.h
"

32 
	~"movõ.h
"

34 
	~"fds.h
"

35 
	~"vsuni.h
"

36 
	~"d¥ötf.h
"

38 
INPUTC
 *
FCEU_InôZ≠≥r
(
w
);

39 
INPUTC
 *
FCEU_InôPowî∑dA
(
w
);

40 
INPUTC
 *
FCEU_InôArk™oid
(
w
);

42 
INPUTCFC
 *
FCEU_InôArk™oidFC
();

43 
INPUTCFC
 *
FCEU_InôS∑˚Shadow
();

44 
INPUTCFC
 *
FCEU_InôFKB
();

45 
uöt8
 
	gjoy_ªadbô
[2];

46 
uöt8
 
	gjoy
[4]={0,0,0,0};

47 
uöt8
 
	gLa°Såobe
;

49 
	gFSDißbÀ
=0;

50 
	gJPAârib
[2]={0,0};

51 
	gJPTy≥
[2]={0,0};

52 *
	gI≈utD©aPå
[2];

54 
	gJPAâribFC
=0;

55 
	gJPTy≥FC
=0;

56 *
	gI≈utD©aPåFC
;

58 (*
I≈utSˇ∆öeHook
)(
uöt8
 *
bg
, uöt8 *
•r
, 
uöt32
 
löës
, 
föÆ
);

60 
INPUTC
 
DummyJP‹t
={0,0,0,0,0
	}
};

61 
INPUTC
 *
	gJP‹ts
[2]={&
DummyJP‹t
,&DummyJPort};

62 
INPUTCFC
 *
	gFCExp
=0;

67 
uöt8
 
	$FCEU_GëJoyJoy
()

69 (
joy
[0]|joy[1]|joy[2]|joy[3]);

70 
	}
}

72 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódGPVS
(
w
)

74 
uöt8
 
ªt
=0;

76 if(
joy_ªadbô
[
w
]>=8)

77 
ªt
=1;

80 
ªt
 = ((
joy
[
w
]>>(
joy_ªadbô
[w]))&1);

81 
joy_ªadbô
[
w
]++;

83  
ªt
;

84 
	}
}

86 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódGP
(
w
)

88 
uöt8
 
ªt
;

95 
ªt
 = ((
joy
[
w
]>>(
joy_ªadbô
[w]))&1);

96 if(
FSDißbÀ
)

98 if(
joy_ªadbô
[
w
]>=8Ë
ªt
|=1;

102 if(
joy_ªadbô
[
w
]==19-wË
ªt
|=1;

104 
joy_ªadbô
[
w
]++;

105  
ªt
;

106 
	}
}

108 
	$DECLFR
(
JPRód
)

110 
uöt8
 
ªt
=0;

112 if(
JP‹ts
[
A
&1]->
Ród
)

113 
ªt
|=
JP‹ts
[
A
&1]->
	`Ród
(A&1);

115 if(
FCExp
)

116 if(
FCExp
->
Ród
)

117 
ªt
=
FCExp
->
	`Ród
(
A
&1,ret);

119 
ªt
|=
X
.
DB
&0xC0;

120 
	`d¥ötf
("JPRód %ò%02x", 
A
&1, 
ªt
);

121 (
ªt
);

122 
	}
}

124 
	$DECLFW
(
B4016
)

126 if(
FCExp
)

127 if(
FCExp
->
Wrôe
)

128 
FCExp
->
	`Wrôe
(
V
&7);

130 if(
JP‹ts
[0]->
Wrôe
)

131 
JP‹ts
[0]->
	`Wrôe
(
V
&1);

132 if(
JP‹ts
[1]->
Wrôe
)

133 
JP‹ts
[1]->
	`Wrôe
(
V
&1);

135 if((
La°Såobe
&1Ë&& (!(
V
&1)))

142 if(
JP‹ts
[0]->
Såobe
)

143 
JP‹ts
[0]->
	`Såobe
(0);

144 if(
JP‹ts
[1]->
Såobe
)

145 
JP‹ts
[1]->
	`Såobe
(1);

146 if(
FCExp
)

147 if(
FCExp
->
Såobe
)

148 
FCExp
->
	`Såobe
();

150 
La°Såobe
=
V
&1;

151 
	}
}

153 
	$FP_FASTAPASS
(1Ë
	$SåobeGP
(
w
)

155 
joy_ªadbô
[
w
]=0;

156 
	}
}

158 
INPUTC
 
	gGPC
={
RódGP
,0,
SåobeGP
,0,0,0};

159 
INPUTC
 
	gGPCVS
={
RódGPVS
,0,
SåobeGP
,0,0,0};

161 
	$DøwI≈ut
(
uöt8
 *
buf
)

163 
x
;

165 
x
=0;x<2;x++)

166 if(
JP‹ts
[
x
]->
Døw
)

167 
JP‹ts
[
x
]->
	`Døw
(x,
buf
,
JPAârib
[x]);

168 if(
FCExp
)

169 if(
FCExp
->
Døw
)

170 
FCExp
->
	`Døw
(
buf
,
JPAâribFC
);

171 
	}
}

173 
	$Upd©eI≈ut
()

175 
x
;

177 
x
=0;x<2;x++)

179 
JPTy≥
[
x
])

181 
SI_GAMEPAD
:

182 if(!
x
Ë
joy
[0]=*(
uöt16
 *)
I≈utD©aPå
[0];

183 
joy
[1]=*(
uöt16
 *)
I≈utD©aPå
[1];

186 if(
JP‹ts
[
x
]->
Upd©e
)

187 
JP‹ts
[
x
]->
	`Upd©e
(x,
I≈utD©aPå
[x],
JPAârib
[x]);

191 if(
FCExp
)

192 if(
FCExp
->
Upd©e
)

193 
FCExp
->
	`Upd©e
(
I≈utD©aPåFC
,
JPAâribFC
);

195 if(
FCEUGameInfo
.
ty≥
==
GIT_VSUNI
)

197 
uöt16
 
t
=
joy
[0];

198 
joy
[0]=(joy[0]&0xC)|(joy[1]&0xF3);

199 
joy
[1]=(joy[1]&0xC)|(
t
&0xF3);

200 if(
coö⁄
) coinon--;

202 #ifde‡
NETWORK


203 if(
√çœy
Ë
	`Në∂ayUpd©e
(&
joy
[0],&joy[1]);

205 i‡(
cuºít
 < 0Ë
	`FCEUMOV_AddJoy
(
joy
);

206 
‰amecou¡
++;

208 
	}
}

210 
	$DECLFR
(
VSUNIRód0
)

212 
uöt8
 
ªt
=0;

214 if(
JP‹ts
[0]->
Ród
)

215 
ªt
|=(
JP‹ts
[0]->
	`Ród
(0))&1;

217 
ªt
|=(
vsdù
&3)<<3;

218 if(
coö⁄
)

219 
ªt
|=0x4;

220  
ªt
;

221 
	}
}

223 
	$DECLFR
(
VSUNIRód1
)

225 
uöt8
 
ªt
=0;

227 if(
JP‹ts
[1]->
Ród
)

228 
ªt
|=(
JP‹ts
[1]->
	`Ród
(1))&1;

229 
ªt
|=
vsdù
&0xFC;

230  
ªt
;

231 
	}
}

233 
	$SLHLHook
(
uöt8
 *
bg
, uöt8 *
•r
, 
uöt32
 
löës
, 
föÆ
)

235 
x
;

237 
x
=0;x<2;x++)

238 if(
JP‹ts
[
x
]->
SLHook
)

239 
JP‹ts
[
x
]->
	`SLHook
(x,
bg
,
•r
,
löës
,
föÆ
);

240 if(
FCExp
)

241 if(
FCExp
->
SLHook
)

242 
FCExp
->
	`SLHook
(
bg
,
•r
,
löës
,
föÆ
);

243 
	}
}

245 
	$CheckSLHook
()

247 
I≈utSˇ∆öeHook
=0;

248 if(
JP‹ts
[0]->
SLHook
 || JPorts[1]->SLHook)

249 
I≈utSˇ∆öeHook
=
SLHLHook
;

250 if(
FCExp
)

251 if(
FCExp
->
SLHook
)

252 
I≈utSˇ∆öeHook
=
SLHLHook
;

253 
	}
}

255 
	$FASTAPASS
(1Ë
	$SëI≈utStuff
(
x
)

257 
JPTy≥
[
x
])

259 
SI_GAMEPAD
:

260 if(
FCEUGameInfo
.
ty≥
==
GIT_VSUNI
)

261 
JP‹ts
[
x
]=&
GPCVS
;

263 
JP‹ts
[
x
]=&
GPC
;

265 
SI_ARKANOID
:
JP‹ts
[
x
]=
	`FCEU_InôArk™oid
(x);;

266 
SI_ZAPPER
:
JP‹ts
[
x
]=
	`FCEU_InôZ≠≥r
(x);;

267 
SI_POWERPADA
:
JP‹ts
[
x
]=
	`FCEU_InôPowî∑dA
(x);;

268 
SI_NONE
:
JP‹ts
[
x
]=&
DummyJP‹t
;;

271 
	`CheckSLHook
();

272 
	}
}

274 
uöt8
 
	gF4RódBô
[2];

275 
	$SåobeFami4
()

277 
F4RódBô
[0]=F4ReadBit[1]=0;

278 
	}
}

280 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$RódFami4
(
w
, 
uöt8
 
ªt
)

282 
ªt
&=1;

284 
ªt
 |((
joy
[
w
]>>(
F4RódBô
[w]+8))&1)<<1;

285 if(
F4RódBô
[
w
]>=8Ë
ªt
|=2;

286 
F4RódBô
[
w
]++;

288 (
ªt
);

289 
	}
}

291 
INPUTCFC
 
	gFAMI4C
={
RódFami4
,0,
SåobeFami4
,0,0,0};

292 
	$SëI≈utStuffFC
()

294 
JPTy≥FC
)

296 
SIFC_NONE
:
FCExp
=0;;

297 
SIFC_ARKANOID
:
FCExp
=
	`FCEU_InôArk™oidFC
();;

298 
SIFC_SHADOW
:
FCExp
=
	`FCEU_InôS∑˚Shadow
();;

299 
SIFC_4PLAYER
:
FCExp
=&
FAMI4C
;
	`mem£t
(&
F4RódBô
,0,(F4ReadBit));;

300 
SIFC_FKB
:
FCExp
=
	`FCEU_InôFKB
();;

302 
	`CheckSLHook
();

303 
	}
}

308 
	$InôülizeI≈ut
()

310 
	`mem£t
(
joy_ªadbô
,0,(joy_readbit));

311 
	`mem£t
(
joy
,0,(joy));

312 
La°Såobe
=0;

314 if(
FCEUGameInfo
.
ty≥
==
GIT_VSUNI
)

316 
	`SëRódH™dÀr
(0x4016,0x4016,
VSUNIRód0
);

317 
	`SëRódH™dÀr
(0x4017,0x4017,
VSUNIRód1
);

320 
	`SëRódH™dÀr
(0x4016,0x4017,
JPRód
);

321 
	`SëWrôeH™dÀr
(0x4016,0x4016,
B4016
);

323 
	`SëI≈utStuff
(0);

324 
	`SëI≈utStuff
(1);

325 
	`SëI≈utStuffFC
();

326 
	}
}

328 
	$FCEUI_SëI≈ut
(
p‹t
, 
ty≥
, *
±r
, 
©åib
)

330 
JPAârib
[
p‹t
]=
©åib
;

331 
JPTy≥
[
p‹t
]=
ty≥
;

332 
I≈utD©aPå
[
p‹t
]=
±r
;

333 
	`SëI≈utStuff
(
p‹t
);

334 
	}
}

336 
	$FCEUI_DißbÀFourSc‹e
(
s
)

338 
FSDißbÀ
=
s
;

339 
	}
}

341 
	$FCEUI_SëI≈utFC
(
ty≥
, *
±r
, 
©åib
)

343 
JPAâribFC
=
©åib
;

344 
JPTy≥FC
=
ty≥
;

345 
I≈utD©aPåFC
=
±r
;

346 
	`SëI≈utStuffFC
();

347 
	}
}

349 
	$FCEU_DoSim∂eComm™d
(
cmd
)

351 
	`¥ötf
("FCEU_DoSim∂eComm™d: %i\n", 
cmd
);

352 
cmd
)

354 
FCEUNPCMD_FDSINSERT
: 
	`FCEU_FDSIn£π
();;

355 
FCEUNPCMD_FDSSELECT
: 
	`FCEU_FDSSñe˘
();;

357 
FCEUNPCMD_VSUNICOIN
: 
	`FCEU_VSUniCoö
(); ;

358 
FCEUNPCMD_VSUNIDIP0
 ... (FCEUNPCMD_VSUNIDIP0 + 7): 
	`FCEU_VSUniToggÀDIP
(
cmd
 - FCEUNPCMD_VSUNIDIP0);;

359 
FCEUNPCMD_POWER
: 
	`PowîNES
();;

360 
FCEUNPCMD_RESET
: 
	`Re£tNES
();;

361 : 
	`¥ötf
("FCEU_DoSim∂eComm™d: c™'àh™dÀ cmd %i\n", 
cmd
); ;

363 
	}
}

365 
	$FCEU_QSim∂eComm™d
(
cmd
)

377 
	`FCEU_DoSim∂eComm™d
(
cmd
);

381 
	}
}

383 
	$FCEUI_FDSSñe˘
()

385 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_FDSSELECT
);

386 
	}
}

388 
	$FCEUI_FDSIn£π
()

390 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_FDSINSERT
);

392 
	}
}

401 
	$FCEUI_VSUniToggÀDIP
(
w
)

403 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_VSUNIDIP0
 + 
w
);

404 
	}
}

406 
	$FCEUI_VSUniCoö
()

408 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_VSUNICOIN
);

409 
	}
}

411 
	$FCEUI_Re£tNES
()

413 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_RESET
);

414 
	}
}

416 
	$FCEUI_PowîNES
()

418 
	`FCEU_QSim∂eComm™d
(
FCEUNPCMD_POWER
);

419 
	}
}

423 
SFORMAT
 
	gFCEUCTRL_STATEINFO
[]={

424 { 
joy_ªadbô
, 2, "JYRB"},

425 { 
joy
, 4, "JOYS"},

426 { &
La°Såobe
, 1, "LSTS"},

	@input.h

2 
uöt8
 
FP_FASTAPASS
(1Ë(*
	mRód
)(
	mw
);

3 
FP_FASTAPASS
(1Ë(*
	mWrôe
)(
uöt8
 
	mv
);

4 
FP_FASTAPASS
(1Ë(*
	mSåobe
)(
	mw
);

5 
FP_FASTAPASS
(3Ë(*
	mUpd©e
)(
	mw
, *
	md©a
, 
	m¨g
);

6 
FP_FASTAPASS
(3Ë(*
	mSLHook
)(
	mw
, 
uöt8
 *
	mbg
, uöt8 *
	m•r
, 
uöt32
 
	mlöës
, 
	mföÆ
);

7 
FP_FASTAPASS
(3Ë(*
	mDøw
)(
	mw
, 
uöt8
 *
	mbuf
, 
	m¨g
);

8 } 
	tINPUTC
;

11 
uöt8
 
FP_FASTAPASS
(2Ë(*
	mRód
)(
	mw
, uöt8 
	mªt
);

12 
FP_FASTAPASS
(1Ë(*
	mWrôe
)(
uöt8
 
	mv
);

13 (*
	mSåobe
)();

14 
FP_FASTAPASS
(2Ë(*
	mUpd©e
)(*
	md©a
, 
	m¨g
);

15 
FP_FASTAPASS
(3Ë(*
	mSLHook
)(
uöt8
 *
	mbg
, uöt8 *
	m•r
, 
uöt32
 
	mlöës
, 
	mföÆ
);

16 
FP_FASTAPASS
(2Ë(*
	mDøw
)(
uöt8
 *
	mbuf
, 
	m¨g
);

17 } 
	tINPUTCFC
;

19 
DøwI≈ut
(
uöt8
 *
buf
);

20 
Upd©eI≈ut
();

21 
InôülizeI≈ut
();

22 (*
PSåobe
[2])();

23 (*
I≈utSˇ∆öeHook
)(
uöt8
 *
bg
, uöt8 *
•r
, 
uöt32
 
löës
, 
föÆ
);

25 
	#FCEUNPCMD_RESET
 0x01

	)

26 
	#FCEUNPCMD_POWER
 0x02

	)

28 
	#FCEUNPCMD_VSUNICOIN
 0x07

	)

29 
	#FCEUNPCMD_VSUNIDIP0
 0x08

	)

30 
	#FCEUNPCMD_FDSINSERT
 0x18

	)

31 
	#FCEUNPCMD_FDSSELECT
 0x1A

	)

32 
	`FCEU_DoSim∂eComm™d
(
cmd
);

34 
	`FCEUI_FDSSñe˘
();

35 
	`FCEUI_FDSIn£π
();

36 
	`FCEUI_VSUniToggÀDIP
(
w
);

37 
	`FCEUI_VSUniCoö
();

38 
	`FCEUI_Re£tNES
();

39 
	`FCEUI_PowîNES
();

	@input/arkanoid.c

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~"sh¨e.h
"

26 
uöt32
 
	mmzx
,
	mmzb
;

27 
uöt32
 
	mªadbô
;

28 } 
	tARK
;

30 
ARK
 
	gNESArk
[2];

31 
ARK
 
	gFCArk
;

33 
	$SåobeARKFC
()

35 
FCArk
.
ªadbô
=0;

36 
	}
}

39 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$RódARKFC
(
w
,
uöt8
 
ªt
)

41 
ªt
&=~2;

43 if(
w
)

45 if(
FCArk
.
ªadbô
>=8)

46 
ªt
|=2;

49 
ªt
|=((
FCArk
.
mzx
>>(7-FCArk.
ªadbô
))&1)<<1;

50 if(!
f˚uödbg
)

51 
FCArk
.
ªadbô
++;

55 
ªt
|=
FCArk
.
mzb
<<1;

56 (
ªt
);

57 
	}
}

59 
uöt32
 
	$FixX
(
uöt32
 
x
)

61 
x
=98+x*144/240;

62 if(
x
>242) x=242;

63 
x
=~x;

64 (
x
);

65 
	}
}

67 
	$FP_FASTAPASS
(2Ë
	$Upd©eARKFC
(*
d©a
, 
¨g
)

69 
uöt32
 *
±r
=(uöt32 *)
d©a
;

70 
FCArk
.
mzx
=
	`FixX
(
±r
[0]);

71 
FCArk
.
mzb
=
±r
[2]?1:0;

72 
	}
}

74 
INPUTCFC
 
	gARKCFC
={
RódARKFC
,0,
SåobeARKFC
,
Upd©eARKFC
,0,0};

76 
INPUTCFC
 *
	$FCEU_InôArk™oidFC
()

78 
FCArk
.
mzx
=98;

79 
FCArk
.
mzb
=0;

80 (&
ARKCFC
);

81 
	}
}

83 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódARK
(
w
)

85 
uöt8
 
ªt
=0;

87 if(
NESArk
[
w
].
ªadbô
>=8)

88 
ªt
|=1<<4;

91 
ªt
|=((
NESArk
[
w
].
mzx
>>(7-NESArk[w].
ªadbô
))&1)<<4;

92 if(!
f˚uödbg
)

93 
NESArk
[
w
].
ªadbô
++;

95 
ªt
|=(
NESArk
[
w
].
mzb
&1)<<3;

96 (
ªt
);

97 
	}
}

100 
	$FP_FASTAPASS
(1Ë
	$SåobeARK
(
w
)

102 
NESArk
[
w
].
ªadbô
=0;

103 
	}
}

105 
	$FP_FASTAPASS
(3Ë
	$Upd©eARK
(
w
, *
d©a
, 
¨g
)

107 
uöt32
 *
±r
=(uöt32*)
d©a
;

108 
NESArk
[
w
].
mzx
=
	`FixX
(
±r
[0]);

109 
NESArk
[
w
].
mzb
=
±r
[2]?1:0;

110 
	}
}

112 
INPUTC
 
	gARKC
={
RódARK
, 0, 
SåobeARK
, 
Upd©eARK
, 0, 0};

114 
INPUTC
 *
	$FCEU_InôArk™oid
(
w
)

116 
NESArk
[
w
].
mzx
=98;

117 
NESArk
[
w
].
mzb
=0;

118 (&
ARKC
);

119 
	}
}

	@input/bworld.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
	g£q
,
	g±r
,
	gbô
,
	g˙t
,
	ghave
;

25 
uöt8
 
	gbd©a
[20];

28 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$Ród
(
w
, 
uöt8
 
ªt
)

30 if(
w
 && 
have
)

32 
£q
)

34 0: 
£q
++; 
±r
=0; 
ªt
|=0x4; ;

35 1: 
£q
++; 
bô
=
bd©a
[
±r
]; 
˙t
=0; 
ªt
|=0x4; ;

36 2: 
ªt
|=((
bô
&0x01)^0x01)<<2; bô>>=1; if(++
˙t
 > 7Ë
£q
++;

38 3: if(++
±r
 > 19)

40 
£q
=-1;

41 
have
=0;

44 
£q
=1;

48 (
ªt
);

49 
	}
}

51 
	$FP_FASTAPASS
(1Ë
	$Wrôe
(
uöt8
 
V
)

54 
	}
}

56 
	$FP_FASTAPASS
(2Ë
	$Upd©e
(*
d©a
, 
¨g
)

58 if(*(
uöt8
 *)
d©a
)

60 *(
uöt8
 *)
d©a
=0;

61 
£q
=
±r
=0;

62 
have
=1;

63 
	`°r˝y
((*)
bd©a
,(*)
d©a
+1);

64 
	`°r˝y
((*)&
bd©a
[13],"SUNSOFT");

66 
	}
}

68 
INPUTCFC
 
	gB¨codeW‹ld
={
Ród
,
Wrôe
,0,
Upd©e
,0,0};

70 
INPUTCFC
 *
	$FCEU_InôB¨codeW‹ld
()

72 (&
B¨codeW‹ld
);

73 
	}
}

	@input/cursor.c

1 
	~"sh¨e.h
"

3 
uöt8
 
	gGunSight
[]={

18 
uöt8
 
	gFCEUcurs‹
[11*19]=

41 
	$FCEU_DøwGunSight
(
uöt8
 *
buf
, 
xc
, 
yc
)

43 
x
,
y
;

44 
c
,
d
;

46 
y
=0;y<13;y++)

47 
x
=0;x<13;x++)

49 
uöt8
 
a
;

50 
a
=
GunSight
[
y
*13+
x
];

51 if(
a
)

53 
c
=(
yc
+
y
-7);

54 
d
=(
xc
+
x
-7);

55 if(
c
>=0 && 
d
>=0 && d<256 && c<240)

57 if(
a
==3)

58 
buf
[
c
*
SCREEN_WIDTH
+
d
+
SCREEN_OFFS
]=0xBF-(buf[c*SCREEN_WIDTH+d+SCREEN_OFFS]&0x3F);

60 
buf
[
c
*
SCREEN_WIDTH
+
d
+
SCREEN_OFFS
]=
a
-1;

64 
	}
}

67 
	$FCEU_DøwCurs‹
(
uöt8
 *
buf
, 
xc
, 
yc
)

69 
x
,
y
;

70 
c
,
d
;

72 if(
xc
<256 && 
yc
<240)

73 
y
=0;y<19;y++)

74 
x
=0;x<11;x++)

76 
uöt8
 
a
;

77 
a
=
FCEUcurs‹
[
y
*11+
x
];

78 if(
a
)

80 
c
=(
yc
+
y
);

81 
d
=(
xc
+
x
);

82 if(
d
<256 && 
c
<240)

83 
buf
[
c
*
SCREEN_WIDTH
+
d
+
SCREEN_OFFS
]=
a
+127;

86 
	}
}

	@input/fkb.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

23 
	~"fkb.h
"

24 
	#AK2
(
x
,
y
Ë–(
FKB_
##xË| (FKB_##y <<8Ë)

	)

25 
	#AK
(
x
Ë
FKB_
##
	)
x

27 
uöt8
 
	gbufô
[0x49];

28 
uöt8
 
	gksmode
;

29 
uöt8
 
	gksödex
;

32 
uöt16
 
	gm©rix
[9][2][4]=

34 {{
AK
(
F8
),AK(
RETURN
),AK(
BRACKETLEFT
),AK(
BRACKETRIGHT
)},

35 {
AK
(
KANA
),AK(
RIGHTSHIFT
),AK(
BACKSLASH
),AK(
STOP
)}},

36 {{
AK
(
F7
),AK(
AT
),AK(
COLON
),AK(
SEMICOLON
)},

37 {
AK
(
UNDERSCORE
),AK(
SLASH
),AK(
MINUS
),AK(
CARET
)}},

38 {{
AK
(
F6
),AK(
O
),AK(
L
),AK(
K
)},

39 {
AK
(
PERIOD
),AK(
COMMA
),AK(
P
),AK(0)}},

40 {{
AK
(
F5
),AK(
I
),AK(
U
),AK(
J
)},

41 {
AK
(
M
),AK(
N
),AK(9),AK(8)}},

42 {{
AK
(
F4
),AK(
Y
),AK(
G
),AK(
H
)},

43 {
AK
(
B
),AK(
V
),AK(7),AK(6)}},

44 {{
AK
(
F3
),AK(
T
),AK(
R
),AK(
D
)},

45 {
AK
(
F
),AK(
C
),AK(5),AK(4)}},

46 {{
AK
(
F2
),AK(
W
),AK(
S
),AK(
A
)},

47 {
AK
(
X
),AK(
Z
),AK(
E
),AK(3)}},

48 {{
AK
(
F1
),AK(
ESCAPE
),AK(
Q
),AK(
CONTROL
)},

49 {
AK
(
LEFTSHIFT
),AK(
GRAPH
),AK(1),AK(2)}},

50 {{
AK
(
CLEAR
),AK(
UP
),AK(
RIGHT
),AK(
LEFT
)},

51 {
AK
(
DOWN
),AK(
SPACE
),AK(
DELETE
),AK(
INSERT
)}},

54 
	$FP_FASTAPASS
(1Ë
	$FKB_Wrôe
(
uöt8
 
v
)

56 
v
>>=1;

57 if(
v
&2)

59 if((
ksmode
&1Ë&& !(
v
&1))

60 
ksödex
=(ksindex+1)%9;

62 
ksmode
=
v
;

63 
	}
}

65 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$FKB_Ród
(
w
, 
uöt8
 
ªt
)

68 if(
w
)

70 
x
;

72 
ªt
&=~0x1E;

73 
x
=0;x<4;x++)

74 if(
bufô
[ 
m©rix
[
ksödex
][
ksmode
&1][
x
]&0xFF ] || bufit[ matrix[ksindex][ksmode&1][x]>>8])

76 
ªt
|=1<<(
x
+1);

78 
ªt
^=0x1E;

80 (
ªt
);

81 
	}
}

83 
	$FKB_Såobe
()

85 
ksmode
=0;

86 
ksödex
=0;

88 
	}
}

90 
	$FP_FASTAPASS
(2Ë
	$FKB_Upd©e
(*
d©a
, 
¨g
)

92 
	`mem˝y
(
bufô
+1,
d©a
,0x48);

93 
	}
}

95 
INPUTCFC
 
	gFKB
={
FKB_Ród
,
FKB_Wrôe
,
FKB_Såobe
,
FKB_Upd©e
,0,0};

97 
INPUTCFC
 *
	$FCEU_InôFKB
()

99 
	`mem£t
(
bufô
,0,(bufit));

100 
ksmode
=
ksödex
=0;

101 (&
FKB
);

102 
	}
}

	@input/fkb.h

1 
	#FKB_F1
 0x01

	)

2 
	#FKB_F2
 0x02

	)

3 
	#FKB_F3
 0x03

	)

4 
	#FKB_F4
 0x04

	)

5 
	#FKB_F5
 0x05

	)

6 
	#FKB_F6
 0x06

	)

7 
	#FKB_F7
 0x07

	)

8 
	#FKB_F8
 0x08

	)

9 
	#FKB_1
 0x09

	)

10 
	#FKB_2
 0x0A

	)

11 
	#FKB_3
 0x0B

	)

12 
	#FKB_4
 0x0C

	)

13 
	#FKB_5
 0x0D

	)

14 
	#FKB_6
 0x0E

	)

15 
	#FKB_7
 0x0F

	)

16 
	#FKB_8
 0x10

	)

17 
	#FKB_9
 0x11

	)

18 
	#FKB_0
 0x12

	)

19 
	#FKB_MINUS
 0x13

	)

20 
	#FKB_CARET
 0x14

	)

21 
	#FKB_BACKSLASH
 0x15

	)

22 
	#FKB_STOP
 0x16

	)

23 
	#FKB_ESCAPE
 0x17

	)

24 
	#FKB_Q
 0x18

	)

25 
	#FKB_W
 0x19

	)

26 
	#FKB_E
 0x1A

	)

27 
	#FKB_R
 0x1B

	)

28 
	#FKB_T
 0x1C

	)

29 
	#FKB_Y
 0x1D

	)

30 
	#FKB_U
 0x1E

	)

31 
	#FKB_I
 0x1F

	)

32 
	#FKB_O
 0x20

	)

33 
	#FKB_P
 0x21

	)

34 
	#FKB_AT
 0x22

	)

35 
	#FKB_BRACKETLEFT
 0x23

	)

36 
	#FKB_RETURN
 0x24

	)

37 
	#FKB_CONTROL
 0x25

	)

38 
	#FKB_A
 0x26

	)

39 
	#FKB_S
 0x27

	)

40 
	#FKB_D
 0x28

	)

41 
	#FKB_F
 0x29

	)

42 
	#FKB_G
 0x2A

	)

43 
	#FKB_H
 0x2B

	)

44 
	#FKB_J
 0x2C

	)

45 
	#FKB_K
 0x2D

	)

46 
	#FKB_L
 0x2E

	)

47 
	#FKB_SEMICOLON
 0x2F

	)

48 
	#FKB_COLON
 0x30

	)

49 
	#FKB_BRACKETRIGHT
 0x31

	)

50 
	#FKB_KANA
 0x32

	)

51 
	#FKB_LEFTSHIFT
 0x33

	)

52 
	#FKB_Z
 0x34

	)

53 
	#FKB_X
 0x35

	)

54 
	#FKB_C
 0x36

	)

55 
	#FKB_V
 0x37

	)

56 
	#FKB_B
 0x38

	)

57 
	#FKB_N
 0x39

	)

58 
	#FKB_M
 0x3A

	)

59 
	#FKB_COMMA
 0x3B

	)

60 
	#FKB_PERIOD
 0x3C

	)

61 
	#FKB_SLASH
 0x3D

	)

62 
	#FKB_UNDERSCORE
 0x3E

	)

63 
	#FKB_RIGHTSHIFT
 0x3F

	)

64 
	#FKB_GRAPH
 0x40

	)

65 
	#FKB_SPACE
 0x41

	)

66 
	#FKB_CLEAR
 0x42

	)

67 
	#FKB_INSERT
 0x43

	)

68 
	#FKB_DELETE
 0x44

	)

69 
	#FKB_UP
 0x45

	)

70 
	#FKB_LEFT
 0x46

	)

71 
	#FKB_RIGHT
 0x47

	)

72 
	#FKB_DOWN
 0x48

	)

	@input/ftrainer.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt32
 
	gFTVÆ
,
	gFTVÆR
;

25 
	gside
;

27 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$FT_Ród
(
w
, 
uöt8
 
ªt
)

29 if(
w
)

31 
ªt
|=
FTVÆR
;

33 (
ªt
);

34 
	}
}

36 
	$FP_FASTAPASS
(1Ë
	$FT_Wrôe
(
uöt8
 
V
)

38 
FTVÆR
=0;

41 if(!(
V
&0x1))

42 
FTVÆR
=(
FTVÆ
>>8);

43 if(!(
V
&0x2))

44 
FTVÆR
=(
FTVÆ
>>4);

45 if(!(
V
&0x4))

46 
FTVÆR
=
FTVÆ
;

48 
FTVÆR
=(~FTValR)&0xF;

49 if(
side
=='B')

50 
FTVÆR
=((FTValR&0x8)>>3) | ((FTValR&0x4)>>1) | ((FTValR&0x2)<<1) | ((FTValR&0x1)<<3);

51 
FTVÆR
<<=1;

52 
	}
}

54 
	$FP_FASTAPASS
(2Ë
	$FT_Upd©e
(*
d©a
, 
¨g
)

56 
FTVÆ
=*(
uöt32
 *)
d©a
;

57 
	}
}

59 
INPUTCFC
 
	gFamûyTøöî
={
FT_Ród
,
FT_Wrôe
,0,
FT_Upd©e
,0,0};

61 
INPUTCFC
 *
	$FCEU_InôFamûyTøöîA
()

63 
side
='A';

64 
FTVÆ
=
FTVÆR
=0;

65 (&
FamûyTøöî
);

66 
	}
}

68 
INPUTCFC
 *
	$FCEU_InôFamûyTøöîB
()

70 
side
='B';

71 
FTVÆ
=
FTVÆR
=0;

72 (&
FamûyTøöî
);

73 
	}
}

	@input/hypershot.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt8
 
	gHSVÆ
,
	gHSVÆR
;

27 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$HS_Ród
(
w
, 
uöt8
 
ªt
)

29 if(
w
Ë
ªt
|=
HSVÆR
;

31 (
ªt
);

32 
	}
}

34 
	$HS_Såobe
()

36 
HSVÆR
=
HSVÆ
<<1;

37 
	}
}

39 
	$FP_FASTAPASS
(2Ë
	$HS_Upd©e
(*
d©a
, 
¨g
)

41 
HSVÆ
=*(
uöt8
*)
d©a
;

42 
	}
}

44 
INPUTCFC
 
	gHy≥rShŸ
={
HS_Ród
,0,
HS_Såobe
,
HS_Upd©e
,0,0};

46 
INPUTCFC
 *
	$FCEU_InôHS
()

48 
HSVÆ
=
HSVÆR
=0;

49 (&
Hy≥rShŸ
);

50 
	}
}

	@input/mahjong.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt32
 
	gMRól
,
	gMRë
;

26 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$MJ_Ród
(
w
, 
uöt8
 
ªt
)

28 if(
w
)

31 
ªt
|=((
MRë
&0x80)>>6)&2;

33 if(!
f˚uödbg
)

34 
MRë
<<=1;

36 (
ªt
);

37 
	}
}

39 
	$FP_FASTAPASS
(1Ë
	$MJ_Wrôe
(
uöt8
 
v
)

45 
MRë
=0;

47 
v
>>=1;

48 
v
&=3;

50 if(
v
==3)

52 
MRë
=(
MRól
>>14)&0x7F;

55 if(
v
==2)

57 
MRë
=
MRól
&0xFF;

59 if(
v
==1)

61 
MRë
=(
MRól
>>8)&0x3F;

64 
	}
}

66 
	$FP_FASTAPASS
(2Ë
	$MJ_Upd©e
(*
d©a
, 
¨g
)

68 
MRól
=*(
uöt32
*)
d©a
;

71 
	}
}

73 
INPUTCFC
 
	gMahj⁄g
={
MJ_Ród
,
MJ_Wrôe
,0,
MJ_Upd©e
,0,0};

75 
INPUTCFC
 *
	$FCEU_InôMahj⁄g
()

77 
MRól
=
MRë
=0;

78 (&
Mahj⁄g
);

79 
	}
}

	@input/oekakids.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt8
 
	gOKVÆR
,
	gLa°WR
;

25 
uöt32
 
	gOKD©a
;

26 
uöt32
 
	gOKX
,
	gOKY
,
	gOKB
;

28 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$OK_Ród
(
w
, 
uöt8
 
ªt
)

30 if(
w
)

32 
ªt
|=
OKVÆR
;

34 (
ªt
);

35 
	}
}

37 
	$FP_FASTAPASS
(1Ë
	$OK_Wrôe
(
uöt8
 
V
)

39 if(!(
V
&0x1))

41 
öt32
 
vx
,
vy
;

44 
OKVÆR
=
OKD©a
=0;

46 if(
OKB
Ë
OKD©a
|=1;

48 if(
OKY
 >= 48)

49 
OKD©a
|=2;

50 if(
OKB
Ë
OKD©a
|=3;

52 
vx
=
OKX
*240/256+8;

53 
vy
=
OKY
*256/240-12;

54 if(
vy
<0) vy=0;

55 if(
vy
>255) vy=255;

56 if(
vx
<0) vx=0;

57 if(
vx
>255) vx=255;

58 
OKD©a
 |(
vx
<<10Ë| (
vy
<<2);

62 if((~
La°WR
)&
V
&0x02)

63 
OKD©a
<<=1;

65 if(!(
V
&0x2)Ë
OKVÆR
=0x4;

68 if(
OKD©a
&0x40000Ë
OKVÆR
=0;

69 
OKVÆR
=0x8;

72 
La°WR
=
V
;

73 
	}
}

75 
	$FP_FASTAPASS
(2Ë
	$OK_Upd©e
(*
d©a
, 
¨g
)

78 
OKX
=((
uöt32
*)
d©a
)[0];

79 
OKY
=((
uöt32
*)
d©a
)[1];

80 
OKB
=((
uöt32
*)
d©a
)[2];

81 
	}
}

83 
	$FP_FASTAPASS
(2Ë
	$DøwOeka
(
uöt8
 *
buf
, 
¨g
)

85 if(
¨g
 && 
OKY
<44)

86 
	`FCEU_DøwCurs‹
(
buf
, 
OKX
, 
OKY
);

87 
	}
}

89 
INPUTCFC
 
	gOekaKids
={
OK_Ród
,
OK_Wrôe
,0,
OK_Upd©e
,0,
DøwOeka
};

91 
INPUTCFC
 *
	$FCEU_InôOekaKids
()

93 
OKVÆR
=0;

94 (&
OekaKids
);

95 
	}
}

	@input/powerpad.c

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~"sh¨e.h
"

26 
	gside
;

27 
uöt32
 
	gµrsb
[2];

28 
uöt32
 
	gµrd©a
[2];

30 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódPP
(
w
)

32 
uöt8
 
ªt
=0;

33 
ªt
|=((
µrd©a
[
w
]>>
µrsb
[w])&1)<<3;

34 
ªt
|=((
µrd©a
[
w
]>>(
µrsb
[w]+8))&1)<<4;

35 if(
µrsb
[
w
]>=4)

37 
ªt
|=0x10;

38 if(
µrsb
[
w
]>=8)

39 
ªt
|=0x08;

41 if(!
f˚uödbg
)

42 
µrsb
[
w
]++;

43  
ªt
;

44 
	}
}

46 
	$FP_FASTAPASS
(1Ë
	$SåobePP
(
w
)

48 
µrsb
[
w
]=0;

49 
	}
}

51 
	$FP_FASTAPASS
(3Ë
	$Upd©ePP
(
w
, *
d©a
, 
¨g
)

53 c⁄° 
shi·èbÀA
[12]={8,9,0,1,11,7,4,2,10,6,5,3};

54 c⁄° 
shi·èbÀB
[12]={1,0,9,8,2,4,7,11,3,5,6,10};

55 
x
;

57 
µrd©a
[
w
]=0;

59 if(
side
=='A')

60 
x
=0;x<12;x++)

61 
µrd©a
[
w
]|=(((*(
uöt32
 *)
d©a
)>>
x
)&1)<<
shi·èbÀA
[x];

63 
x
=0;x<12;x++)

64 
µrd©a
[
w
]|=(((*(
uöt32
 *)
d©a
)>>
x
)&1)<<
shi·èbÀB
[x];

65 
	}
}

67 
INPUTC
 
	gPwrPadCål
={
RódPP
,0,
SåobePP
,
Upd©ePP
,0,0};

69 
INPUTC
 *
	$FCEU_InôPowî∑d
(
w
)

71 
µrsb
[
w
]=
µrd©a
[w]=0;

72 (&
PwrPadCål
);

73 
	}
}

75 
INPUTC
 *
	$FCEU_InôPowî∑dA
(
w
)

77 
side
='A';

78 (
	`FCEU_InôPowî∑d
(
w
));

79 
	}
}

81 
INPUTC
 *
	$FCEU_InôPowî∑dB
(
w
)

83 
side
='B';

84 (
	`FCEU_InôPowî∑d
(
w
));

85 
	}
}

	@input/quiz.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt8
 
	gQZVÆ
,
	gQZVÆR
;

25 
uöt8
 
	gFunkyMode
;

27 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$QZ_Ród
(
w
, 
uöt8
 
ªt
)

29 if(
w
)

35 
ªt
|=(
QZVÆR
&0x7)<<2;

36 
QZVÆR
=QZValR>>3;

38 if(
FunkyMode
)

42 
QZVÆR
|=0x28;

46 
QZVÆR
|=0x38;

49 (
ªt
);

50 
	}
}

52 
	$QZ_Såobe
()

54 
QZVÆR
=
QZVÆ
;

56 
	}
}

58 
	$FP_FASTAPASS
(1Ë
	$QZ_Wrôe
(
uöt8
 
V
)

61 
FunkyMode
=
V
&4;

62 
	}
}

64 
	$FP_FASTAPASS
(2Ë
	$QZ_Upd©e
(*
d©a
, 
¨g
)

66 
QZVÆ
=*(
uöt8
 *)
d©a
;

67 
	}
}

69 
INPUTCFC
 
	gQuizKög
={
QZ_Ród
,
QZ_Wrôe
,
QZ_Såobe
,
QZ_Upd©e
,0,0};

71 
INPUTCFC
 *
	$FCEU_InôQuizKög
()

73 
QZVÆ
=
QZVÆR
=0;

74 (&
QuizKög
);

75 
	}
}

	@input/shadow.c

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~"sh¨e.h
"

27 
uöt32
 
	mmzx
,
	mmzy
,
	mmzb
;

28 
	mz≠_ªadbô
;

29 
	mbogo
;

30 
	mz≠po
;

31 
uöt64
 
	mz≠hô
;

32 } 
	tZAPPER
;

34 
ZAPPER
 
	gZD
;

36 
	$FP_FASTAPASS
(3Ë
	$Z≠≥rFøµî
(
uöt8
 *
bg
, uöt8 *
•r
, 
uöt32
 
löës
, 
föÆ
)

38 
xs
,
xe
;

39 
zx
,
zy
;

41 if(!
bg
)

43 
ZD
.
z≠po
=0;

46 
xs
=
ZD
.
z≠po
;

47 
xe
=
föÆ
;

49 
zx
=
ZD
.
mzx
;

50 
zy
=
ZD
.
mzy
;

52 if(
xe
>256) xe=256;

54 if(
sˇ∆öe
>=(
zy
-4) && scanline<=(zy+4))

56 
xs
<
xe
)

58 
uöt8
 
a1
,
a2
;

59 
uöt32
 
sum
;

60 if(
xs
<=(
zx
+4) && xs>=(zx-4))

62 
a1
=
bg
[
xs
];

63 if(
•r
)

65 
a2
=
•r
[
xs
];

67 if(!(
a2
&0x80))

68 if(!(
a2
&0x40Ë|| (
a1
&64))

69 
a1
=
a2
;

71 
a1
&=63;

73 
sum
=
∑lo
[
a1
].
r
+∑lo[a1].
g
+∑lo[a1].
b
;

74 if(
sum
>=100*3)

76 
ZD
.
z≠hô
=((
uöt64
)
löës
+(
xs
+16)*(
PAL
?15:16))/48+
time°ampba£
;

77 
ído
;

80 
xs
++;

83 
ído
:

84 
ZD
.
z≠po
=
föÆ
;

85 
	}
}

87 
INLINE
 
	$CheckCﬁ‹
()

89 
	`FCEUPPU_LöeUpd©e
();

91 if((
ZD
.
z≠hô
+10)>=(
time°ampba£
+
time°amp
)) (0);

94 
	}
}

97 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$RódZ≠≥r
(
w
, 
uöt8
 
ªt
)

99 if(
w
)

101 
ªt
&=~0x18;

102 if(
ZD
.
bogo
)

103 
ªt
|=0x10;

104 if(
	`CheckCﬁ‹
())

105 
ªt
|=0x8;

110 
ªt
&=~2;

112 
ªt
|=(ret&1)<<1;

115  
ªt
;

116 
	}
}

118 
	$FP_FASTAPASS
(2Ë
	$DøwZ≠≥r
(
uöt8
 *
buf
, 
¨g
)

120 if(
¨g
)

121 
	`FCEU_DøwCurs‹
(
buf
, 
ZD
.
mzx
, ZD.
mzy
);

122 
	}
}

124 
	$FP_FASTAPASS
(2Ë
	$Upd©eZ≠≥r
(*
d©a
, 
¨g
)

126 
uöt32
 *
±r
=(uöt32*)
d©a
;

128 if(
ZD
.
bogo
)

129 
ZD
.
bogo
--;

130 if(
±r
[2]&1 && (!(
ZD
.
mzb
&1)))

131 
ZD
.
bogo
=5;

133 
ZD
.
mzx
=
±r
[0];

134 
ZD
.
mzy
=
±r
[1];

135 
ZD
.
mzb
=
±r
[2];

136 
	}
}

138 
	$SåobeShadow
()

140 
ZD
.
z≠_ªadbô
=0;

141 
	}
}

143 
INPUTCFC
 
	gSHADOWC
={
RódZ≠≥r
,0,
SåobeShadow
,
Upd©eZ≠≥r
,
Z≠≥rFøµî
,
DøwZ≠≥r
};

145 
INPUTCFC
 *
	$FCEU_InôS∑˚Shadow
()

147 
	`mem£t
(&
ZD
,0,(
ZAPPER
));

148 (&
SHADOWC
);

149 
	}
}

	@input/share.h

1 
	~"../ty≥s.h
"

2 
	~"../öput.h
"

3 
	~"../f˚.h
"

4 
	~"../µu.h
"

5 
	~"../µu098.h
"

6 
	~"../x6502.h
"

7 
	~"../∑Àâe.h
"

9 
FCEU_DøwCurs‹
(
uöt8
 *
buf
, 
xc
, 
yc
);

10 
FCEU_DøwGunSight
(
uöt8
 *
buf
, 
xc
, 
yc
);

12 
	#SCREEN_WIDTH
 320

	)

13 
	#SCREEN_OFFS
 32

	)

	@input/suborkb.c

1 
	~<°rög.h
>

2 
	~"sh¨e.h
"

3 
	~"sub‹kb.h
"

4 
	#AK2
(
x
,
y
Ë–(
FKB_
##xË| (FKB_##y <<8Ë)

	)

5 
	#AK
(
x
Ë
FKB_
##
	)
x

7 
uöt8
 
	gbufô
[0x61];

8 
uöt8
 
	gksmode
;

9 
uöt8
 
	gksödex
;

12 
uöt16
 
	gm©rix
[13][2][4]=

14 {{
AK
(4),AK(
G
),AK(
F
),AK(
C
)},

15 {
AK
(
F2
),AK(
E
),AK(5),AK(
V
)}},

16 {{
AK
(2),AK(
D
),AK(
S
),AK(
END
)},

17 {
AK
(
F1
),AK(
W
),AK(3),AK(
X
)}},

18 {{
AK
(
INSERT
),AK(
BACK
),AK(
NEXT
),AK(
RIGHT
)},

19 {
AK
(
F8
),AK(
PRIOR
),AK(
DELETE
),AK(
HOME
)}},

20 {{
AK
(9),AK(
I
),AK(
L
),AK(
COMMA
)},

21 {
AK
(
F5
),AK(
O
),AK(0),AK(
PERIOD
)}},

22 {{
AK
(
RBRACKET
),AK(
RETURN
),AK(
UP
),AK(
LEFT
)},

23 {
AK
(
F7
),AK(
LBRACKET
),AK(
BACKSLASH
),AK(
DOWN
)}},

24 {{
AK
(
Q
),AK(
CAPITAL
),AK(
Z
),AK(
TAB
)},

25 {
AK
(
ESCAPE
),AK(
A
),AK(1),AK(
LCONTROL
)}},

26 {{
AK
(7),AK(
Y
),AK(
K
),AK(
M
)},

27 {
AK
(
F4
),AK(
U
),AK(8),AK(
J
)}},

28 {{
AK
(
MINUS
),AK(
SEMICOLON
),AK(
APOSTROPHE
),AK(
SLASH
)},

29 {
AK
(
F6
),AK(
P
),AK(
EQUALS
),AK(
LSHIFT
)}},

30 {{
AK
(
T
),AK(
H
),AK(
N
),AK(
SPACE
)},

31 {
AK
(
F3
),AK(
R
),AK(6),AK(
B
)}},

34 {{
AK
(
LMENU
),AK(
NUMPAD4
),AK(
NUMPAD7
),AK(
F11
)},

35 {
AK
(
F12
),AK(
NUMPAD1
),AK(
NUMPAD2
),AK(
NUMPAD8
)}},

36 {{
AK
(
SUBTRACT
),AK(
ADD
),AK(
MULTIPLY
),AK(
NUMPAD9
)},

37 {
AK
(
F10
),AK(
NUMPAD5
),AK(
DIVIDE
),AK(
NUMLOCK
)}},

38 {{
AK
(
GRAVE
),AK(
NUMPAD6
),AK(
PAUSE
),AK(
SPACE
)},

39 {
AK
(
F9
),AK(
NUMPAD3
),AK(
DECIMAL
),AK(
NUMPAD0
)}},

42 
	$FP_FASTAPASS
(1Ë
	$Sub‹KB_Wrôe
(
uöt8
 
v
)

44 
v
>>=1;

45 if(
v
&2)

47 if((
ksmode
&1Ë&& !(
v
&1))

48 
ksödex
=(ksindex+1)%13;

50 
ksmode
=
v
;

51 
	}
}

53 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$Sub‹KB_Ród
(
w
, 
uöt8
 
ªt
)

55 if(
w
)

57 
x
;

59 
ªt
&=~0x1E;

67 
x
=0;x<4;x++)

68 if(
bufô
[
m©rix
[
ksödex
][
ksmode
&1][
x
]&0xFF]||bufit[matrix[ksindex][ksmode&1][x]>>8])

69 
ªt
|=1<<(
x
+1);

71 
ªt
^=0x1E;

73 (
ªt
);

74 
	}
}

76 
	$Sub‹KB_Såobe
()

78 
ksmode
=0;

79 
ksödex
=0;

80 
	}
}

82 
	$FP_FASTAPASS
(2Ë
	$Sub‹KB_Upd©e
(*
d©a
, 
¨g
)

84 
	`mem˝y
(
bufô
+1,
d©a
,0x60);

85 
	}
}

87 
INPUTCFC
 
	gSub‹KB
={
Sub‹KB_Ród
,
Sub‹KB_Wrôe
,
Sub‹KB_Såobe
,
Sub‹KB_Upd©e
,0,0};

89 
INPUTCFC
 *
	$FCEU_InôSub‹KB
()

91 
	`mem£t
(
bufô
,0,(bufit));

92 
ksmode
=
ksödex
=0;

93 (&
Sub‹KB
);

94 
	}
}

	@input/suborkb.h

1 
	#FKB_ESCAPE
 0x01

	)

2 
	#FKB_F1
 0x02

	)

3 
	#FKB_F2
 0x03

	)

4 
	#FKB_F3
 0x04

	)

5 
	#FKB_F4
 0x05

	)

6 
	#FKB_F5
 0x06

	)

7 
	#FKB_F6
 0x07

	)

8 
	#FKB_F7
 0x08

	)

9 
	#FKB_F8
 0x09

	)

10 
	#FKB_F9
 0x0A

	)

11 
	#FKB_F10
 0x0B

	)

12 
	#FKB_F11
 0x0C

	)

13 
	#FKB_F12
 0x0D

	)

14 
	#FKB_PAUSE
 0x0E

	)

15 
	#FKB_GRAVE
 0x0F

	)

16 
	#FKB_1
 0x10

	)

17 
	#FKB_2
 0x11

	)

18 
	#FKB_3
 0x12

	)

19 
	#FKB_4
 0x13

	)

20 
	#FKB_5
 0x14

	)

21 
	#FKB_6
 0x15

	)

22 
	#FKB_7
 0x16

	)

23 
	#FKB_8
 0x17

	)

24 
	#FKB_9
 0x18

	)

25 
	#FKB_0
 0x19

	)

26 
	#FKB_MINUS
 0x1A

	)

27 
	#FKB_EQUALS
 0x1B

	)

28 
	#FKB_BACK
 0x1C

	)

29 
	#FKB_INSERT
 0x1D

	)

30 
	#FKB_HOME
 0x1E

	)

31 
	#FKB_PRIOR
 0x1F

	)

32 
	#FKB_NUMLOCK
 0x20

	)

33 
	#FKB_DIVIDE
 0x21

	)

34 
	#FKB_MULTIPLY
 0x22

	)

35 
	#FKB_SUBTRACT
 0x23

	)

36 
	#FKB_TAB
 0x24

	)

37 
	#FKB_Q
 0x25

	)

38 
	#FKB_W
 0x26

	)

39 
	#FKB_E
 0x27

	)

40 
	#FKB_R
 0x28

	)

41 
	#FKB_T
 0x29

	)

42 
	#FKB_Y
 0x2A

	)

43 
	#FKB_U
 0x2B

	)

44 
	#FKB_I
 0x2C

	)

45 
	#FKB_O
 0x2D

	)

46 
	#FKB_P
 0x2E

	)

47 
	#FKB_LBRACKET
 0x2F

	)

48 
	#FKB_RBRACKET
 0x30

	)

49 
	#FKB_RETURN
 0x31

	)

50 
	#FKB_DELETE
 0x32

	)

51 
	#FKB_END
 0x33

	)

52 
	#FKB_NEXT
 0x34

	)

53 
	#FKB_NUMPAD7
 0x35

	)

54 
	#FKB_NUMPAD8
 0x36

	)

55 
	#FKB_NUMPAD9
 0x37

	)

56 
	#FKB_ADD
 0x38

	)

57 
	#FKB_CAPITAL
 0x39

	)

58 
	#FKB_A
 0x3A

	)

59 
	#FKB_S
 0x3B

	)

60 
	#FKB_D
 0x3C

	)

61 
	#FKB_F
 0x3D

	)

62 
	#FKB_G
 0x3E

	)

63 
	#FKB_H
 0x3F

	)

64 
	#FKB_J
 0x40

	)

65 
	#FKB_K
 0x41

	)

66 
	#FKB_L
 0x42

	)

67 
	#FKB_SEMICOLON
 0x43

	)

68 
	#FKB_APOSTROPHE
 0x44

	)

69 
	#FKB_NUMPAD4
 0x45

	)

70 
	#FKB_NUMPAD5
 0x46

	)

71 
	#FKB_NUMPAD6
 0x47

	)

72 
	#FKB_LSHIFT
 0x48

	)

73 
	#FKB_Z
 0x49

	)

74 
	#FKB_X
 0x4A

	)

75 
	#FKB_C
 0x4B

	)

76 
	#FKB_V
 0x4C

	)

77 
	#FKB_B
 0x4D

	)

78 
	#FKB_N
 0x4E

	)

79 
	#FKB_M
 0x4F

	)

80 
	#FKB_COMMA
 0x50

	)

81 
	#FKB_PERIOD
 0x51

	)

82 
	#FKB_SLASH
 0x52

	)

83 
	#FKB_BACKSLASH
 0x53

	)

84 
	#FKB_UP
 0x54

	)

85 
	#FKB_NUMPAD1
 0x55

	)

86 
	#FKB_NUMPAD2
 0x56

	)

87 
	#FKB_NUMPAD3
 0x57

	)

88 
	#FKB_LCONTROL
 0x58

	)

89 
	#FKB_LMENU
 0x59

	)

90 
	#FKB_SPACE
 0x5A

	)

91 
	#FKB_LEFT
 0x5B

	)

92 
	#FKB_DOWN
 0x5C

	)

93 
	#FKB_RIGHT
 0x5D

	)

94 
	#FKB_NUMPAD0
 0x5E

	)

95 
	#FKB_DECIMAL
 0x5F

	)

	@input/toprider.c

21 
	~<°rög.h
>

22 
	~"sh¨e.h
"

24 
uöt32
 
	gbs
,
	gbss
;

25 
uöt32
 
	gbo›
;

27 
uöt8
 
	$FP_FASTAPASS
(2Ë
	$Ród
(
w
, 
uöt8
 
ªt
)

29 if(
w
)

31 
ªt
|=(
bs
&1)<<3;

32 
ªt
|=(
bo›
&1)<<4;

33 
bs
>>=1;

34 
bo›
>>=1;

37 (
ªt
);

38 
	}
}

40 
	$FP_FASTAPASS
(1Ë
	$Wrôe
(
uöt8
 
V
)

43 
bs
=
bss
;

46 
	}
}

48 
	$FP_FASTAPASS
(2Ë
	$Upd©e
(*
d©a
, 
¨g
)

50 
bss
=*(
uöt8
*)
d©a
;

51 
bss
|=bss<<8;

52 
bss
|=bss<<8;

53 
	}
}

55 
INPUTCFC
 
	gT›Ridî
={
Ród
,
Wrôe
,0,
Upd©e
,0,0};

57 
INPUTCFC
 *
	$FCEU_InôT›Ridî
()

60 (&
T›Ridî
);

61 
	}
}

	@input/zapper.c

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~"sh¨e.h
"

27 
uöt32
 
	mmzx
,
	mmzy
,
	mmzb
;

28 
	mz≠_ªadbô
;

29 
	mbogo
;

30 
	mz≠po
;

31 
uöt64
 
	mz≠hô
;

32 } 
	tZAPPER
;

34 
ZAPPER
 
	gZD
[2];

36 
	$FP_FASTAPASS
(3Ë
	$Z≠≥rFøµî
(
w
, 
uöt8
 *
bg
, uöt8 *
•r
, 
uöt32
 
löës
, 
föÆ
)

38 
xs
,
xe
;

39 
zx
,
zy
;

41 if(!
bg
)

43 
ZD
[
w
].
z≠po
=0;

46 
xs
=
ZD
[
w
].
z≠po
;

47 
xe
=
föÆ
;

49 
zx
=
ZD
[
w
].
mzx
;

50 
zy
=
ZD
[
w
].
mzy
;

52 if(
xe
>256) xe=256;

54 if(
sˇ∆öe
>=(
zy
-4) && scanline<=(zy+4))

56 
xs
<
xe
)

58 
uöt8
 
a1
,
a2
;

59 
uöt32
 
sum
;

60 if(
xs
<=(
zx
+4) && xs>=(zx-4))

62 
a1
=
bg
[
xs
];

63 if(
•r
)

65 
a2
=
•r
[
xs
];

67 if(!(
a2
&0x80))

68 if(!(
a2
&0x40Ë|| (
a1
&64))

69 
a1
=
a2
;

71 
a1
&=63;

73 
sum
=
∑lo
[
a1
].
r
+∑lo[a1].
g
+∑lo[a1].
b
;

74 if(
sum
>=100*3)

76 
ZD
[
w
].
z≠hô
=((
uöt64
)
löës
+(
xs
+16)*(
PAL
?15:16))/48+
time°ampba£
;

77 
ído
;

80 
xs
++;

83 
ído
:

84 
ZD
[
w
].
z≠po
=
föÆ
;

85 
	}
}

87 
INLINE
 
	$CheckCﬁ‹
(
w
)

89 
	`FCEUPPU_LöeUpd©e
();

91 if((
ZD
[
w
].
z≠hô
+100)>=(
time°ampba£
+
time°amp
)

92 && !(
ZD
[
w
].
mzb
&2)) (0);

95 
	}
}

97 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódZ≠≥rVS
(
w
)

99 
uöt8
 
ªt
=0;

101 if(
ZD
[
w
].
z≠_ªadbô
==4Ë
ªt
=1;

103 if(
ZD
[
w
].
z≠_ªadbô
==7)

105 if(
ZD
[
w
].
bogo
)

106 
ªt
|=0x1;

108 if(
ZD
[
w
].
z≠_ªadbô
==6)

110 if(!
	`CheckCﬁ‹
(
w
))

111 
ªt
|=0x1;

113 if(!
f˚uödbg
)

114 
ZD
[
w
].
z≠_ªadbô
++;

115  
ªt
;

116 
	}
}

118 
	$FP_FASTAPASS
(1Ë
	$SåobeZ≠≥rVS
(
w
)

120 
ZD
[
w
].
z≠_ªadbô
=0;

121 
	}
}

123 
uöt8
 
	$FP_FASTAPASS
(1Ë
	$RódZ≠≥r
(
w
)

125 
uöt8
 
ªt
=0;

126 if(
ZD
[
w
].
bogo
)

127 
ªt
|=0x10;

128 if(
	`CheckCﬁ‹
(
w
))

129 
ªt
|=0x8;

130  
ªt
;

131 
	}
}

133 
	$FASTAPASS
(3Ë
	$DøwZ≠≥r
(
w
, 
uöt8
 *
buf
, 
¨g
)

135 if(
¨g
)

136 
	`FCEU_DøwGunSight
(
buf
, 
ZD
[
w
].
mzx
,ZD[w].
mzy
);

137 
	}
}

139 
	$FP_FASTAPASS
(3Ë
	$Upd©eZ≠≥r
(
w
, *
d©a
, 
¨g
)

141 
uöt32
 *
±r
=(uöt32 *)
d©a
;

144 if(
ZD
[
w
].
bogo
)

145 
ZD
[
w
].
bogo
--;

146 if(
±r
[2]&3 && (!(
ZD
[
w
].
mzb
&3)))

147 
ZD
[
w
].
bogo
=5;

149 
ZD
[
w
].
mzx
=
±r
[0];

150 
ZD
[
w
].
mzy
=
±r
[1];

151 
ZD
[
w
].
mzb
=
±r
[2];

152 
	}
}

154 
INPUTC
 
	gZAPC
={
RódZ≠≥r
,0,0,
Upd©eZ≠≥r
,
Z≠≥rFøµî
,
DøwZ≠≥r
};

155 
INPUTC
 
	gZAPVSC
={
RódZ≠≥rVS
,0,
SåobeZ≠≥rVS
,
Upd©eZ≠≥r
,
Z≠≥rFøµî
,
DøwZ≠≥r
};

157 
INPUTC
 *
	$FCEU_InôZ≠≥r
(
w
)

159 
	`mem£t
(&
ZD
[
w
],0,(
ZAPPER
));

160 if(
FCEUGameInfo
.
ty≥
 =
GIT_VSUNI
)

161 (&
ZAPVSC
);

163 (&
ZAPC
);

164 
	}
}

	@mappers/113.c

21 
	~"m≠öc.h
"

28 
	$DECLFW
(
M≠≥r113_wrôe
)

30 
	`ROM_BANK32
((
V
>>3)&7);

31 
	`VROM_BANK8
(((
V
>>3)&8)|(V&7));

33 
	}
}

37 
	$DECLFW
(
M≠≥r113_wrôeh
)

42 
A
) {

45 
	`ROM_BANK32
(
V
>>3);

46 
	`VROM_BANK8
(((
V
>>3)&0x08)+(V&0x07) );

50 
	`VROM_BANK8
–(
V
&0x07)?0:1 );

53 
	`MIRROR_SET2
( 2 );

56 
	}
}

59 
	$M≠≥r113_öô
()

61 
	`ROM_BANK32
(0);

62 
	`SëWrôeH™dÀr
(0x4020,0x7fff,
M≠≥r113_wrôe
);

63 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r113_wrôeh
);

64 
	}
}

	@mappers/15.c

21 
	~"m≠öc.h
"

23 
	$Sync
()

25 
x
;

27 
	`£tmúr‹
(((
m≠byã1
[0]>>6)&1)^1);

28 
m≠byã1
[1]&0x3)

31 
x
=0;x<4;x++)

32 
	`£çrg8
(0x8000+
x
*8192,(((
m≠byã1
[0]&0x7F)<<1)+x)^(mapbyte1[0]>>7));

35 
x
=0;x<4;x++)

36 
	`£çrg8
(0x8000+
x
*8192,((
m≠byã1
[0]&0x7F)<<1)+(mapbyte1[0]>>7));

40 
x
=0;x<4;x++)

42 
b
;

44 
b
=
m≠byã1
[0]&0x7F;

45 if(
x
>=2 && !(
m≠byã1
[1]&0x2))

46 
b
=0x7F;

47 
	`£çrg8
(0x8000+
x
*8192,(x&1)+((
b
<<1)^(
m≠byã1
[0]>>7)));

51 
	}
}

54 
	$DECLFW
(
M≠≥r15_wrôe
)

56 
m≠byã1
[0]=
V
;

57 
m≠byã1
[1]=
A
&3;

58 
	`Sync
();

59 
	}
}

61 
	$SèãRe°‹e
(
vîsi⁄
)

63 
	`Sync
();

64 
	}
}

66 
	$M≠≥r15_öô
()

68 
m≠byã1
[0]=mapbyte1[1]=0;

69 
	`Sync
();

70 
GameSèãRe°‹e
=
SèãRe°‹e
;

71 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r15_wrôe
);

72 
	}
}

	@mappers/151.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r151_wrôe
)

27 
A
&0xF000)

29 0x8000:
	`ROM_BANK8
(0x8000,
V
);;

30 0xA000:
	`ROM_BANK8
(0xA000,
V
);;

31 0xC000:
	`ROM_BANK8
(0xC000,
V
);;

32 0xe000:
	`VROM_BANK4
(0x0000,
V
);;

33 0xf000:
	`VROM_BANK4
(0x1000,
V
);;

35 
	}
}

37 
	$M≠≥r151_öô
()

39 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r151_wrôe
);

40 
	}
}

	@mappers/16.c

22 
	~"m≠öc.h
"

24 
	$FP_FASTAPASS
(1Ë
	$B™daiIRQHook
(
a
)

26 if(
IRQa
)

28 
IRQCou¡
-=
a
;

29 if(
IRQCou¡
<0)

31 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

33 
IRQa
=0;

34 
IRQCou¡
=0xFFFF;

37 
	}
}

39 
	$DECLFW
(
M≠≥r16_wrôe
)

41 
A
&=0xF;

43 if(
A
<=0x7)

44 
	`VROM_BANK1
(
A
<<10,
V
);

45 if(
A
==0x8)

46 
	`ROM_BANK16
(0x8000,
V
);

47 
A
) {

48 0x9: 
V
&3) {

49 0x00:
	`MIRROR_SET2
(1);;

50 0x01:
	`MIRROR_SET2
(0);;

51 0x02:
	`⁄emú
(0);;

52 0x03:
	`⁄emú
(1);;

55 0xA:
	`X6502_IRQEnd
(
FCEU_IQEXT
);

56 
IRQa
=
V
&1;

57 
IRQCou¡
=
IRQL©ch
;

59 0xB:
IRQL©ch
&=0xFF00; IRQL©ch|=
V
;

61 0xC:
IRQL©ch
&=0xFF; IRQL©ch|=
V
<<8;

65 
	}
}

74 
	$PRGO
()

76 
uöt32
 
ba£
=(
m≠byã1
[0]&1)<<4;

77 
	`ROM_BANK16
(0x8000,(
m≠byã2
[0]&0xF)|
ba£
);

78 
	`ROM_BANK16
(0xC000,
ba£
|0xF);

79 
	}
}

81 
	$DECLFW
(
M≠≥r153_wrôe
)

83 
A
&=0xF;

84 if(
A
<=0x7)

86 
m≠byã1
[
A
&7]=
V
;

87 
	`PRGO
();

89 if(
A
==0x8)

91 
m≠byã2
[0]=
V
;

92 
	`PRGO
();

94 
A
) {

95 0x9: 
V
&3) {

96 0x00:
	`MIRROR_SET2
(1);;

97 0x01:
	`MIRROR_SET2
(0);;

98 0x02:
	`⁄emú
(0);;

99 0x03:
	`⁄emú
(1);;

102 0xA:
	`X6502_IRQEnd
(
FCEU_IQEXT
);

103 
IRQa
=
V
&1;

104 
IRQCou¡
=
IRQL©ch
;

106 0xB:
IRQL©ch
&=0xFF00;

107 
IRQL©ch
|=
V
;

109 0xC:
IRQL©ch
&=0xFF;

110 
IRQL©ch
|=
V
<<8;

113 
	}
}

115 
	$M≠≥r16_öô
()

117 
M≠IRQHook
=
B™daiIRQHook
;

118 
	`SëWrôeH™dÀr
(0x6000,0xFFFF,
M≠≥r16_wrôe
);

119 
	}
}

121 
	$M≠≥r153_öô
()

123 
M≠IRQHook
=
B™daiIRQHook
;

124 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r153_wrôe
);

127 
	}
}

130 
uöt8
 
	gB¨codeD©a
[256];

131 
	gB¨codeRódPos
;

132 
	gB¨codeCy˛eCou¡
;

133 
uöt32
 
	gB¨codeOut
;

135 
	$FCEUI_D©achSë
(c⁄° 
uöt8
 *
rcode
)

137 
¥efix_∑rôy_ty≥
[10][6] = {

142 
d©a_À·_odd
[10][7] = {

147 
d©a_À·_eví
[10][7] = {

152 
d©a_right
[10][7] = {

157 
uöt8
 
code
[13+1];

158 
uöt32
 
tmp_p
=0;

159 
i
, 
j
;

160 
Àn
;

162 
i
=
Àn
=0;i<13;i++)

164 if(!
rcode
[
i
]) ;

166 if((
code
[
i
]=
rcode
[i]-'0') > 9)

168 
Àn
++;

170 if(
Àn
!=13 &&Üen!=12 &&Üen!=8 &&Üen!=7) (0);

172 
	#BS
(
x
Ë
B¨codeD©a
[
tmp_p
]=x;tmp_p++

	)

174 
j
=0;j<32;j++)

176 
	`BS
(0x00);

180 
	`BS
(1); BS(0); BS(1);

182 if(
Àn
==13 ||Üen==12)

184 
uöt32
 
csum
;

186 
i
=0;i<6;i++)

187 if(
¥efix_∑rôy_ty≥
[
code
[0]][
i
])

189 
j
=0;j<7;j++)

191 
	`BS
(
d©a_À·_eví
[
code
[
i
+1]][
j
]);

195 
j
=0;j<7;j++)

197 
	`BS
(
d©a_À·_odd
[
code
[
i
+1]][
j
]);

201 
	`BS
(0); BS(1); BS(0); BS(1); BS(0);

203 
i
=7;i<12;i++)

204 
j
=0;j<7;j++)

206 
	`BS
(
d©a_right
[
code
[
i
]][
j
]);

208 
csum
=0;

209 
i
=0;i<12;i++Ë
csum
+=
code
[i]*((i&1)?3:1);

210 
csum
=(10-(csum%10))%10;

212 
j
=0;j<7;j++)

214 
	`BS
(
d©a_right
[
csum
][
j
]);

218 if(
Àn
==8 ||Üen==7)

220 
uöt32
 
csum
=0;

222 
i
=0;i<7;i++Ë
csum
+=(i&1)?
code
[i]:(code[i]*3);

224 
csum
=(10-(csum%10))%10;

226 
i
=0;i<4;i++)

227 
j
=0;j<7;j++)

229 
	`BS
(
d©a_À·_odd
[
code
[
i
]][
j
]);

234 
	`BS
(0); BS(1); BS(0); BS(1); BS(0);

236 
i
=4;i<7;i++)

237 
j
=0;j<7;j++)

239 
	`BS
(
d©a_right
[
code
[
i
]][
j
]);

242 
j
=0;j<7;j++)

243 { 
	`BS
(
d©a_right
[
csum
][
j
]);}

248 
	`BS
(1); BS(0); BS(1);

250 
j
=0;j<32;j++)

252 
	`BS
(0x00);

255 
	`BS
(0xFF);

256 #unde‡
BS


257 
B¨codeRódPos
=0;

258 
B¨codeOut
=0x8;

259 
B¨codeCy˛eCou¡
=0;

261 
	}
}

263 
	$FP_FASTAPASS
(1Ë
	$B¨codeIRQHook
(
a
)

265 
	`B™daiIRQHook
(
a
);

267 
B¨codeCy˛eCou¡
+=
a
;

269 if(
B¨codeCy˛eCou¡
 >= 1000)

271 
B¨codeCy˛eCou¡
 -= 1000;

272 if(
B¨codeD©a
[
B¨codeRódPos
]==0xFF)

274 
B¨codeOut
=0;

278 
B¨codeOut
=(
B¨codeD©a
[
B¨codeRódPos
]^1)<<3;

279 
B¨codeRódPos
++;

282 
	}
}

284 
	$DECLFR
(
M≠≥r157_ªad
)

286 
uöt8
 
ªt
;

288 
ªt
=
B¨codeOut
;

289 (
ªt
);

290 
	}
}

292 
	$M≠≥r157_öô
()

294 
FCEUGameInfo
.
c•ecül
 = 
SIS_DATACH
;

295 
M≠IRQHook
=
B¨codeIRQHook
;

296 
	`SëWrôeH™dÀr
(0x6000,0xFFFF,
M≠≥r16_wrôe
);

297 
	`SëRódH™dÀr
(0x6000,0x7FFF,
M≠≥r157_ªad
);

299 
B¨codeD©a
[0]=0xFF;

300 
B¨codeRódPos
=0;

301 
B¨codeOut
=0;

302 
B¨codeCy˛eCou¡
=0;

303 
	}
}

	@mappers/17.c

21 
	~"m≠öc.h
"

25 
	$FP_FASTAPASS
(1Ë
	$FFEIRQHook
(
a
)

27 if(
IRQa
)

29 
IRQCou¡
+=
a
;

30 if(
IRQCou¡
>=0x10000)

32 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

33 
IRQa
=0;

34 
IRQCou¡
=0;

37 
	}
}

40 
	$DECLFW
(
M≠≥r17_wrôe
)

42 
A
){

46 
	`⁄emú
((
V
>>4)&1);

49 
	`MIRROR_SET
((
V
>>4)&1);

51 0x4501:
IRQa
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

52 0x4502:
IRQCou¡
&=0xFF00;IRQCou¡|=
V
;;

53 0x4503:
IRQCou¡
&=0x00FF;IRQCou¡|=
V
<<8;
IRQa
=1;;

54 0x4504: 
	`ROM_BANK8
(0x8000,
V
);;

55 0x4505: 
	`ROM_BANK8
(0xA000,
V
);;

56 0x4506: 
	`ROM_BANK8
(0xC000,
V
);;

57 0x4507: 
	`ROM_BANK8
(0xE000,
V
);;

58 0x4510: 
	`VROM_BANK1
(0x0000,
V
);;

59 0x4511: 
	`VROM_BANK1
(0x0400,
V
);;

60 0x4512: 
	`VROM_BANK1
(0x0800,
V
);;

61 0x4513: 
	`VROM_BANK1
(0x0C00,
V
);;

62 0x4514: 
	`VROM_BANK1
(0x1000,
V
);;

63 0x4515: 
	`VROM_BANK1
(0x1400,
V
);;

64 0x4516: 
	`VROM_BANK1
(0x1800,
V
);;

65 0x4517: 
	`VROM_BANK1
(0x1C00,
V
);;

67 
	}
}

69 
	$M≠≥r17_öô
()

71 
M≠IRQHook
=
FFEIRQHook
;

72 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M≠≥r17_wrôe
);

73 
	}
}

	@mappers/18.c

21 
	~"m≠öc.h
"

23 
	#K4buf
 
m≠byã2


	)

24 
	#K4buf2
 
m≠byã3


	)

26 
	$FP_FASTAPASS
(1Ë
	$JÆecoIRQHook
(
a
)

28 if(
IRQa
 && 
IRQCou¡
)

30 
IRQCou¡
-=
a
;

31 if(
IRQCou¡
<=0)

33 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

34 
IRQCou¡
=0;

35 
IRQa
=0;

38 
	}
}

40 
	$DECLFW
(
M≠≥r18_wrôe
)

42 
A
&=0xF003;

43 if(
A
>=0x8000 && A<=0x9001)

45 
x
=((
A
>>1)&1)|((A-0x8000)>>11);

47 
K4buf2
[
x
]&=(0xF0)>>((
A
&1)<<2);

48 
K4buf2
[
x
]|=(
V
&0xF)<<((
A
&1)<<2);

49 
	`ROM_BANK8
(0x8000+(
x
<<13),
K4buf2
[x]);

51 if(
A
>=0xa000 && A<=0xd003)

53 
x
=((
A
>>1)&1)|((A-0xA000)>>11);

55 
K4buf
[
x
]&=(0xF0)>>((
A
&1)<<2);

56 
K4buf
[
x
]|=(
V
&0xF)<<((
A
&1)<<2);

57 
	`VROM_BANK1
(
x
<<10,
K4buf
[x]);

59 
A
)

61 0xe000:
IRQL©ch
&=0xFFF0;IRQL©ch|=(
V
&0x0f);;

62 0xe001:
IRQL©ch
&=0xFF0F;IRQL©ch|=(
V
&0x0f)<<4;;

63 0xe002:
IRQL©ch
&=0xF0FF;IRQL©ch|=(
V
&0x0f)<<8;;

64 0xe003:
IRQL©ch
&=0x0FFF;IRQL©ch|=(
V
&0x0f)<<12;;

65 0xf000:
IRQCou¡
=
IRQL©ch
;

67 0xf001:
IRQa
=
V
&1;

68 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

70 0xf002:
	`MIRROR_SET2
(
V
&1);

71 if(
V
&2Ë
	`⁄emú
(0);

74 
	}
}

76 
	$M≠≥r18_öô
()

78 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r18_wrôe
);

79 
M≠IRQHook
=
JÆecoIRQHook
;

80 
	}
}

	@mappers/180.c

1 
	~"m≠öc.h
"

5 
	$DECLFW
(
M≠≥r180_wrôe
)

7 
	`ROM_BANK16
(0xC000,
V
);

8 
	}
}

10 
	$M≠≥r180_öô
()

12 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r180_wrôe
);

13 
	}
}

	@mappers/183.c

	@mappers/184.c

1 
	~"m≠öc.h
"

5 
	$DECLFW
(
M≠≥r184_wrôe
)

7 
	`VROM_BANK4
(0x0000,
V
);

8 
	`VROM_BANK4
(0x1000,(
V
>>4));

9 
	}
}

11 
	$M≠≥r184_öô
()

13 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r184_wrôe
);

14 
	}
}

	@mappers/193.c

1 
	~"m≠öc.h
"

3 
	$DECLFW
(
m193w
)

6 
A
&3)

8 0:
	`VROM_BANK4
(0x0000,
V
>>2);;

9 1:
	`VROM_BANK2
(0x1000,
V
>>1);;

10 2:
	`VROM_BANK2
(0x1800,
V
>>1);;

11 3:
	`ROM_BANK8
(0x8000,
V
);;

13 
	}
}

15 
	$M≠≥r193_öô
()

17 
	`ROM_BANK32
(~0);

18 
	`SëWrôeH™dÀr
(0x4018,0x7fff,
m193w
);

19 
	`SëRódH™dÀr
(0x4018,0x7fff,0);

20 
	}
}

	@mappers/200.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r200_wrôe
)

26 
	`ROM_BANK16
(0x8000,
A
&0x07);

27 
	`ROM_BANK16
(0xC000,
A
&0x07);

28 
	`VROM_BANK8
(
A
&0x07);

29 
	`MIRROR_SET
((
A
&0x08)>>3);

30 
	}
}

32 
	$M≠≥r200_öô
()

34 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r200_wrôe
);

35 
	}
}

	@mappers/201.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r201_wrôe
)

26 if(
A
&0x08)

28 
	`ROM_BANK32
(
A
&0x03);

29 
	`VROM_BANK8
(
A
&0x03);

33 
	`ROM_BANK32
(0);

34 
	`VROM_BANK8
(0);

36 
	}
}

38 
	$M≠≥r201_öô
()

40 
	`ROM_BANK32
(0);

41 
	`VROM_BANK8
(0);

42 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r201_wrôe
);

43 
	}
}

	@mappers/202.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r202_wrôe
)

25 
tmp
=(
A
>>1)&0x7;

27 
	`MIRROR_SET
(
A
&1);

28 
	`ROM_BANK16
(0x8000,
tmp
);

29 
	`ROM_BANK16
(0xc000,
tmp
+(((tmp&0x6)==0x6)?1:0));

30 
	`VROM_BANK8
(
tmp
);

31 
	}
}

33 
	$M≠≥r202_öô
()

35 
	`ROM_BANK16
(0x8000,0);

36 
	`ROM_BANK16
(0xc000,0);

37 
	`VROM_BANK8
(0);

38 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r202_wrôe
);

39 
	}
}

	@mappers/203.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r203_wrôe
)

25 
	`ROM_BANK16
(0x8000,(
V
>>2)&3);

26 
	`ROM_BANK16
(0xc000,(
V
>>2)&3);

27 
	`VROM_BANK8
(
V
&3);

28 
	}
}

30 
	$M≠≥r203_öô
()

32 
	`ROM_BANK16
(0x8000,0);

33 
	`ROM_BANK16
(0xc000,0);

34 
	`VROM_BANK8
(0);

35 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r203_wrôe
);

36 
	}
}

	@mappers/204.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r204_wrôe
)

25 
tmp2
=
A
&0x6;

26 
tmp1
=
tmp2
+(—mp2==0x6)?0:(
A
&1));

27 
	`MIRROR_SET
((
A
>>4)&1);

28 
	`ROM_BANK16
(0x8000,
tmp1
);

29 
	`ROM_BANK16
(0xc000,
tmp2
+(—mp2==0x6)?1:(
A
&1)));

30 
	`VROM_BANK8
(
tmp1
);

31 
	}
}

33 
	$M≠≥r204_öô
()

35 
	`ROM_BANK32
(~0);

36 
	`VROM_BANK8
(~0);

37 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r204_wrôe
);

38 
	}
}

	@mappers/21.c

21 
	~"m≠öc.h
"

23 
	#K4buf
 
m≠byã2


	)

24 
	#K4IRQ
 
m≠byã1
[1]

	)

25 
	#K4£l
 
m≠byã1
[0]

	)

27 
	gacou¡
=0;

29 
	$DECLFW
(
M≠≥r21_wrôe
)

31 
A
|=((A>>5)&0xF);

33 if((
A
&0xF000)==0xA000)

34 
	`ROM_BANK8
(0xA000,
V
);

35 if((
A
&0xF000)==0x8000)

37 if(
K4£l
&2)

38 
	`ROM_BANK8
(0xC000,
V
);

40 
	`ROM_BANK8
(0x8000,
V
);

42 if(
A
>=0xb000 && A<=0xefff)

44 
A
&=0xF006;

46 
x
=((
A
>>2)&1)|((A-0xB000)>>11);

48 
K4buf
[
x
]&=(0xF0)>>((
A
&2)<<1);

49 
K4buf
[
x
]|=(
V
&0xF)<<((
A
&2)<<1);

50 
	`VROM_BANK1
(
x
<<10,
K4buf
[x]);

54 
A
&0xF006)

57 
V
&0x3)

59 0:
	`MIRROR_SET
(0);;

60 1:
	`MIRROR_SET
(1);;

61 2:
	`⁄emú
(0);;

62 3:
	`⁄emú
(1);;

67 0x9002:if((
K4£l
&2)!=(
V
&2))

69 
uöt8
 
swa
;

70 
swa
=
PRGB™kLi°
[0];

71 
	`ROM_BANK8
(0x8000,
PRGB™kLi°
[2]);

72 
	`ROM_BANK8
(0xc000,
swa
);

74 
K4£l
=
V
;

76 0xf000:
IRQL©ch
&=0xF0;IRQL©ch|=
V
&0xF;;

77 0xf002:
IRQL©ch
&=0x0F;IRQL©ch|=
V
<<4;;

78 0xf004:
IRQCou¡
=
IRQL©ch
;
acou¡
=0;

79 
IRQa
=
V
&2;
K4IRQ
=V&1;

80 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

82 0xf006:
IRQa
=
K4IRQ
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

84 
	}
}

85 
	$FP_FASTAPASS
(1Ë
	$K⁄amiIRQHook
(
a
)

87 
	#LCYCS
 ((227*2)+1)

	)

89 if(
IRQa
)

92 
acou¡
+=
a
*4;

93 if(
acou¡
>=
LCYCS
)

95 
dﬂgaöbub
:
acou¡
-=
LCYCS
;
IRQCou¡
++;

96 if(
IRQCou¡
&0x100Ë{
	`X6502_IRQBegö
(
FCEU_IQEXT
);IRQCou¡=
IRQL©ch
;}

97 if(
acou¡
>=
LCYCS
Ë
dﬂgaöbub
;

100 
	}
}

102 
	$M≠≥r21_öô
()

104 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r21_wrôe
);

105 
M≠IRQHook
=
K⁄amiIRQHook
;

106 
	}
}

	@mappers/212.c

1 
	~"m≠öc.h
"

3 
	$DECLFW
(
M≠≥r212_wrôe
)

5 if((
A
&0x4000)==0x4000)

7 
	`ROM_BANK32
((
A
&6)>>1);

11 
	`ROM_BANK16
(0x8000,
A
&7);

12 
	`ROM_BANK16
(0xc000,
A
&7);

14 
	`VROM_BANK8
(
A
&7);

15 
	`MIRROR_SET
((
A
>>3)&1);

16 
	}
}

18 
	$M≠≥r212_öô
()

20 
	`ROM_BANK32
(~0);

21 
	`VROM_BANK8
(~0);

22 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r212_wrôe
);

23 
	}
}

	@mappers/213.c

1 
	~"m≠öc.h
"

3 
	$DECLFW
(
M≠≥r213_wrôe
)

5 
	`ROM_BANK32
((
A
>>1)&3);

6 
	`VROM_BANK8
((
A
>>3)&7);

7 
	}
}

9 
	$M≠≥r213_öô
()

11 
	`ROM_BANK32
(0);

12 
	`VROM_BANK8
(0);

13 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r213_wrôe
);

14 
	}
}

	@mappers/214.c

1 
	~"m≠öc.h
"

3 
	$DECLFW
(
M≠≥r214_wrôe
)

6 
	`ROM_BANK16
(0x8000,(
A
>>2)&3);

7 
	`ROM_BANK16
(0xC000,(
A
>>2)&3);

8 
	`VROM_BANK8
(
A
&3);

9 
	}
}

11 
	$M≠≥r214_öô
()

13 
	`ROM_BANK16
(0x8000,0);

14 
	`ROM_BANK16
(0xC000,0);

15 
	`VROM_BANK8
(0);

16 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r214_wrôe
);

17 
	}
}

	@mappers/215.c

	@mappers/217.c

	@mappers/22.c

21 
	~"m≠öc.h
"

23 
	#K4buf
 
m≠byã2


	)

27 
	$DECLFW
(
M≠≥r22_wrôe
)

29 if(
A
<=0xAFFF)

31 
A
&0xF000)

33 0x8000:
	`ROM_BANK8
(0x8000,
V
);;

34 0xa000:
	`ROM_BANK8
(0xA000,
V
);;

35 0x9000:
V
&3)

37 0x00:
	`MIRROR_SET2
(1);;

38 0x01:
	`MIRROR_SET2
(0);;

39 0x02:
	`⁄emú
(0);;

40 0x03:
	`⁄emú
(1);;

47 
A
&=0xF003;

48 if(
A
>=0xb000 && A<=0xe003)

50 
x
=(
A
&1)|((A-0xB000)>>11);

52 
K4buf
[
x
]&=(0xF0)>>((
A
&2)<<1);

53 
K4buf
[
x
]|=(
V
&0xF)<<((
A
&2)<<1);

54 
	`VROM_BANK1
(
x
<<10,
K4buf
[x]>>1);

57 
	}
}

60 
	$M≠≥r22_öô
()

62 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r22_wrôe
);

63 
	}
}

	@mappers/225.c

21 
	~"m≠öc.h
"

24 
	#ªg1
 
m≠byã1
[0]

	)

25 
	#ªg2
 
m≠byã1
[1]

	)

26 
	#ªg3
 
m≠byã1
[2]

	)

27 
	#ªg4
 
m≠byã1
[3]

	)

29 
	$DECLFR
(
A110ö1ªad
)

31 
A
&0x3)

33 0: 
ªg1
;;

34 1: 
ªg2
;;

35 2: 
ªg3
;;

36 3: 
ªg4
;;

39 
	}
}

40 
	$DECLFW
(
A110ö1ªgwr
)

42 
A
&0x3)

44 0:
ªg1
=
V
&0xF;;

45 1:
ªg2
=
V
&0xF;;

46 2:
ªg3
=
V
&0xF;;

47 3:
ªg4
=
V
&0xF;;

49 
	}
}

51 
	$DECLFW
(
M≠≥r225_wrôe
)

53 
b™ks
=0;

55 
	`MIRROR_SET
((
A
>>13)&1);

56 if(
A
&0x4000)

57 
b™ks
=1;

59 
b™ks
=0;

61 
	`VROM_BANK8
(((
A
&0x003f)+(
b™ks
<<6)));

62 if(
A
&0x1000)

64 if(
A
&0x40)

66 
	`ROM_BANK16
(0x8000,((((((
A
>>7)&0x1F)+(
b™ks
<<5)))<<1)+1));

67 
	`ROM_BANK16
(0xC000,((((((
A
>>7)&0x1F)+(
b™ks
<<5)))<<1)+1));

71 
	`ROM_BANK16
(0x8000,(((((
A
>>7)&0x1F)+(
b™ks
<<5)))<<1));

72 
	`ROM_BANK16
(0xC000,(((((
A
>>7)&0x1F)+(
b™ks
<<5)))<<1));

77 
	`ROM_BANK32
(((((
A
>>7)&0x1F)+(
b™ks
<<5))));

79 
	}
}

81 
	$M≠≥r225_öô
()

83 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r225_wrôe
);

84 
	`SëRódH™dÀr
(0x5800,0x5fff,
A110ö1ªad
);

85 
	`SëWrôeH™dÀr
(0x5800,0x5fff,
A110ö1ªgwr
);

86 
	}
}

	@mappers/226.c

21 
	~"m≠öc.h
"

23 
	#rg
 
m≠byã1


	)

24 
	$DoPRG
()

26 
öt32
 
b
=((
rg
[0]>>1)&0xF) | ((rg[0]>>3)&0x10) | ((rg[1]&1)<<5);

27 if(
rg
[0]&0x20)

29 
	`ROM_BANK16
(0x8000,(
b
<<1)|(
rg
[0]&1));

30 
	`ROM_BANK16
(0xC000,(
b
<<1)|(
rg
[0]&1));

33 
	`ROM_BANK32
(
b
);

34 
	}
}

36 
	$DECLFW
(
M≠≥r226_wrôe
)

38 
rg
[
A
&1]=
V
;

39 
	`DoPRG
();

40 if(
A
&1)

42 if(
rg
[1]&2)

43 
PPUCHRRAM
=0;

45 
PPUCHRRAM
=0xFF;

48 
	`MIRROR_SET2
((
rg
[0]>>6)&1);

49 
	}
}

51 
	$M26Re£t
()

53 
rg
[0]=rg[1]=0;

54 
	`DoPRG
();

55 
PPUCHRRAM
=0xFF;

56 
	`MIRROR_SET2
(0);

57 
	}
}

59 
	$M26Re°‹e
(
vîsi⁄
)

61 
	`DoPRG
();

62 if(
rg
[1]&2)

63 
PPUCHRRAM
=0;

65 
PPUCHRRAM
=0xFF;

66 
	`MIRROR_SET2
((
rg
[0]>>6)&1);

67 
	}
}

69 
	$M≠≥r226_öô
()

71 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r226_wrôe
);

72 
M≠≥rRe£t
=
M26Re£t
;

73 
GameSèãRe°‹e
=
M26Re°‹e
;

74 
	`M26Re£t
();

75 
	}
}

77 #ifde‡
OLD


78 
	$DECLFW
(
M≠≥r226_wrôe
)

80 
	`MIRROR_SET
((
A
>>13)&1);

81 
	`VROM_BANK8
(
A
&0x7F);

82 if(
A
&0x1000)

84 if(
A
&0x40)

86 
	`ROM_BANK16
(0x8000,(((
A
>>7))<<1)+1);

87 
	`ROM_BANK16
(0xC000,(((
A
>>7))<<1)+1);

91 
	`ROM_BANK16
(0x8000,(((
A
>>7))<<1));

92 
	`ROM_BANK16
(0xC000,(((
A
>>7))<<1));

97 
	`ROM_BANK32
(
A
>>7);

99 
	}
}

101 
	$M≠≥r226_öô
()

103 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r226_wrôe
);

104 
	}
}

	@mappers/227.c

21 
	~"m≠öc.h
"

23 
	#rg
 
m≠byã1


	)

25 
	$DoSync
(
uöt32
 
A
)

27 
öt32
 
p
=((
A
>>3)&0xF) | ((A>>4)&0x10);

29 
rg
[0]=
A
;

30 
rg
[1]=
A
>>8;

32 
	`MIRROR_SET
((
A
>>1)&1);

33 if(
A
&1)

35 
	`ROM_BANK32
(
p
);

39 
	`ROM_BANK16
(0x8000,(
p
<<1)|((
A
&4)>>2));

40 
	`ROM_BANK16
(0xc000,(
p
<<1)|((
A
&4)>>2));

42 if(
A
&0x80)

44 
PPUCHRRAM
=0;

48 
PPUCHRRAM
=0xFF;

49 if(
A
&0x200)

50 
	`ROM_BANK16
(0xC000,(
p
<<1)|7);

52 
	`ROM_BANK16
(0xC000,(
p
<<1)&(~7));

54 
	}
}

56 
	$DECLFW
(
M≠≥r227_wrôe
)

58 
rg
[
A
&1]=
V
;

59 
	`DoSync
(
A
);

60 
	}
}

62 
	$M227Re£t
()

64 
rg
[0]=rg[1]=0;

65 
	`DoSync
(0);

66 
	}
}

68 
	$M227Re°‹e
(
vîsi⁄
)

70 
	`DoSync
(
rg
[0]|(rg[1]<<8));

71 
	}
}

73 
	$M≠≥r227_öô
()

75 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r227_wrôe
);

76 
M≠≥rRe£t
=
M227Re£t
;

77 
GameSèãRe°‹e
=
M227Re°‹e
;

78 
	`M227Re£t
();

79 
	}
}

	@mappers/228.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r228_wrôe
)

25 
uöt32
 
∑ge
,
∑gñ
,
∑geh
;

27 
	`MIRROR_SET
((
A
>>13)&1);

29 
∑ge
=(
A
>>7)&0x3F;

31 if((
∑ge
&0x30)==0x30)

32 
∑ge
-=0x10;

34 
∑gñ
=
∑geh
=(
∑ge
<<1Ë+ (((
A
>>6)&1)&((A>>5)&1));

35 
∑geh
+=((
A
>>5)&1)^1;

37 
	`ROM_BANK16
(0x8000,
∑gñ
);

38 
	`ROM_BANK16
(0xC000,
∑geh
);

39 
	`VROM_BANK8
–(
V
&0x3Ë| ((
A
&0xF)<<2) );

40 
	}
}

42 
	$A52Re£t
()

44 
	`M≠≥r228_wrôe
(0,0);

45 
	}
}

47 
	$M≠≥r228_öô
()

49 
M≠≥rRe£t
=
A52Re£t
;

50 
	`A52Re£t
();

51 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r228_wrôe
);

52 
	}
}

	@mappers/229.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r229_wrôe
)

27 if(
A
>=0x8000)

29 
	`MIRROR_SET
((
A
>>5)&1);

30 if(!(
A
&0x1e))

32 
	`ROM_BANK32
(0);

36 
	`ROM_BANK16
(0x8000,
A
&0x1f);

37 
	`ROM_BANK16
(0xC000,
A
&0x1f);

39 
	`VROM_BANK8
(
A
);

42 
	}
}

44 
	$M≠≥r229_öô
()

46 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r229_wrôe
);

47 
	}
}

	@mappers/23.c

21 
	~"m≠öc.h
"

23 
	#K4buf
 
m≠byã2


	)

24 
	#K4IRQ
 
m≠byã1
[1]

	)

25 
	#K4£l
 
m≠byã1
[0]

	)

26 
	gacou¡
=0;

27 
	$DECLFW
(
M≠≥r23_wrôe
)

29 if((
A
&0xF000)==0x8000)

31 if(
K4£l
&2)

32 
	`ROM_BANK8
(0xC000,
V
);

34 
	`ROM_BANK8
(0x8000,
V
);

36 if((
A
&0xF000)==0xA000)

37 
	`ROM_BANK8
(0xA000,
V
);

40 
A
|=((A>>2)&0x3)|((A>>4)&0x3)|((A>>6)&0x3);

41 
A
&=0xF003;

42 if(
A
>=0xb000 && A<=0xe003)

44 
x
=((
A
>>1)&1)|((A-0xB000)>>11);

46 
K4buf
[
x
]&=(0xF0)>>((
A
&1)<<2);

47 
K4buf
[
x
]|=(
V
&0xF)<<((
A
&1)<<2);

48 
	`VROM_BANK1
(
x
<<10,
K4buf
[x]);

51 
A
)

53 0xf000:
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQL©ch
&=0xF0;IRQL©ch|=
V
&0xF;;

54 0xf001:
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQL©ch
&=0x0F;IRQL©ch|=
V
<<4;;

55 0xf002:
	`X6502_IRQEnd
(
FCEU_IQEXT
);
acou¡
=0;
IRQCou¡
=
IRQL©ch
;
IRQa
=
V
&2;
K4IRQ
=V&1;;

56 0xf003:
	`X6502_IRQEnd
(
FCEU_IQEXT
);
IRQa
=
K4IRQ
;;

60 if((
K4£l
&2)!=(
V
&2))

62 
uöt8
 
swa
;

63 
swa
=
PRGB™kLi°
[0];

64 
	`ROM_BANK8
(0x8000,
PRGB™kLi°
[2]);

65 
	`ROM_BANK8
(0xc000,
swa
);

67 
K4£l
=
V
;

70 if(
V
!=0xFF)

71 
V
&0x3)

73 0:
	`MIRROR_SET
(0);;

74 1:
	`MIRROR_SET
(1);;

75 2:
	`⁄emú
(0);;

76 3:
	`⁄emú
(1);;

81 
	}
}

83 
	$FP_FASTAPASS
(1Ë
	$K⁄amiIRQHook2
(
a
)

85 
	#LCYCS
 341

	)

86 if(
IRQa
)

88 
acou¡
+=
a
*3;

89 if(
acou¡
>=
LCYCS
)

91 
dﬂgaöbub
:
acou¡
-=
LCYCS
;
IRQCou¡
++;

92 if(
IRQCou¡
&0x100Ë{
	`X6502_IRQBegö
(
FCEU_IQEXT
);IRQCou¡=
IRQL©ch
;}

93 if(
acou¡
>=
LCYCS
Ë
dﬂgaöbub
;

96 
	}
}

98 
	$M≠≥r23_öô
()

100 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r23_wrôe
);

101 
M≠IRQHook
=
K⁄amiIRQHook2
;

102 
	}
}

	@mappers/230.c

21 
	~"m≠öc.h
"

23 
	#rom_sw
 
m≠byã1
[0]

	)

25 
	$M≠≥r230_Re£t
()

27 
rom_sw
 ^= 1;

29 if–
rom_sw
 ) {

30 
	`ROM_BANK16
(0x8000,0);

31 
	`ROM_BANK16
(0xc000,7);

33 
	`ROM_BANK16
(0x8000,8);

34 
	`ROM_BANK16
(0xc000,39);

36 
	`MIRROR_SET2
(1);

37 
	}
}

39 
	$DECLFW
(
M≠≥r230_wrôe
)

41 if–
rom_sw
 ) {

42 
	`ROM_BANK16
–0x8000, 
V
&0x07 );

44 if–
V
 & 0x20 ) {

45 
	`ROM_BANK16
–0x8000, (
V
&0x1F)+8 );

46 
	`ROM_BANK16
–0xc000, (
V
&0x1F)+8 );

48 
	`ROM_BANK32
–((
V
&0x1E) >> 1) + 4 );

50 
	`MIRROR_SET2
–((
V
 & 0x40) >> 6) );

52 
	}
}

54 
	$M≠≥r230_öô
()

56 
	`ROM_BANK16
(0x8000,0);

57 
	`ROM_BANK16
(0xc000,7);

58 
	`SëWrôeH™dÀr
(0x8000, 0xffff, 
M≠≥r230_wrôe
);

59 
M≠≥rRe£t
 = 
M≠≥r230_Re£t
;

60 
rom_sw
 = 1;

61 
	}
}

	@mappers/231.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r231_wrôe
)

25 if(
A
&0x20)

26 
	`ROM_BANK32
((
A
>>1)&0xF);

29 
	`ROM_BANK16
(0x8000,(
A
&0x1E));

30 
	`ROM_BANK16
(0xc000,(
A
&0x1E));

32 
	`MIRROR_SET
((
A
>>7)&1);

33 
	}
}

35 
	$M≠≥r231_öô
()

37 
	`ROM_BANK16
(0x8000,0);

38 
	`ROM_BANK16
(0xc000,0);

39 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r231_wrôe
);

40 
	}
}

	@mappers/232.c

21 
	~"m≠öc.h
"

23 
	$DoIt
()

25 
	`ROM_BANK16
(0x8000,(
m≠byã1
[1]&3) | ((mapbyte1[0]&0x18)>>1));

26 
	`ROM_BANK16
(0xc000,3|(((
m≠byã1
[0])&0x18)>>1));

27 
	}
}

29 
	$DECLFW
(
M≠≥r232_wrôe
)

31 if(
A
<=0x9FFF)

32 
m≠byã1
[0]=
V
;

34 
m≠byã1
[1]=
V
;

35 
	`DoIt
();

36 
	}
}

38 
	$Qu©åoRe£t
()

40 
m≠byã1
[0]=0x18;

41 
	`DoIt
();

42 
	}
}

44 
	$M≠≥r232_öô
()

46 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r232_wrôe
);

47 
M≠≥rRe£t
=
Qu©åoRe£t
;

48 
	`Qu©åoRe£t
();

49 
	}
}

	@mappers/234.c

21 
	~"m≠öc.h
"

23 
	#r1
 
m≠byã1
[0]

	)

24 
	#r2
 
m≠byã1
[1]

	)

26 
	$DoBS
()

28 if(
r1
&0x40)

30 
	`ROM_BANK32
((
r1
&0xE)|(
r2
&1));

31 
	`VROM_BANK8
–((
r1
&0xE)<<2Ë| ((
r2
>>4)&7) );

35 
	`ROM_BANK32
(
r1
&0xF);

36 
	`VROM_BANK8
–((
r1
&0xF)<<2Ë| ((
r2
>>4)&3) );

38 
	}
}

40 
	$R1Së
(
uöt8
 
V
)

42 if(
r1
) ;

43 
r1
=
V
;

44 
	`MIRROR_SET
(
V
>>7);

45 
	`DoBS
();

46 
	}
}

48 
	$R2Së
(
uöt8
 
V
)

50 
r2
=
V
;

51 
	`DoBS
();

52 
	}
}

54 
	$DECLFW
(
R1W
)

56 
	`R1Së
(
V
);

57 
	}
}

59 
	$DECLFR
(
R1R
)

61 
uöt8
 
r
=
	`C¨tBR
(
A
);

62 
	`R1Së
(
r
);

63  
r
;

64 
	}
}

66 
	$DECLFW
(
R2W
)

68 
	`R2Së
(
V
);

69 
	}
}

71 
	$DECLFR
(
R2R
)

73 
uöt8
 
r
=
	`C¨tBR
(
A
);

74 
	`R2Së
(
r
);

75  
r
;

76 
	}
}

78 
	$M15Re°‹e
(
vîsi⁄
)

80 
	`DoBS
();

81 
	`MIRROR_SET
(
r1
>>7);

82 
	}
}

84 
	$M15Re£t
()

86 
r1
=
r2
=0;

87 
	`DoBS
();

88 
	`MIRROR_SET
(0);

89 
	}
}

91 
	$M≠≥r234_öô
()

93 
	`SëWrôeH™dÀr
(0xff80,0xff9f,
R1W
);

94 
	`SëRódH™dÀr
(0xff80,0xff9f,
R1R
);

96 
	`SëWrôeH™dÀr
(0xf„8,0xfff7,
R2W
);

97 
	`SëRódH™dÀr
(0xf„8,0xfff7,
R2R
);

99 
	`SëRódH™dÀr
(0x6000,0x7FFF,0);

100 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,0);

102 
	`M15Re£t
();

104 
GameSèãRe°‹e
=
M15Re°‹e
;

105 
M≠≥rRe£t
=
M15Re£t
;

106 
	}
}

	@mappers/240.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r240_wrôe
)

27 if(
A
<0x8000)

29 
	`ROM_BANK32
(
V
>>4);

30 
	`VROM_BANK8
(
V
&0xF);

32 
	}
}

34 
	$M≠≥r240_öô
()

36 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M≠≥r240_wrôe
);

37 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r240_wrôe
);

38 
	}
}

	@mappers/241.c

1 
	~"m≠öc.h
"

3 
	$DECLFW
(
M241wr
)

6 if(
A
<0x8000)

11 
	`ROM_BANK32
(
V
);

12 
	}
}

14 
	$DECLFR
(
M241rd
)

19 
	}
}

21 
	$M≠≥r241_öô
()

23 
	`ROM_BANK32
(0);

24 
	`SëWrôeH™dÀr
(0x5000,0x5fff,
M241wr
);

25 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M241wr
);

26 
	`SëRódH™dÀr
(0x4020,0x5fff,
M241rd
);

27 
	}
}

	@mappers/242.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r242_wrôe
)

26 
	`ROM_BANK32
((
A
>>3)&0xF);

27 
V
&3)

29 0:
	`MIRROR_SET
(0);;

30 1:
	`MIRROR_SET
(1);;

31 2:
	`⁄emú
(0);;

32 3:
	`⁄emú
(1);;

34 
	}
}

36 
	$M≠≥r242_öô
()

38 
	`ROM_BANK32
(0);

39 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r242_wrôe
);

40 
	}
}

	@mappers/244.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r244_wrôe_1
)

25 
	`ROM_BANK32
((
A
-0x8065)&0x03);

26 
	}
}

28 
	$DECLFW
(
M≠≥r244_wrôe_2
)

30 
	`VROM_BANK8
((
A
-0x80A5)&0x07);

31 
	}
}

33 
	$M≠≥r244_öô
()

35 
	`ROM_BANK32
(0);

36 
	`SëWrôeH™dÀr
(0x8065,0x80a4,
M≠≥r244_wrôe_1
);

37 
	`SëWrôeH™dÀr
(0x80a5,0x80e4,
M≠≥r244_wrôe_2
);

38 
	}
}

	@mappers/246.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r246_wrôe
)

26 
A
&0xF007)

28 0x6000:
	`ROM_BANK8
(0x8000,
V
);;

29 0x6001:
	`ROM_BANK8
(0xA000,
V
);;

30 0x6002:
	`ROM_BANK8
(0xC000,
V
);;

31 0x6003:
	`ROM_BANK8
(0xE000,
V
);;

32 0x6004:
	`VROM_BANK2
(0x0000,
V
);;

33 0x6005:
	`VROM_BANK2
(0x0800,
V
);;

34 0x6006:
	`VROM_BANK2
(0x1000,
V
);;

35 0x6007:
	`VROM_BANK2
(0x1800,
V
);;

37 
	}
}

39 
	$M≠≥r246_öô
()

41 
	`SëWrôeH™dÀr
(0x4020,0x67ff,
M≠≥r246_wrôe
);

42 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r246_wrôe
);

43 
	}
}

	@mappers/24and26.c

21 
	~"m≠öc.h
"

23 (*
sfun
[3])();

25 
	#vr˘emp
 
m≠byã1
[0]

	)

26 
	#VPSG2
 
m≠byã3


	)

27 
	#VPSG
 
m≠byã2


	)

29 
	`DoSQV1
();

30 
	`DoSQV2
();

31 
	`DoSawV
();

33 
sw≠¨oo
;

35 
acou¡
=0;

37 
	$FP_FASTAPASS
(1Ë
	$K⁄amiIRQHook
(
a
)

39 
	#LCYCS
 341

	)

41 if(
IRQa
)

43 
acou¡
+=
a
*3;

44 if(
acou¡
>=
LCYCS
)

46 
dﬂgaöbub
:
acou¡
-=
LCYCS
;
IRQCou¡
++;

47 if(
IRQCou¡
==0x100)

49 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

50 
IRQCou¡
=
IRQL©ch
;

52 if(
acou¡
>=
LCYCS
Ë
dﬂgaöbub
;

55 
	}
}

57 
	$DECLFW
(
VRC6SW
)

59 
A
&=0xF003;

60 if(
A
>=0x9000 && A<=0x9002)

62 
VPSG
[
A
&3]=
V
;

63 if(
sfun
[0]) sfun[0]();

65 if(
A
>=0xa000 && A<=0xa002)

67 
VPSG
[4|(
A
&3)]=
V
;

68 if(
sfun
[1]) sfun[1]();

70 if(
A
>=0xb000 && A<=0xb002)

72 
VPSG2
[
A
&3]=
V
;

73 if(
sfun
[2]) sfun[2]();

76 
	}
}

78 
	$DECLFW
(
M≠≥r24_wrôe
)

80 if(
sw≠¨oo
)

81 
A
=(A&0xFFFC)|((A>>1)&1)|((A<<1)&2);

82 if(
A
>=0x9000 && A<=0xb002)

84 
	`VRC6SW
(
A
,
V
);

87 
A
&=0xF003;

89 
A
&0xF003)

91 0x8000:
	`ROM_BANK16
(0x8000,
V
);;

93 
V
&0xF)

95 0x0:
	`MIRROR_SET2
(1);;

96 0x4:
	`MIRROR_SET2
(0);;

97 0x8:
	`⁄emú
(0);;

98 0xC:
	`⁄emú
(1);;

101 0xC000:
	`ROM_BANK8
(0xC000,
V
);;

102 0xD000:
	`VROM_BANK1
(0x0000,
V
);;

103 0xD001:
	`VROM_BANK1
(0x0400,
V
);;

104 0xD002:
	`VROM_BANK1
(0x0800,
V
);;

105 0xD003:
	`VROM_BANK1
(0x0c00,
V
);;

106 0xE000:
	`VROM_BANK1
(0x1000,
V
);;

107 0xE001:
	`VROM_BANK1
(0x1400,
V
);;

108 0xE002:
	`VROM_BANK1
(0x1800,
V
);;

109 0xE003:
	`VROM_BANK1
(0x1c00,
V
);;

110 0xF000:
IRQL©ch
=
V
;

113 0xF001:
IRQa
=
V
&2;

114 
vr˘emp
=
V
&1;

115 if(
V
&2)

117 
IRQCou¡
=
IRQL©ch
;

118 
acou¡
=0;

120 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

122 0xf002:
IRQa
=
vr˘emp
;

123 
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

126 
	}
}

128 
öt32
 
	gCVBC
[3];

129 
öt32
 
	gvcou¡
[3];

130 
öt32
 
	gdcou¡
[2];

132 
INLINE
 
	$DoSQV
(
x
)

134 
öt32
 
V
;

135 
öt32
 
amp
=(((
VPSG
[
x
<<2]&15)<<8)*6/8)>>4;

136 
öt32
 
°¨t
,
íd
;

138 
°¨t
=
CVBC
[
x
];

139 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

140 if(
íd
<=
°¨t
) ;

141 
CVBC
[
x
]=
íd
;

143 if(
VPSG
[(
x
<<2)|0x2]&0x80)

145 if(
VPSG
[
x
<<2]&0x80)

147 
V
=
°¨t
;V<
íd
;V++)

148 
Wave
[
V
>>4]+=
amp
;

152 
öt32
 
thªsh
=(
VPSG
[
x
<<2]>>4)&7;

153 
öt32
 
‰eq
=((
VPSG
[(
x
<<2)|0x1]|((VPSG[(x<<2)|0x2]&15)<<8))+1)<<17;

154 
V
=
°¨t
;V<
íd
;V++)

156 if(
dcou¡
[
x
]>
thªsh
)

157 
Wave
[
V
>>4]+=
amp
;

158 
vcou¡
[
x
]-=
√söcsize
;

159 
vcou¡
[
x
]<=0)

161 
vcou¡
[
x
]+=
‰eq
;

162 
dcou¡
[
x
]=(dcount[x]+1)&15;

167 
	}
}

169 
	$DoSQV1
()

171 
	`DoSQV
(0);

172 
	}
}

174 
	$DoSQV2
()

176 
	`DoSQV
(1);

177 
	}
}

179 
	$DoSawV
()

181 
V
;

182 
öt32
 
°¨t
,
íd
;

184 
°¨t
=
CVBC
[2];

185 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

186 if(
íd
<=
°¨t
) ;

187 
CVBC
[2]=
íd
;

189 if(
VPSG2
[2]&0x80)

191 
öt32
 
ßw1pha£acc
=0;

192 
uöt32
 
‰eq3
;

193 
uöt8
 
b3
=0;

194 
öt32
 
pha£acc
=0;

195 
uöt32
 
duff
=0;

197 
‰eq3
=(
VPSG2
[1]+((VPSG2[2]&15)<<8)+1);

199 
V
=
°¨t
;V<
íd
;V++)

201 
ßw1pha£acc
-=
√söcsize
;

202 if(
ßw1pha£acc
<=0)

204 
öt32
 
t
;

205 
ªa
:

206 
t
=
‰eq3
;

207 
t
<<=18;

208 
ßw1pha£acc
+=
t
;

209 
pha£acc
+=
VPSG2
[0]&0x3f;

210 
b3
++;

211 if(
b3
==7)

213 
b3
=0;

214 
pha£acc
=0;

216 if(
ßw1pha£acc
<=0)

217 
ªa
;

218 
duff
=(((
pha£acc
>>3)&0x1f)<<4)*6/8;

220 
Wave
[
V
>>4]+=
duff
;

223 
	}
}

226 
INLINE
 
	$DoSQVHQ
(
x
)

228 
öt32
 
V
;

229 
öt32
 
amp
=((
VPSG
[
x
<<2]&15)<<8)*6/8;

231 if(
VPSG
[(
x
<<2)|0x2]&0x80)

233 if(
VPSG
[
x
<<2]&0x80)

235 
V
=
CVBC
[
x
];V<
SOUNDTS
;V++)

236 
WaveHi
[
V
]+=
amp
;

240 
öt32
 
thªsh
=(
VPSG
[
x
<<2]>>4)&7;

241 
V
=
CVBC
[
x
];V<
SOUNDTS
;V++)

243 if(
dcou¡
[
x
]>
thªsh
)

244 
WaveHi
[
V
]+=
amp
;

245 
vcou¡
[
x
]--;

246 if(
vcou¡
[
x
]<=0)

248 
vcou¡
[
x
]=(
VPSG
[(x<<2)|0x1]|((VPSG[(x<<2)|0x2]&15)<<8))+1;

249 
dcou¡
[
x
]=(dcount[x]+1)&15;

254 
CVBC
[
x
]=
SOUNDTS
;

255 
	}
}

257 
	$DoSQV1HQ
()

259 
	`DoSQVHQ
(0);

260 
	}
}

262 
	$DoSQV2HQ
()

264 
	`DoSQVHQ
(1);

265 
	}
}

267 
	$DoSawVHQ
()

269 
uöt8
 
b3
=0;

270 
öt32
 
pha£acc
=0;

271 
öt32
 
V
;

273 if(
VPSG2
[2]&0x80)

275 
V
=
CVBC
[2];V<
SOUNDTS
;V++)

277 
WaveHi
[
V
]+=(((
pha£acc
>>3)&0x1f)<<8)*6/8;

278 
vcou¡
[2]--;

279 if(
vcou¡
[2]<=0)

281 
vcou¡
[2]=(
VPSG2
[1]+((VPSG2[2]&15)<<8)+1)<<1;

282 
pha£acc
+=
VPSG2
[0]&0x3f;

283 
b3
++;

284 if(
b3
==7)

286 
b3
=0;

287 
pha£acc
=0;

293 
CVBC
[2]=
SOUNDTS
;

294 
	}
}

298 
	$VRC6Sound
(
Cou¡
)

300 
x
;

302 
	`DoSQV1
();

303 
	`DoSQV2
();

304 
	`DoSawV
();

305 
x
=0;x<3;x++)

306 
CVBC
[
x
]=
Cou¡
;

307 
	}
}

310 
	$VRC6SoundHQ
()

312 
	`DoSQV1HQ
();

313 
	`DoSQV2HQ
();

314 
	`DoSawVHQ
();

315 
	}
}

317 
	$VRC6SyncHQ
(
öt32
 
ts
)

319 
x
;

320 
x
=0;x<3;x++Ë
CVBC
[x]=
ts
;

321 
	}
}

324 
	$VRC6_ESI
()

326 
GameExpSound
.
RCh™ge
=
VRC6_ESI
;

327 
GameExpSound
.
Fûl
=
VRC6Sound
;

328 
GameExpSound
.
HiFûl
=0;

329 
GameExpSound
.
HiSync
=0;

331 
	`mem£t
(
CVBC
,0,(CVBC));

332 
	`mem£t
(
vcou¡
,0,(vcount));

333 
	`mem£t
(
dcou¡
,0,(dcount));

334 if(
FSëtögs
.
SndR©e
)

337 if(
FSëtögs
.
soundq
>=1)

339 
sfun
[0]=
DoSQV1HQ
;

340 
sfun
[1]=
DoSQV2HQ
;

341 
sfun
[2]=
DoSawVHQ
;

346 
sfun
[0]=
DoSQV1
;

347 
sfun
[1]=
DoSQV2
;

348 
sfun
[2]=
DoSawV
;

352 
	`mem£t
(
sfun
,0,(sfun));

353 
	}
}

355 
	$M≠≥r24_öô
()

357 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r24_wrôe
);

358 
	`VRC6_ESI
();

359 
M≠IRQHook
=
K⁄amiIRQHook
;

360 
sw≠¨oo
=0;

361 
	}
}

363 
	$M≠≥r26_öô
()

365 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r24_wrôe
);

366 
	`VRC6_ESI
();

367 
M≠IRQHook
=
K⁄amiIRQHook
;

368 
sw≠¨oo
=1;

369 
	}
}

371 
	$NSFVRC6_Inô
()

373 
	`VRC6_ESI
();

374 
	`SëWrôeH™dÀr
(0x8000,0xbfff,
VRC6SW
);

375 
	}
}

	@mappers/25.c

21 
	~"m≠öc.h
"

23 
	#K4buf
 
m≠byã2


	)

24 
	#K4IRQ
 
m≠byã1
[1]

	)

25 
	#K4£l
 
m≠byã1
[0]

	)

27 
	gacou¡
=0;

28 
	$DECLFW
(
M≠≥r25_wrôe
)

30 
A
=(A&0xF003)|((A&0xC)>>2);

32 if((
A
&0xF000)==0xA000)

33 
	`ROM_BANK8
(0xA000,
V
);

34 if(
A
>=0xB000 && A<=0xEFFF)

36 
x
=(
A
&1)|((A-0xB000)>>11);

38 
K4buf
[
x
]&=(0xF0)>>((
A
&2)<<1);

39 
K4buf
[
x
]|=(
V
&0xF)<<((
A
&2)<<1);

40 
	`VROM_BANK1
(
x
<<10,
K4buf
[x]);

42 if((
A
&0xF000)==0x8000)

44 if(
K4£l
&2)

45 
	`ROM_BANK8
(0xC000,
V
);

47 
	`ROM_BANK8
(0x8000,
V
);

49 
A
)

51 0x9000:
V
&0x3)

53 0:
	`MIRROR_SET
(0);;

54 1:
	`MIRROR_SET
(1);;

55 2:
	`⁄emú
(0);;

56 3:
	`⁄emú
(1);;

59 0x9001:if((
K4£l
&2)!=(
V
&2))

61 
uöt8
 
swa
;

62 
swa
=
PRGB™kLi°
[0];

63 
	`ROM_BANK8
(0x8000,
PRGB™kLi°
[2]);

64 
	`ROM_BANK8
(0xc000,
swa
);

66 
K4£l
=
V
;

68 0xf000:
IRQL©ch
&=0xF0;IRQL©ch|=
V
&0xF;;

69 0xf002:
IRQL©ch
&=0x0F;IRQL©ch|=
V
<<4;;

70 0xf001:
IRQCou¡
=
IRQL©ch
;
IRQa
=
V
&2;
K4IRQ
=V&1;
acou¡
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

71 0xf003:
IRQa
=
K4IRQ
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

73 
	}
}

75 
	$FP_FASTAPASS
(1Ë
	$K⁄amiIRQHook
(
a
)

78 
	#LCYCS
 341

	)

79 if(
IRQa
)

81 
acou¡
+=
a
*3;

83 if(
acou¡
>=
LCYCS
)

85 
dﬂgaöbub
:
acou¡
-=
LCYCS
;
IRQCou¡
++;

86 if(
IRQCou¡
&0x100)

88 
	`X6502_IRQBegö
(
FCEU_IQEXT
);
IRQCou¡
=
IRQL©ch
;

90 if(
acou¡
>=
LCYCS
Ë
dﬂgaöbub
;

93 
	}
}

95 
	$M≠≥r25_öô
()

97 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r25_wrôe
);

98 
M≠IRQHook
=
K⁄amiIRQHook
;

99 
	}
}

	@mappers/255.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r255_wrôe
)

27 
uöt32
 
pb™k
=(
A
>>7)&0x1F;

28 
uöt32
 
cb™k
=
A
&0x3F;

29 
uöt32
 
rb™k
=(
A
>>14)&1;

34 if(
A
&0x1000)

36 
	`ROM_BANK16
(0x8000,((
pb™k
|(
rb™k
<<5))<<1)|((
A
&0x40)>>6));

37 
	`ROM_BANK16
(0xc000,((
pb™k
|(
rb™k
<<5))<<1)|((
A
&0x40)>>6));

41 
	`ROM_BANK32
(
pb™k
|(
rb™k
<<5));

43 
	`MIRROR_SET
((
A
>>13)&1);

44 
	`VROM_BANK8
((
rb™k
<<6)|
cb™k
);

45 
	}
}

47 
	$DECLFW
(
M≠≥r255_wl
)

50 
m≠byã1
[
A
&3]=
V
&0xF;

51 
	}
}

53 
	$DECLFR
(
M≠≥r255_ªad
)

56 (
m≠byã1
[
A
&3]);

57 
	}
}

59 
	$M≠≥r255_öô
()

61 
m≠byã1
[0]=mapbyte1[1]=0xF;

62 
	`ROM_BANK32
(0);

63 
	`VROM_BANK8
(0);

64 
	`SëWrôeH™dÀr
(0x5800,0x5FF0,
M≠≥r255_wl
);

65 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r255_wrôe
);

66 
	`SëRódH™dÀr
(0x5800,0x5FFF,
M≠≥r255_ªad
);

67 
	}
}

	@mappers/27.c

1 
	~"m≠öc.h
"

3 
uöt32
 
	gªgchr
[9];

5 
	$DECLFW
(
M≠≥r27_wrôe
)

7 
A
&=0xF00F;

8 
ªgnum
;

9 if((
A
>=0xB000) && (A<=0xE003)) {

10 
ªgnum
=((((
A
>>12)+1)&0x03)<<1)|((A&0x02)>>1);

11 if(
A
&1)

12 
ªgchr
[
ªgnum
]=‘egchr[ªgnum]&0x0F)|(
V
<<4);

14 
ªgchr
[
ªgnum
]=‘egchr[ªgnum]&0xFF0)|(
V
&0xF);

15 
	`VROM_BANK1
(
ªgnum
<<10,
ªgchr
[regnum]);

17 
A
)

19 0x8000: if(
ªgchr
[8]&2)

20 
	`ROM_BANK8
(0xc000,
V
);

22 
	`ROM_BANK8
(0x8000,
V
);

24 0xA000: 
	`ROM_BANK8
(0xa000,
V
); ;

26 
V
&3){

27 0:
	`£tmúr‹
(
MI_V
);;

28 1:
	`£tmúr‹
(
MI_H
);;

29 2:
	`£tmúr‹
(
MI_0
);;

30 3:
	`£tmúr‹
(
MI_1
);;

32 0x9002: 
ªgchr
[8]=
V
; ;

34 
IRQL©ch
=(IRQL©ch&0xF0)|(
V
&0x0F);

37 
IRQL©ch
=(IRQL©ch&0x0F)|((
V
&0xF)<<4);

39 0xF003: 
IRQa
=((IRQa&0x1)<<1)|(IRQa&0x1);

40 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

42 0xF002: 
IRQa
=
V
&3;

43 if(
IRQa
&0x02Ë
IRQCou¡
=
IRQL©ch
;

44 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

48 
	}
}

50 
	$M≠≥r27_hb
()

53 if(
IRQa
&0x2){

54 if(
IRQCou¡
==0xFF){

55 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

56 
IRQCou¡
=
IRQL©ch
+1;

58 
IRQCou¡
++;

61 
	}
}

63 
	$M≠≥r27_öô
()

65 
i
;

66 
i
=0; i<9; i++) {

67 
ªgchr
[
i
]=0;

69 
IRQa
=0;

70 
IRQCou¡
=
IRQL©ch
=0;

71 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r27_wrôe
);

72 
GameHBIRQHook
=
M≠≥r27_hb
;

73 
	}
}

	@mappers/32.c

21 
	~"m≠öc.h
"

24 
	#IREMC⁄
 
m≠byã1
[0]

	)

26 
	$DECLFW
(
M≠≥r32_wrôe
)

28 
A
>>12)

31 
m≠byã1
[1]=
V
;

32 if(
IREMC⁄
Ë{
	`ROM_BANK8
(0xc000,
V
);ROM_BANK8(0x8000,~1);}

33 {
	`ROM_BANK8
(0x8000,
V
);ROM_BANK8(0xc000,~1);}

35 0x9:
IREMC⁄
=(
V
>>1)&1;

36 if(
IREMC⁄
Ë{
	`ROM_BANK8
(0xc000,
m≠byã1
[1]);ROM_BANK8(0x8000,~1);}

37 {
	`ROM_BANK8
(0x8000,
m≠byã1
[1]); ROM_BANK8(0xc000,~1);}

38 
	`MIRROR_SET
(
V
&1);

40 0xa:
	`ROM_BANK8
(0xA000,
V
);

44 if((
A
&0xF000)==0xb000)

45 
	`VROM_BANK1
((
A
&0x7)<<10,
V
);

46 
	}
}

48 
	$M≠≥r32_öô
()

50 
	`ROM_BANK16
(0x8000,0);

51 
	`ROM_BANK16
(0xc000,~0);

52 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r32_wrôe
);

53 
	}
}

	@mappers/33.c

21 
	~"m≠öc.h
"

23 
	gis48
;

25 
	$DECLFW
(
M≠≥r33_wrôe
)

29 
A
&=0xF003;

30 if(
A
>=0xA000 && A<=0xA003)

31 
	`VROM_BANK1
(0x1000+((
A
&3)<<10),
V
);

32 
A
)

34 0x8000:if(!
is48
Ë
	`MIRROR_SET
((
V
>>6)&1);

35 
	`ROM_BANK8
(0x8000,
V
);

37 0x8001:
	`ROM_BANK8
(0xA000,
V
); ;

38 0x8002:
	`VROM_BANK2
(0x0000,
V
);;

39 0x8003:
	`VROM_BANK2
(0x0800,
V
);;

41 
	}
}

43 
	$DECLFW
(
M≠≥r48_HiWrôe
)

45 
A
&0xF003)

47 0xc000:
IRQL©ch
=
V
;;

48 0xc001:
IRQCou¡
=
IRQL©ch
;;

49 0xc003:
IRQa
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

50 0xc002:
IRQa
=1;;

51 0xe000:
	`MIRROR_SET
((
V
>>6)&1);;

53 
	}
}

55 
	$heho
()

57 if(
IRQa
)

59 
IRQCou¡
++;

60 if(
IRQCou¡
==0x100)

62 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

63 
IRQa
=0;

66 
	}
}

68 
	$M≠≥r33_öô
()

70 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r33_wrôe
);

71 
is48
=0;

72 
	}
}

74 
	$M≠≥r48_öô
()

76 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r33_wrôe
);

77 
	`SëWrôeH™dÀr
(0xc000,0xffff,
M≠≥r48_HiWrôe
);

78 
GameHBIRQHook
=
heho
;

79 
is48
=1;

80 
	}
}

	@mappers/40.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r40_wrôe
)

26 
A
&0xe000)

28 0x8000:
IRQa
=0;
IRQCou¡
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

29 0xa000:
IRQa
=1;;

30 0xe000:
	`ROM_BANK8
(0xc000,
V
&7);;

32 
	}
}

34 
	$FP_FASTAPASS
(1Ë
	$M≠≥r40IRQ
(
a
)

36 if(
IRQa
)

38 if(
IRQCou¡
<4096)

39 
IRQCou¡
+=
a
;

42 
IRQa
=0;

43 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

46 
	}
}

48 
	$M≠≥r40_öô
()

50 
	`ROM_BANK8
(0x6000,(~0)-1);

51 
	`ROM_BANK8
(0x8000,(~0)-3);

52 
	`ROM_BANK8
(0xa000,(~0)-2);

53 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r40_wrôe
);

54 
	`SëRódH™dÀr
(0x6000,0x7fff,
C¨tBR
);

55 
M≠IRQHook
=
M≠≥r40IRQ
;

56 
	}
}

	@mappers/41.c

21 
	~"m≠öc.h
"

24 
	#ˇÃeg
 
m≠byã1
[0]

	)

25 
	#ˇlchr
 
m≠byã1
[1]

	)

27 
	$DECLFW
(
M≠≥r41_wrôe
)

29 if(
A
<0x8000)

31 
	`ROM_BANK32
(
A
&7);

32 
	`MIRROR_SET
((
A
>>5)&1);

33 
ˇÃeg
=
A
;

34 
ˇlchr
&=0x3;

35 
ˇlchr
|=(
A
>>1)&0xC;

36 
	`VROM_BANK8
(
ˇlchr
);

38 if(
ˇÃeg
&0x4)

40 
ˇlchr
&=0xC;

41 
ˇlchr
|=
A
&3;

42 
	`VROM_BANK8
(
ˇlchr
);

44 
	}
}

46 
	$M41Re£t
()

48 
ˇÃeg
=
ˇlchr
=0;

49 
	}
}

51 
	$M≠≥r41_öô
()

53 
M≠≥rRe£t
=
M41Re£t
;

54 
	`ROM_BANK32
(0);

55 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r41_wrôe
);

56 
	`SëWrôeH™dÀr
(0x6000,0x67ff,
M≠≥r41_wrôe
);

57 
	}
}

	@mappers/42.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r42_wrôe
)

27 
A
&0xe003)

29 0x8000:
	`VROM_BANK8
(
V
);;

30 0xe000:
m≠byã1
[0]=
V
;
	`ROM_BANK8
(0x6000,V&0xF);;

31 0xe001:
	`MIRROR_SET
((
V
>>3)&1);;

32 0xe002:
IRQa
=
V
&2;if(!IRQaË
IRQCou¡
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

34 
	}
}

36 
	$FP_FASTAPASS
(1Ë
	$M≠≥r42IRQ
(
a
)

38 if(
IRQa
)

40 
IRQCou¡
+=
a
;

41 if(
IRQCou¡
>=32768) IRQCount-=32768;

42 if(
IRQCou¡
>=24576)

43 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

45 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

47 
	}
}

49 
	$M≠≥r42_SèãRe°‹e
(
vîsi⁄
)

51 
	`ROM_BANK8
(0x6000,
m≠byã1
[0]&0xF);

52 
	}
}

55 
	$M≠≥r42_öô
()

57 
	`ROM_BANK8
(0x6000,0);

58 
	`ROM_BANK32
(~0);

59 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r42_wrôe
);

60 
	`SëRódH™dÀr
(0x6000,0x7fff,
C¨tBR
);

61 
M≠SèãRe°‹e
=
M≠≥r42_SèãRe°‹e
;

62 
M≠IRQHook
=
M≠≥r42IRQ
;

63 
	}
}

	@mappers/43.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r43_wrôe
)

28 if((
A
&0x8122)==0x8122)

30 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

31 if(
V
&2Ë
IRQa
=1;

33 
IRQCou¡
=
IRQa
=0;

35 
	}
}

37 
	$DECLFW
(
M43Low
)

40 
å™so
[8]={4,3,2,3,4,7,5,6};

41 
A
&=0xF0FF;

42 if(
A
==0x4022)

43 
	`£çrg8
(0x6000,
å™so
[
V
&7]);

45 
	}
}

47 
	$FP_FASTAPASS
(1Ë
	$M43Ho
(
a
)

49 
IRQCou¡
+=
a
;

50 if(
IRQa
)

51 if(
IRQCou¡
>=4096)

53 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

55 
	}
}

63 
	$M≠≥r43_öô
()

65 
	`£çrg4
(0x5000,16);

66 
	`£çrg8
(0x6000,2);

67 
	`£çrg8
(0x8000,1);

68 
	`£çrg8
(0xa000,0);

69 
	`£çrg8
(0xc000,4);

70 
	`£çrg8
(0xe000,9);

71 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r43_wrôe
);

72 
	`SëWrôeH™dÀr
(0x4020,0x7fff,
M43Low
);

74 
	`SëRódH™dÀr
(0x6000,0xffff,
C¨tBR
);

75 
M≠IRQHook
=
M43Ho
;

76 
	}
}

	@mappers/46.c

21 
	~"m≠öc.h
"

25 
	#A64ªg
 
m≠byã1
[0]

	)

26 
	#A64wr
 
m≠byã1
[1]

	)

28 
	$DECLFW
(
M≠≥r46_wrôñ
)

30 
A64ªg
=
V
;

31 
	`ROM_BANK32
((
A64wr
&1)+((
A64ªg
&0xF)<<1));

32 
	`VROM_BANK8
(((
A64wr
>>4)&7)+((
A64ªg
&0xF0)>>1));

33 
	}
}

35 
	$DECLFW
(
M≠≥r46_wrôe
)

37 
A64wr
=
V
;

38 
	`ROM_BANK32
((
V
&1)+((
A64ªg
&0xF)<<1));

39 
	`VROM_BANK8
(((
V
>>4)&7)+((
A64ªg
&0xF0)>>1));

40 
	}
}

42 
	$M≠≥r46_öô
()

44 
	`MIRROR_SET
(0);

45 
	`ROM_BANK32
(0);

46 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r46_wrôe
);

47 
	`SëWrôeH™dÀr
(0x6000,0x7fff,
M≠≥r46_wrôñ
);

48 
	}
}

	@mappers/50.c

21 
	~"m≠öc.h
"

24 
	$FP_FASTAPASS
(1Ë
	$M≠≥r50IRQ
(
a
)

26 if(
IRQa
)

28 if(
IRQCou¡
<4096)

29 
IRQCou¡
+=
a
;

32 
IRQa
=0;

33 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

36 
	}
}

38 
	$M50Re°‹e
(
vîsi⁄
)

40 
	`£çrg8
(0xc000,
m≠byã1
[0]);

41 
	}
}

43 
	$DECLFW
(
M50W
)

45 if((
A
&0xD060)==0x4020)

47 if(
A
&0x100)

49 
IRQa
=
V
&1;

50 if(!
IRQa
Ë
IRQCou¡
=0;

51 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

55 
V
=((V&1)<<2)|((V&2)>>1)|((V&4)>>1)|(V&8);

56 
m≠byã1
[0]=
V
;

57 
	`£çrg8
(0xc000,
V
);

60 
	}
}

62 
	$M≠≥r50_öô
()

64 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M50W
);

65 
	`SëRódH™dÀr
(0x6000,0xffff,
C¨tBR
);

66 
M≠SèãRe°‹e
=
M50Re°‹e
;

67 
M≠IRQHook
=
M≠≥r50IRQ
;

69 
	`£çrg8
(0x6000,0xF);

70 
	`£çrg8
(0x8000,0x8);

71 
	`£çrg8
(0xa000,0x9);

72 
	`£çrg8
(0xc000,0x0);

73 
	`£çrg8
(0xe000,0xB);

74 
	}
}

	@mappers/51.c

21 
	~"m≠öc.h
"

23 
	#mode
 
m≠byã1
[0]

	)

24 
	#∑ge
 
m≠byã1
[1]

	)

26 
uöt32
 
	$Gë8K
(
uöt32
 
A
)

28 
uöt32
 
b™k
;

30 
b™k
=(
∑ge
<<2)|((
A
>>13)&1);

32 if(
A
&0x4000 && !(
mode
&1)Ë
b™k
|=0xC;

33 if(!(
A
&0x8000)Ë
b™k
|=0x20;

34 if(
mode
==2Ë
b™k
|=2;

35 
b™k
|=(
A
>>13)&2;

36 (
b™k
);

37 
	}
}

39 
	$Synco
()

41 
uöt32
 
x
;

42 if(
m≠byã1
[0]<=2)

43 
	`MIRROR_SET2
(1);

45 
	`MIRROR_SET2
(0);

46 
x
=0x6000;x<0x10000;x+=8192)

47 
	`ROM_BANK8
(
x
,
	`Gë8K
(x));

48 
	}
}

50 
	$DECLFW
(
Wrôe
)

52 if(
A
&0x8000Ë
m≠byã1
[1]=
V
&0xF;

53 
m≠byã1
[0]=(m≠byã1[0]&2)|((
V
>>1)&1);

55 if(
A
&0x4000Ë
m≠byã1
[0]=(m≠byã1[0]&1)|((
V
>>3)&2);

56 
	`Synco
();

57 
	}
}

59 
	$M≠≥r51_öô
()

61 
	`SëWrôeH™dÀr
(0x6000,0xFFFF,
Wrôe
);

62 
	`SëRódH™dÀr
(0x6000,0xFFFF,
C¨tBR
);

63 
m≠byã1
[0]=1;

64 
m≠byã1
[1]=0;

65 
	`Synco
();

66 
	}
}

	@mappers/59.c

21 
	~"m≠öc.h
"

23 
	gay
;

24 
	$DECLFW
(
M≠≥r59_wrôe
)

27 
	`£çrg32
(0x8000,(
A
&0x70)>>4);

28 
	`£tchr8
(
A
&0x7);

31 
ay
=
A
;

32 
	`MIRROR_SET2
((
A
&0x8)>>3);

33 
	}
}

35 
	$DECLFR
(
m59rd
)

37 if(
ay
&0x100) (0);

39 (
	`C¨tBR
(
A
));

40 
	}
}

42 
	$M≠≥r59_öô
()

44 
	`£çrg32
(0x8000,0);

45 
	`SëRódH™dÀr
(0x8000,0xffff,
m59rd
);

46 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r59_wrôe
);

47 
	}
}

	@mappers/6.c

21 
	~"m≠öc.h
"

23 
uöt8
 
	gFFEmode
;

25 
	#FVRAM_BANK8
(
A
,
V
Ë{
VPage
[0]=VPage[1]=VPage[2]=VPage[3]=VPage[4]=VPage[5]=VPage[6]=VPage[7]=V?&
M≠≥rExRAM
[(V)<<13]-(A):&
CHRRAM
[(V)<<13]-(A);
CHRB™kLi°
[0]=((V)<<3);CHRB™kLi°[1]=((V)<<3)+1;CHRB™kLi°[2]=((V)<<3)+2;CHRB™kLi°[3]=((V)<<3)+3;CHRB™kLi°[4]=((V)<<3)+4;CHRB™kLi°[5]=((V)<<3)+5;CHRB™kLi°[6]=((V)<<3)+6;CHRB™kLi°[7]=((V)<<3)+7;
PPUCHRRAM
=0xFF;}

	)

27 
	$FP_FASTAPASS
(1Ë
	$FFEIRQHook
(
a
)

29 if(
IRQa
)

31 
IRQCou¡
+=
a
;

32 if(
IRQCou¡
>=0x10000)

34 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

35 
IRQa
=0;

36 
IRQCou¡
=0;

39 
	}
}

41 
	$DECLFW
(
M≠≥r6_wrôe
)

43 if(
A
<0x8000)

45 
A
){

46 0x42FF:
	`MIRROR_SET
((
V
>>4)&1);;

47 0x42FE:
	`⁄emú
((
V
>>3)&2); 
FFEmode
=V&0x80;;

48 0x4501:
IRQa
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

49 0x4502:
IRQCou¡
&=0xFF00;IRQCou¡|=
V
;;

50 0x4503:
IRQCou¡
&=0xFF;IRQCou¡|=
V
<<8;
IRQa
=1;;

53 
FFEmode
)

55 0x80: 
	`£tchr8
(
V
); ;

56 : 
	`ROM_BANK16
(0x8000,
V
>>2);

57 
	`FVRAM_BANK8
(0x0000,
V
&3);

60 
	}
}

61 
	$M≠≥r6_SèãRe°‹e
(
vîsi⁄
)

63 
x
;

64 
x
=0;x<8;x++)

65 if(
PPUCHRRAM
&(1<<
x
))

67 if(
CHRB™kLi°
[
x
]>7)

68 
VPage
[
x
]=&
M≠≥rExRAM
[(
CHRB™kLi°
[x]&31)*0x400]-(x*0x400);

69 
VPage
[
x
]=&
CHRRAM
[(
CHRB™kLi°
[x]&7)*0x400]-(x*0x400);

71 
	}
}

72 
	$M≠≥r6_öô
()

74 
M≠IRQHook
=
FFEIRQHook
;

75 
	`ROM_BANK16
(0xc000,7);

77 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M≠≥r6_wrôe
);

78 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r6_wrôe
);

79 
M≠SèãRe°‹e
=
M≠≥r6_SèãRe°‹e
;

80 
	}
}

	@mappers/60.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r60_wrôe
)

25 if(
A
&0x80) {

26 
	`ROM_BANK16
(0x8000,(
A
&0x70)>>4);

27 
	`ROM_BANK16
(0xC000,(
A
&0x70)>>4);

30 
	`ROM_BANK32
((
A
&0x70)>>5);

31 
	`VROM_BANK8
(
A
&7);

32 
	`MIRROR_SET
((
A
&8)>>3);

33 
	}
}

35 
	$M≠≥r60_öô
()

37 
	`ROM_BANK32
(0);

38 
	`SëWrôeH™dÀr
(0x8000,0xffff, 
M≠≥r60_wrôe
);

39 
	}
}

	@mappers/61.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r61_wrôe
)

27 
A
&0x30)

31 
	`ROM_BANK32
(
A
&0xF);

35 
	`ROM_BANK16
(0x8000,((
A
&0xF)<<1)| (((A&0x20)>>4)) );

36 
	`ROM_BANK16
(0xC000,((
A
&0xF)<<1)| (((A&0x20)>>4)) );

39 #ifde‡
moo


40 if(!(
A
&0x10))

41 
	`ROM_BANK32
(
A
&0xF);

44 
	`ROM_BANK16
(0x8000,((
A
&0xF)<<1)| (((A&0x10)>>4)^1) );

45 
	`ROM_BANK16
(0xC000,((
A
&0xF)<<1)| (((A&0x10)>>4)^1) );

48 
	`MIRROR_SET
((
A
&0x80)>>7);

49 
	}
}

51 
	$M≠≥r61_öô
()

53 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r61_wrôe
);

54 
	}
}

	@mappers/62.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r62_wrôe
)

25 
	`VROM_BANK8
(((
A
&0x1F)<<2)|(
V
&0x03));

26 if(
A
&0x20) {

27 
	`ROM_BANK16
(0x8000,(
A
&0x40)|((A>>8)&0x3F));

28 
	`ROM_BANK16
(0xc000,(
A
&0x40)|((A>>8)&0x3F));

31 
	`ROM_BANK32
(((
A
&0x40)|((A>>8)&0x3F))>>1);

32 
	`MIRROR_SET
((
A
&0x80)>>7);

33 
	}
}

35 
	$M≠≥r62_öô
()

37 
	`SëWrôeH™dÀr
(0x8000,0xffff, 
M≠≥r62_wrôe
);

38 
	`ROM_BANK32
(0);

39 
	}
}

	@mappers/65.c

21 
	~"m≠öc.h
"

24 
	$FP_FASTAPASS
(1Ë
	$IREMIRQHook
(
a
)

26 if(
IRQa
)

28 
IRQCou¡
-=
a
;

29 if(
IRQCou¡
<-4)

31 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

32 
IRQa
=0;

33 
IRQCou¡
=0xFFFF;

36 
	}
}

38 
	$DECLFW
(
M≠≥r65_wrôe
)

42 
A
)

46 0x8000:
	`ROM_BANK8
(0x8000,
V
);;

48 0x9001:
	`MIRROR_SET
(
V
>>7);;

49 0x9003:
IRQa
=
V
&0x80;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

50 0x9004:
IRQCou¡
=
IRQL©ch
;;

51 0x9005: 
IRQL©ch
&=0x00FF;

52 
IRQL©ch
|=
V
<<8;

54 0x9006: 
IRQL©ch
&=0xFF00;IRQL©ch|=
V
;

56 0xB000:
	`VROM_BANK1
(0x0000,
V
);;

57 0xB001:
	`VROM_BANK1
(0x0400,
V
);;

58 0xB002:
	`VROM_BANK1
(0x0800,
V
);;

59 0xB003:
	`VROM_BANK1
(0x0C00,
V
);;

60 0xB004:
	`VROM_BANK1
(0x1000,
V
);;

61 0xB005:
	`VROM_BANK1
(0x1400,
V
);;

62 0xB006:
	`VROM_BANK1
(0x1800,
V
);;

63 0xB007:
	`VROM_BANK1
(0x1C00,
V
);;

64 0xa000:
	`ROM_BANK8
(0xA000,
V
);;

65 0xC000:
	`ROM_BANK8
(0xC000,
V
);;

68 
	}
}

70 
	$M≠≥r65_öô
()

72 
M≠IRQHook
=
IREMIRQHook
;

73 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r65_wrôe
);

74 
	}
}

	@mappers/67.c

21 
	~"m≠öc.h
"

24 
	#su¡oggÀ
 
m≠byã1
[0]

	)

26 
	$DECLFW
(
M≠≥r67_wrôe
)

28 
A
&=0xF800;

29 if((
A
&0x800) && A<=0xb800)

31 
	`VROM_BANK2
((
A
-0x8800)>>1,
V
);

33 
A
)

36 0xc000:if(!
su¡oggÀ
)

38 
IRQCou¡
&=0xFF;

39 
IRQCou¡
|=
V
<<8;

43 
IRQCou¡
&=0xFF00;

44 
IRQCou¡
|=
V
;

46 
su¡oggÀ
^=1;

48 0xd800:
su¡oggÀ
=0;
IRQa
=
V
&0x10;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

50 0xe800:
V
&3)

52 0:
	`MIRROR_SET2
(1);;

53 1:
	`MIRROR_SET2
(0);;

54 2:
	`⁄emú
(0);;

55 3:
	`⁄emú
(1);;

58 0xf800:
	`ROM_BANK16
(0x8000,
V
);;

60 
	}
}

61 
	$FP_FASTAPASS
(1Ë
	$SunIRQHook
(
a
)

63 if(
IRQa
)

65 
IRQCou¡
-=
a
;

66 if(
IRQCou¡
<=0)

68 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

69 
IRQa
=0;

70 
IRQCou¡
=0xFFFF;

73 
	}
}

74 
	$M≠≥r67_öô
()

76 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r67_wrôe
);

77 
M≠IRQHook
=
SunIRQHook
;

78 
	}
}

	@mappers/68.c

21 
	~"m≠öc.h
"

23 
	$Fixîô
()

25 
m≠byã2
[0]&3)

27 0:
v«∑ge
[0]=v«∑ge[2]=
CHR±r
[0]+(((
m≠byã1
[0]|128)&
CHRmask1
[0])<<10);

28 
v«∑ge
[1]=v«∑ge[3]=
CHR±r
[0]+(((
m≠byã1
[1]|128)&
CHRmask1
[0])<<10);

30 1:
v«∑ge
[0]=v«∑ge[1]=
CHR±r
[0]+(((
m≠byã1
[0]|128)&
CHRmask1
[0])<<10);

31 
v«∑ge
[2]=v«∑ge[3]=
CHR±r
[0]+(((
m≠byã1
[1]|128)&
CHRmask1
[0])<<10);

33 2:
v«∑ge
[0]=v«∑ge[1]=v«∑ge[2]=v«∑ge[3]=
CHR±r
[0]+(((
m≠byã1
[0]|128)&
CHRmask1
[0])<<10);

35 3:
v«∑ge
[0]=v«∑ge[1]=v«∑ge[2]=v«∑ge[3]=
CHR±r
[0]+(((
m≠byã1
[1]|128)&
CHRmask1
[0])<<10);

38 
	}
}

40 
	$DECLFW
(
M≠≥r68_wrôe
)

43 
A
&=0xF000;

45 if(
A
>=0x8000 && A<=0xB000)

47 
	`VROM_BANK2
((
A
-0x8000)>>1,
V
);

49 
A
)

51 0xc000:
m≠byã1
[0]=
V
;

52 if(
VROM_size
 && 
m≠byã2
[0]&0x10)

53 
	`Fixîô
();

56 0xd000:
m≠byã1
[1]=
V
;

57 if(
VROM_size
 && 
m≠byã2
[0]&0x10)

58 
	`Fixîô
();

61 0xe000: 
m≠byã2
[0]=
V
;

62 if(!(
V
&0x10))

64 
V
&3)

66 0:
	`MIRROR_SET2
(1);;

67 1:
	`MIRROR_SET2
(0);;

68 2:
	`⁄emú
(0);;

69 3:
	`⁄emú
(1);;

72 if(
VROM_size
)

74 
	`Fixîô
();

75 
PPUNTARAM
=0;

78 0xf000: 
	`ROM_BANK16
(0x8000,
V
);;

80 
	}
}

82 
	$M≠≥r68_SèãRe°‹e
(
vîsi⁄
)

84 if(!(
m≠byã2
[0]&0x10))

86 
m≠byã2
[0]&3)

88 0:
	`MIRROR_SET
(0);;

89 1:
	`MIRROR_SET
(1);;

90 2:
	`⁄emú
(0);;

91 3:
	`⁄emú
(1);;

94 if(
VROM_size
)

96 
	`Fixîô
();

97 
PPUNTARAM
=0;

99 
	}
}

101 
	$M≠≥r68_öô
()

103 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r68_wrôe
);

104 
M≠SèãRe°‹e
=
M≠≥r68_SèãRe°‹e
;

105 
	}
}

	@mappers/69.c

21 
	~"m≠öc.h
"

23 
AYSound
(
Cou¡
);

25 
DoAYSQ
(
x
);

28 
	#sun£À˘
 
m≠byã1
[0]

	)

29 
	#sungah
 
m≠byã1
[1]

	)

30 
uöt8
 
	gsunödex
;

32 
	$DECLFW
(
SUN5BWRAM
)

34 if((
sungah
&0xC0)==0xC0)

35 (
WRAM
-0x6000)[
A
]=
V
;

36 
	}
}

38 
	$DECLFR
(
SUN5AWRAM
)

40 if((
sungah
&0xC0)==0x40)

41  
X
.
DB
;

42  
	`C¨tBR
(
A
);

43 
	}
}

45 
	$DECLFW
(
M≠≥r69_SWL
)

47 
sunödex
=
V
%14;

48 
	}
}

50 
	$DECLFW
(
M≠≥r69_SWH
)

52 
x
;

53 
GameExpSound
.
Fûl
=
AYSound
;

54 
GameExpSound
.
HiFûl
=0;

55 if(
FSëtögs
.
SndR©e
);

56 
sunödex
)

60 8: 
	`DoAYSQ
(0);;

63 9: 
	`DoAYSQ
(1);;

66 10: 
	`DoAYSQ
(2);;

68 
x
=0;x<2;x++)

69  
	`DoAYSQ
(
x
);

72 
M≠≥rExRAM
[
sunödex
]=
V
;

73 
	}
}

75 
	$DECLFW
(
M≠≥r69_wrôe
)

77 
A
&0xE000)

79 0x8000:
sun£À˘
=
V
;;

81 
sun£À˘
&=0xF;

82 if(
sun£À˘
<=7)

83 
	`VROM_BANK1
(
sun£À˘
<<10,
V
);

85 
sun£À˘
&0x0f)

88 
sungah
=
V
;

89 if(
V
&0x40)

91 if(
V
&0x80)

92 
	`£çrg8r
(0x10,0x6000,0);

95 
	`£çrg8
(0x6000,
V
);

97 9:
	`ROM_BANK8
(0x8000,
V
);;

98 0xa:
	`ROM_BANK8
(0xa000,
V
);;

99 0xb:
	`ROM_BANK8
(0xc000,
V
);;

101 
V
&3)

103 0:
	`MIRROR_SET2
(1);;

104 1:
	`MIRROR_SET2
(0);;

105 2:
	`⁄emú
(0);;

106 3:
	`⁄emú
(1);;

109 0xd:
IRQa
=
V
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

110 0xe:
IRQCou¡
&=0xFF00;IRQCou¡|=
V
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

111 0xf:
IRQCou¡
&=0x00FF;IRQCou¡|=
V
<<8;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

115 
	}
}

117 
öt32
 
	gvcou¡
[3];

118 
öt32
 
	gdcou¡
[3];

119 
	gCAYBC
[3];

121 
	$DoAYSQ
(
x
)

123 
öt32
 
‰eq
=((
M≠≥rExRAM
[
x
<<1]|((MapperExRAM[(x<<1)+1]&15)<<8))+1)<<(4+17);

124 
öt32
 
amp
=(
M≠≥rExRAM
[0x8+
x
]&15)<<2;

125 
öt32
 
°¨t
,
íd
;

126 
V
;

128 
amp
+=amp>>1;

130 
°¨t
=
CAYBC
[
x
];

131 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

132 if(
íd
<=
°¨t
) ;

133 
CAYBC
[
x
]=
íd
;

135 if(
amp
)

136 if(!(
M≠≥rExRAM
[0x7]&(1<<
x
)))

137 
V
=
°¨t
;V<
íd
;V++)

139 if(
dcou¡
[
x
])

140 
Wave
[
V
>>4]+=
amp
;

141 
vcou¡
[
x
]-=
√söcsize
;

142 
vcou¡
[
x
]<=0)

144 
dcou¡
[
x
]^=1;

145 
vcou¡
[
x
]+=
‰eq
;

148 
	}
}

151 
	$DoAYSQHQ
(
x
)

153 
öt32
 
V
;

154 
öt32
 
‰eq
=((
M≠≥rExRAM
[
x
<<1]|((MapperExRAM[(x<<1)+1]&15)<<8))+1)<<4;

155 
öt32
 
amp
=(
M≠≥rExRAM
[0x8+
x
]&15)<<6;

157 
amp
+=amp>>1;

159 if(!(
M≠≥rExRAM
[0x7]&(1<<
x
)))

161 
V
=
CAYBC
[
x
];V<
SOUNDTS
;V++)

163 if(
dcou¡
[
x
])

164 
WaveHi
[
V
]+=
amp
;

165 
vcou¡
[
x
]--;

166 if(
vcou¡
[
x
]<=0)

168 
dcou¡
[
x
]^=1;

169 
vcou¡
[
x
]=
‰eq
;

173 
CAYBC
[
x
]=
SOUNDTS
;

174 
	}
}

177 
	$AYSound
(
Cou¡
)

179 
x
;

180 
	`DoAYSQ
(0);

181 
	`DoAYSQ
(1);

182 
	`DoAYSQ
(2);

183 
x
=0;x<3;x++)

184 
CAYBC
[
x
]=
Cou¡
;

185 
	}
}

188 
	$AYSoundHQ
()

190 
	`DoAYSQHQ
(0);

191 
	`DoAYSQHQ
(1);

192 
	`DoAYSQHQ
(2);

193 
	}
}

196 
	$AYHiSync
(
öt32
 
ts
)

198 
x
;

200 
x
=0;x<3;x++)

201 
CAYBC
[
x
]=
ts
;

202 
	}
}

204 
	$FP_FASTAPASS
(1Ë
	$SunIRQHook
(
a
)

206 if(
IRQa
)

208 
IRQCou¡
-=
a
;

209 if(
IRQCou¡
<=0)

210 {
	`X6502_IRQBegö
(
FCEU_IQEXT
);
IRQa
=0;
IRQCou¡
=0xFFFF;}

212 
	}
}

214 
	$M≠≥r69_SèãRe°‹e
(
vîsi⁄
)

216 if(
m≠byã1
[1]&0x40)

218 if(
m≠byã1
[1]&0x80)

219 
	`£çrg8r
(0x10,0x6000,0);

222 
	`£çrg8
(0x6000,
m≠byã1
[1]);

223 
	}
}

225 
	$M≠≥r69_ESI
()

227 
GameExpSound
.
RCh™ge
=
M≠≥r69_ESI
;

228 
GameExpSound
.
HiSync
=
AYHiSync
;

229 
	`mem£t
(
dcou¡
,0,(dcount));

230 
	`mem£t
(
vcou¡
,0,(vcount));

231 
	`mem£t
(
CAYBC
,0,(CAYBC));

232 
	}
}

234 
	$NSFAY_Inô
()

236 
sunödex
=0;

237 
	`SëWrôeH™dÀr
(0xc000,0xdfff,
M≠≥r69_SWL
);

238 
	`SëWrôeH™dÀr
(0xe000,0xffff,
M≠≥r69_SWH
);

239 
	`M≠≥r69_ESI
();

240 
	}
}

242 
	$M≠≥r69_öô
()

244 
sunödex
=0;

246 
	`SëupC¨tPRGM≠pög
(0x10,
WRAM
,8192,1);

248 
	`SëWrôeH™dÀr
(0x8000,0xbfff,
M≠≥r69_wrôe
);

249 
	`SëWrôeH™dÀr
(0xc000,0xdfff,
M≠≥r69_SWL
);

250 
	`SëWrôeH™dÀr
(0xe000,0xffff,
M≠≥r69_SWH
);

251 
	`SëWrôeH™dÀr
(0x6000,0x7fff,
SUN5BWRAM
);

252 
	`SëRódH™dÀr
(0x6000,0x7fff,
SUN5AWRAM
);

253 
	`M≠≥r69_ESI
();

254 
M≠IRQHook
=
SunIRQHook
;

255 
M≠SèãRe°‹e
=
M≠≥r69_SèãRe°‹e
;

256 
	}
}

	@mappers/71.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r71_wrôe
)

27 
A
&0xF000)

32 0xC000:
	`ROM_BANK16
(0x8000,
V
);;

33 0x9000:
	`⁄emú
((
V
>>3)&2);;

35 
	}
}

37 
	$M≠≥r71_öô
()

39 
	`SëWrôeH™dÀr
(0x4020,0xffff,
M≠≥r71_wrôe
);

40 
	}
}

	@mappers/72.c

21 
	~"m≠öc.h
"

24 
	$DECLFW
(
M≠≥r72_wrôe
)

26 
m≠byã1
[0]=
V
;

27 if(
V
&0x80)

28 
	`ROM_BANK16
(0x8000,
V
&0xF);

29 if(
V
&0x40)

30 
	`VROM_BANK8
(
V
&0xF);

31 
	}
}

33 
	$M≠≥r72_öô
()

35 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r72_wrôe
);

36 
	}
}

	@mappers/73.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r73_wrôe
)

28 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

29 
A
&0xF000)

32 0x8000:
IRQCou¡
&=0xFFF0;IRQCou¡|=(
V
&0xF);;

33 0x9000:
IRQCou¡
&=0xFF0F;IRQCou¡|=(
V
&0xF)<<4;;

34 0xa000:
IRQCou¡
&=0xF0FF;IRQCou¡|=(
V
&0xF)<<8;;

35 0xb000:
IRQCou¡
&=0x0FFF;IRQCou¡|=(
V
&0xF)<<12;;

36 0xc000:
IRQa
=
V
&2;;

37 0xf000:
	`ROM_BANK16
(0x8000,
V
);;

39 
	}
}

41 
	$FP_FASTAPASS
(1Ë
	$M≠≥r73IRQHook
(
a
)

43 if(
IRQa
)

45 
IRQCou¡
+=
a
;

46 if(
IRQCou¡
>=0xFFFF)

48 
IRQCou¡
&=0xFFFF;

49 
IRQa
=0;

50 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

53 
	}
}

55 
	$M≠≥r73_öô
()

57 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r73_wrôe
);

58 
M≠IRQHook
=
M≠≥r73IRQHook
;

59 
	}
}

	@mappers/75.c

21 
	~"m≠öc.h
"

24 
	#m≠75£l
 
m≠byã1
[0]

	)

25 
	#m≠75¨
 
m≠byã2


	)

27 
	$DECLFW
(
M≠≥r75_wrôe
)

29 
A
&0xF000)

31 0x8000:
	`ROM_BANK8
(0x8000,
V
);;

33 
	`VROM_BANK4
(0x0000,
m≠75¨
[0]|((
V
&2)<<3));

34 
	`VROM_BANK4
(0x1000,
m≠75¨
[1]|((
V
&4)<<2));

35 
m≠75£l
=
V
;
	`MIRROR_SET
(V&1);;

36 0xa000:
	`ROM_BANK8
(0xa000,
V
);;

37 0xc000:
	`ROM_BANK8
(0xc000,
V
);;

38 0xe000:
V
&=0xF;
m≠75¨
[0]=V;V|=(
m≠75£l
&2)<<3;
	`VROM_BANK4
(0x0000,V);;

39 0xf000:
V
&=0xF;
m≠75¨
[1]=V;V|=(
m≠75£l
&4)<<2;
	`VROM_BANK4
(0x1000,V);;

41 
	}
}

43 
	$M≠≥r75_öô
()

45 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r75_wrôe
);

46 
	}
}

	@mappers/76.c

21 
	~"m≠öc.h
"

22 
uöt8
 
	gMMC3_cmd
;

24 
	$DECLFW
(
M≠≥r76_wrôe
)

26 
A
&0xE001){

28 
MMC3_cmd
 = 
V
;

31 
MMC3_cmd
&0x07){

32 2: 
	`VROM_BANK2
(0x000,
V
);;

33 3: 
	`VROM_BANK2
(0x800,
V
);;

34 4: 
	`VROM_BANK2
(0x1000,
V
);;

35 5: 
	`VROM_BANK2
(0x1800,
V
);;

37 if(
MMC3_cmd
&0x40Ë
	`ROM_BANK8
(0xC000,
V
);

38 
	`ROM_BANK8
(0x8000,
V
);

40 7: 
	`ROM_BANK8
(0xA000,
V
);

45 
	`MIRROR_SET
(
V
&1);

48 
	}
}

50 
	$M≠≥r76_öô
()

52 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r76_wrôe
);

53 
	}
}

	@mappers/77.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r77_wrôe
)

27 
m≠byã1
[0]=
V
;

28 
	`ROM_BANK32
(
V
&0x7);

29 
	`VROM_BANK2
(0x0000, (
V
&0xf0)>>4);

30 
	}
}

32 
	$M≠≥r77_SèãRe°‹e
(
vîsi⁄
)

34 
x
;

36 if(
vîsi⁄
>=7200)

38 
	`ROM_BANK32
(
m≠byã1
[0]&0x7);

39 
	`VROM_BANK2
(0x0000, (
m≠byã1
[0]&0xf0)>>4);

41 
x
=2;x<8;x++)

42 
	`VRAM_BANK1
(
x
*0x400,x);

43 
	}
}

45 
	$M≠≥r77_öô
()

47 
x
;

49 
	`ROM_BANK32
(0);

50 
x
=2;x<8;x++)

51 
	`VRAM_BANK1
(
x
*0x400,x);

52 
	`SëWrôeH™dÀr
(0x6000,0xffff,
M≠≥r77_wrôe
);

53 
M≠SèãRe°‹e
=
M≠≥r77_SèãRe°‹e
;

54 
	}
}

	@mappers/79.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r79_wrôe
)

27 if(
A
<0x8000 && ((A^0x4100)==0))

29 
	`ROM_BANK32
((
V
>>3)&1);

31 
	`VROM_BANK8
(
V
);

32 
	}
}

34 
	$M≠≥r79_öô
()

36 
	`ROM_BANK32
(~0);

37 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r79_wrôe
);

38 
	`SëWrôeH™dÀr
(0x4020,0x5fff,
M≠≥r79_wrôe
);

39 
	}
}

	@mappers/8.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r8_wrôe
)

25 
	`ROM_BANK16
(0x8000,
V
>>3);

26 
	`VROM_BANK8
(
V
&7);

27 
	}
}

29 
	$M≠≥r8_öô
()

31 
	`ROM_BANK32
(0);

32 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r8_wrôe
);

33 
	}
}

	@mappers/80.c

21 
	~"m≠öc.h
"

23 
uöt32
 
	gœ°A
;

24 
	gisfu
;

25 
uöt8
 
	gCCache
[8];

27 
	$FP_FASTAPASS
(1Ë
	$Fudou_PPU
(
uöt32
 
A
)

29 
œ°
=-1;

30 
uöt8
 
z
;

32 if(
A
>=0x2000) ;

34 
A
>>=10;

35 
œ°A
=
A
;

37 
z
=
CCache
[
A
];

38 if(
z
!=
œ°
)

40 
	`⁄emú
(
z
);

41 
œ°
=
z
;

43 
	}
}

45 
	$múa
()

47 if(
isfu
)

49 
x
;

50 
CCache
[0]=CCache[1]=
m≠byã2
[0]>>7;

51 
CCache
[2]=CCache[3]=
m≠byã2
[1]>>7;

53 
x
=0;x<4;x++)

54 
CCache
[4+
x
]=
m≠byã2
[2+x]>>7;

56 
	`⁄emú
(
CCache
[
œ°A
]);

59 
	`MIRROR_SET2
(
m≠byã1
[0]&1);

60 
	}
}

62 
	$DECLFW
(
M≠≥r80_wrôe
)

64 
A
)

66 0x7ef0: 
m≠byã2
[0]=
V
;
	`VROM_BANK2
(0x0000,(V>>1)&0x3F);
	`múa
();;

67 0x7ef1: 
m≠byã2
[1]=
V
;
	`VROM_BANK2
(0x0800,(V>>1)&0x3f);
	`múa
();;

69 0x7ef2: 
m≠byã2
[2]=
V
;
	`VROM_BANK1
(0x1000,V);
	`múa
();;

70 0x7ef3: 
m≠byã2
[3]=
V
;
	`VROM_BANK1
(0x1400,V);
	`múa
();;

71 0x7ef4: 
m≠byã2
[4]=
V
;
	`VROM_BANK1
(0x1800,V);
	`múa
();;

72 0x7ef5: 
m≠byã2
[5]=
V
;
	`VROM_BANK1
(0x1c00,V);
	`múa
();;

73 0x7ef6: 
m≠byã1
[0]=
V
;
	`múa
();;

75 0x7efb: 
	`ROM_BANK8
(0x8000,
V
);;

77 0x7efc: 
	`ROM_BANK8
(0xA000,
V
);;

79 0x7eff: 
	`ROM_BANK8
(0xC000,
V
);;

81 
	}
}

83 
	$booga
(
vîsi⁄
)

85 
	`múa
();

86 
	}
}

88 
	$M≠≥r80_öô
()

90 
	`SëWrôeH™dÀr
(0x4020,0x7fff,
M≠≥r80_wrôe
);

91 
M≠SèãRe°‹e
=
booga
;

92 
isfu
=0;

93 
	}
}

95 
	$M≠≥r207_öô
()

97 
	`M≠≥r80_öô
();

98 
isfu
=1;

99 
PPU_hook
=
Fudou_PPU
;

100 
	}
}

	@mappers/82.c

21 
	~"m≠öc.h
"

23 
	#˘æ
 
m≠byã1
[6]

	)

25 
	$DoCHR
()

27 
x
;

29 
x
=0;x<2;x++)

30 
	`VROM_BANK2
((
x
<<11)|((
˘æ
&2)<<11),
m≠byã1
[x]>>1);

31 
x
=0;x<4;x++)

32 
	`VROM_BANK1
((
x
<<10Ë| (((
˘æ
&2)^2)<<11),
m≠byã1
[2+x]);

33 
	}
}

35 
	$DECLFW
(
M≠≥r82_wrôe
)

37 if(
A
<=0x7EF5)

39 
m≠byã1
[
A
&7]=
V
;

40 
	`DoCHR
();

43 
A
)

45 0x7ef6:
˘æ
=
V
&3;

46 
	`MIRROR_SET2
(
V
&1);

47 
	`DoCHR
();

49 0x7eÁ:
V
>>=2;
m≠byã2
[0]=V;
	`ROM_BANK8
(0x8000,V);;

50 0x7efb:
V
>>=2;
m≠byã2
[1]=V;
	`ROM_BANK8
(0xa000,V);;

51 0x7efc:
V
>>=2;
m≠byã2
[2]=V;
	`ROM_BANK8
(0xc000,V);;

53 
	}
}

55 
	$M≠≥r82_öô
()

57 
	`ROM_BANK8
(0xE000,~0);

60 
	`SëWrôeH™dÀr
(0x7ef0,0x7efc,
M≠≥r82_wrôe
);

61 
	}
}

	@mappers/83.c

21 
	~"m≠öc.h
"

29 
	$FP_FASTAPASS
(1Ë
	$m83IRQHook
(
a
)

31 if(
IRQa
)

33 
IRQCou¡
-=
a
;

34 if(
IRQCou¡
<0)

36 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

37 
IRQa
=0;

38 
IRQCou¡
=0xFFFF;

41 
	}
}

43 
	$DECLFW
(
wæow
)

45 
m≠byã4
[
A
&3]=
V
;

46 
	}
}

48 
	$DECLFR
(
rdlow
)

50  
m≠byã4
[
A
&3];

51 
	}
}

53 
	$m83¥g
()

55 
	`ROM_BANK16
(0x8000,(
m≠byã1
[0]&0x3F));

56 
	`ROM_BANK16
(0xC000,(
m≠byã1
[0]&0x30)|0xF);

57 
	}
}

59 
	$m83chr
()

70 
x
;

71 
x
=0;x<8;x++)

72 
	`VROM_BANK1
(
x
*0x400,
m≠byã2
[x]|((
m≠byã1
[0]&0x30)<<4));

74 
	}
}

76 
	$DECLFW
(
M≠≥r83_wrôe
)

79 
A
)

86 
m≠byã1
[0]=
V
;

87 
	`m83¥g
();

88 
	`m83chr
();

92 
m≠byã3
[0]=
V
&0x80;

93 
V
&0x3)

95 0x00:
	`MIRROR_SET2
(1);;

96 0x01:
	`MIRROR_SET2
(0);;

97 0x02:
	`⁄emú
(0);;

98 0x03:
	`⁄emú
(1);;

101 0x8200:
IRQCou¡
&=0xFF00;IRQCou¡|=
V
;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

102 0x8201:
IRQa
=
m≠byã3
[0];
IRQCou¡
&=0xFF;IRQCou¡|=
V
<<8;;

103 0x8300:
	`ROM_BANK8
(0x8000,
V
);;

104 0x8301:
	`ROM_BANK8
(0xA000,
V
);;

105 0x8302:
	`ROM_BANK8
(0xC000,
V
);;

106 0x8310:
m≠byã2
[0]=
V
;
	`m83chr
();;

107 0x8311:
m≠byã2
[1]=
V
;
	`m83chr
();;

108 0x8312:
m≠byã2
[2]=
V
;
	`m83chr
();;

109 0x8313:
m≠byã2
[3]=
V
;
	`m83chr
();;

110 0x8314:
m≠byã2
[4]=
V
;
	`m83chr
();;

111 0x8315:
m≠byã2
[5]=
V
;
	`m83chr
();;

112 0x8316:
m≠byã2
[6]=
V
;
	`m83chr
();;

113 0x8317:
m≠byã2
[7]=
V
;
	`m83chr
();;

114 0x8318:
m≠byã1
[1]=
V
;
	`m83¥g
();;

118 
	}
}

120 
	$M≠≥r83_öô
()

122 
	`ROM_BANK8
(0xc000,0x1e);

123 
	`ROM_BANK8
(0xe000,0x1f);

125 
M≠IRQHook
=
m83IRQHook
;

127 
	`SëRódH™dÀr
(0x5100,0x5103,
rdlow
);

128 
	`SëWrôeH™dÀr
(0x5100,0x5103,
wæow
);

129 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r83_wrôe
);

130 
m≠byã1
[1]=0xF;

131 
	}
}

	@mappers/85.c

21 
	~"m≠öc.h
"

23 
	#vr˘emp
 
m≠byã1
[0]

	)

24 
uöt8
 
	gödox
;

26 
	~"emu2413.h
"

28 
	gacou¡
=0;

30 
OPLL
 *
	gVRC7Sound
=
NULL
;

31 
	gdwave
=0;

33 
	$DoVRC7Sound
()

35 
öt32
 
z
,
a
;

38 
z
=((
SOUNDTS
<<16)/
soundtsöc
)>>4;

39 
a
=
z
-
dwave
;

41 
	`moocow
(
VRC7Sound
, (
öt32
 *)&
Wave
[
dwave
], 
a
, 1);

43 
dwave
+=
a
;

44 
	}
}

46 
	$Upd©eOPLNEO
(
öt32
 *
Wave
, 
Cou¡
)

48 
	`moocow
(
VRC7Sound
, 
Wave
, 
Cou¡
, 4);

49 
	}
}

51 
	$Upd©eOPL
(
Cou¡
)

53 
öt32
 
z
,
a
;

55 
z
=((
SOUNDTS
<<16)/
soundtsöc
)>>4;

56 
a
=
z
-
dwave
;

58 if(
VRC7Sound
 && 
a
)

59 
	`moocow
(
VRC7Sound
, (
öt32
 *)&
Wave
[
dwave
], 
a
, 1);

61 
dwave
=0;

62 
	}
}

64 
INLINE
 
	$DaMúr‹
(
V
)

66 
ßÕo
[4]={
MI_V
,
MI_H
,
MI_0
,
MI_1
};

67 
	`£tmúr‹
(
ßÕo
[
V
&3]);

68 
	}
}

70 
	$DECLFW
(
M≠≥r85_wrôe
)

72 
A
|=(A&8)<<1;

74 if(
A
>=0xa000 && A<=0xDFFF)

77 
A
&=0xF010;

79 
x
=((
A
>>4)&1)|((A-0xA000)>>11);

80 
m≠byã3
[
x
]=
V
;

81 
	`£tchr1
(
x
<<10,
V
);

84 if(
A
==0x9030)

86 if(
FSëtögs
.
SndR©e
)

88 
	`OPLL_wrôeReg
(
VRC7Sound
, 
ödox
, 
V
);

89 
GameExpSound
.
Fûl
=
Upd©eOPL
;

90 
GameExpSound
.
NeoFûl
=
Upd©eOPLNEO
;

93 
A
&0xF010)

95 0x8000:
m≠byã2
[0]=
V
;
	`£çrg8
(0x8000,V);;

96 0x8010:
m≠byã2
[1]=
V
;
	`£çrg8
(0xa000,V);;

97 0x9000:
m≠byã2
[2]=
V
;
	`£çrg8
(0xc000,V);;

98 0x9010:
ödox
=
V
;;

99 0xe000:
m≠byã2
[3]=
V
;
	`DaMúr‹
(V);;

100 0xE010:
IRQL©ch
=
V
;

101 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

103 0xF000:
IRQa
=
V
&2;

104 
vr˘emp
=
V
&1;

105 if(
V
&2Ë{
IRQCou¡
=
IRQL©ch
;}

106 
acou¡
=0;

107 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

109 0xf010:if(
vr˘emp
Ë
IRQa
=1;

110 
IRQa
=0;

111 
	`X6502_IRQEnd
(
FCEU_IQEXT
);

114 
	}
}

116 
	$FP_FASTAPASS
(1Ë
	$K⁄amiIRQHook
(
a
)

118 
	#ACBOO
 341

	)

120 if(
IRQa
)

122 
acou¡
+=
a
*3;

124 if(
acou¡
>=
ACBOO
)

126 
dﬂgaöbub
:
acou¡
-=
ACBOO
;

127 
IRQCou¡
++;

128 if(
IRQCou¡
&0x100Ë{
	`X6502_IRQBegö
(
FCEU_IQEXT
);IRQCou¡=
IRQL©ch
;}

129 if(
acou¡
>=
ACBOO
Ë
dﬂgaöbub
;

132 
	}
}

134 
	$M≠≥r85_SèãRe°‹e
(
vîsi⁄
)

136 
x
;

138 if(
vîsi⁄
<7200)

140 
x
=0;x<8;x++)

141 
m≠byã3
[
x
]=
CHRB™kLi°
[x];

142 
x
=0;x<3;x++)

143 
m≠byã2
[
x
]=
PRGB™kLi°
[x];

144 
m≠byã2
[3]=(
Múr‹ög
<0x10)?Mirroring:Mirroring-0xE;

147 
x
=0;x<8;x++)

148 
	`£tchr1
(
x
*0x400,
m≠byã3
[x]);

149 
x
=0;x<3;x++)

150 
	`£çrg8
(0x8000+
x
*8192,
m≠byã2
[x]);

151 
	`DaMúr‹
(
m≠byã2
[3]);

153 
	}
}

155 
	$M85SC
()

157 if(
VRC7Sound
)

158 
	`OPLL_£t_øã
(
VRC7Sound
, 
FSëtögs
.
SndR©e
);

159 
	}
}

161 
	$M85SKûl
()

163 if(
VRC7Sound
)

164 
	`OPLL_dñëe
(
VRC7Sound
);

165 
VRC7Sound
=
NULL
;

166 
	}
}

168 
	$VRC7SI
()

170 
GameExpSound
.
RCh™ge
=
M85SC
;

171 
GameExpSound
.
Kûl
=
M85SKûl
;

173 
VRC7Sound
=
	`OPLL_√w
(3579545, 
FSëtögs
.
SndR©e
?FSettings.SndRate:44100);

174 
	`OPLL_ª£t
(
VRC7Sound
);

175 
	`OPLL_ª£t
(
VRC7Sound
);

176 
	}
}

178 
	$NSFVRC7_Inô
()

180 
	`SëWrôeH™dÀr
(0x9010,0x901F,
M≠≥r85_wrôe
);

181 
	`SëWrôeH™dÀr
(0x9030,0x903F,
M≠≥r85_wrôe
);

182 
	`VRC7SI
();

183 
	}
}

185 
	$M≠≥r85_öô
()

187 
M≠IRQHook
=
K⁄amiIRQHook
;

188 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r85_wrôe
);

189 
GameSèãRe°‹e
=
M≠≥r85_SèãRe°‹e
;

190 if(!
VROM_size
)

191 
	`SëupC¨tCHRM≠pög
(0, 
CHRRAM
, 8192, 1);

194 
	`VRC7SI
();

195 
	}
}

	@mappers/86.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r86_wrôe
)

25 if(
A
>=0x6000 && A<=0x6fFF)

27 
	`VROM_BANK8
((
V
&3)|((V>>4)&4));

28 
	`ROM_BANK32
((
V
>>4)&3);

33 
	}
}

34 
	$M≠≥r86_öô
()

36 
	`SëWrôeH™dÀr
(0x6000,0x6fff,
M≠≥r86_wrôe
);

37 
	`SëWrôeH™dÀr
(0x4020,0xffff,
M≠≥r86_wrôe
);

38 
	}
}

	@mappers/89.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r89_wrôe
)

25 
	`VROM_BANK8
((
V
&7)|((V>>4)&8));

26 
	`ROM_BANK16
(0x8000,(
V
>>4)&7);

27 
	`⁄emú
((
V
>>3)&1);

28 
	}
}

30 
	$M≠≥r89_öô
()

32 
Múr‹ög
=0;

33 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r89_wrôe
);

34 
	}
}

	@mappers/91.c

21 
	~"m≠öc.h
"

23 
	$DECLFW
(
M≠≥r91_wrôe
)

27 
A
&=0xF007;

29 if(
A
>=0x6000 && A<=0x6003Ë
	`VROM_BANK2
((A&3)*2048,
V
);

30 
A
&0xF003)

33 0x7001:
	`ROM_BANK8
(0x8000+(
A
&1)*8192,
V
);;

34 0x7002:
IRQa
=
IRQCou¡
=0;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

35 0x7003:
IRQa
=1;
	`X6502_IRQEnd
(
FCEU_IQEXT
);;

40 
	}
}

42 
	$M≠≥r91_hb
()

44 if(
IRQCou¡
<8 && 
IRQa
)

46 
IRQCou¡
++;

47 if(
IRQCou¡
>=8)

49 
	`X6502_IRQBegö
(
FCEU_IQEXT
);

52 
	}
}

54 
	$M≠≥r91_öô
()

56 
	`SëWrôeH™dÀr
(0x4020,0xFFFF,
M≠≥r91_wrôe
);

57 
GameHBIRQHook
=
M≠≥r91_hb
;

58 
	}
}

	@mappers/92.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r92_wrôe
)

27 
uöt8
 
ªg
=(
A
&0xF0)>>4;

28 
uöt8
 
b™k
=
A
&0xF;

30 if(
A
>=0x9000)

32 if(
ªg
==0xDË
	`ROM_BANK16
(0xc000,
b™k
);

33 if(
ªg
==0xEË
	`VROM_BANK8
(
b™k
);

37 if(
ªg
==0xBË
	`ROM_BANK16
(0xc000,
b™k
);

38 if(
ªg
==0x7Ë
	`VROM_BANK8
(
b™k
);

40 
	}
}

42 
	$M≠≥r92_öô
()

44 
	`SëWrôeH™dÀr
(0x8000,0xFFFF,
M≠≥r92_wrôe
);

45 
	}
}

	@mappers/97.c

21 
	~"m≠öc.h
"

25 
	$DECLFW
(
M≠≥r97_wrôe
)

27 
	`ROM_BANK16
(0xC000,
V
&15);

28 
V
>>6)

31 1:
	`MIRROR_SET2
(0);;

32 2:
	`MIRROR_SET2
(1);;

35 
	}
}

37 
	$M≠≥r97_öô
()

39 
	`ROM_BANK16
(0x8000,~0);

40 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r97_wrôe
);

41 
	}
}

	@mappers/99.c

21 
	~"m≠öc.h
"

23 
wrôefunc
 
	gﬁdm‹ko
;

25 
	$DECLFW
(
m‹ko
)

27 
	`VROM_BANK8
((
V
>>2)&1);

28 
	`ﬁdm‹ko
(
A
,
V
);

29 
	`£çrg8
(0x8000,
V
&0x4);

30 
	}
}

32 
	$M≠≥r99_öô
()

34 
	`ROM_BANK32
(0);

35 
ﬁdm‹ko
=
	`GëWrôeH™dÀr
(0x4016);

36 
	`SëWrôeH™dÀr
(0x4016,0x4016,
m‹ko
);

37 
	}
}

	@mappers/emu2413.c

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~<m©h.h
>

53 
	~"emu2413.h
"

55 c⁄° 
	gdeÁu…_ö°
[15][8] = {

56 
	~"vrc7t⁄e.h
"

60 
	#PG_BITS
 9

	)

61 
	#PG_WIDTH
 (1<<
PG_BITS
)

	)

64 
	#DP_BITS
 18

	)

65 
	#DP_WIDTH
 (1<<
DP_BITS
)

	)

66 
	#DP_BASE_BITS
 (
DP_BITS
 - 
PG_BITS
)

	)

69 
	#DB_BITS
 8

	)

70 
	#DB_STEP
 (48.0/(1<<
DB_BITS
))

	)

71 
	#DB_MUTE
 (1<<
DB_BITS
)

	)

74 
	#EG_STEP
 0.375

	)

75 
	#EG_BITS
 7

	)

76 
	#EG_MUTE
 (1<<
EG_BITS
)

	)

79 
	#TL_STEP
 0.75

	)

80 
	#TL_BITS
 6

	)

81 
	#TL_MUTE
 (1<<
TL_BITS
)

	)

84 
	#SL_STEP
 3.0

	)

85 
	#SL_BITS
 4

	)

86 
	#SL_MUTE
 (1<<
SL_BITS
)

	)

88 
	#EG2DB
(
d
Ë((d)*(
e_öt32
)(
EG_STEP
/
DB_STEP
))

	)

89 
	#TL2EG
(
d
Ë((d)*(
e_öt32
)(
TL_STEP
/
EG_STEP
))

	)

90 
	#SL2EG
(
d
Ë((d)*(
e_öt32
)(
SL_STEP
/
EG_STEP
))

	)

92 
	#DB_POS
(
x
Ë(
e_uöt32
)((x)/
DB_STEP
)

	)

93 
	#DB_NEG
(
x
Ë(
e_uöt32
)(
DB_MUTE
+DB_MUTE+(x)/
DB_STEP
)

	)

96 
	#DB2LIN_AMP_BITS
 11

	)

97 
	#SLOT_AMP_BITS
 (
DB2LIN_AMP_BITS
)

	)

100 
	#EG_DP_BITS
 22

	)

101 
	#EG_DP_WIDTH
 (1<<
EG_DP_BITS
)

	)

104 
	#PM_PG_BITS
 8

	)

105 
	#PM_PG_WIDTH
 (1<<
PM_PG_BITS
)

	)

106 
	#PM_DP_BITS
 16

	)

107 
	#PM_DP_WIDTH
 (1<<
PM_DP_BITS
)

	)

108 
	#AM_PG_BITS
 8

	)

109 
	#AM_PG_WIDTH
 (1<<
AM_PG_BITS
)

	)

110 
	#AM_DP_BITS
 16

	)

111 
	#AM_DP_WIDTH
 (1<<
AM_DP_BITS
)

	)

114 
	#PM_AMP_BITS
 8

	)

115 
	#PM_AMP
 (1<<
PM_AMP_BITS
)

	)

118 
	#PM_SPEED
 6.4

	)

119 
	#PM_DEPTH
 13.75

	)

122 
	#AM_SPEED
 3.7

	)

124 
	#AM_DEPTH
 2.4

	)

127 
	#HIGHBITS
(
c
,
b
Ë((c)>>(b))

	)

130 
	#LOWBITS
(
c
,
b
Ë((c)&((1<<(b))-1))

	)

133 
	#EXPAND_BITS
(
x
,
s
,
d
Ë((x)<<((d)-(s)))

	)

136 
	#EXPAND_BITS_X
(
x
,
s
,
d
Ë(((x)<<((d)-(s)))|((1<<((d)-(s)))-1))

	)

139 
	#øã_adju°
(
x
Ë(
øã
==49716?x:(
e_uöt32
)(()(x)*
˛k
/72/øã + 0.5)Ë

	)

141 
	#MOD
(
o
,
x
Ë(&(o)->
¶Ÿ
[(x)<<1])

	)

142 
	#CAR
(
o
,
x
Ë(&(o)->
¶Ÿ
[((x)<<1)|1])

	)

144 
	#BIT
(
s
,
b
Ë(((s)>>(b))&1)

	)

147 
e_uöt32
 
	g˛k
 = 844451141;

149 
e_uöt32
 
	gøã
 = 3354932;

152 
e_uöt16
 
	gfuŒsöèbÀ
[
PG_WIDTH
];

153 
e_uöt16
 
	ghÆfsöèbÀ
[
PG_WIDTH
];

155 
e_uöt16
 *
	gwavef‹m
[2] = { 
fuŒsöèbÀ
, 
hÆfsöèbÀ
 };

158 
e_öt32
 
	gpmèbÀ
[
PM_PG_WIDTH
];

159 
e_öt32
 
	gamèbÀ
[
AM_PG_WIDTH
];

162 
e_uöt32
 
	gpm_dpha£
;

163 
e_uöt32
 
	gam_dpha£
;

166 
e_öt16
 
	gDB2LIN_TABLE
[(
DB_MUTE
 + DB_MUTE) * 2];

169 
e_uöt16
 
	gAR_ADJUST_TABLE
[1 << 
EG_BITS
];

173 { 
	mSETTLE
, 
	mATTACK
, 
	mDECAY
, 
	mSUSHOLD
, 
	mSUSTINE
, 
	mRELEASE
, 
	mFINISH
 };

176 
e_uöt32
 
	gdpha£ARTabÀ
[16][16];

178 
e_uöt32
 
	gdpha£DRTabÀ
[16][16];

181 
e_uöt32
 
	gélTabÀ
[16][8][1 << 
TL_BITS
][4];

182 
e_öt32
 
	grksTabÀ
[2][8][2];

185 
e_uöt32
 
	gdpha£TabÀ
[512][8][16];

192 
INLINE
 
e_öt32


193 
	$Mö
 (
e_öt32
 
i
,É_öt32 
j
)

195 if(
i
 < 
j
)

196  
i
;

198  
j
;

199 
	}
}

203 
	$makeAdju°TabÀ
 ()

205 
e_öt32
 
i
;

207 
AR_ADJUST_TABLE
[0] = (1 << 
EG_BITS
);

208 
i
 = 1; i < 128; i++)

209 
AR_ADJUST_TABLE
[
i
] = (
e_uöt16
Ë((Ë(1 << 
EG_BITS
Ë- 1 - (1 << EG_BITSË* 
	`log
 (i) /Üog (128));

210 
	}
}

215 
	$makeDB2LöTabÀ
 ()

217 
e_öt32
 
i
;

219 
i
 = 0; i < 
DB_MUTE
 + DB_MUTE; i++)

221 
DB2LIN_TABLE
[
i
] = (
e_öt16
Ë((Ë((1 << 
DB2LIN_AMP_BITS
Ë- 1Ë* 
	`pow
 (10, -(Ëò* 
DB_STEP
 / 20));

222 if(
i
 >
DB_MUTE
Ë
DB2LIN_TABLE
[i] = 0;

223 
DB2LIN_TABLE
[
i
 + 
DB_MUTE
 + DB_MUTE] = (
e_öt16
) (-DB2LIN_TABLE[i]);

225 
	}
}

228 
e_öt32


229 
	$lö2db
 (
d
)

231 if(
d
 == 0)

232  (
DB_MUTE
 - 1);

234  
	`Mö
 (-(
e_öt32
Ë(20.0 * 
	`log10
 (
d
Ë/ 
DB_STEP
), 
DB_MUTE
-1);

235 
	}
}

240 
	$makeSöTabÀ
 ()

242 
e_öt32
 
i
;

244 
i
 = 0; i < 
PG_WIDTH
 / 4; i++)

246 
fuŒsöèbÀ
[
i
] = (
e_uöt32
Ë
	`lö2db
 (
	`sö
 (2.0 * 
PI
 * i / 
PG_WIDTH
) );

249 
i
 = 0; i < 
PG_WIDTH
 / 4; i++)

251 
fuŒsöèbÀ
[
PG_WIDTH
 / 2 - 1 - 
i
] = fullsintable[i];

254 
i
 = 0; i < 
PG_WIDTH
 / 2; i++)

256 
fuŒsöèbÀ
[
PG_WIDTH
 / 2 + 
i
] = (
e_uöt32
Ë(
DB_MUTE
 + DB_MUTE + fullsintable[i]);

259 
i
 = 0; i < 
PG_WIDTH
 / 2; i++)

260 
hÆfsöèbÀ
[
i
] = 
fuŒsöèbÀ
[i];

261 
i
 = 
PG_WIDTH
 / 2; i < PG_WIDTH; i++)

262 
hÆfsöèbÀ
[
i
] = 
fuŒsöèbÀ
[0];

263 
	}
}

267 
	$makePmTabÀ
 ()

269 
e_öt32
 
i
;

271 
i
 = 0; i < 
PM_PG_WIDTH
; i++)

272 
pmèbÀ
[
i
] = (
e_öt32
Ë((Ë
PM_AMP
 * 
	`pow
 (2, (Ë
PM_DEPTH
 * 
	`sö
 (2.0 * 
PI
 * i / 
PM_PG_WIDTH
) / 1200));

273 
	}
}

277 
	$makeAmTabÀ
 ()

279 
e_öt32
 
i
;

281 
i
 = 0; i < 
AM_PG_WIDTH
; i++)

282 
amèbÀ
[
i
] = (
e_öt32
Ë((Ë
AM_DEPTH
 / 2 / 
DB_STEP
 * (1.0 + 
	`sö
 (2.0 * 
PI
 * i / 
PM_PG_WIDTH
)));

283 
	}
}

287 
	$makeDpha£TabÀ
 ()

289 
e_uöt32
 
‚um
, 
block
, 
ML
;

290 
e_uöt32
 
m…abÀ
[16] =

293 
‚um
 = 0; fnum < 512; fnum++)

294 
block
 = 0; block < 8; block++)

295 
ML
 = 0; ML < 16; ML++)

296 
dpha£TabÀ
[
‚um
][
block
][
ML
] = 
	`øã_adju°
 (((‚um * 
m…abÀ
[ML]Ë<< blockË>> (20 - 
DP_BITS
));

297 
	}
}

300 
	$makeTŒTabÀ
 ()

302 
	#dB2
(
x
Ë((x)*2)

	)

304 
k…abÀ
[16] = {

305 
	`dB2
 (0.000), dB2 (9.000), dB2 (12.000), dB2 (13.875), dB2 (15.000), dB2 (16.125), dB2 (16.875), dB2 (17.625),

306 
	`dB2
 (18.000), dB2 (18.750), dB2 (19.125), dB2 (19.500), dB2 (19.875), dB2 (20.250), dB2 (20.625), dB2 (21.000)

309 
e_öt32
 
tmp
;

310 
e_öt32
 
‚um
, 
block
, 
TL
, 
KL
;

312 
‚um
 = 0; fnum < 16; fnum++)

313 
block
 = 0; block < 8; block++)

314 
TL
 = 0; TL < 64; TL++)

315 
KL
 = 0; KL < 4; KL++)

317 if(
KL
 == 0)

319 
élTabÀ
[
‚um
][
block
][
TL
][
KL
] = 
	`TL2EG
 (TL);

323 
tmp
 = (
e_öt32
Ë(
k…abÀ
[
‚um
] - 
	`dB2
 (3.000Ë* (7 - 
block
));

324 if(
tmp
 <= 0)

325 
élTabÀ
[
‚um
][
block
][
TL
][
KL
] = 
	`TL2EG
 (TL);

327 
élTabÀ
[
‚um
][
block
][
TL
][
KL
] = (
e_uöt32
Ë((
tmp
 >> (3 - KL)Ë/ 
EG_STEP
Ë+ 
	`TL2EG
 (TL);

330 
	}
}

332 #ifde‡
USE_SPEC_ENV_SPEED


333 
	g©ècktime
[16][4] = {

352 
	gdeˇytime
[16][4] = {

374 
	$makeDpha£ARTabÀ
 ()

376 
e_öt32
 
AR
, 
Rks
, 
RM
, 
RL
;

377 #ifde‡
USE_SPEC_ENV_SPEED


378 
e_uöt32
 
©èckèbÀ
[16][4];

380 
RM
 = 0; RM < 16; RM++)

381 
RL
 = 0; RL < 4; RL++)

383 if(
RM
 == 0)

384 
©èckèbÀ
[
RM
][
RL
] = 0;

385 if(
RM
 == 15)

386 
©èckèbÀ
[
RM
][
RL
] = 
EG_DP_WIDTH
;

388 
©èckèbÀ
[
RM
][
RL
] = (
e_uöt32
Ë((Ë(1 << 
EG_DP_BITS
Ë/ (
©ècktime
[RM][RL] * 3579545 / 72000));

393 
AR
 = 0; AR < 16; AR++)

394 
Rks
 = 0; Rks < 16; Rks++)

396 
RM
 = 
AR
 + (
Rks
 >> 2);

397 
RL
 = 
Rks
 & 3;

398 if(
RM
 > 15)

399 
RM
 = 15;

400 
AR
)

403 
dpha£ARTabÀ
[
AR
][
Rks
] = 0;

406 
dpha£ARTabÀ
[
AR
][
Rks
] = 0;

409 #ifde‡
USE_SPEC_ENV_SPEED


410 
dpha£ARTabÀ
[
AR
][
Rks
] = 
	`øã_adju°
 (
©èckèbÀ
[
RM
][
RL
]);

412 
dpha£ARTabÀ
[
AR
][
Rks
] = 
	`øã_adju°
 ((3 * (
RL
 + 4Ë<< (
RM
 + 1)));

417 
	}
}

421 
	$makeDpha£DRTabÀ
 ()

423 
e_öt32
 
DR
, 
Rks
, 
RM
, 
RL
;

425 #ifde‡
USE_SPEC_ENV_SPEED


426 
e_uöt32
 
deˇyèbÀ
[16][4];

428 
RM
 = 0; RM < 16; RM++)

429 
RL
 = 0; RL < 4; RL++)

430 if(
RM
 == 0)

431 
deˇyèbÀ
[
RM
][
RL
] = 0;

433 
deˇyèbÀ
[
RM
][
RL
] = (
e_uöt32
Ë((Ë(1 << 
EG_DP_BITS
Ë/ (
deˇytime
[RM][RL] * 3579545 / 72000));

436 
DR
 = 0; DR < 16; DR++)

437 
Rks
 = 0; Rks < 16; Rks++)

439 
RM
 = 
DR
 + (
Rks
 >> 2);

440 
RL
 = 
Rks
 & 3;

441 if(
RM
 > 15)

442 
RM
 = 15;

443 
DR
)

446 
dpha£DRTabÀ
[
DR
][
Rks
] = 0;

449 #ifde‡
USE_SPEC_ENV_SPEED


450 
dpha£DRTabÀ
[
DR
][
Rks
] = 
	`øã_adju°
 (
deˇyèbÀ
[
RM
][
RL
]);

452 
dpha£DRTabÀ
[
DR
][
Rks
] = 
	`øã_adju°
 ((
RL
 + 4Ë<< (
RM
 - 1));

457 
	}
}

460 
	$makeRksTabÀ
 ()

463 
e_öt32
 
‚um8
, 
block
, 
KR
;

465 
‚um8
 = 0; fnum8 < 2; fnum8++)

466 
block
 = 0; block < 8; block++)

467 
KR
 = 0; KR < 2; KR++)

469 if(
KR
 != 0)

470 
rksTabÀ
[
‚um8
][
block
][
KR
] = (block << 1) + fnum8;

472 
rksTabÀ
[
‚um8
][
block
][
KR
] = block >> 1;

474 
	}
}

482 
INLINE
 
e_uöt32


483 
	$ˇlc_eg_dpha£
 (
OPLL_SLOT
 * 
¶Ÿ
)

486 
¶Ÿ
->
eg_mode
)

488 
ATTACK
:

489  
dpha£ARTabÀ
[
¶Ÿ
->
∑tch
.
AR
][¶Ÿ->
rks
];

491 
DECAY
:

492  
dpha£DRTabÀ
[
¶Ÿ
->
∑tch
.
DR
][¶Ÿ->
rks
];

494 
SUSHOLD
:

497 
SUSTINE
:

498  
dpha£DRTabÀ
[
¶Ÿ
->
∑tch
.
RR
][¶Ÿ->
rks
];

500 
RELEASE
:

501 if(
¶Ÿ
->
su°öe
)

502  
dpha£DRTabÀ
[5][
¶Ÿ
->
rks
];

503 if(
¶Ÿ
->
∑tch
.
EG
)

504  
dpha£DRTabÀ
[
¶Ÿ
->
∑tch
.
RR
][¶Ÿ->
rks
];

506  
dpha£DRTabÀ
[7][
¶Ÿ
->
rks
];

508 
FINISH
:

514 
	}
}

522 
	#UPDATE_PG
(
S
Ë(S)->
dpha£
 = 
dpha£TabÀ
[(S)->
‚um
][(S)->
block
][(S)->
∑tch
.
ML
]

	)

523 
	#UPDATE_TLL
(
S
)\

524 (((
S
)->
ty≥
==0)?\

525 ((
S
)->
él
 = 
élTabÀ
[((S)->
‚um
)>>5][(S)->
block
][(S)->
∑tch
.
TL
][(S)->∑tch.
KL
]):\

526 ((
S
)->
él
 = 
élTabÀ
[((S)->
‚um
)>>5][(S)->
block
][(S)->
vﬁume
][(S)->
∑tch
.
KL
]))

	)

527 
	#UPDATE_RKS
(
S
Ë(S)->
rks
 = 
rksTabÀ
[((S)->
‚um
)>>8][(S)->
block
][(S)->
∑tch
.
KR
]

	)

528 
	#UPDATE_WF
(
S
Ë(S)->
sötbl
 = 
wavef‹m
[(S)->
∑tch
.
WF
]

	)

529 
	#UPDATE_EG
(
S
Ë(S)->
eg_dpha£
 = 
	`ˇlc_eg_dpha£
(S)

	)

530 
	#UPDATE_ALL
(
S
)\

531 
	`UPDATE_PG
(
S
);\

532 
	`UPDATE_TLL
(
S
);\

533 
	`UPDATE_RKS
(
S
);\

534 
	`UPDATE_WF
(
S
); \

535 
	`UPDATE_EG
(
S
Ë

	)

539 
INLINE
 

540 
	$¶ŸOn
 (
OPLL_SLOT
 * 
¶Ÿ
)

542 
¶Ÿ
->
eg_mode
 = 
ATTACK
;

543 
¶Ÿ
->
eg_pha£
 = 0;

544 
¶Ÿ
->
pha£
 = 0;

545 
	}
}

548 
INLINE
 

549 
	$¶ŸOn2
 (
OPLL_SLOT
 * 
¶Ÿ
)

551 
¶Ÿ
->
eg_mode
 = 
ATTACK
;

552 
¶Ÿ
->
eg_pha£
 = 0;

553 
	}
}

556 
INLINE
 

557 
	$¶ŸOff
 (
OPLL_SLOT
 * 
¶Ÿ
)

559 if(
¶Ÿ
->
eg_mode
 =
ATTACK
)

560 
¶Ÿ
->
eg_pha£
 = 
	`EXPAND_BITS
 (
AR_ADJUST_TABLE
[
	`HIGHBITS
 (¶Ÿ->eg_pha£, 
EG_DP_BITS
 - 
EG_BITS
)], EG_BITS, EG_DP_BITS);

561 
¶Ÿ
->
eg_mode
 = 
RELEASE
;

562 
	}
}

565 
INLINE
 

566 
	$keyOn
 (
OPLL
 * 
›Œ
, 
e_öt32
 
i
)

568 if(!
›Œ
->
¶Ÿ_⁄_Êag
[
i
 * 2])

569 
	`¶ŸOn
 (
	`MOD
(
›Œ
,
i
));

570 if(!
›Œ
->
¶Ÿ_⁄_Êag
[
i
 * 2 + 1])

571 
	`¶ŸOn
 (
	`CAR
(
›Œ
,
i
));

572 
›Œ
->
key_°©us
[
i
] = 1;

573 
	}
}

576 
INLINE
 

577 
	$keyOff
 (
OPLL
 * 
›Œ
, 
e_öt32
 
i
)

579 if(
›Œ
->
¶Ÿ_⁄_Êag
[
i
 * 2 + 1])

580 
	`¶ŸOff
 (
	`CAR
(
›Œ
,
i
));

581 
›Œ
->
key_°©us
[
i
] = 0;

582 
	}
}

585 
INLINE
 

586 
	$£tSu°öe
 (
OPLL
 * 
›Œ
, 
e_öt32
 
c
,É_öt32 
su°öe
)

588 
	`CAR
(
›Œ
,
c
)->
su°öe
 = sustine;

589 if(
	`MOD
(
›Œ
,
c
)->
ty≥
)

590 
	`MOD
(
›Œ
,
c
)->
su°öe
 = sustine;

591 
	}
}

594 
INLINE
 

595 
	$£tVﬁume
 (
OPLL
 * 
›Œ
, 
e_öt32
 
c
,É_öt32 
vﬁume
)

597 
	`CAR
(
›Œ
,
c
)->
vﬁume
 = volume;

598 
	}
}

600 
INLINE
 

601 
	$£tSlŸVﬁume
 (
OPLL_SLOT
 * 
¶Ÿ
, 
e_öt32
 
vﬁume
)

603 
¶Ÿ
->
vﬁume
 = volume;

604 
	}
}

607 
INLINE
 

608 
	$£tFnumbî
 (
OPLL
 * 
›Œ
, 
e_öt32
 
c
,É_öt32 
‚um
)

610 
	`CAR
(
›Œ
,
c
)->
‚um
 = fnum;

611 
	`MOD
(
›Œ
,
c
)->
‚um
 = fnum;

612 
	}
}

615 
INLINE
 

616 
	$£tBlock
 (
OPLL
 * 
›Œ
, 
e_öt32
 
c
,É_öt32 
block
)

618 
	`CAR
(
›Œ
,
c
)->
block
 = block;

619 
	`MOD
(
›Œ
,
c
)->
block
 = block;

620 
	}
}

622 
INLINE
 
	$upd©e_key_°©us
 (
OPLL
 * 
›Œ
)

624 
ch
;

626 
ch
 = 0; ch < 6; ch++)

627 
›Œ
->
¶Ÿ_⁄_Êag
[
ch
 * 2] = o∂l->¶Ÿ_⁄_Êag[ch * 2 + 1] = (›Œ->
HiFªq
[ch]) & 0x10;

628 
	}
}

637 
	$OPLL_SLOT_ª£t
 (
OPLL_SLOT
 * 
¶Ÿ
, 
ty≥
)

639 
¶Ÿ
->
ty≥
 =Åype;

640 
¶Ÿ
->
sötbl
 = 
wavef‹m
[0];

641 
¶Ÿ
->
pha£
 = 0;

642 
¶Ÿ
->
dpha£
 = 0;

643 
¶Ÿ
->
ouçut
[0] = 0;

644 
¶Ÿ
->
ouçut
[1] = 0;

645 
¶Ÿ
->
„edback
 = 0;

646 
¶Ÿ
->
eg_mode
 = 
SETTLE
;

647 
¶Ÿ
->
eg_pha£
 = 
EG_DP_WIDTH
;

648 
¶Ÿ
->
eg_dpha£
 = 0;

649 
¶Ÿ
->
rks
 = 0;

650 
¶Ÿ
->
él
 = 0;

651 
¶Ÿ
->
su°öe
 = 0;

652 
¶Ÿ
->
‚um
 = 0;

653 
¶Ÿ
->
block
 = 0;

654 
¶Ÿ
->
vﬁume
 = 0;

655 
¶Ÿ
->
pgout
 = 0;

656 
¶Ÿ
->
egout
 = 0;

657 
	}
}

660 
	$öã∫Æ_ª‰esh
 ()

662 
	`makeDpha£TabÀ
 ();

663 
	`makeDpha£ARTabÀ
 ();

664 
	`makeDpha£DRTabÀ
 ();

665 
pm_dpha£
 = (
e_uöt32
Ë
	`øã_adju°
 (
PM_SPEED
 * 
PM_DP_WIDTH
 / (
˛k
 / 72));

666 
am_dpha£
 = (
e_uöt32
Ë
	`øã_adju°
 (
AM_SPEED
 * 
AM_DP_WIDTH
 / (
˛k
 / 72));

667 
	}
}

670 
	$makëabÀs
 (
e_uöt32
 
c
,É_uöt32 
r
)

672 if(
c
 !
˛k
)

674 
˛k
 = 
c
;

675 
	`makePmTabÀ
 ();

676 
	`makeAmTabÀ
 ();

677 
	`makeDB2LöTabÀ
 ();

678 
	`makeAdju°TabÀ
 ();

679 
	`makeTŒTabÀ
 ();

680 
	`makeRksTabÀ
 ();

681 
	`makeSöTabÀ
 ();

685 if(
r
 !
øã
)

687 
øã
 = 
r
;

688 
	`öã∫Æ_ª‰esh
 ();

690 
	}
}

692 
OPLL
 *
	$OPLL_√w
 (
e_uöt32
 
˛k
,É_uöt32 
øã
)

694 
OPLL
 *
›Œ
;

696 
	`makëabÀs
 (
˛k
, 
øã
);

698 
›Œ
 = (
OPLL
 *Ë
	`ˇŒoc
 ( (OPLL), 1);

699 if(
›Œ
 =
NULL
)

700  
NULL
;

702 
›Œ
->
mask
 = 0;

704 
	`OPLL_ª£t
 (
›Œ
);

706  
›Œ
;

707 
	}
}

711 
	$OPLL_dñëe
 (
OPLL
 * 
›Œ
)

713 
	`‰ì
 (
›Œ
);

714 
	}
}

718 
	$OPLL_ª£t
 (
OPLL
 * 
›Œ
)

720 
e_öt32
 
i
;

722 if(!
›Œ
)

725 
›Œ
->
adr
 = 0;

726 
›Œ
->
out
 = 0;

728 
›Œ
->
pm_pha£
 = 0;

729 
›Œ
->
am_pha£
 = 0;

731 
›Œ
->
mask
 = 0;

733 
i
 = 0; i < 12; i++)

734 
	`OPLL_SLOT_ª£t
(&
›Œ
->
¶Ÿ
[
i
], i%2);

736 
i
 = 0; i < 6; i++)

738 
›Œ
->
key_°©us
[
i
] = 0;

742 
i
 = 0; i < 0x40; i++)

743 
	`OPLL_wrôeReg
 (
›Œ
, 
i
, 0);

745 #i‚de‡
EMU2413_COMPACTION


746 
›Œ
->
ªÆ°ï
 = (
e_uöt32
Ë((1 << 31Ë/ 
øã
);

747 
›Œ
->
›Œ°ï
 = (
e_uöt32
Ë((1 << 31Ë/ (
˛k
 / 72));

748 
›Œ
->
›Œtime
 = 0;

750 
	}
}

754 
	$OPLL_f‹˚Re‰esh
 (
OPLL
 * 
›Œ
)

756 
e_öt32
 
i
;

758 if(
›Œ
 =
NULL
)

761 
i
 = 0; i < 12; i++)

763 
	`UPDATE_PG
 (&
›Œ
->
¶Ÿ
[
i
]);

764 
	`UPDATE_RKS
 (&
›Œ
->
¶Ÿ
[
i
]);

765 
	`UPDATE_TLL
 (&
›Œ
->
¶Ÿ
[
i
]);

766 
	`UPDATE_WF
 (&
›Œ
->
¶Ÿ
[
i
]);

767 
	`UPDATE_EG
 (&
›Œ
->
¶Ÿ
[
i
]);

769 
	}
}

772 
	$OPLL_£t_øã
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
r
)

774 if(
›Œ
->
quÆôy
)

775 
øã
 = 49716;

777 
øã
 = 
r
;

778 
	`öã∫Æ_ª‰esh
 ();

779 
øã
 = 
r
;

780 
	}
}

783 
	$OPLL_£t_quÆôy
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
q
)

785 
›Œ
->
quÆôy
 = 
q
;

786 
	`OPLL_£t_øã
 (
›Œ
, 
øã
);

787 
	}
}

795 #if–
SLOT_AMP_BITS
 - 
PG_BITS
 ) > 0

796 
	#wave2_2pi
(
e
Ë–”Ë>> ( 
SLOT_AMP_BITS
 - 
PG_BITS
 ))

	)

798 
	#wave2_2pi
(
e
Ë–”Ë<< ( 
PG_BITS
 - 
SLOT_AMP_BITS
 ))

	)

802 #if–
SLOT_AMP_BITS
 - 
PG_BITS
 - 1 ) == 0

803 
	#wave2_4pi
(
e
Ë”)

	)

804 #ñif–
SLOT_AMP_BITS
 - 
PG_BITS
 - 1 ) > 0

805 
	#wave2_4pi
(
e
Ë–”Ë>> ( 
SLOT_AMP_BITS
 - 
PG_BITS
 - 1 ))

	)

807 
	#wave2_4pi
(
e
Ë–”Ë<< ( 1 + 
PG_BITS
 - 
SLOT_AMP_BITS
 ))

	)

811 #if–
SLOT_AMP_BITS
 - 
PG_BITS
 - 2 ) == 0

812 
	#wave2_8pi
(
e
Ë”)

	)

813 #ñif–
SLOT_AMP_BITS
 - 
PG_BITS
 - 2 ) > 0

814 
	#wave2_8pi
(
e
Ë–”Ë>> ( 
SLOT_AMP_BITS
 - 
PG_BITS
 - 2 ))

	)

816 
	#wave2_8pi
(
e
Ë–”Ë<< ( 2 + 
PG_BITS
 - 
SLOT_AMP_BITS
 ))

	)

823 
	$upd©e_ampm
 (
OPLL
 * 
›Œ
)

825 
›Œ
->
pm_pha£
 = (›Œ->pm_pha£ + 
pm_dpha£
Ë& (
PM_DP_WIDTH
 - 1);

826 
›Œ
->
am_pha£
 = (›Œ->am_pha£ + 
am_dpha£
Ë& (
AM_DP_WIDTH
 - 1);

827 
›Œ
->
lfo_am
 = 
amèbÀ
[
	`HIGHBITS
 (›Œ->
am_pha£
, 
AM_DP_BITS
 - 
AM_PG_BITS
)];

828 
›Œ
->
lfo_pm
 = 
pmèbÀ
[
	`HIGHBITS
 (›Œ->
pm_pha£
, 
PM_DP_BITS
 - 
PM_PG_BITS
)];

829 
	}
}

832 
INLINE
 

833 
	$ˇlc_pha£
 (
OPLL_SLOT
 * 
¶Ÿ
, 
e_öt32
 
lfo
)

835 if(
¶Ÿ
->
∑tch
.
PM
)

836 
¶Ÿ
->
pha£
 +(¶Ÿ->
dpha£
 * 
lfo
Ë>> 
PM_AMP_BITS
;

838 
¶Ÿ
->
pha£
 +¶Ÿ->
dpha£
;

840 
¶Ÿ
->
pha£
 &(
DP_WIDTH
 - 1);

842 
¶Ÿ
->
pgout
 = 
	`HIGHBITS
 (¶Ÿ->
pha£
, 
DP_BASE_BITS
);

843 
	}
}

847 
	$ˇlc_ívñ›e
 (
OPLL_SLOT
 * 
¶Ÿ
, 
e_öt32
 
lfo
)

849 
	#S2E
(
x
Ë(
	`SL2EG
((
e_öt32
)(x/
SL_STEP
))<<(
EG_DP_BITS
-
EG_BITS
))

	)

851 
e_uöt32
 
SL
[16] = {

852 
	`S2E
 (0.0), S2E (3.0), S2E (6.0), S2E (9.0), S2E (12.0), S2E (15.0), S2E (18.0), S2E (21.0),

853 
	`S2E
 (24.0), S2E (27.0), S2E (30.0), S2E (33.0), S2E (36.0), S2E (39.0), S2E (42.0), S2E (48.0)

856 
e_uöt32
 
egout
;

858 
¶Ÿ
->
eg_mode
)

861 
ATTACK
:

862 
egout
 = 
AR_ADJUST_TABLE
[
	`HIGHBITS
 (
¶Ÿ
->
eg_pha£
, 
EG_DP_BITS
 - 
EG_BITS
)];

863 
¶Ÿ
->
eg_pha£
 +¶Ÿ->
eg_dpha£
;

864 if((
EG_DP_WIDTH
 & 
¶Ÿ
->
eg_pha£
)||(¶Ÿ->
∑tch
.
AR
==15))

866 
egout
 = 0;

867 
¶Ÿ
->
eg_pha£
 = 0;

868 
¶Ÿ
->
eg_mode
 = 
DECAY
;

869 
	`UPDATE_EG
 (
¶Ÿ
);

873 
DECAY
:

874 
egout
 = 
	`HIGHBITS
 (
¶Ÿ
->
eg_pha£
, 
EG_DP_BITS
 - 
EG_BITS
);

875 
¶Ÿ
->
eg_pha£
 +¶Ÿ->
eg_dpha£
;

876 if(
¶Ÿ
->
eg_pha£
 >
SL
[¶Ÿ->
∑tch
.SL])

878 if(
¶Ÿ
->
∑tch
.
EG
)

880 
¶Ÿ
->
eg_pha£
 = 
SL
[¶Ÿ->
∑tch
.SL];

881 
¶Ÿ
->
eg_mode
 = 
SUSHOLD
;

882 
	`UPDATE_EG
 (
¶Ÿ
);

886 
¶Ÿ
->
eg_pha£
 = 
SL
[¶Ÿ->
∑tch
.SL];

887 
¶Ÿ
->
eg_mode
 = 
SUSTINE
;

888 
	`UPDATE_EG
 (
¶Ÿ
);

893 
SUSHOLD
:

894 
egout
 = 
	`HIGHBITS
 (
¶Ÿ
->
eg_pha£
, 
EG_DP_BITS
 - 
EG_BITS
);

895 if(
¶Ÿ
->
∑tch
.
EG
 == 0)

897 
¶Ÿ
->
eg_mode
 = 
SUSTINE
;

898 
	`UPDATE_EG
 (
¶Ÿ
);

902 
SUSTINE
:

903 
RELEASE
:

904 
egout
 = 
	`HIGHBITS
 (
¶Ÿ
->
eg_pha£
, 
EG_DP_BITS
 - 
EG_BITS
);

905 
¶Ÿ
->
eg_pha£
 +¶Ÿ->
eg_dpha£
;

906 if(
egout
 >(1 << 
EG_BITS
))

908 
¶Ÿ
->
eg_mode
 = 
FINISH
;

909 
egout
 = (1 << 
EG_BITS
) - 1;

913 
FINISH
:

914 
egout
 = (1 << 
EG_BITS
) - 1;

918 
egout
 = (1 << 
EG_BITS
) - 1;

922 if(
¶Ÿ
->
∑tch
.
AM
)

923 
egout
 = 
	`EG2DB
 (egouà+ 
¶Ÿ
->
él
Ë+ 
lfo
;

925 
egout
 = 
	`EG2DB
 (egouà+ 
¶Ÿ
->
él
);

927 if(
egout
 >
DB_MUTE
)

928 
egout
 = 
DB_MUTE
 - 1;

930 
¶Ÿ
->
egout
 =Égout;

931 
	}
}

934 
INLINE
 
e_öt32


935 
	$ˇlc_¶Ÿ_ˇr
 (
OPLL_SLOT
 * 
¶Ÿ
, 
e_öt32
 
fm
)

937 
¶Ÿ
->
ouçut
[1] = slot->output[0];

939 if(
¶Ÿ
->
egout
 >(
DB_MUTE
 - 1))

941 
¶Ÿ
->
ouçut
[0] = 0;

945 
¶Ÿ
->
ouçut
[0] = 
DB2LIN_TABLE
[¶Ÿ->
sötbl
[(¶Ÿ->
pgout
+
	`wave2_8pi
(
fm
))&(
PG_WIDTH
-1)] + slŸ->
egout
];

948  (
¶Ÿ
->
ouçut
[1] + slot->output[0]) >> 1;

949 
	}
}

952 
INLINE
 
e_öt32


953 
	$ˇlc_¶Ÿ_mod
 (
OPLL_SLOT
 * 
¶Ÿ
)

955 
e_öt32
 
fm
;

957 
¶Ÿ
->
ouçut
[1] = slot->output[0];

959 if(
¶Ÿ
->
egout
 >(
DB_MUTE
 - 1))

961 
¶Ÿ
->
ouçut
[0] = 0;

963 if(
¶Ÿ
->
∑tch
.
FB
 != 0)

965 
fm
 = 
	`wave2_4pi
 (
¶Ÿ
->
„edback
Ë>> (7 - slŸ->
∑tch
.
FB
);

966 
¶Ÿ
->
ouçut
[0] = 
DB2LIN_TABLE
[¶Ÿ->
sötbl
[(¶Ÿ->
pgout
 + 
fm
)&(
PG_WIDTH
-1)] + slŸ->
egout
];

970 
¶Ÿ
->
ouçut
[0] = 
DB2LIN_TABLE
[¶Ÿ->
sötbl
[¶Ÿ->
pgout
] + slŸ->
egout
];

973 
¶Ÿ
->
„edback
 = (¶Ÿ->
ouçut
[1] + slot->output[0]) >> 1;

975  
¶Ÿ
->
„edback
;

977 
	}
}

979 
INLINE
 
e_öt16
 
	$ˇlc
 (
OPLL
 * 
›Œ
)

981 
e_öt32
 
ö°
 = 0, 
out
 = 0;

982 
e_öt32
 
i
;

984 
	`upd©e_ampm
 (
›Œ
);

986 
i
 = 0; i < 12; i++)

988 
	`ˇlc_pha£
(&
›Œ
->
¶Ÿ
[
i
],›Œ->
lfo_pm
);

989 
	`ˇlc_ívñ›e
(&
›Œ
->
¶Ÿ
[
i
],›Œ->
lfo_am
);

992 
i
 = 0; i < 6; i++)

993 if(!(
›Œ
->
mask
 & 
	`OPLL_MASK_CH
 (
i
)Ë&& (
	`CAR
(›Œ,i)->
eg_mode
 !
FINISH
))

994 
ö°
 +
	`ˇlc_¶Ÿ_ˇr
 (
	`CAR
(
›Œ
,
i
), 
	`ˇlc_¶Ÿ_mod
(
	`MOD
(opll,i)));

996 
out
 = 
ö°
;

997  (
e_öt16
Ë
out
;

998 
	}
}

1000 
	$moocow
(
OPLL
* 
›Œ
, 
e_öt32
 *
buf
,É_öt32 
Àn
, 
shi·
)

1002 
Àn
 > 0)

1004 *
buf
+=(
	`ˇlc
(
›Œ
)+32768)<<
shi·
;

1005 
buf
++;

1006 
Àn
--;

1008 
	}
}

1010 #ifde‡
EMU2413_COMPACTION


1011 
e_öt16


1012 
	$OPLL_ˇlc
 (
OPLL
 * 
›Œ
)

1014  
	`ˇlc
 (
›Œ
);

1015 
	}
}

1017 
e_öt16


1018 
	$OPLL_ˇlc
 (
OPLL
 * 
›Œ
)

1020 if(!
›Œ
->
quÆôy
)

1021  
	`ˇlc
 (
›Œ
);

1023 
›Œ
->
ªÆ°ï
 > o∂l->
›Œtime
)

1025 
›Œ
->
›Œtime
 +›Œ->
›Œ°ï
;

1026 
›Œ
->
¥ev
 = o∂l->
√xt
;

1027 
›Œ
->
√xt
 = 
	`ˇlc
 (opll);

1030 
›Œ
->
›Œtime
 -›Œ->
ªÆ°ï
;

1031 
›Œ
->
out
 = (
e_öt16
Ë(((Ë›Œ->
√xt
 * (›Œ->
›Œ°ï
 - o∂l->
›Œtime
)

1032 + (Ë
›Œ
->
¥ev
 * o∂l->
›Œtime
Ë/ o∂l->
›Œ°ï
);

1034  (
e_öt16
Ë
›Œ
->
out
;

1035 
	}
}

1038 
e_uöt32


1039 
	$OPLL_£tMask
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
mask
)

1041 
e_uöt32
 
ªt
;

1043 if(
›Œ
)

1045 
ªt
 = 
›Œ
->
mask
;

1046 
›Œ
->
mask
 = mask;

1047  
ªt
;

1051 
	}
}

1053 
e_uöt32


1054 
	$OPLL_toggÀMask
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
mask
)

1056 
e_uöt32
 
ªt
;

1058 if(
›Œ
)

1060 
ªt
 = 
›Œ
->
mask
;

1061 
›Œ
->
mask
 ^= mask;

1062  
ªt
;

1066 
	}
}

1074 
	$£tIn°rumít
(
OPLL
 * 
›Œ
, 
e_uöt
 
i
,É_uöà
ö°
)

1076 c⁄° 
e_uöt8
 *
§c
;

1077 
OPLL_PATCH
 *
modp
, *
ˇΩ
;

1079 
›Œ
->
∑tch_numbî
[
i
]=
ö°
;

1081 if(
ö°
)

1082 
§c
=
deÁu…_ö°
[
ö°
-1];

1084 
§c
=
›Œ
->
Cu°In°
;

1086 
modp
=&
	`MOD
(
›Œ
,
i
)->
∑tch
;

1087 
ˇΩ
=&
	`CAR
(
›Œ
,
i
)->
∑tch
;

1089 
modp
->
AM
=(
§c
[0]>>7)&1;

1090 
modp
->
PM
=(
§c
[0]>>6)&1;

1091 
modp
->
EG
=(
§c
[0]>>5)&1;

1092 
modp
->
KR
=(
§c
[0]>>4)&1;

1093 
modp
->
ML
=(
§c
[0]&0xF);

1095 
ˇΩ
->
AM
=(
§c
[1]>>7)&1;

1096 
ˇΩ
->
PM
=(
§c
[1]>>6)&1;

1097 
ˇΩ
->
EG
=(
§c
[1]>>5)&1;

1098 
ˇΩ
->
KR
=(
§c
[1]>>4)&1;

1099 
ˇΩ
->
ML
=(
§c
[1]&0xF);

1101 
modp
->
KL
=(
§c
[2]>>6)&3;

1102 
modp
->
TL
=(
§c
[2]&0x3F);

1104 
ˇΩ
->
KL
 = (
§c
[3] >> 6) & 3;

1105 
ˇΩ
->
WF
 = (
§c
[3] >> 4) & 1;

1107 
modp
->
WF
 = (
§c
[3] >> 3) & 1;

1109 
modp
->
FB
 = (
§c
[3]) & 7;

1111 
modp
->
AR
 = (
§c
[4]>>4)&0xF;

1112 
modp
->
DR
 = (
§c
[4]&0xF);

1114 
ˇΩ
->
AR
 = (
§c
[5]>>4)&0xF;

1115 
ˇΩ
->
DR
 = (
§c
[5]&0xF);

1117 
modp
->
SL
 = (
§c
[6]>>4)&0xF;

1118 
modp
->
RR
 = (
§c
[6]&0xF);

1120 
ˇΩ
->
SL
 = (
§c
[7]>>4)&0xF;

1121 
ˇΩ
->
RR
 = (
§c
[7]&0xF);

1122 
	}
}

1126 
	$OPLL_wrôeReg
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
ªg
,É_uöt32 
d©a
)

1129 
e_öt32
 
i
, 
v
, 
ch
;

1131 
d©a
 = data & 0xff;

1132 
ªg
 =Ñeg & 0x3f;

1134 
ªg
)

1137 
›Œ
->
Cu°In°
[0]=
d©a
;

1138 
i
 = 0; i < 6; i++)

1140 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1142 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1143 
	`UPDATE_PG
 (
	`MOD
(
›Œ
,
i
));

1144 
	`UPDATE_RKS
 (
	`MOD
(
›Œ
,
i
));

1145 
	`UPDATE_EG
 (
	`MOD
(
›Œ
,
i
));

1151 
›Œ
->
Cu°In°
[1]=
d©a
;

1152 
i
 = 0; i < 6; i++)

1154 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1156 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1157 
	`UPDATE_PG
 (
	`CAR
(
›Œ
,
i
));

1158 
	`UPDATE_RKS
 (
	`CAR
(
›Œ
,
i
));

1159 
	`UPDATE_EG
 (
	`CAR
(
›Œ
,
i
));

1165 
›Œ
->
Cu°In°
[2]=
d©a
;

1166 
i
 = 0; i < 6; i++)

1168 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1170 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1171 
	`UPDATE_TLL
(
	`MOD
(
›Œ
,
i
));

1177 
›Œ
->
Cu°In°
[3]=
d©a
;

1178 
i
 = 0; i < 6; i++)

1180 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1182 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1183 
	`UPDATE_WF
(
	`MOD
(
›Œ
,
i
));

1184 
	`UPDATE_WF
(
	`CAR
(
›Œ
,
i
));

1190 
›Œ
->
Cu°In°
[4]=
d©a
;

1191 
i
 = 0; i < 6; i++)

1193 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1195 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1196 
	`UPDATE_EG
 (
	`MOD
(
›Œ
,
i
));

1202 
›Œ
->
Cu°In°
[5]=
d©a
;

1203 
i
 = 0; i < 6; i++)

1205 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1207 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1208 
	`UPDATE_EG
(
	`CAR
(
›Œ
,
i
));

1214 
›Œ
->
Cu°In°
[6]=
d©a
;

1215 
i
 = 0; i < 6; i++)

1217 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1219 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1220 
	`UPDATE_EG
 (
	`MOD
(
›Œ
,
i
));

1226 
›Œ
->
Cu°In°
[7]=
d©a
;

1227 
i
 = 0; i < 6; i++)

1229 if(
›Œ
->
∑tch_numbî
[
i
] == 0)

1231 
	`£tIn°rumít
(
›Œ
, 
i
, 0);

1232 
	`UPDATE_EG
 (
	`CAR
(
›Œ
,
i
));

1243 
ch
 = 
ªg
 - 0x10;

1244 
›Œ
->
LowFªq
[
ch
]=
d©a
;

1245 
	`£tFnumbî
 (
›Œ
, 
ch
, 
d©a
 + ((›Œ->
HiFªq
[ch] & 1) << 8));

1246 
	`UPDATE_ALL
 (
	`MOD
(
›Œ
,
ch
));

1247 
	`UPDATE_ALL
 (
	`CAR
(
›Œ
,
ch
));

1256 
ch
 = 
ªg
 - 0x20;

1257 
›Œ
->
HiFªq
[
ch
]=
d©a
;

1259 
	`£tFnumbî
 (
›Œ
, 
ch
, ((
d©a
 & 1Ë<< 8Ë+ o∂l->
LowFªq
[ch]);

1260 
	`£tBlock
 (
›Œ
, 
ch
, (
d©a
 >> 1) & 7);

1261 
	`£tSu°öe
 (
›Œ
, 
ch
, (
d©a
 >> 5) & 1);

1262 if(
d©a
 & 0x10)

1263 
	`keyOn
 (
›Œ
, 
ch
);

1265 
	`keyOff
 (
›Œ
, 
ch
);

1266 
	`UPDATE_ALL
 (
	`MOD
(
›Œ
,
ch
));

1267 
	`UPDATE_ALL
 (
	`CAR
(
›Œ
,
ch
));

1268 
	`upd©e_key_°©us
 (
›Œ
);

1277 
›Œ
->
In°Vﬁ
[
ªg
-0x30]=
d©a
;

1278 
i
 = (
d©a
 >> 4) & 15;

1279 
v
 = 
d©a
 & 15;

1280 
	`£tIn°rumít
(
›Œ
, 
ªg
-0x30, 
i
);

1281 
	`£tVﬁume
 (
›Œ
, 
ªg
 - 0x30, 
v
 << 2);

1282 
	`UPDATE_ALL
 (
	`MOD
(
›Œ
,
ªg
 - 0x30));

1283 
	`UPDATE_ALL
 (
	`CAR
(
›Œ
,
ªg
 - 0x30));

1290 
	}
}

1293 
	$OPLL_wrôeIO
 (
OPLL
 * 
›Œ
, 
e_uöt32
 
adr
,É_uöt32 
vÆ
)

1295 if(
adr
 & 1)

1296 
	`OPLL_wrôeReg
 (
›Œ
, o∂l->
adr
, 
vÆ
);

1298 
›Œ
->
adr
 = 
vÆ
;

1299 
	}
}

	@mappers/emu2413.h

1 #i‚de‡
_EMU2413_H_


2 
	#_EMU2413_H_


	)

4 
	~"emuty≥s.h
"

6 #ifde‡
EMU2413_DLL_EXPORTS


7 
	#EMU2413_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

8 #ñi‡
deföed
(
EMU2413_DLL_IMPORTS
)

9 
	#EMU2413_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

11 
	#EMU2413_API


	)

14 #ifde‡
__˝lu•lus


18 
	#PI
 3.14159265358979323846

	)

20 íum {
OPLL_VRC7_TONE
=0} ;

24 
e_uöt32
 
TL
,
FB
,
EG
,
ML
,
AR
,
DR
,
SL
,
RR
,
KR
,
KL
,
AM
,
PM
,
WF
 ;

25 } 
	tOPLL_PATCH
 ;

30 
OPLL_PATCH
 
∑tch
;

32 
e_öt32
 
ty≥
 ;

35 
e_öt32
 
„edback
 ;

36 
e_öt32
 
ouçut
[2] ;

39 
e_uöt16
 *
sötbl
 ;

40 
e_uöt32
 
pha£
 ;

41 
e_uöt32
 
dpha£
 ;

42 
e_uöt32
 
pgout
 ;

45 
e_öt32
 
‚um
 ;

46 
e_öt32
 
block
 ;

47 
e_öt32
 
vﬁume
 ;

48 
e_öt32
 
su°öe
 ;

49 
e_uöt32
 
él
 ;

50 
e_uöt32
 
rks
 ;

51 
e_öt32
 
eg_mode
 ;

52 
e_uöt32
 
eg_pha£
 ;

53 
e_uöt32
 
eg_dpha£
 ;

54 
e_uöt32
 
egout
 ;

56 } 
	tOPLL_SLOT
 ;

59 
	#OPLL_MASK_CH
(
x
Ë(1<<(x))

	)

64 
e_uöt32
 
adr
 ;

65 
e_öt32
 
out
 ;

67 #i‚de‡
EMU2413_COMPACTION


68 
e_uöt32
 
ªÆ°ï
 ;

69 
e_uöt32
 
›Œtime
 ;

70 
e_uöt32
 
›Œ°ï
 ;

71 
e_öt32
 
¥ev
, 
√xt
 ;

75 
e_uöt8
 
LowFªq
[6];

76 
e_uöt8
 
HiFªq
[6];

77 
e_uöt8
 
In°Vﬁ
[6];

79 
e_uöt8
 
Cu°In°
[8];

81 
e_öt32
 
¶Ÿ_⁄_Êag
[6 * 2] ;

84 
e_uöt32
 
pm_pha£
 ;

85 
e_öt32
 
lfo_pm
 ;

88 
e_öt32
 
am_pha£
 ;

89 
e_öt32
 
lfo_am
 ;

91 
e_uöt32
 
quÆôy
;

94 
e_öt32
 
∑tch_numbî
[6];

95 
e_öt32
 
key_°©us
[6] ;

98 
OPLL_SLOT
 
¶Ÿ
[6 * 2] ;

100 
e_uöt32
 
mask
 ;

102 } 
	tOPLL
 ;

105 
EMU2413_API
 
OPLL
 *
OPLL_√w
(
e_uöt32
 
˛k
,É_uöt32 
øã
) ;

106 
EMU2413_API
 
OPLL_dñëe
(
OPLL
 *) ;

109 
EMU2413_API
 
OPLL_ª£t
(
OPLL
 *) ;

110 
EMU2413_API
 
OPLL_£t_øã
(
OPLL
 *
›Œ
, 
e_uöt32
 
r
) ;

111 
EMU2413_API
 
OPLL_£t_quÆôy
(
OPLL
 *
›Œ
, 
e_uöt32
 
q
) ;

114 
EMU2413_API
 
OPLL_wrôeIO
(
OPLL
 *, 
e_uöt32
 
ªg
,É_uöt32 
vÆ
) ;

115 
EMU2413_API
 
OPLL_wrôeReg
(
OPLL
 *, 
e_uöt32
 
ªg
,É_uöt32 
vÆ
) ;

118 
EMU2413_API
 
e_öt16
 
OPLL_ˇlc
(
OPLL
 *) ;

121 
EMU2413_API
 
OPLL_f‹˚Re‰esh
(
OPLL
 *) ;

124 
EMU2413_API
 
e_uöt32
 
OPLL_£tMask
(
OPLL
 *,É_uöt32 
mask
) ;

125 
EMU2413_API
 
e_uöt32
 
OPLL_toggÀMask
(
OPLL
 *,É_uöt32 
mask
) ;

128 
moocow
(
OPLL
* 
›Œ
, 
e_öt32
 *
buf
,É_öt32 
Àn
, 
shi·
);

130 #ifde‡
__˝lu•lus


	@mappers/emutypes.h

1 #i‚de‡
_EMUTYPES_H_


2 
	#_EMUTYPES_H_


	)

4 #i‚de‡
INLINE


6 #i‡
deföed
(
_MSC_VER
)

7 
	#INLINE
 
__f‹˚ölöe


	)

8 #ñi‡
deföed
(
__GNUC__
)

9 
	#INLINE
 
__ölöe__


	)

10 #ñi‡
deföed
(
_MWERKS_
)

11 
	#INLINE
 
ölöe


	)

13 
	#INLINE


	)

17 #i‡
deföed
(
EMU_DLL_IMPORTS
)

18 
	#EMU2149_DLL_IMPORTS


	)

19 
	#EMU2212_DLL_IMPORTS


	)

20 
	#EMU2413_DLL_IMPORTS


	)

21 
	#EMU8950_DLL_IMPORTS


	)

22 
	#EMU76489_DLL_IMPORTS


	)

25 #ifde‡
__˝lu•lus


29 
	te_uöt
;

30 sig√d 
	te_öt
;

32 
	te_uöt8
 ;

33 sig√d 
	te_öt8
 ;

35 
	te_uöt16
 ;

36 sig√d 
	te_öt16
 ;

38 
	te_uöt32
 ;

39 sig√d 
	te_öt32
 ;

41 #ifde‡
__˝lu•lus


	@mappers/mapinc.h

1 
	~"../ty≥s.h
"

2 
	~"../x6502.h
"

3 
	~"../f˚.h
"

4 
	~"../µu.h
"

5 
	#INESPRIV


	)

6 
	~"../ˇπ.h
"

7 
	~"../öes.h
"

8 
	~"../mem‹y.h
"

9 
	~"../sound.h
"

10 
	~"../°©e.h
"

11 
	~"../svga.h
"

12 
	~<°rög.h
>

	@mappers/mmc2and4.c

21 
	~"m≠öc.h
"

23 
	#MMC4ªg
 
m≠byã1


	)

24 
	#œtcha1
 
m≠byã2
[0]

	)

25 
	#œtcha2
 
m≠byã2
[1]

	)

28 
	$FP_FASTAPASS
(1Ë
	$œtchcheck
(
uöt32
 
VAddr
)

30 
uöt8
 
l
,
h
;

32 
h
=
VAddr
>>8;

34 if(
h
>=0x20 || ((h&0xF)!=0xF))

37 
l
=
VAddr
&0xF0;

39 if(
h
<0x10)

41 if(
l
==0xD0)

43 
	`VROM_BANK4
(0x0000,
MMC4ªg
[0]);

44 
œtcha1
=0xFD;

46 if(
l
==0xE0)

48 
	`VROM_BANK4
(0x0000,
MMC4ªg
[1]);

49 
œtcha1
=0xFE;

54 if(
l
==0xD0)

56 
	`VROM_BANK4
(0x1000,
MMC4ªg
[2]);

57 
œtcha2
=0xFD;

59 if(
l
==0xE0)

61 
	`VROM_BANK4
(0x1000,
MMC4ªg
[3]);

62 
œtcha2
=0xFE;

65 
	}
}

67 
	$DECLFW
(
M≠≥r9_wrôe
)

69 
	`ROM_BANK8
(0x8000,
V
);

70 
	}
}

72 
	$DECLFW
(
M≠≥r10_wrôe
)

74 
	`ROM_BANK16
(0x8000,
V
);

75 
	}
}

77 
	$DECLFW
(
M≠≥r9™d10_wrôe
)

79 
A
&0xF000)

82 if(
œtcha1
==0xFDË{ 
	`VROM_BANK4
(0x0000,
V
);}

83 
MMC4ªg
[0]=
V
;

86 if(
œtcha1
==0xFEË{
	`VROM_BANK4
(0x0000,
V
);}

87 
MMC4ªg
[1]=
V
;

90 if(
œtcha2
==0xFDË{
	`VROM_BANK4
(0x1000,
V
);}

91 
MMC4ªg
[2]=
V
;

94 if(
œtcha2
==0xFEË{
	`VROM_BANK4
(0x1000,
V
);}

95 
MMC4ªg
[3]=
V
;

98 
	`MIRROR_SET
(
V
&1);

101 
	}
}

103 
	$M≠≥r9_öô
()

105 
œtcha1
=0xFE;

106 
œtcha2
=0xFE;

107 
	`ROM_BANK8
(0xA000,~2);

108 
	`ROM_BANK8
(0x8000,0);

109 
	`SëWrôeH™dÀr
(0xA000,0xAFFF,
M≠≥r9_wrôe
);

110 
	`SëWrôeH™dÀr
(0xB000,0xFFFF,
M≠≥r9™d10_wrôe
);

111 
PPU_hook
=
œtchcheck
;

112 
	}
}

114 
	$M≠≥r10_öô
()

116 
œtcha1
=
œtcha2
=0xFE;

117 
	`SëWrôeH™dÀr
(0xA000,0xAFFF,
M≠≥r10_wrôe
);

118 
	`SëWrôeH™dÀr
(0xB000,0xFFFF,
M≠≥r9™d10_wrôe
);

119 
PPU_hook
=
œtchcheck
;

120 
	}
}

	@mappers/simple.c

22 
	~"m≠öc.h
"

24 
uöt8
 
	gœtche
;

26 
	$DECLFW
(
M≠≥r34_wrôe
)

28 
A
)

30 0x7FFD:
	`ROM_BANK32
(
V
);;

31 0x7FFE:
	`VROM_BANK4
(0x0000,
V
);;

32 0x7fff:
	`VROM_BANK4
(0x1000,
V
);;

34 if(
A
>=0x8000)

35 
	`ROM_BANK32
(
V
);

36 
	}
}

38 
	$M≠≥r34_öô
()

40 
	`ROM_BANK32
(0);

41 
	`SëWrôeH™dÀr
(0x7ffd,0xffff,
M≠≥r34_wrôe
);

42 
	}
}

49 
uöt8
 
	gM96LA
;

50 
	$DECLFW
(
M≠≥r96_wrôe
)

52 
œtche
=
V
;

53 
	`£çrg32
(0x8000,
V
&3);

54 
	`£tchr4r
(0x10,0x0000,(
œtche
&4)|
M96LA
);

55 
	`£tchr4r
(0x10,0x1000,(
œtche
&4)|3);

56 
	}
}

58 
	$FP_FASTAPASS
(1Ë
	$M96Hook
(
uöt32
 
A
)

60 if((
A
&0x3000)!=0x2000) ;

62 
M96LA
=(
A
>>8)&3;

63 
	`£tchr4r
(0x10,0x0000,(
œtche
&4)|
M96LA
);

64 
	}
}

66 
	$M96Sync
(
v
)

68 
	`£çrg32
(0x8000,
œtche
&3);

69 
	`£tchr4r
(0x10,0x0000,(
œtche
&4)|
M96LA
);

70 
	`£tchr4r
(0x10,0x1000,(
œtche
&4)|3);

71 
	}
}

73 
	$M≠≥r96_öô
()

75 
	`SëWrôeH™dÀr
(0x8000,0xffff,
M≠≥r96_wrôe
);

76 
PPU_hook
=
M96Hook
;

77 
	`AddExSèã
(&
œtche
, 1, 0, "LATC");

78 
	`AddExSèã
(&
M96LA
, 1, 0, "LAVA");

79 
	`SëupC¨tCHRM≠pög
(0x10, 
M≠≥rExRAM
, 32768, 1);

80 
œtche
=
M96LA
=0;

81 
	`M96Sync
(0);

82 
	`£tmúr‹
(
MI_0
);

83 
GameSèãRe°‹e
=
M96Sync
;

84 
	}
}

86 
	$DECLFW
(
M156Wrôe
)

88 if(
A
>=0xc000 && A<=0xC003)

89 
	`VROM_BANK1
((
A
&3)*1024,
V
);

90 if(
A
>=0xc008 && A<=0xc00b)

91 
	`VROM_BANK1
(0x1000+(
A
&3)*1024,
V
);

92 if(
A
==0xc010Ë
	`ROM_BANK16
(0x8000,
V
);

94 
	}
}

96 
	$M≠≥r156_öô
()

98 
	`⁄emú
(0);

99 
	`SëWrôeH™dÀr
(0xc000,0xc010,
M156Wrôe
);

100 
	}
}

	@mappers/vrc7tone.h

	@md5.c

14 
	~<°rög.h
>

15 
	~"ty≥s.h
"

16 
	~"md5.h
"

18 
	#GET_UINT32
(
n
,
b
,
i
Ë\

	)

20 (
	gn
Ë–(
uöt32
Ë(
b
)[(
i
) + 3] << 24 ) \

21 | ( (
uöt32
Ë(
b
)[(
i
) + 2] << 16 ) \

22 | ( (
uöt32
Ë(
b
)[(
i
) + 1] << 8 ) \

23 | ( (
uöt32
Ë(
b
)[(
i
) ] ); \

26 
	#PUT_UINT32
(
n
,
b
,
i
Ë\

	)

28 (
	gb
)[(
i
Ë] = (
uöt8
Ë–(
n
) ); \

29 (
	gb
)[(
i
Ë+ 1] = (
uöt8
Ë–(
n
) >> 8 ); \

30 (
	gb
)[(
i
Ë+ 2] = (
uöt8
Ë–(
n
) >> 16 ); \

31 (
	gb
)[(
i
Ë+ 3] = (
uöt8
Ë–(
n
) >> 24 ); \

34 
	$md5_°¨ts
–
md5_c⁄ãxt
 *
˘x
 )

36 
˘x
->
tŸÆ
[0] = 0;

37 
˘x
->
tŸÆ
[1] = 0;

38 
˘x
->
°©e
[0] = 0x67452301;

39 
˘x
->
°©e
[1] = 0xEFCDAB89;

40 
˘x
->
°©e
[2] = 0x98BADCFE;

41 
˘x
->
°©e
[3] = 0x10325476;

42 
	}
}

44 
	$md5_¥o˚ss
–
md5_c⁄ãxt
 *
˘x
, 
uöt8
 
d©a
[64] )

46 
uöt32
 
A
, 
B
, 
C
, 
D
, 
X
[16];

48 
	`GET_UINT32
–
X
[0], 
d©a
, 0 );

49 
	`GET_UINT32
–
X
[1], 
d©a
, 4 );

50 
	`GET_UINT32
–
X
[2], 
d©a
, 8 );

51 
	`GET_UINT32
–
X
[3], 
d©a
, 12 );

52 
	`GET_UINT32
–
X
[4], 
d©a
, 16 );

53 
	`GET_UINT32
–
X
[5], 
d©a
, 20 );

54 
	`GET_UINT32
–
X
[6], 
d©a
, 24 );

55 
	`GET_UINT32
–
X
[7], 
d©a
, 28 );

56 
	`GET_UINT32
–
X
[8], 
d©a
, 32 );

57 
	`GET_UINT32
–
X
[9], 
d©a
, 36 );

58 
	`GET_UINT32
–
X
[10], 
d©a
, 40 );

59 
	`GET_UINT32
–
X
[11], 
d©a
, 44 );

60 
	`GET_UINT32
–
X
[12], 
d©a
, 48 );

61 
	`GET_UINT32
–
X
[13], 
d©a
, 52 );

62 
	`GET_UINT32
–
X
[14], 
d©a
, 56 );

63 
	`GET_UINT32
–
X
[15], 
d©a
, 60 );

65 
	#S
(
x
,
n
Ë((x <<ÇË| ((x & 0xFFFFFFFFË>> (32 -Ç)))

	)

67 
	#P
(
a
,
b
,
c
,
d
,
k
,
s
,
t
Ë\

	)

69 
a
 +
	`F
(
b
,
c
,
d
Ë+ 
X
[
k
] + 
t
;á = 
	`S
◊,
s
) + b; \

72 
A
 = 
˘x
->
°©e
[0];

73 
B
 = 
˘x
->
°©e
[1];

74 
C
 = 
˘x
->
°©e
[2];

75 
D
 = 
˘x
->
°©e
[3];

77 
	#F
(
x
,
y
,
z
Ë(z ^ (x & (y ^ z)))

	)

79 
	`P
–
A
, 
B
, 
C
, 
D
, 0, 7, 0xD76AA478 );

80 
	`P
–
D
, 
A
, 
B
, 
C
, 1, 12, 0xE8C7B756 );

81 
	`P
–
C
, 
D
, 
A
, 
B
, 2, 17, 0x242070DB );

82 
	`P
–
B
, 
C
, 
D
, 
A
, 3, 22, 0xC1BDCEEE );

83 
	`P
–
A
, 
B
, 
C
, 
D
, 4, 7, 0xF57C0FAF );

84 
	`P
–
D
, 
A
, 
B
, 
C
, 5, 12, 0x4787C62A );

85 
	`P
–
C
, 
D
, 
A
, 
B
, 6, 17, 0xA8304613 );

86 
	`P
–
B
, 
C
, 
D
, 
A
, 7, 22, 0xFD469501 );

87 
	`P
–
A
, 
B
, 
C
, 
D
, 8, 7, 0x698098D8 );

88 
	`P
–
D
, 
A
, 
B
, 
C
, 9, 12, 0x8B44F7AF );

89 
	`P
–
C
, 
D
, 
A
, 
B
, 10, 17, 0xFFFF5BB1 );

90 
	`P
–
B
, 
C
, 
D
, 
A
, 11, 22, 0x895CD7BE );

91 
	`P
–
A
, 
B
, 
C
, 
D
, 12, 7, 0x6B901122 );

92 
	`P
–
D
, 
A
, 
B
, 
C
, 13, 12, 0xFD987193 );

93 
	`P
–
C
, 
D
, 
A
, 
B
, 14, 17, 0xA679438E );

94 
	`P
–
B
, 
C
, 
D
, 
A
, 15, 22, 0x49B40821 );

96 #unde‡
F


98 
	#F
(
x
,
y
,
z
Ë(y ^ (z & (x ^ y)))

	)

100 
	`P
–
A
, 
B
, 
C
, 
D
, 1, 5, 0xF61E2562 );

101 
	`P
–
D
, 
A
, 
B
, 
C
, 6, 9, 0xC040B340 );

102 
	`P
–
C
, 
D
, 
A
, 
B
, 11, 14, 0x265E5A51 );

103 
	`P
–
B
, 
C
, 
D
, 
A
, 0, 20, 0xE9B6C7AA );

104 
	`P
–
A
, 
B
, 
C
, 
D
, 5, 5, 0xD62F105D );

105 
	`P
–
D
, 
A
, 
B
, 
C
, 10, 9, 0x02441453 );

106 
	`P
–
C
, 
D
, 
A
, 
B
, 15, 14, 0xD8A1E681 );

107 
	`P
–
B
, 
C
, 
D
, 
A
, 4, 20, 0xE7D3FBC8 );

108 
	`P
–
A
, 
B
, 
C
, 
D
, 9, 5, 0x21E1CDE6 );

109 
	`P
–
D
, 
A
, 
B
, 
C
, 14, 9, 0xC33707D6 );

110 
	`P
–
C
, 
D
, 
A
, 
B
, 3, 14, 0xF4D50D87 );

111 
	`P
–
B
, 
C
, 
D
, 
A
, 8, 20, 0x455A14ED );

112 
	`P
–
A
, 
B
, 
C
, 
D
, 13, 5, 0xA9E3E905 );

113 
	`P
–
D
, 
A
, 
B
, 
C
, 2, 9, 0xFCEFA3F8 );

114 
	`P
–
C
, 
D
, 
A
, 
B
, 7, 14, 0x676F02D9 );

115 
	`P
–
B
, 
C
, 
D
, 
A
, 12, 20, 0x8D2A4C8A );

117 #unde‡
F


119 
	#F
(
x
,
y
,
z
Ë(x ^ y ^ z)

	)

121 
	`P
–
A
, 
B
, 
C
, 
D
, 5, 4, 0xFFFA3942 );

122 
	`P
–
D
, 
A
, 
B
, 
C
, 8, 11, 0x8771F681 );

123 
	`P
–
C
, 
D
, 
A
, 
B
, 11, 16, 0x6D9D6122 );

124 
	`P
–
B
, 
C
, 
D
, 
A
, 14, 23, 0xFDE5380C );

125 
	`P
–
A
, 
B
, 
C
, 
D
, 1, 4, 0xA4BEEA44 );

126 
	`P
–
D
, 
A
, 
B
, 
C
, 4, 11, 0x4BDECFA9 );

127 
	`P
–
C
, 
D
, 
A
, 
B
, 7, 16, 0xF6BB4B60 );

128 
	`P
–
B
, 
C
, 
D
, 
A
, 10, 23, 0xBEBFBC70 );

129 
	`P
–
A
, 
B
, 
C
, 
D
, 13, 4, 0x289B7EC6 );

130 
	`P
–
D
, 
A
, 
B
, 
C
, 0, 11, 0xEAA127FA );

131 
	`P
–
C
, 
D
, 
A
, 
B
, 3, 16, 0xD4EF3085 );

132 
	`P
–
B
, 
C
, 
D
, 
A
, 6, 23, 0x04881D05 );

133 
	`P
–
A
, 
B
, 
C
, 
D
, 9, 4, 0xD9D4D039 );

134 
	`P
–
D
, 
A
, 
B
, 
C
, 12, 11, 0xE6DB99E5 );

135 
	`P
–
C
, 
D
, 
A
, 
B
, 15, 16, 0x1FA27CF8 );

136 
	`P
–
B
, 
C
, 
D
, 
A
, 2, 23, 0xC4AC5665 );

138 #unde‡
F


140 
	#F
(
x
,
y
,
z
Ë(y ^ (x | ~z))

	)

142 
	`P
–
A
, 
B
, 
C
, 
D
, 0, 6, 0xF4292244 );

143 
	`P
–
D
, 
A
, 
B
, 
C
, 7, 10, 0x432AFF97 );

144 
	`P
–
C
, 
D
, 
A
, 
B
, 14, 15, 0xAB9423A7 );

145 
	`P
–
B
, 
C
, 
D
, 
A
, 5, 21, 0xFC93A039 );

146 
	`P
–
A
, 
B
, 
C
, 
D
, 12, 6, 0x655B59C3 );

147 
	`P
–
D
, 
A
, 
B
, 
C
, 3, 10, 0x8F0CCC92 );

148 
	`P
–
C
, 
D
, 
A
, 
B
, 10, 15, 0xFFEFF47D );

149 
	`P
–
B
, 
C
, 
D
, 
A
, 1, 21, 0x85845DD1 );

150 
	`P
–
A
, 
B
, 
C
, 
D
, 8, 6, 0x6FA87E4F );

151 
	`P
–
D
, 
A
, 
B
, 
C
, 15, 10, 0xFE2CE6E0 );

152 
	`P
–
C
, 
D
, 
A
, 
B
, 6, 15, 0xA3014314 );

153 
	`P
–
B
, 
C
, 
D
, 
A
, 13, 21, 0x4E0811A1 );

154 
	`P
–
A
, 
B
, 
C
, 
D
, 4, 6, 0xF7537E82 );

155 
	`P
–
D
, 
A
, 
B
, 
C
, 11, 10, 0xBD3AF235 );

156 
	`P
–
C
, 
D
, 
A
, 
B
, 2, 15, 0x2AD7D2BB );

157 
	`P
–
B
, 
C
, 
D
, 
A
, 9, 21, 0xEB86D391 );

159 #unde‡
F


161 
˘x
->
°©e
[0] +
A
;

162 
˘x
->
°©e
[1] +
B
;

163 
˘x
->
°©e
[2] +
C
;

164 
˘x
->
°©e
[3] +
D
;

165 
	}
}

167 
	$md5_upd©e
–
md5_c⁄ãxt
 *
˘x
, 
uöt8
 *
öput
, 
uöt32
 
Àngth
 )

169 
uöt32
 
À·
, 
fûl
;

171 if–! 
Àngth
 ) ;

173 
À·
 = ( 
˘x
->
tŸÆ
[0] >> 3 ) & 0x3F;

174 
fûl
 = 64 - 
À·
;

176 
˘x
->
tŸÆ
[0] +
Àngth
 << 3;

177 
˘x
->
tŸÆ
[1] +
Àngth
 >> 29;

179 
˘x
->
tŸÆ
[0] &= 0xFFFFFFFF;

180 
˘x
->
tŸÆ
[1] +˘x->tŸÆ[0] < ( 
Àngth
 << 3 );

182 if–
À·
 && 
Àngth
 >
fûl
 )

184 
	`mem˝y
–(*Ë(
˘x
->
buf„r
 + 
À·
), (*Ë
öput
, 
fûl
 );

185 
	`md5_¥o˚ss
–
˘x
, ctx->
buf„r
 );

186 
Àngth
 -
fûl
;

187 
öput
 +
fûl
;

188 
À·
 = 0;

191  
Àngth
 >= 64 )

193 
	`md5_¥o˚ss
–
˘x
, 
öput
 );

194 
Àngth
 -= 64;

195 
öput
 += 64;

198 if–
Àngth
 )

200 
	`mem˝y
–(*Ë(
˘x
->
buf„r
 + 
À·
), (*Ë
öput
, 
Àngth
 );

202 
	}
}

204 
uöt8
 
	gmd5_∑ddög
[64] =

212 
	$md5_föish
–
md5_c⁄ãxt
 *
˘x
, 
uöt8
 
dige°
[16] )

214 
uöt32
 
œ°
, 
∑dn
;

215 
uöt8
 
msgÀn
[8];

217 
	`PUT_UINT32
–
˘x
->
tŸÆ
[0], 
msgÀn
, 0 );

218 
	`PUT_UINT32
–
˘x
->
tŸÆ
[1], 
msgÀn
, 4 );

220 
œ°
 = ( 
˘x
->
tŸÆ
[0] >> 3 ) & 0x3F;

221 
∑dn
 = ( 
œ°
 < 56 ) ? ( 56 -Üast ) : ( 120 -Üast );

223 
	`md5_upd©e
–
˘x
, 
md5_∑ddög
, 
∑dn
 );

224 
	`md5_upd©e
–
˘x
, 
msgÀn
, 8 );

226 
	`PUT_UINT32
–
˘x
->
°©e
[0], 
dige°
, 0 );

227 
	`PUT_UINT32
–
˘x
->
°©e
[1], 
dige°
, 4 );

228 
	`PUT_UINT32
–
˘x
->
°©e
[2], 
dige°
, 8 );

229 
	`PUT_UINT32
–
˘x
->
°©e
[3], 
dige°
, 12 );

230 
	}
}

234 *
	$md5_ascii°r
(
uöt8
 
dige°
[16])

236 
°r
[33];

237 
å™s
[16]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

238 
x
;

240 
x
=0;x<16;x++)

242 
°r
[
x
*2]=
å™s
[
dige°
[x]&0x0F];

243 
°r
[
x
*2+1]=
å™s
[
dige°
[x]>>4];

245 (
°r
);

246 
	}
}

	@md5.h

1 #i‚de‡
_MD5_H


2 
	#_MD5_H


	)

4 
	smd5_c⁄ãxt


6 
uöt32
 
	mtŸÆ
[2];

7 
uöt32
 
	m°©e
[4];

8 
uöt8
 
	mbuf„r
[64];

11 
md5_°¨ts
–
md5_c⁄ãxt
 *
˘x
 );

12 
md5_upd©e
–
md5_c⁄ãxt
 *
˘x
, 
uöt8
 *
öput
, 
uöt32
 
Àngth
 );

13 
md5_föish
–
md5_c⁄ãxt
 *
˘x
, 
uöt8
 
dige°
[16] );

16 *
md5_ascii°r
(
uöt8
 
dige°
[16]);

	@memory.c

21 
	~<°dlib.h
>

23 
	~"ty≥s.h
"

24 
	~"f˚.h
"

25 
	~"mem‹y.h
"

26 
	~"gíîÆ.h
"

27 
	~"svga.h
"

29 *
	$FCEU_gmÆloc
(
uöt32
 
size
)

31 *
ªt
;

32 
ªt
=
	`mÆloc
(
size
);

33 if(!
ªt
)

35 
	`FCEU_PrötEº‹
("Errorállocating memory! Doingá hardÉxit.");

36 
	`exô
(1);

38  
ªt
;

39 
	}
}

41 *
	$FCEU_mÆloc
(
uöt32
 
size
)

43 *
ªt
;

44 
ªt
=
	`mÆloc
(
size
);

45 if(!
ªt
)

47 
	`FCEU_PrötEº‹
("Errorállocating memory!");

50  
ªt
;

51 
	}
}

53 
	$FCEU_‰ì
(*
±r
)

55 
	`‰ì
(
±r
);

56 
	}
}

58 
	$FCEU_g‰ì
(*
±r
)

60 
	`‰ì
(
±r
);

61 
	}
}

63 
	$FASTAPASS
(3Ë
	$FCEU_memmove
(*
d
, *
s
, 
uöt32
 
l
)

65 
uöt32
 
x
;

66 
t
;

69 
t
=()
d
;

70 
t
|=()
s
;

71 
t
|=()
l
;

73 if(
t
&3)

75 
uöt8
 *
tmpd
, *
tmps
;

77 
tmpd
 = 
d
;

78 
tmps
 = 
s
;

80 
x
=
l
;x;x--)

82 *
tmpd
=*
tmps
;

83 
tmpd
++;

84 
tmps
++;

89 
uöt32
 *
tmpd
, *
tmps
;

91 
tmpd
 = 
d
;

92 
tmps
 = 
s
;

94 
x
=
l
>>2;x;x--)

96 *
tmpd
=*
tmps
;

97 
tmpd
++;

98 
tmps
++;

101 
	}
}

	@memory.h

25 
	#FCEU_dwmem£t
(
d
,
c
,
n
Ë{
_x
; _xÚ-4;_x>=0;_x-=4Ë*(
uöt32
 *)&(d)[_x]=c;}

	)

27 *
FCEU_mÆloc
(
uöt32
 
size
);

28 *
FCEU_gmÆloc
(
uöt32
 
size
);

29 
FCEU_g‰ì
(*
±r
);

30 
FCEU_‰ì
(*
±r
);

31 
	$FASTAPASS
(3Ë
	`FCEU_memmove
(*
d
, *
s
, 
uöt32
 
l
);

	@movie.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 #ifde‡
WIN32


6 
	~<wödows.h
>

9 
	~"ty≥s.h
"

10 
	~"ídün.h
"

11 
	~"öput.h
"

12 
	~"f˚.h
"

13 
	~"svga.h
"

15 
	~"drivî.h
"

16 
	~"°©e.h
"

17 
	~"gíîÆ.h
"

18 
	~"video.h
"

19 
	~"fûe.h
"

20 
	~"movõ.h
"

22 
	#MOVIE_MAGIC
 0x1a4d4346

23 
	#MOVIE_VERSION
 2

24 

	)

25 
	#MOVIE_FLAG_NOSYNCHACK
 (1<<4)

26 

	)

28 
	#ªad32À
 
ªad32


	)

32 
	mmovõ_vîsi⁄
;

33 
uöt32
 
	mnum_‰ames
;

34 
uöt32
 
	mªªc‹d_cou¡
;

35 
uöt8
 
	mÊags
;

36 
	mªad_⁄ly
;

37 
uöt32
 
	memu_vîsi⁄_u£d
;

38 * 
	mmëad©a
;

39 
	mmëad©a_size
;

40 
uöt8
 
	mmd5_of_rom_u£d
[16];

41 
	mmd5_of_rom_u£d_¥e£¡
;

42 * 
	m«me_of_rom_u£d
;

43 
	m«me_of_rom_u£d_size
;

44 } 
	tMOVIE_INFO
;

49 
FCEUI_LﬂdMovõ_v1
(*
‚ame
, 
_ªad_⁄ly
);

52 
FûeBa£
[];

77 
	gcuºít
 = 0;

78 
FILE
 *
	g¶Ÿs
[10]={0};

79 
uöt8
 
	gjo›
[4];

80 
uöt32
 
	g‰amës
 = 0;

81 
uöt32
 
	g‰amïå
 = 0;

82 
uöt8
* 
	gmovõd©a
 = 
NULL
;

83 
uöt32
 
	gmovõd©asize
 = 0;

84 
uöt32
 
	gfú°‰ameoff£t
 = 0;

85 
uöt32
 
	gßve°©e_off£t
 = 0;

86  
uöt32
 
	g‰amecou¡
 = 0;

87 
uöt32
 
	gªªc‹d_cou¡
 = 0;

88  
	gmovõ_ªad⁄ly
 = 1;

89 
	g‰ame_di•œy
 = 0;

91 
	göput_di•œy
 = 0;

92 
uöt32
 
	gcur_öput_di•œy
 = 0;

95 
	gª£tDMCacc
=0;

98 
uöt32
 
	g√xâs
 = 0;

99 
öt32
 
	g√xtd
 = 0;

103 
SFORMAT
 
	gFCEUMOV_STATEINFO
[]={

104 { 
jo›
, 4,"JOOP"},

105 { &
‰amës
, 4|
FCEUSTATE_RLSB
, "FTS "},

106 { &
√xâs
, 4|
FCEUSTATE_RLSB
, "NXTS"},

107 { &
√xtd
, 4|
FCEUSTATE_RLSB
, "NXTD"},

108 { &
‰amïå
, 4|
FCEUSTATE_RLSB
, "FPTR"},

109 { &
‰amecou¡
, 4|
FCEUSTATE_RLSB
, "FCNT"},

114 
	gCuºítMovõ
 = 1;

117 
	gMovõSètus
[10];

121 
	$FCEUMOV_IsPœyög
()

123 if(
cuºít
 < 0) (1);

125 
	}
}

127 
	$FCEUMOV_IsRec‹dög
()

129 if(
cuºít
 > 0) (1);

131 
	}
}

133 
	gsuµªssMovõSt›
=0;

134 
	gmovõC⁄vîtOff£t1
=0, 
	gmovõC⁄vîtOff£t2
=0,
	gmovõC⁄vîtOK
=0,
	gmovõSyncHackOn
=0;

136 
	$St›Pœyback
()

138 if(
suµªssMovõSt›
)

140 
ª£tDMCacc
=
movõSyncHackOn
=0;

141 
	`f˛o£
(
¶Ÿs
[-1 - 
cuºít
]);

142 
cuºít
=0;

143 
	`FCEU_Di•Mesßge
("MovieÖlayback stopped.");

144 
	}
}

147 
	$FlushHódî
()

149 if(
cuºít
 <= 0)

152 
FILE
* 
Â
 = 
¶Ÿs
[
cuºít
 - 1];

153 if(
Â
 == 0)

156 
loc
 = 
	`·ñl
(
Â
);

157 
	`f£ek
(
Â
, 4, 
SEEK_SET
);

158 
	`wrôe32À
(
MOVIE_VERSION
, 
Â
);

159 
	`f£ek
(
Â
, 12, 
SEEK_SET
);

160 
	`wrôe32À
(
‰amecou¡
, 
Â
);

161 
	`wrôe32À
(
ªªc‹d_cou¡
, 
Â
);

162 
	`wrôe32À
(
‰amïå
, 
Â
);

163 
	`f£ek
(
Â
, 32, 
SEEK_SET
);

164 
	`fwrôe
(
FCEUGameInfo
->
MD5
, 1, 16, 
Â
);

165 
	`wrôe32À
(
FCEU_VERSION_NUMERIC
, 
Â
);

168 
	`f£ek
(
Â
, 52, 
SEEK_SET
);

169 
°r
[512];

170 
	`fgës
(
°r
,512,
Â
);

171 
°r
[511]='\0';

172 
°rdiff
=
	`°æí
(
FûeBa£
)-°æí(
°r
);

173 if(
°rdiff
)

176 
off
=52;

177 
	`f£ek
(
Â
, 52, 
SEEK_SET
);

178 dÿ{ 
off
++;

179 } 
	`fgëc
(
Â
Ë&& !
	`„of
(ÂË&& !
	`„º‹
(fp));

181 if(
	`„of
(
Â
Ë|| 
	`„º‹
(fp))

183 
	`f£ek
(
Â
, 
loc
, 
SEEK_SET
);

187 
	`f£ek
(
Â
, 0, 
SEEK_END
);

188 
uöt32
 
fsize
=
	`·ñl
(
Â
)-
off
;

189 * 
˘emp
=(*)
	`FCEU_mÆloc
(
fsize
*()+4);

190 if(!
˘emp
)

192 
	`f£ek
(
Â
, 
loc
, 
SEEK_SET
);

195 
	`f£ek
(
Â
, 
off
, 
SEEK_SET
);

196 
	`‰ód
(
˘emp
, 1,
fsize
, 
Â
);

197 
	`f£ek
(
Â
, 52+
	`°æí
(
FûeBa£
)+1, 
SEEK_SET
);

198 
wrŸe
 = 
	`fwrôe
(
˘emp
, 
fsize
,1, 
Â
);

199 
	`FCEU_‰ì
(
˘emp
);

200 if(!
wrŸe
)

202 
	`f£ek
(
Â
, 
loc
, 
SEEK_SET
);

206 if(
loc
 >
fú°‰ameoff£t
)

207 
loc
 +
°rdiff
;

208 
ßve°©e_off£t
 +
°rdiff
;

209 
fú°‰ameoff£t
 +
°rdiff
;

210 
	`f£ek
(
Â
, 24, 
SEEK_SET
);

211 
	`wrôe32À
(
ßve°©e_off£t
, 
Â
);

212 
	`wrôe32À
(
fú°‰ameoff£t
, 
Â
);

214 
	`f£ek
(
Â
, 52, 
SEEK_SET
);

215 
	`Âuts
(
FûeBa£
, 
Â
);

216 
	`Âutc
('\0', 
Â
);

218 
	`f£ek
(
Â
, 
loc
, 
SEEK_SET
);

219 
	}
}

221 
	$St›Rec‹dög
()

223 if(
suµªssMovõSt›
)

225 
ª£tDMCacc
=
movõSyncHackOn
=0;

226 
	`DoEncode
(0,0,1);

229 
	`FlushHódî
();

233 
	`f˛o£
(
¶Ÿs
[
cuºít
 - 1]);

234 
MovõSètus
[
cuºít
 - 1] = 1;

235 
cuºít
=0;

236 
	`FCEU_Di•Mesßge
("MovieÑecording stopped.");

237 
	}
}

240 
	$FCEUI_St›Movõ
()

242 if(
cuºít
 < 0Ë
	`St›Pœyback
();

244 if(
cuºít
 > 0Ë
	`St›Rec‹dög
();

246 
	}
}

248 #ifde‡
WIN32


249 
	~"¥o˚ss.h
"

250 
	$execuãComm™d
(c⁄° * 
cmd
)

252 if(!
cmd
 || !*cmd)

255 c⁄° *
¨gv
[4];

256 
¨gv
[0] = 
	`gëív
("COMSPEC");

257 
¨gv
[1] = "/c";

258 
¨gv
[2] = 
cmd
;

259 
¨gv
[3] = 
NULL
;

260 if(*
¨gv
 && *(*argv))

261 
	`_•awnve
(
_P_WAIT
, 
¨gv
[0],árgv, 
NULL
);

262 
	}
}

265 
	gju°AutoC⁄vîãd
=0;

266 c⁄° * 
	$c⁄vîtToFCM
(c⁄° *
‚ame
, *
buf„r
)

268 #ifde‡
WIN32


269 
ju°AutoC⁄vîãd
=0;

272 c⁄° * 
dŸ
 = 
	`°ºchr
(
‚ame
, '.');

273 if(
dŸ
)

275 
fmv
 = !
	`°ricmp
(
dŸ
, ".fmv");

276 
nmv
 = !
	`°ricmp
(
dŸ
, ".nmv");

277 
vmv
 = !
	`°ricmp
(
dŸ
, ".vmv");

278 if(
fmv
 || 
nmv
 || 
vmv
)

280 
	`°r˝y
(
buf„r
, 
‚ame
);

281 
buf„r
[
dŸ
-
‚ame
]='\0';

282 
	`°rˇt
(
buf„r
,"-autoconverted.fcm");

284 
f˚uvî
=0;

285 if(
fmv
)

286 
f˚uvî
=1;

287 if(
nmv
)

288 
f˚uvî
=2;

289 if(
vmv
)

290 
f˚uvî
=3;

292 
œ°LﬂdedGameName
 [2048];

293 
cmd
 [1024], 
off£t
[64], 
romInfo
[1024];

294 if(
movõC⁄vîtOK
)

295 
	`•rötf
(
romInfo
, "-smd5=\"%s\" -§om«me=\"%†(MAYBE)\" -s", 
œ°LﬂdedGameName
, 
FûeBa£
);

297 
	`•rötf
(
romInfo
, "-sromname=\"(unknown)\" -s");

298 if(
movõC⁄vîtOff£t2
Ë
	`•rötf
(
off£t
, "-ÿ%d:%d", movõC⁄vîtOff£t2,
movõC⁄vîtOff£t1
);

299 
	`•rötf
(
off£t
, "-ÿ%d", 
movõC⁄vîtOff£t1
);

300 
	`•rötf
(
cmd
, ".\\utû\\√smock\\√smock.exê%†%†-•Æ=%¯-sf˚uvî=%d \"%s\" \"%s\" ", 
off£t
, 
romInfo
, 
	`FCEUI_GëCuºítVidSy°em
(0,0)?'1':'0', 
f˚uvî
, 
‚ame
, 
buf„r
);

302 
	`execuãComm™d
(
cmd
);

304 
FILE
* 
fûe
 = 
	`FCEUD_UTF8f›í
(
buf„r
,"rb");

305 if(
fûe
)

307 
	`f£ek
(
fûe
, 12, 
SEEK_SET
);

308 
‰ames
=0;

309 
	`ªad32À
(&
‰ames
, 
fûe
);

310 if(
‰ames
)

312 
‚ame
 = 
buf„r
;

313 
ju°AutoC⁄vîãd
=1;

317 
îrAÃódy
=0;

318 if(!
îrAÃódy
)

320 
îrAÃódy
=1;

321 
	`FCEU_PrötEº‹
("F‹ somêªas⁄,Çesmock wa†u«bÀÅÿ¸óãá vÆid FCM fromÅhêgiví fûe.\nThêcomm™d giví was:\n%s\nPîh≠†thêfûê•ecifõd i†nŸá movõ fûê‹ c⁄èö†nÿöpuàd©a,\n‹Öîh≠†ô i†®movõ fûêo‡®vîsi⁄ unsuµ‹ãd byÇesmock.\n\n(Thi†îr‹ mesßgêwû»£lf-de°ru˘ u¡û youÑe°¨àFCEU.)", 
cmd
);

324 
	`f˛o£
(
fûe
);

328 
°r
 [512];

329 
°r
[0] = '\0';

330 
	`GëCuºítDúe˘‹y
(512,
°r
);

331 
	`°rˇt
(
°r
, "\\util\\nesmock\\nesmock.exe");

332 
fûe
 = 
	`FCEUD_UTF8f›í
(
°r
, "rb");

333 if(
fûe
)

335 
îrAÃódy
=0;

336 if(!
îrAÃódy
)

338 
îrAÃódy
=1;

339 
	`FCEU_PrötEº‹
("F‹ somêªas⁄,Çesmock wa†u«bÀÅÿc⁄vîàthêmovõÅÿFCM f‹m©.\nThêcomm™d giví was:\n%s\n\n(Thi†îr‹ mesßgêwû»£lf-de°ru˘ u¡û youÑe°¨àFCEU.)", 
cmd
);

340 
	`f˛o£
(
fûe
);

345 
îrAÃódy
=0;

346 if(!
îrAÃódy
)

348 
îrAÃódy
=1;

349 
	`FCEU_PrötEº‹
("NesmockÇŸ found, sÿthêmovõ couldÇŸ bêc⁄vîãdÅÿFCM f‹m©.\nYou mu°Öœ˚Çesmock.exê©Åhi†loˇti⁄ sÿFCEU c™ föd it:\n%s\n\n(Thi†îr‹ mesßgêwû»£lf-de°ru˘ u¡û youÑe°¨àFCEU.)", 
°r
);

356  
‚ame
;

357 
	}
}

359 
	$Re£tI≈utTy≥s
()

361 #ifde‡
WIN32


362 
U§I≈utTy≥
[3];

363 
U§I≈utTy≥
[0] = 
SI_GAMEPAD
;

364 
U§I≈utTy≥
[1] = 
SI_GAMEPAD
;

365 
U§I≈utTy≥
[2] = 
SIFC_NONE
;

367 
	`P¨£GII≈ut
(
NULL
 );

368 
c•ec
, 
gamëy≥
;

369 
c•ec
=
FCEUGameInfo
->
c•ecül
;

370 
gamëy≥
=
FCEUGameInfo
->
ty≥
;

372 
	`InôOthîI≈ut
();

374 
	}
}

376 
	gcurMovõFûíame
[512];

380 
	$FCEUI_LﬂdMovõ
(*
‚ame
, 
_ªad_⁄ly
)

382 
buf„r
 [512];

383 
‚ame
 = (*)
	`c⁄vîtToFCM
(‚ame,
buf„r
);

385 
FILE
 *
Â
;

386 *
‚
 = 
NULL
;

388 
	`FCEUI_St›Movõ
();

391 if(!
‚ame
)

392 
‚ame
 = 
‚
 = 
	`FCEU_MakeFName
(
FCEUMKF_MOVIE
,
CuºítMovõ
,0);

396 
‹ig«me
[512];

397 
	`°r˝y
(
‹ig«me
,
‚ame
);

401 
movõ_ªad⁄ly
 = 
_ªad_⁄ly
;

402 if(
	`ac˚ss
(
‚ame
, 
W_OK
))

403 
movõ_ªad⁄ly
 = 2;

405 
Â
 = 
	`f›í
(
‚ame
, (
movõ_ªad⁄ly
>=2) ? "rb" : "r+b");

407 if(
‚
)

409 
	`‰ì
(
‚
);

410 
‚ame
 = 
NULL
;

413 if(!
Â
) ;

417 
uöt32
 
magic
;

418 
uöt32
 
vîsi⁄
;

419 
uöt8
 
Êags
[4];

421 
	`ªad32À
(&
magic
, 
Â
);

422 if(
magic
 !
MOVIE_MAGIC
)

424 
	`f˛o£
(
Â
);

429 
	`ªad32À
(&
vîsi⁄
, 
Â
);

430 if(
vîsi⁄
 == 1)

433 
	`f˛o£
(
Â
);

434 
	`¥ötf
("movie:Årying movie v1\n");

435 
	`FCEUI_LﬂdMovõ_v1
(
‚ame
, 
_ªad_⁄ly
);

438 if(
vîsi⁄
 =
MOVIE_VERSION
)

443 
	`¥ötf
("movie: unsupported version\n");

444 
	`f˛o£
(
Â
);

448 
	`‰ód
(
Êags
, 1, 4, 
Â
);

449 
	`ªad32À
(&
‰amecou¡
, 
Â
);

450 
	`ªad32À
(&
ªªc‹d_cou¡
, 
Â
);

451 
	`ªad32À
(&
movõd©asize
, 
Â
);

452 
	`ªad32À
(&
ßve°©e_off£t
, 
Â
);

453 
	`ªad32À
(&
fú°‰ameoff£t
, 
Â
);

454 if(
	`f£ek
(
Â
, 
ßve°©e_off£t
, 
SEEK_SET
))

456 
	`f˛o£
(
Â
);

461 if(
Êags
[0] & 
MOVIE_FLAG_NOSYNCHACK
)

462 
movõSyncHackOn
=0;

464 
movõSyncHackOn
=1;

471 
œ°LﬂdedGameName
 [2048];

473 
dißbÀB©ãryLﬂdög
, 
suµªssAddPowîComm™d
;

474 
suµªssAddPowîComm™d
=1;

475 
suµªssMovõSt›
=1;

478 
FCEUGI
 * 
gi
 = 
	`FCEUI_LﬂdGame
(
œ°LﬂdedGameName
);

479 if(!
gi
)

480 
	`PowîNES
();

483 
suµªssMovõSt›
=0;

484 
suµªssAddPowîComm™d
=0;

492 
	`Re£tI≈utTy≥s
();

494 
	`f£ek
(
Â
, 
fú°‰ameoff£t
, 
SEEK_SET
);

495 
movõd©a
 = (
uöt8
*)
	`ªÆloc
(movõd©a, 
movõd©asize
);

496 
	`‰ód
(
movõd©a
, 1, 
movõd©asize
, 
Â
);

498 
‰amecou¡
 = 0;

499 
‰amïå
 = 0;

500 
cuºít
 = 
CuºítMovõ
;

501 
¶Ÿs
[
cuºít
] = 
Â
;

503 
	`mem£t
(
jo›
,0,(joop));

504 
cuºít
 = -1 - current;

505 
‰amës
=0;

506 
√xâs
=0;

507 
√xtd
 = -1;

509 
MovõSètus
[
CuºítMovõ
] = 1;

511 if(!
‚ame
)

512 
	`FCEUI_Sñe˘Movõ
(
CuºítMovõ
,1);

515 
	`FCEU_Di•Mesßge
("MovieÖlayback started.");

518 
	`°r˝y
(
curMovõFûíame
, 
‹ig«me
);

520 
	`°r˝y
(
curMovõFûíame
, 
‚ame
);

522 
	}
}

525 
	$FCEUI_SaveMovõ
(*
‚ame
, 
uöt8
 
Êags
, c⁄° * 
mëad©a
)

527 
FILE
 *
Â
;

528 *
‚
;

529 
powî⁄
=0;

530 
uöt8
 
∑ddög
[4] = {0,0,0,0};

531 
n_∑ddög
;

533 
	`FCEUI_St›Movõ
();

535 
‹ig«me
[512];

536 if(
‚ame
)

538 
Â
 = 
	`FCEUD_UTF8f›í
(
‚ame
, "wb");

539 
	`°r˝y
(
‹ig«me
,
‚ame
);

543 
Â
=
	`FCEUD_UTF8f›í
(
‚
=
	`FCEU_MakeFName
(
FCEUMKF_MOVIE
,
CuºítMovõ
,0),"wb");

544 
	`°r˝y
(
‹ig«me
,
‚
);

545 
	`‰ì
(
‚
);

548 if(!
Â
) ;

551 
Êags
 |
MOVIE_FLAG_NOSYNCHACK
;

552 
ª£tDMCacc
=
movõSyncHackOn
=0;

555 if(
	`FCEUI_GëCuºítVidSy°em
(0,0))

556 
Êags
 |
MOVIE_FLAG_PAL
;

558 if(
Êags
 & 
MOVIE_FLAG_FROM_POWERON
)

560 
powî⁄
=1;

561 
Êags
 &~
MOVIE_FLAG_FROM_POWERON
;

562 
Êags
 |
MOVIE_FLAG_FROM_RESET
;

566 
	`wrôe32À
(
MOVIE_MAGIC
, 
Â
);

567 
	`wrôe32À
(
MOVIE_VERSION
, 
Â
);

568 
	`Âutc
(
Êags
, 
Â
);

569 
	`Âutc
(0, 
Â
);

570 
	`Âutc
(0, 
Â
);

571 
	`Âutc
(0, 
Â
);

572 
	`wrôe32À
(0, 
Â
);

573 
	`wrôe32À
(0, 
Â
);

574 
	`wrôe32À
(0, 
Â
);

575 
	`wrôe32À
(0, 
Â
);

576 
	`wrôe32À
(0, 
Â
);

577 
	`fwrôe
(
FCEUGameInfo
->
MD5
, 1, 16, 
Â
);

578 
	`wrôe32À
(
FCEU_VERSION_NUMERIC
, 
Â
);

579 
	`Âuts
(
FûeBa£
, 
Â
);

580 
	`Âutc
(0, 
Â
);

581 if(
mëad©a
)

583 if(
	`°æí
(
mëad©a
Ë< 
MOVIE_MAX_METADATA
)

584 
	`Âuts
(
mëad©a
, 
Â
);

586 
	`fwrôe
(
mëad©a
, 1, 
MOVIE_MAX_METADATA
-1, 
Â
);

588 
	`Âutc
(0, 
Â
);

591 
n_∑ddög
 = (4 - (
	`·ñl
(
Â
) & 0x3)) & 0x3;

592 
	`fwrôe
(
∑ddög
, 1, 
n_∑ddög
, 
Â
);

594 if(
Êags
 & 
MOVIE_FLAG_FROM_RESET
)

596 if(
powî⁄
)

600 
œ°LﬂdedGameName
 [2048];

601 
dißbÀB©ãryLﬂdög
, 
suµªssAddPowîComm™d
;

602 
suµªssAddPowîComm™d
=1;

603 
dißbÀB©ãryLﬂdög
=1;

604 
suµªssMovõSt›
=1;

607 
FCEUGI
 * 
gi
 = 
	`FCEUI_LﬂdGame
(
œ°LﬂdedGameName
);

608 if(!
gi
)

609 
	`PowîNES
();

611 
suµªssMovõSt›
=0;

612 
dißbÀB©ãryLﬂdög
=0;

613 
suµªssAddPowîComm™d
=0;

617 
ßve°©e_off£t
 = 
	`·ñl
(
Â
);

618 
	`FCEUSS_SaveFP
(
Â
);

619 
	`f£ek
(
Â
, 0, 
SEEK_END
);

621 
	`Re£tI≈utTy≥s
();

624 
n_∑ddög
 = (4 - (
	`·ñl
(
Â
) & 0x3)) & 0x3;

625 
	`fwrôe
(
∑ddög
, 1, 
n_∑ddög
, 
Â
);

627 
fú°‰ameoff£t
 = 
	`·ñl
(
Â
);

630 
	`f£ek
(
Â
, 24, 
SEEK_SET
);

631 
	`wrôe32À
(
ßve°©e_off£t
, 
Â
);

632 
	`wrôe32À
(
fú°‰ameoff£t
, 
Â
);

634 
	`f£ek
(
Â
, 
fú°‰ameoff£t
, 
SEEK_SET
);

637 
cuºít
=
CuºítMovõ
;

639 
movõ_ªad⁄ly
 = 0;

640 
‰amïå
 = 0;

641 
‰amecou¡
 = 0;

642 
ªªc‹d_cou¡
 = 0;

643 
¶Ÿs
[
cuºít
] = 
Â
;

644 
	`mem£t
(
jo›
,0,(joop));

645 
cuºít
++;

646 
‰amës
=0;

647 
√xtd
 = -1;

650 if(
Êags
 & 
MOVIE_FLAG_FROM_RESET
)

652 if(
powî⁄
)

654 
	`PowîNES
();

657 
	`Re£tNES
();

659 if(!
‚ame
)

660 
	`FCEUI_Sñe˘Movõ
(
CuºítMovõ
,1);

662 
	`FCEU_Di•Mesßge
("MovieÑecording started.");

664 
	`°r˝y
(
curMovõFûíame
, 
‹ig«me
);

665 
	}
}

667 
	$movõ_wrôech¨
(
c
)

669 if(
‰amïå
 =
movõd©asize
)

671 
movõd©asize
 += 4096;

672 
movõd©a
 = (
uöt8
*)
	`ªÆloc
(movõd©a, 
movõd©asize
);

674 
movõd©a
[
‰amïå
++] = (
uöt8
)(
c
 & 0xff);

675 
	`Âutc
(
c
, 
¶Ÿs
[
cuºít
 - 1]);

676 
	}
}

679 
	$movõ_ªadch¨
()

681 if(
‰amïå
 >
movõd©asize
)

685  ()(
movõd©a
[
‰amïå
++]);

686 
	}
}

689 
	$DoEncode
(
joy
, 
buâ⁄
, 
dummy
)

691 
uöt8
 
d
;

693 
d
 = 0;

695 if(
‰amës
 >= 65536)

696 
d
 = 3 << 5;

697 if(
‰amës
 >= 256)

698 
d
 = 2 << 5;

699 if(
‰amës
 > 0)

700 
d
 = 1 << 5;

702 if(
dummy
Ë
d
|=0x80;

704 
d
 |
joy
 << 3;

705 
d
 |
buâ⁄
;

707 
	`movõ_wrôech¨
(
d
);

709 
‰amës
)

711 
	`movõ_wrôech¨
(
‰amës
 & 0xff);

713 
‰amës
 >>= 8;

715 
	}
}

719 
	$FCEUMOV_AddJoy
(
uöt8
 *
js
)

723 if(!
cuºít
) ;

725 if(
cuºít
 < 0)

727 
√xâs
 =
‰amës
 || 
√xtd
 == -1)

729 
tmp
,
ti
;

730 
uöt8
 
d
;

732 if(
√xtd
 != -1)

734 if(
√xtd
&0x80)

737 
	`FCEU_DoSim∂eComm™d
(
√xtd
&0x1F);

740 
jo›
[(
√xtd
 >> 3)&0x3] ^= 1 << (nextd&0x7);

744 
tmp
 = 
	`movõ_ªadch¨
();

745 
d
 = 
tmp
;

747 if(
tmp
 < 0)

749 
	`St›Pœyback
();

750 
	`mem˝y
(&
cur_öput_di•œy
,
js
,4);

754 
√xâs
 = 0;

755 
tmp
 >>= 5;

756 
tmp
 &= 0x3;

757 
ti
=0;

759 
tmpfix
 = 
tmp
;

760 
tmp
--Ë{ 
√xâs
 |
	`movõ_ªadch¨
(Ë<< (
ti
 * 8);Åi++; }

765 if(
tmpfix
 =1 && !
√xâs
)

766 {
√xâs
 |
	`movõ_ªadch¨
()<<8; }

767 if(
tmpfix
 =2 && !
√xâs
Ë{√xâ†|
	`movõ_ªadch¨
()<<16; }

769 if(
√xtd
 != -1)

770 
‰amës
 = 0;

771 
√xtd
 = 
d
;

774 
	`mem˝y
(
js
,
jo›
,4);

777 if(
cuºít
 > 0)

781 
fcou¡î
=0;

782 
fcou¡î
++;

783 if(!(
fcou¡î
%300))

784 
	`FlushHódî
();

787 
x
=0;x<4;x++)

789 if(
js
[
x
] !
jo›
[x])

791 
y
=0;y<8;y++)

792 if((
js
[
x
] ^ 
jo›
[x]Ë& (1 << 
y
))

793 
	`DoEncode
(
x
, 
y
, 0);

794 
jo›
[
x
] = 
js
[x];

796 if(
‰amës
 =((1<<24)-1)Ë
	`DoEncode
(0,0,1);

801 if(
cuºít
)

803 
‰amës
++;

804 
‰amecou¡
++;

807 
	`mem˝y
(&
cur_öput_di•œy
,
js
,4);

808 
	}
}

811 
	$FCEUMOV_AddComm™d
(
cmd
)

813 if(
cuºít
 <= 0) ;

815 
	`DoEncode
((
cmd
>>3)&0x3,cmd&0x7,1);

816 
	}
}

820 
	$FCEUMOV_CheckMovõs
()

822 
FILE
 *
°
=
NULL
;

823 *
‚
;

824 
s£l
;

826 
s£l
=0;ssel<10;ssel++)

828 
°
=
	`FCEUD_UTF8f›í
(
‚
=
	`FCEU_MakeFName
(
FCEUMKF_MOVIE
,
s£l
,0),"rb");

829 
	`‰ì
(
‚
);

830 if(
°
)

832 
MovõSètus
[
s£l
]=1;

833 
	`f˛o£
(
°
);

836 
MovõSètus
[
s£l
]=0;

839 
	}
}

841 
	$FCEUI_Sñe˘MovõNext
(
n
)

843 if(
n
>0)

844 
CuºítMovõ
=(CurrentMovie+1)%10;

846 
CuºítMovõ
=(CurrentMovie+9)%10;

847 
	`FCEUI_Sñe˘Movõ
(
CuºítMovõ
, 1);

848 
	}
}

851 
	$FCEUI_Sñe˘Movõ
(
w
, 
show
)

853 
ﬁd¶Ÿ
=
CuºítMovõ
;

854 if(
w
 =-1Ë{ 
MovõShow
 = 0; ; }

855 
	`FCEUI_Sñe˘Sèã
(-1,0);

857 
CuºítMovõ
=
w
;

858 
MovõShow
=180;

860 if(
show
)

862 
MovõShow
=180;

863 if(
cuºít
 > 0)

864 
	`FCEU_Di•Mesßge
("-ªc‹dög movõ %d-",
cuºít
-1);

865 i‡(
cuºít
 < 0)

866 
	`FCEU_Di•Mesßge
("-∂ayög movõ %d-",-1 - 
cuºít
);

868 
	`FCEU_Di•Mesßge
("-select movie-");

870 
	}
}

872 
	gmovcou¡î
=0;

874 
	$FCEU_DøwMovõs
(
uöt8
 *
XBuf
)

876 
‰ameDi•œyOn
 = 
cuºít
 !0 && 
‰ame_di•œy
;

877 
howl⁄g
;

878 #i‡
WIN32


879 
öt32
 
Âs_sˇÀ
;

881 
öt32
 
Âs_sˇÀ
=256;

883 
howl
=(180-(
	`FCEUI_Emuœti⁄Pau£d
()?(60):(20*
Âs_sˇÀ
/256)));

884 if(
howl
>176) howl=180;

885 if(
howl
<1) howl=1;

886 if((
howl⁄g
<
howl
 || 
movcou¡î
)

887 && (
‰ameDi•œyOn
 && (!
movcou¡î
 || 
œ°_‰ame_di•œy
!=
‰amecou¡
Ë|| 
öput_di•œy
 && (!movcou¡î || 
œ°_öput_di•œy
!=
cur_öput_di•œy
)))

889 
öput°r
 [32];

890 if(
öput_di•œy
)

892 
uöt32
 
c
 = 
cur_öput_di•œy
;

893 
	`•rötf
(
öput°r
, "%c%c%c%c%c%c%c%c %c%c%c%c%c%c%c%c",

894 (
c
&0x40)?'<':' ', (c&0x10)?'^':' ', (c&0x80)?'>':' ', (c&0x20)?'v':' ',

895 (
c
&0x01)?'A':' ', (c&0x02)?'B':' ', (c&0x08)?'S':' ', (c&0x04)?'s':' ',

896 (
c
&0x4000)?'<':' ', (c&0x1000)?'^':' ', (c&0x8000)?'>':' ', (c&0x2000)?'v':' ',

897 (
c
&0x0100)?'A':' ', (c&0x0200)?'B':' ', (c&0x0800)?'S':' ', (c&0x0400)?'s':' ');

898 if(!(
c
&0xff00))

899 
öput°r
[8] = '\0';

901 if(
‰ameDi•œyOn
 && !
öput_di•œy
)

902 
	`FCEU_Di•Mesßge
("%†‰amê%u",
cuºít
 >0?"Rec‹dög":"Pœyög",
‰amecou¡
);

903 if(
öput_di•œy
 && !
‰ameDi•œyOn
)

904 
	`FCEU_Di•Mesßge
("I≈ut: %s",
öput°r
);

906 
	`FCEU_Di•Mesßge
("%†%u %s",
cuºít
 >0?"Rec‹dög":"Pœyög",
‰amecou¡
,
öput°r
);

908 
œ°_‰ame_di•œy
 = 
‰amecou¡
;

909 
œ°_öput_di•œy
 = 
cur_öput_di•œy
;

910 
movcou¡î
=180-1;

914 if(
movcou¡î
) movcounter--;

916 if(!
MovõShow
) ;

918 
	`FCEU_DøwNumbîRow
(
XBuf
,
MovõSètus
, 
CuºítMovõ
);

919 
MovõShow
--;

920 
	}
}

922 
	$FCEUMOV_WrôeSèã
(
FILE
* 
°
)

924 
uöt32
 
to_wrôe
 = 0;

925 if(
cuºít
 < 0)

926 
to_wrôe
 = 
movõd©asize
;

927 if(
cuºít
 > 0)

928 
to_wrôe
 = 
‰amïå
;

930 if(!
°
)

931  
to_wrôe
;

933 if(
to_wrôe
)

934 
	`fwrôe
(
movõd©a
, 1, 
to_wrôe
, 
°
);

935  
to_wrôe
;

936 
	}
}

938 
	glﬂd_suc˚ssful
;

940 
	$FCEUMOV_RódSèã
(
FILE
* 
°
, 
uöt32
 
size
)

944 if(
√xtd
 != -1)

946 
d
 = 1;

947 if(
√xâs
 > 65536)

948 
d
 = 4;

949 if(
√xâs
 > 256)

950 
d
 = 3;

951 if(
√xâs
 > 0)

952 
d
 = 2;

953 
‰amïå
 -
d
;

954 
√xtd
 = -1;

958 if(
cuºít
!=0 && !
movõ_ªad⁄ly
)

961 
movõd©a
 = (
uöt8
*)
	`ªÆloc
(movõd©a, 
size
);

962 
movõd©asize
 = 
size
;

963 if(
size
 && 
	`‰ód
(
movõd©a
, 1, size, 
°
)<size)

965 if(
cuºít
 < 0)

966 
cuºít
 = -current;

967 
	`f£ek
(
¶Ÿs
[
cuºít
 - 1], 
fú°‰ameoff£t
, 
SEEK_SET
);

968 
	`fwrôe
(
movõd©a
, 1, 
‰amïå
, 
¶Ÿs
[
cuºít
 - 1]);

969 
ªªc‹d_cou¡
++;

972 if(
cuºít
!=0 && 
movõ_ªad⁄ly
)

974 if(
cuºít
 > 0)

975 
cuºít
 = -current;

977 
	`f£ek
(
°
, 
size
, 
SEEK_CUR
);

979 if(
‰amïå
 > 
movõd©asize
)

980 
‰amïå
 = 
movõd©asize
;

985 
	`f£ek
(
°
, 
size
, 
SEEK_CUR
);

988 
lﬂd_suc˚ssful
=1;

990 
	}
}

992 
	$FCEUMOV_PªLﬂd
()

994 
lﬂd_suc˚ssful
=0;

995 
	}
}

997 
	$FCEUMOV_Po°Lﬂd
()

999 if(!
	`FCEUI_IsMovõA˘ive
())

1002  
lﬂd_suc˚ssful
;

1003 
	}
}

1005 * 
	$FCEUI_MovõGëCuºítName
(
addSlŸNumbî
)

1007  
	`FCEU_MakeFName
(
FCEUMKF_MOVIE
,(
addSlŸNumbî
 ? 
CuºítMovõ
 : -1),0);

1008 
	}
}

1011 
	$FCEUI_IsMovõA˘ive
()

1013  
cuºít
;

1014 
	}
}

1017 
	$FCEUI_MovõToggÀFømeDi•œy
()

1019 
‰ame_di•œy
=!frame_display;

1020 if(!(
cuºít
 !0 && 
‰ame_di•œy
Ë&& !
öput_di•œy
)

1021 
	`FCEU_Re£tMesßges
();

1024 
œ°_‰ame_di•œy
 = ~
‰amecou¡
;

1025 
œ°_öput_di•œy
 = ~
cur_öput_di•œy
;

1027 
	}
}

1029 
	$FCEUI_ToggÀI≈utDi•œy
()

1031 
öput_di•œy
=!input_display;

1032 if(!
öput_di•œy
 && !(
cuºít
 !0 && 
‰ame_di•œy
))

1033 
	`FCEU_Re£tMesßges
();

1036 
œ°_‰ame_di•œy
 = ~
‰amecou¡
;

1037 
œ°_öput_di•œy
 = ~
cur_öput_di•œy
;

1039 
	}
}

1041 
	$FCEUI_MovõToggÀRódO∆y
()

1043 if(
movõ_ªad⁄ly
 < 2)

1045 
movõ_ªad⁄ly
 = !movie_readonly;

1046 if(
movõ_ªad⁄ly
)

1047 
	`FCEU_Di•Mesßge
("Movie isÇow Read-Only.");

1049 
	`FCEU_Di•Mesßge
("Movie isÇow Read+Write.");

1053 
	`FCEU_Di•Mesßge
("Movie file is Read-Only.");

1055 
	}
}

1057 
	gœ°MovõInfoFûíame
 [512] = {'\0',};

1059 
	$FCEUI_MovõGëInfo
(c⁄° * 
‚ame
, 
MOVIE_INFO
* 
öfo
)

1061 
	`FlushHódî
();

1063 
buf„r
 [512];

1064 
‚ame
 = (c⁄° *)
	`c⁄vîtToFCM
(‚ame,
buf„r
);

1065 
	`°∫˝y
(
œ°MovõInfoFûíame
, 
‚ame
, 512);

1069 
uöt32
 
magic
;

1070 
uöt32
 
vîsi⁄
;

1071 
uöt8
 
_Êags
[4];

1073 
FILE
* 
Â
 = 
	`FCEUD_UTF8f›í
(
‚ame
, "rb");

1074 if(!
Â
)

1077 
	`ªad32À
(&
magic
, 
Â
);

1078 if(
magic
 !
MOVIE_MAGIC
)

1080 
	`f˛o£
(
Â
);

1084 
	`ªad32À
(&
vîsi⁄
, 
Â
);

1085 if(
vîsi⁄
 !
MOVIE_VERSION
)

1087 
	`f˛o£
(
Â
);

1088 if(
vîsi⁄
 == 1)

1089  
	`FCEUI_MovõGëInfo_v1
(
‚ame
, 
öfo
);

1094 
öfo
->
movõ_vîsi⁄
 = 
MOVIE_VERSION
;

1096 
	`‰ód
(
_Êags
, 1, 4, 
Â
);

1098 
öfo
->
Êags
 = 
_Êags
[0];

1099 
	`ªad32À
(&
öfo
->
num_‰ames
, 
Â
);

1100 
	`ªad32À
(&
öfo
->
ªªc‹d_cou¡
, 
Â
);

1102 if(
	`ac˚ss
(
‚ame
, 
W_OK
))

1103 
öfo
->
ªad_⁄ly
 = 1;

1105 
öfo
->
ªad_⁄ly
 = 0;

1107 
	`f£ek
(
Â
, 12, 
SEEK_CUR
);

1109 
	`‰ód
(
öfo
->
md5_of_rom_u£d
, 1, 16, 
Â
);

1110 
öfo
->
md5_of_rom_u£d_¥e£¡
 = 1;

1112 
	`ªad32À
(&
öfo
->
emu_vîsi⁄_u£d
, 
Â
);

1116 
°r
[256];

1117 
size_t
 
r
;

1118 
p
;

1119 
p2
=0;

1120 
œ°_c
=32;

1122 if(
öfo
->
«me_of_rom_u£d
 && info->
«me_of_rom_u£d_size
)

1123 
öfo
->
«me_of_rom_u£d
[0]='\0';

1125 
r
=
	`‰ód
(
°r
, 1, 256, 
Â
);

1126 
r
 > 0)

1128 
p
=0;Ö<
r
 && 
œ°_c
 != '\0'; ++p)

1130 if(
öfo
->
«me_of_rom_u£d
 && info->
«me_of_rom_u£d_size
 && (
p2
 < info->name_of_rom_used_size-1))

1132 
öfo
->
«me_of_rom_u£d
[
p2
]=
°r
[
p
];

1133 
p2
++;

1134 
œ°_c
=
°r
[
p
];

1137 if(
p
<
r
)

1139 
	`memmove
(
°r
, så+
p
, 
r
-p);

1140 
r
 -
p
;

1143 
r
=
	`‰ód
(
°r
, 1, 256, 
Â
);

1146 
p2
=0;

1147 
œ°_c
=32;

1149 if(
öfo
->
mëad©a
 && info->
mëad©a_size
)

1150 
öfo
->
mëad©a
[0]='\0';

1152 
r
 > 0)

1154 
p
=0;Ö<
r
 && 
œ°_c
 != '\0'; ++p)

1156 if(
öfo
->
mëad©a
 && info->
mëad©a_size
 && (
p2
 < info->metadata_size-1))

1158 
öfo
->
mëad©a
[
p2
]=
°r
[
p
];

1159 
p2
++;

1160 
œ°_c
=
°r
[
p
];

1163 if(
p
 !
r
)

1165 
r
=
	`‰ód
(
°r
, 1, 256, 
Â
);

1168 if(
r
<=0)

1171 
	`f˛o£
(
Â
);

1177 
	`f£ek
(
Â
, 24, 
SEEK_SET
);

1178 
uöt32
 
ãmp_ßve°©e_off£t
;

1179 
	`ªad32À
(&
ãmp_ßve°©e_off£t
, 
Â
);

1180 if(
	`f£ek
(
Â
, 
ãmp_ßve°©e_off£t
, 
SEEK_SET
))

1182 
	`f˛o£
(
Â
);

1185 if(!
	`FCEUSS_LﬂdFP
(
Â
,2))  0;

1187 
	`f˛o£
(
Â
);

1190 
	}
}

1212 
	#MOVIE_V1_HEADER_SIZE
 32

	)

1214 
	$FCEUI_LﬂdMovõ_v1
(*
‚ame
, 
_ªad_⁄ly
)

1216 
FILE
 *
Â
;

1217 *
‚
 = 
NULL
;

1219 
	`FCEUI_St›Movõ
();

1222 if(!
‚ame
)

1223 
‚ame
 = 
‚
 = 
	`FCEU_MakeFName
(
FCEUMKF_MOVIE
,
CuºítMovõ
,0);

1227 
movõ_ªad⁄ly
 = 
_ªad_⁄ly
;

1228 if(
	`ac˚ss
(
‚ame
, 
W_OK
))

1229 
movõ_ªad⁄ly
 = 2;

1232 
Â
 = 
	`FCEUD_UTF8f›í
(
‚ame
, (
movõ_ªad⁄ly
>=2) ? "rb" : "r+b");

1234 
Â
 = 
	`f›í
(
‚ame
, (
movõ_ªad⁄ly
>=2) ? "rb" : "r+b");

1237 if(
‚
)

1239 
	`‰ì
(
‚
);

1240 
‚ame
 = 
NULL
;

1243 if(!
Â
) ;

1247 
uöt32
 
magic
;

1248 
uöt32
 
vîsi⁄
;

1249 
uöt8
 
Êags
[4];

1250 
uöt32
 
fc
;

1252 
	`ªad32À
(&
magic
, 
Â
);

1253 if(
magic
 !
MOVIE_MAGIC
)

1255 
	`f˛o£
(
Â
);

1259 
	`ªad32À
(&
vîsi⁄
, 
Â
);

1260 if(
vîsi⁄
 != 1)

1262 
	`f˛o£
(
Â
);

1266 
	`‰ód
(
Êags
, 1, 4, 
Â
);

1267 
	`ªad32À
(&
fc
, 
Â
);

1268 
	`ªad32À
(&
ªªc‹d_cou¡
, 
Â
);

1269 
	`ªad32À
(&
movõd©asize
, 
Â
);

1270 
	`ªad32À
(&
ßve°©e_off£t
, 
Â
);

1271 
	`ªad32À
(&
fú°‰ameoff£t
, 
Â
);

1272 if(
	`f£ek
(
Â
, 
ßve°©e_off£t
, 
SEEK_SET
))

1274 
	`f˛o£
(
Â
);

1278 if(
Êags
[0] & 
MOVIE_FLAG_NOSYNCHACK
)

1279 
movõSyncHackOn
=0;

1281 
movõSyncHackOn
=1;

1287 
œ°LﬂdedGameName
 [2048];

1289 
dißbÀB©ãryLﬂdög
, 
suµªssAddPowîComm™d
;

1290 
suµªssAddPowîComm™d
=1;

1291 
suµªssMovõSt›
=1;

1294 
FCEUGI
 * 
gi
 = 
	`FCEUI_LﬂdGame
(
œ°LﬂdedGameName
);

1295 if(!
gi
)

1296 
	`PowîNES
();

1299 
suµªssMovõSt›
=0;

1300 
suµªssAddPowîComm™d
=0;

1304 if(!
	`FCEUSS_LﬂdFP
(
Â
,1)) ;

1306 
	`Re£tI≈utTy≥s
();

1308 
	`f£ek
(
Â
, 
fú°‰ameoff£t
, 
SEEK_SET
);

1309 
movõd©a
 = (
uöt8
*)
	`ªÆloc
(movõd©a, 
movõd©asize
);

1310 
	`‰ód
(
movõd©a
, 1, 
movõd©asize
, 
Â
);

1312 
‰amecou¡
 = 0;

1313 
‰amïå
 = 0;

1314 
cuºít
 = 
CuºítMovõ
;

1315 
¶Ÿs
[
cuºít
] = 
Â
;

1317 
	`mem£t
(
jo›
,0,(joop));

1318 
cuºít
 = -1 - current;

1319 
‰amës
=0;

1320 
√xâs
=0;

1321 
√xtd
 = -1;

1322 
MovõSètus
[
CuºítMovõ
] = 1;

1324 if(!
‚ame
)

1325 
	`FCEUI_Sñe˘Movõ
(
CuºítMovõ
,1);

1328 
	`FCEU_Di•Mesßge
("MovieÖlayback started.");

1329 
	}
}

1332 
	$FCEUI_MovõGëInfo_v1
(c⁄° * 
‚ame
, 
MOVIE_INFO
* 
öfo
)

1334 
uöt32
 
magic
;

1335 
uöt32
 
vîsi⁄
;

1336 
uöt8
 
_Êags
[4];

1337 
uöt32
 
ßve°©eoff£t
;

1338 
uöt8
 
tmp
[
MOVIE_MAX_METADATA
<<1];

1339 
mëad©a_Àngth
;

1341 
FILE
* 
Â
 = 
	`FCEUD_UTF8f›í
(
‚ame
, "rb");

1342 if(!
Â
)

1345 
	`ªad32À
(&
magic
, 
Â
);

1346 if(
magic
 !
MOVIE_MAGIC
)

1348 
	`f˛o£
(
Â
);

1352 
	`ªad32À
(&
vîsi⁄
, 
Â
);

1353 if(
vîsi⁄
 != 1)

1355 
	`f˛o£
(
Â
);

1359 
öfo
->
movõ_vîsi⁄
 = 1;

1360 
öfo
->
emu_vîsi⁄_u£d
 = 0;

1362 
	`‰ód
(
_Êags
, 1, 4, 
Â
);

1364 
öfo
->
Êags
 = 
_Êags
[0];

1365 
	`ªad32À
(&
öfo
->
num_‰ames
, 
Â
);

1366 
	`ªad32À
(&
öfo
->
ªªc‹d_cou¡
, 
Â
);

1368 if(
	`ac˚ss
(
‚ame
, 
W_OK
))

1369 
öfo
->
ªad_⁄ly
 = 1;

1371 
öfo
->
ªad_⁄ly
 = 0;

1373 
	`f£ek
(
Â
, 4, 
SEEK_CUR
);

1374 
	`ªad32À
(&
ßve°©eoff£t
, 
Â
);

1376 
mëad©a_Àngth
 = ()
ßve°©eoff£t
 - 
MOVIE_V1_HEADER_SIZE
;

1377 if(
mëad©a_Àngth
 > 0)

1379 
i
;

1381 
mëad©a_Àngth
 >>= 1;

1382 if(
mëad©a_Àngth
 >
MOVIE_MAX_METADATA
)

1383 
mëad©a_Àngth
 = 
MOVIE_MAX_METADATA
-1;

1385 
	`f£ek
(
Â
, 
MOVIE_V1_HEADER_SIZE
, 
SEEK_SET
);

1386 
	`‰ód
(
tmp
, 1, 
mëad©a_Àngth
<<1, 
Â
);

1390 if(
öfo
->
mëad©a
 && info->
mëad©a_size
)

1392 * 
±r
=
öfo
->
mëad©a
;

1393 * 
±r_íd
=
öfo
->
mëad©a
+öfo->
mëad©a_size
-1;

1394 
c_±r
=0;

1395 
±r
<
±r_íd
 && 
c_±r
<
mëad©a_Àngth
)

1397 
uöt16
 
c
=(
tmp
[
c_±r
<<1] | (tmp[(c_ptr<<1)+1] << 8));

1398 
c
)

1401 *
±r
++ = ()(
c
&0x7f);

1404 if(
±r
+1>=
±r_íd
)

1405 
±r_íd
=
±r
;

1408 *
±r
++=(0xc0 | (
c
>>6));

1409 *
±r
++=(0x80 | (
c
 & 0x3f));

1413 if(
±r
+2>=
±r_íd
)

1414 
±r_íd
=
±r
;

1417 *
±r
++=(0xe0 | (
c
>>12));

1418 *
±r
++=(0x80 | ((
c
>>6) & 0x3f));

1419 *
±r
++=(0x80 | (
c
 & 0x3f));

1423 
c_±r
++;

1425 *
±r
='\0';

1429 
öfo
->
md5_of_rom_u£d_¥e£¡
 = 0;

1431 if(
öfo
->
«me_of_rom_u£d
 && info->
«me_of_rom_u£d_size
)

1432 
öfo
->
«me_of_rom_u£d
[0] = '\0';

1435 
	`f£ek
(
Â
, 24, 
SEEK_SET
);

1436 
uöt32
 
ãmp_ßve°©e_off£t
;

1437 
	`ªad32À
(&
ãmp_ßve°©e_off£t
, 
Â
);

1438 if(
	`f£ek
(
Â
, 
ãmp_ßve°©e_off£t
, 
SEEK_SET
))

1440 
	`f˛o£
(
Â
);

1443 if(!
	`FCEUSS_LﬂdFP
(
Â
,2))  0;

1446 
	`f˛o£
(
Â
);

1448 
	}
}

	@movie.h

1 #i‚de‡
__MOVIE_H_


2 
	#__MOVIE_H_


	)

4 
	~"ty≥s.h
"

6 
FCEUMOV_AddJoy
(
uöt8
 *);

9 
FCEUMOV_CheckMovõs
();

10 
FCEUMOV_AddComm™d
(
cmd
);

11 
FCEU_DøwMovõs
(
uöt8
 *);

12 
FCEUMOV_IsPœyög
();

13 
FCEUMOV_IsRec‹dög
();

15 
FCEUMOV_WrôeSèã
(
FILE
* 
°
);

16 
FCEUMOV_RódSèã
(
FILE
* 
°
, 
uöt32
 
size
);

17 
FCEUMOV_PªLﬂd
();

18 
FCEUMOV_Po°Lﬂd
();

21 
cuºít
;

22 
uöt32
 
‰amecou¡
;

23 
FCEUI_LﬂdMovõ
(*
‚ame
, 
_ªad_⁄ly
);

24 
FCEUI_St›Movõ
();

	@ncpu.h

1 #i‚de‡
NES_H


2 
	#NES_H


	)

8 
	#ALIGN
 .
Æign
 4

	)

9 
	#SECTION_DATA
 .
d©a


	)

10 
	#SECTION_TEXT
 .
ãxt


	)

32 
	#REG_A
 
r4


33 
	#REG_X
 
r5


34 
	#REG_Y
 
r6


35 
	#REG_PC
 
r7


36 
	#REG_S
 
r8


37 
	#REG_P_REST
 
r8


	)

38 
	#REG_NZ
 
r9


39 
	#REG_ADDR
 
r10


40 
	#REG_CYCLE
 
r11


41 
	#REG_OP_TABLE
 
r12


42 

	)

90 
	#P_REST_V_FLAG
 0x40

	)

91 
	#P_REST_B_FLAG
 0x10

	)

92 
	#P_REST_D_FLAG
 0x08

	)

93 
	#P_REST_I_FLAG
 0x04

	)

94 
	#P_REST_C_FLAG
 0x01

	)

95 
	#P_REST_FLAGS
 0x5D

	)

111 
	#P_N_FLAG
 0x80

	)

112 
	#P_V_FLAG
 0x40

	)

113 
	#P_R_FLAG
 0x20

	)

114 
	#P_B_FLAG
 0x10

	)

115 
	#P_D_FLAG
 0x08

	)

116 
	#P_I_FLAG
 0x04

	)

117 
	#P_Z_FLAG
 0x02

	)

118 
	#P_C_FLAG
 0x01

	)

120 
	#NMI_VECTOR
 6

	)

121 
	#RESET_VECTOR
 4

	)

122 
	#IRQ_VECTOR
 2

	)

	@ncpu_debug.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~"ty≥s.h
"

5 
	~"x6502.h
"

6 
	~"f˚.h
"

9 
uöt32
 
√s_ªgi°îs
[0x10];

10 
uöt32
 
pc_ba£
;

11 
uöt8
 
√s_öã∫Æ_øm
[0x800];

12 
uöt32
 
time°amp_a
;

13 
uöt32
 
‰amecou¡
;

14 
X6502
 
X_
;

15 
uöt32
 
	g‰amecou¡_d
;

16 
uöt32
 
	gPC_¥ev
 = 0xcccccc, 
	gOP_¥ev
 = 0xcccccc;

17 
öt32
 
	gg_˙t
 = 0;

19 
	g≥ndög_add_cy˛es
 = 0, 
	g≥ndög_ªba£
 = 0, 
	g≥ndög_úq
 = 0;

21 
uöt8
 
	gdªads
[4];

22 
uöt32
 
	gdwrôes_c
[2], 
	gdwrôes_a
[2];

23 
	gdªad_cou¡_c
, 
	gdªad_cou¡_a
, 
	gdwrôe_cou¡_c
, 
	gdwrôe_cou¡_a
;

24 
	gm≠úq_cyc_c
, 
	gm≠úq_cyc_a
;

26 
DumpEm±yC¨tM≠pög
();

28 
	$Àave
()

30 
	`¥ötf
("\nA: %02x, X: %02x, Y: %02x, S: %02x\n", 
X
.
A
, X.X, X.
Y
, X.
S
);

31 
	`¥ötf
("PC = %04x, OP=%02X\n", 
PC_¥ev
, 
OP_¥ev
);

32 
	`¥ötf
("ª° = %08x\n", 
√s_ªgi°îs
[4]);

33 
	`DumpEm±yC¨tM≠pög
();

34 
	`exô
(1);

35 
	}
}

37 
	$com∑ª_°©e
()

39 
uöt8
 
√s_Êags
;

40 
i
, 
Áû
 = 0;

42 i‡((
√s_ªgi°îs
[0] >> 24Ë!
X
.
A
) {

43 
	`¥ötf
("A: %02x v†%02x\n", 
√s_ªgi°îs
[0] >> 24, 
X
.
A
);

44 
Áû
 = 1;

47 i‡((
√s_ªgi°îs
[1] & 0xffË!
X
.X) {

48 
	`¥ötf
("X: %02x v†%02x\n", 
√s_ªgi°îs
[1] & 0xff, 
X
.X);

49 
Áû
 = 1;

52 i‡((
√s_ªgi°îs
[2] & 0xffË!
X
.
Y
) {

53 
	`¥ötf
("Y: %02x v†%02x\n", 
√s_ªgi°îs
[2] & 0xff, 
X
.
Y
);

54 
Áû
 = 1;

57 i‡(
√s_ªgi°îs
[3] - 
pc_ba£
 !
X
.
PC
) {

58 
	`¥ötf
("PC: %04x v†%04x\n", 
√s_ªgi°îs
[3] - 
pc_ba£
, 
X
.
PC
);

59 
Áû
 = 1;

62 i‡((
√s_ªgi°îs
[4] >> 24Ë!
X
.
S
) {

63 
	`¥ötf
("S: %02x v†%02x\n", 
√s_ªgi°îs
[4] >> 24, 
X
.
S
);

64 
Áû
 = 1;

67 i‡(((
√s_ªgi°îs
[4]>>8)&0xffË!
X
.
IRQlow
) {

68 
	`¥ötf
("IRQlow: %02x v†%02x\n", ((
√s_ªgi°îs
[4]>>8)&0xff), 
X
.
IRQlow
);

69 
Áû
 = 1;

73 
√s_Êags
 = 
√s_ªgi°îs
[4] & 0x5d;

74 i‡–
√s_ªgi°îs
[5]&0x80000000Ë
√s_Êags
 |= 0x80;

75 i‡(!(
√s_ªgi°îs
[5]&0x000000ff)Ë
√s_Êags
 |= 0x02;

78 i‡(
√s_Êags
 !(
X
.
P
&~0x20)) {

79 
	`¥ötf
("Êags: %02x v†%02x\n", 
√s_Êags
, (
X
.
P
&~0x20));

80 
Áû
 = 1;

83 i‡(((
öt32
)
√s_ªgi°îs
[7] >> 16Ë!
X
.
cou¡
) {

84 
	`¥ötf
("cy˛es: %òv†%i\n", (
öt32
)
√s_ªgi°îs
[7] >> 16, 
X
.
cou¡
);

85 
Áû
 = 1;

88 i‡(
dªad_cou¡_a
 !
dªad_cou¡_c
) {

89 
	`¥ötf
("dªad_cou¡: %òv†%i\n", 
dªad_cou¡_a
, 
dªad_cou¡_c
);

90 
Áû
 = 1;

93 i‡(
dwrôe_cou¡_a
 !
dwrôe_cou¡_c
) {

94 
	`¥ötf
("dwrôe_cou¡: %òv†%i\n", 
dwrôe_cou¡_a
, 
dwrôe_cou¡_c
);

95 
Áû
 = 1;

98 
i
 = 
dwrôe_cou¡_a
 - 1; !
Áû
 && i >= 0; i--)

99 i‡(
dwrôes_a
[
i
] !
dwrôes_c
[i]) {

100 
	`¥ötf
("dwrôes[%i]: %06x v†%06x\n", 
dwrôe_cou¡_a
, 
dwrôes_a
[
i
], 
dwrôes_c
[i]);

101 
Áû
 = 1;

104 i‡(
m≠úq_cyc_a
 !
m≠úq_cyc_c
) {

105 
	`¥ötf
("m≠úq_cyc: %òv†%i\n", 
m≠úq_cyc_a
, 
m≠úq_cyc_c
);

106 
Áû
 = 1;

109 i‡(
time°amp_a
 !
time°amp
) {

110 
	`¥ötf
("time°amp: %u v†%u\n", 
time°amp_a
, 
time°amp
);

111 
Áû
 = 1;

120 i‡(
Áû
Ë
	`Àave
();

121 
	}
}

123 
	$com∑ª_øm
()

126 
i
, 
Áû
 = 0;

127 
i
 = 0; i < 0x800/4; i++)

129 i‡(((*)
√s_öã∫Æ_øm
)[
i
] !((
öt32
 *)
RAM
)[i]) {

130 
u
;

131 
Áû
 = 1;

132 
u
 = 
i
*4; u < i*4+4; u++)

133 i‡(
√s_öã∫Æ_øm
[
u
] !
RAM
[u])

134 
	`¥ötf
("RAM[%03x]: %02x v†%02x\n", 
u
, 
√s_öã∫Æ_øm
[u], 
RAM
[u]);

138 i‡(
Áû
Ë
	`Àave
();

140 
	}
}

142 
	$TriggîIRQ_d
()

144 
	`¥ötf
("-- irq\n");

145 
≥ndög_úq
 |= 0x100;

146 
	}
}

148 
	$TriggîNMI_d
()

150 
	`¥ötf
("--Çmi\n");

151 
	`TriggîNMI_c
();

152 
	`TriggîNMI_a
();

153 
	`com∑ª_°©e
();

154 
	}
}

156 
	$X6502_Run_d
(
öt32
 
c
)

158 
öt32
 
cy˛es
 = 
c
 << 4;

159 i‡(
PAL
Ë
cy˛es
 -
c
;

162 
g_˙t
 +
cy˛es
;

164 i‡(
‰amecou¡
 !
‰amecou¡_d
) {

165 
	`com∑ª_øm
();

166 
‰amecou¡_d
 = 
‰amecou¡
;

169 
time°amp_a
 = 
time°amp
;

171 
g_˙t
 > 0)

173 i‡(
≥ndög_úq
) {

174 i‡(
≥ndög_úq
 & 0x100) {

175 
	`TriggîIRQ_c
();

176 
	`TriggîIRQ_a
();

178 i‡(
≥ndög_úq
 & 0xff) {

179 
	`X6502_IRQBegö_c
(
≥ndög_úq
 & 0xff);

180 
	`X6502_IRQBegö_a
(
≥ndög_úq
 & 0xff);

182 
≥ndög_úq
 = 0;

187 
√s_ªgi°îs
[7]=1<<16;

188 
X
.
cou¡
=1;

190 
dªad_cou¡_c
 = 
dªad_cou¡_a
 = 
dwrôe_cou¡_c
 = 
dwrôe_cou¡_a
 = 0;

191 
m≠úq_cyc_a
 = 
m≠úq_cyc_c
 = 0;

194 
	`X6502_Run_c
();

196 
	`X6502_Run_a
();

198 
	`com∑ª_°©e
();

199 
g_˙t
 -1 - 
X
.
cou¡
;

200 i‡(
≥ndög_add_cy˛es
) {

201 
g_˙t
 -
≥ndög_add_cy˛es
*48;

204 
time°amp
 +
≥ndög_add_cy˛es
;

205 
time°amp_a
 +
≥ndög_add_cy˛es
;

206 
≥ndög_add_cy˛es
 = 0;

208 i‡(
≥ndög_ªba£
) {

209 
	`X6502_Reba£_a
();

210 
≥ndög_ªba£
 = 0;

215 
	}
}

217 
	$X6502_Re£t_d
()

219 
	`¥ötf
("--Ñeset\n");

221 
	`X6502_Re£t_c
();

222 
	`X6502_Re£t_a
();

223 
	`com∑ª_°©e
();

224 
	}
}

226 
	$X6502_Powî_d
()

228 
	`¥ötf
("--Öower\n");

229 i‡(
√s_öã∫Æ_øm
 =
RAM
Ë
	`¥ötf
("nes_internal_ram == RAM!!\n");

230 
dªad_cou¡_c
 = 
dªad_cou¡_a
 = 
dwrôe_cou¡_c
 = 
dwrôe_cou¡_a
 = 0;

231 
m≠úq_cyc_c
 = 
m≠úq_cyc_a
 = 0;

233 
	`X6502_Powî_c
();

234 
	`X6502_Powî_a
();

235 
	`com∑ª_°©e
();

239 *
p
 = (*Ë
√s_ªgi°îs
[3];

240 
i
, 
u
, 
n›
 = 0xea;

242 
i
 = 0; i < 256; i++)

244 i‡(
i
 == 0 || i == 0x20 || i == 0x40 || i == 0x60 || i == 0x4c || i == 0x6c) ;

245 i‡((
i
 & 0x1f) == 0x10) ;

246 
i
)

262 *
p
++ = 
i
;

263 
u
 = 0; u < 3; u++)

264 *
p
++ = 
n›
;

268 
	}
}

270 
	$X6502_AddCy˛es_d
(
x
)

272 
	`¥ötf
("-- AddCy˛es(%i|%i)\n", 
x
, x*48);

274 
≥ndög_add_cy˛es
 = 
x
;

280 
	}
}

282 
	$X6502_IRQBegö_d
(
w
)

284 
	`¥ötf
("-- IRQBegö(%02x)\n", 
w
);

288 
≥ndög_úq
 |
w
;

289 
	}
}

291 
	$X6502_IRQEnd_d
(
w
)

293 
	`¥ötf
("-- IRQEnd(%02x)\n", 
w
);

295 
	`X6502_IRQEnd_c
(
w
);

296 
	`X6502_IRQEnd_a
(
w
);

297 
	}
}

300 
	$X6502_Reba£_d
()

302 
≥ndög_ªba£
 = 1;

303 
	}
}

	@netplay.c

21 #ifde‡
NETWORK


23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"ty≥s.h
"

28 
	~"svga.h
"

29 
	~"√çœy.h
"

31 
	g√çœy
=0;

33 
uöt8
 
	g√tjoy
[4];

35 
	$NëEº‹
()

37 
	`FCEU_Di•Mesßge
("NetworkÉrror/connectionÜost!");

39 
√çœy
=0;

40 
	`FCEUD_Nëw‹kClo£
();

41 
	}
}

43 
	$KûlNë∂ay
()

45 if(
√çœy
)

47 
	`FCEUD_Nëw‹kClo£
();

48 
√çœy
=0;

50 
	}
}

52 
	$InôNë∂ay
()

54 if(!
	`FCEUD_Nëw‹kC⁄√˘
())

55 {
	`NëEº‹
(); 0;}

56 
√çœy
=
FSëtögs
.
Nëw‹kPœy
;

57 
	`mem£t
(
√tjoy
,0,(netjoy));

59 
	}
}

61 
	$Në∂ayUpd©e
(
uöt16
 *
joyp1
, uöt16 *
joyp2
)

63 
uöt8
 
buf
[5];

64 if(
√çœy
==1)

66 
t
;

68 
lo›o
:

70 
t
=
	`FCEUD_Nëw‹kRecvD©a
(&
√tjoy
[2],1,0);

71 if(!
t
Ë{
	`NëEº‹
();;}

72 if(
t
!=-1Ë
lo›o
;

74 
√tjoy
[0]=*
joyp1
;

75 
	`mem˝y
(
buf
,
√tjoy
,4);

76 
buf
[4]=
Comm™dQueue
;

78 if(!
	`FCEUD_Nëw‹kSídD©a
(
buf
,5)Ë{
	`NëEº‹
();;}

79 if(
Comm™dQueue
)

81 
	`DoComm™d
(
Comm™dQueue
);

82 
Comm™dQueue
=0;

85 if(
√çœy
==2)

87 
uöt8
 
ja
=(*
joyp1
)|(*joyp1>>8)|(*
joyp2
)|(*joyp2>>8);

88 if(!
	`FCEUD_Nëw‹kSídD©a
(&
ja
,1)Ë{
	`NëEº‹
();;}

89 if(!
	`FCEUD_Nëw‹kRecvD©a
(
buf
,5,1)Ë{
	`NëEº‹
();;}

91 
	`mem˝y
(
√tjoy
,
buf
,4);

92 if(
buf
[4]Ë
	`DoComm™d
(buf[4]);

94 *
joyp1
=
√tjoy
[0]|(netjoy[1]<<8);

95 *
joyp2
=
√tjoy
[2]|(netjoy[3]<<8);

97 
	}
}

	@netplay.h

1 #ifde‡
NETWORK


2 
InôNë∂ay
();

3 
KûlNë∂ay
();

4 
Në∂ayUpd©e
(
uöt16
 *
JS1
, uöt16 *
JS2
);

6 
√çœy
;

	@nsf.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

26 
	~"ty≥s.h
"

27 
	~"x6502.h
"

28 
	~"f˚.h
"

29 
	~"video.h
"

30 
	~"sound.h
"

31 
	~"nsf.h
"

32 
	~"gíîÆ.h
"

33 
	~"mem‹y.h
"

34 
	~"fûe.h
"

35 
	~"fds.h
"

36 
	~"ˇπ.h
"

37 
	~"öput.h
"

39 
	~"svga.h
"

41 #i‚de‡
M_PI


42 
	#M_PI
 3.14159265358979323846

	)

45 
	#SCREEN_WIDTH
 320

	)

46 
	#SCREEN_OFFS
 32

	)

48 
uöt8
 
	gS⁄gRñﬂd
;

49 
	gCuºítS⁄g
;

51 
DECLFW
(
NSF_wrôe
);

52 
DECLFR
(
NSF_ªad
);

54 
	gvismode
=1;

56 
uöt8
 
	gNSFROM
[0x30+6]=

82 
	$DECLFR
(
NSFROMRód
)

84  (
NSFROM
-0x3800)[
A
];

85 
	}
}

87 
	gd‹e£t
=0;

88 
	gNSFNMIFœgs
;

89 
uöt8
 *
	gNSFDATA
=0;

90 
	gNSFMaxB™k
;

92 
	gNSFSize
;

93 
uöt8
 
	gBS⁄
;

94 
uöt16
 
	gPœyAddr
;

95 
uöt16
 
	gInôAddr
;

96 
uöt16
 
	gLﬂdAddr
;

98 
NSF_HEADER
 
	gNSFHódî
;

100 
NSFMMC5_Clo£
();

101 
uöt8
 *
	gExWRAM
=0;

103 
	$NSFGI
(
h
, *
∑øm
)

105 
h
)

107 
GI_CLOSE
:

108 if(
NSFDATA
Ë{
	`‰ì
(NSFDATA);NSFDATA=0;}

109 if(
ExWRAM
Ë{
	`‰ì
(ExWRAM);ExWRAM=0;}

110 if(
NSFHódî
.
SoundChù
&1) {

112 } if(
NSFHódî
.
SoundChù
&2) {

114 } if(
NSFHódî
.
SoundChù
&4) {

116 } if(
NSFHódî
.
SoundChù
&8) {

117 
	`NSFMMC5_Clo£
();

118 } if(
NSFHódî
.
SoundChù
&0x10) {

120 } if(
NSFHódî
.
SoundChù
&0x20) {

124 
GI_RESETM2
:

125 
GI_POWER
: 
	`NSF_öô
();;

126 
GI_INFOSTRING
:

127 
	`•rötf
(
∑øm
, "NSF, %s", 
PAL
?"PAL":"NTSC");

130 
	}
}

134 
INLINE
 
	$BANKSET
(
uöt32
 
A
, uöt32 
b™k
)

136 
b™k
&=
NSFMaxB™k
;

137 if(
NSFHódî
.
SoundChù
&4)

138 
	`mem˝y
(
ExWRAM
+(
A
-0x6000),
NSFDATA
+(
b™k
<<12),4096);

140 
	`£çrg4
(
A
,
b™k
);

141 
	}
}

143 
	$NSFLﬂd
(
Â
)

145 
x
;

147 
	`FCEU_f£ek
(
Â
,0,
SEEK_SET
);

148 
	`FCEU_‰ód
(&
NSFHódî
,1,0x80,
Â
);

149 if(
	`memcmp
(
NSFHódî
.
ID
,"NESM\x1a",5))

151 
NSFHódî
.
S⁄gName
[31]=NSFHódî.
Aπi°
[31]=NSFHódî.
C›yright
[31]=0;

153 
LﬂdAddr
=
NSFHódî
.
LﬂdAddªssLow
;

154 
LﬂdAddr
|=
NSFHódî
.
LﬂdAddªssHigh
<<8;

156 if(
LﬂdAddr
<0x6000)

158 
	`FCEUD_PrötEº‹
("InvalidÜoadáddress.");

161 
InôAddr
=
NSFHódî
.
InôAddªssLow
;

162 
InôAddr
|=
NSFHódî
.
InôAddªssHigh
<<8;

164 
PœyAddr
=
NSFHódî
.
PœyAddªssLow
;

165 
PœyAddr
|=
NSFHódî
.
PœyAddªssHigh
<<8;

167 
NSFSize
=
	`FCEU_fgësize
(
Â
)-0x80;

169 
NSFMaxB™k
=((
NSFSize
+(
LﬂdAddr
&0xfff)+4095)/4096);

170 
NSFMaxB™k
=
	`uµow2
(NSFMaxBank);

172 if(!(
NSFDATA
=(
uöt8
 *)
	`FCEU_mÆloc
(
NSFMaxB™k
*4096)))

175 
	`FCEU_f£ek
(
Â
,0x80,
SEEK_SET
);

176 
	`mem£t
(
NSFDATA
,0x00,
NSFMaxB™k
*4096);

177 
	`FCEU_‰ód
(
NSFDATA
+(
LﬂdAddr
&0xfff),1,
NSFSize
,
Â
);

179 
NSFMaxB™k
--;

181 
BS⁄
=0;

182 
x
=0;x<8;x++)

183 
BS⁄
|=
NSFHódî
.
B™kSwôch
[
x
];

185 
FCEUGameInfo
.
ty≥
=
GIT_NSF
;

186 
FCEUGameInfo
.
öput
[0]=FCEUGameInfo.öput[1]=
SI_GAMEPAD
;

187 
FCEUGameInfo
.
c•ecül
=
SIS_NSF
;

189 
x
=0;;x++)

191 if(
NSFROM
[
x
]==0x20)

193 
NSFROM
[
x
+1]=
InôAddr
&0xFF;

194 
NSFROM
[
x
+2]=
InôAddr
>>8;

195 
NSFROM
[
x
+8]=
PœyAddr
&0xFF;

196 
NSFROM
[
x
+9]=
PœyAddr
>>8;

201 if(
NSFHódî
.
VideoSy°em
==0)

202 
FCEUGameInfo
.
vidsys
=
GIV_NTSC
;

203 if(
NSFHódî
.
VideoSy°em
==1)

204 
FCEUGameInfo
.
vidsys
=
GIV_PAL
;

206 
GameI¡îÁ˚
=
NSFGI
;

208 
	`FCEU_¥ötf
("NSF Loaded. File information:\n\n");

209 
	`FCEU_¥ötf
(" Name: %s\¿Aπi°: %s\¿C›yright: %s\n\n",
NSFHódî
.
S⁄gName
,NSFHódî.
Aπi°
,NSFHódî.
C›yright
);

210 if(
NSFHódî
.
SoundChù
)

212 *
èb
[6]={"Konami VRCVI","Konami VRCVII","Nintendo FDS","Nintendo MMC5","Namco 106","Sunsoft FME-07"};

214 
x
=0;x<6;x++)

215 if(
NSFHódî
.
SoundChù
&(1<<
x
))

217 
	`FCEU_¥ötf
(" Ex∑nsi⁄ h¨dw¨e: %s\n",
èb
[
x
]);

218 
NSFHódî
.
SoundChù
=1<<
x
;

222 if(
BS⁄
)

223 
	`FCEU_¥ötf
(" Bank-switched.\n");

224 
	`FCEU_¥ötf
(" Lﬂdáddªss: $%04x\¿Inôáddªss: $%04x\¿Pœyáddªss: $%04x\n",
LﬂdAddr
,
InôAddr
,
PœyAddr
);

225 
	`FCEU_¥ötf
(" %s\n",(
NSFHódî
.
VideoSy°em
&1)?"PAL":"NTSC");

226 
	`FCEU_¥ötf
(" Sèπög s⁄g: %d / %d\n\n",
NSFHódî
.
SèπögS⁄g
,NSFHódî.
TŸÆS⁄gs
);

228 if(
NSFHódî
.
SoundChù
&4)

229 
ExWRAM
=
	`FCEU_gmÆloc
(32768+8192);

231 
ExWRAM
=
	`FCEU_gmÆloc
(8192);

233 
	`FCEUI_SëVidSy°em
(
NSFHódî
.
VideoSy°em
);

236 
	}
}

238 
	$DECLFR
(
NSFVe˘‹Ród
)

240 if(((
NSFNMIFœgs
&1Ë&& 
S⁄gRñﬂd
Ë|| (NSFNMIFœgs&2Ë|| 
d‹e£t
)

242 if(
A
==0xFFFA) (0x00);

243 if(
A
==0xFFFB) (0x38);

244 if(
A
==0xFFFC) (0x20);

245 if(
A
==0xFFFDË{
d‹e£t
=0;(0x38);}

246 (
X
.
DB
);

249 (
	`C¨tBR
(
A
));

250 
	}
}

252 
NSFVRC6_Inô
();

253 
NSFVRC7_Inô
();

254 
NSFMMC5_Inô
();

255 
NSFN106_Inô
();

256 
NSFAY_Inô
();

258 
	$NSF_öô
()

260 
d‹e£t
=1;

262 
	`Re£tC¨tM≠pög
();

263 if(
NSFHódî
.
SoundChù
&4)

265 
	`SëupC¨tPRGM≠pög
(0,
ExWRAM
,32768+8192,1);

266 
	`£çrg32
(0x6000,0);

267 
	`£çrg8
(0xE000,4);

268 
	`mem£t
(
ExWRAM
,0x00,32768+8192);

269 
	`SëWrôeH™dÀr
(0x6000,0xDFFF,
C¨tBW
);

270 
	`SëRódH™dÀr
(0x6000,0xFFFF,
C¨tBR
);

274 
	`mem£t
(
ExWRAM
,0x00,8192);

275 
	`SëRódH™dÀr
(0x6000,0x7FFF,
C¨tBR
);

276 
	`SëWrôeH™dÀr
(0x6000,0x7FFF,
C¨tBW
);

277 
	`SëupC¨tPRGM≠pög
(0,
NSFDATA
,((
NSFMaxB™k
+1)*4096),0);

278 
	`SëupC¨tPRGM≠pög
(1,
ExWRAM
,8192,1);

279 
	`£çrg8r
(1,0x6000,0);

280 
	`SëRódH™dÀr
(0x8000,0xFFFF,
C¨tBR
);

283 if(
BS⁄
)

285 
öt32
 
x
;

286 
x
=0;x<8;x++)

288 if(
NSFHódî
.
SoundChù
&4 && 
x
>=6)

289 
	`BANKSET
(0x6000+(
x
-6)*4096,
NSFHódî
.
B™kSwôch
[x]);

290 
	`BANKSET
(0x8000+
x
*4096,
NSFHódî
.
B™kSwôch
[x]);

295 
öt32
 
x
;

296 
x
=(
LﬂdAddr
&0xF000);x<0x10000;x+=0x1000)

297 
	`BANKSET
(
x
,((x-(
LﬂdAddr
&0x7000))>>12));

300 
	`SëRódH™dÀr
(0xFFFA,0xFFFD,
NSFVe˘‹Ród
);

302 
	`SëWrôeH™dÀr
(0x2000,0x3fff,0);

303 
	`SëRódH™dÀr
(0x2000,0x37ff,0);

304 
	`SëRódH™dÀr
(0x3836,0x3FFF,0);

305 
	`SëRódH™dÀr
(0x3800,0x3835,
NSFROMRód
);

306 
Page
[0x3800>>11]=
NSFROM
-0x3800;

308 
	`SëWrôeH™dÀr
(0x5ff6,0x5fff,
NSF_wrôe
);

310 
	`SëWrôeH™dÀr
(0x3ff0,0x3fff,
NSF_wrôe
);

311 
	`SëRódH™dÀr
(0x3ff0,0x3fff,
NSF_ªad
);

314 if(
NSFHódî
.
SoundChù
&1) {

315 
	`NSFVRC6_Inô
();

316 } if(
NSFHódî
.
SoundChù
&2) {

317 
	`NSFVRC7_Inô
();

318 } if(
NSFHódî
.
SoundChù
&4) {

319 
	`FDSSoundRe£t
();

320 } if(
NSFHódî
.
SoundChù
&8) {

321 
	`NSFMMC5_Inô
();

322 } if(
NSFHódî
.
SoundChù
&0x10) {

323 
	`NSFN106_Inô
();

324 } if(
NSFHódî
.
SoundChù
&0x20) {

325 
	`NSFAY_Inô
();

327 
CuºítS⁄g
=
NSFHódî
.
SèπögS⁄g
;

328 
S⁄gRñﬂd
=0xFF;

329 
NSFNMIFœgs
=0;

330 
	}
}

332 
	$DECLFW
(
NSF_wrôe
)

334 
A
)

336 0x3FF3:
NSFNMIFœgs
|=1;;

337 0x3FF4:
NSFNMIFœgs
&=~2;;

338 0x3FF5:
NSFNMIFœgs
|=2;;

341 0x5FF7:if(!(
NSFHódî
.
SoundChù
&4)) ;

349 0x5FFF:if(!
BS⁄
) ;

350 
A
&=0xF;

351 
	`BANKSET
((
A
*4096),
V
);

354 
	}
}

356 
	$DECLFR
(
NSF_ªad
)

358 
x
;

360 
A
)

362 0x3ff0:
x
=
S⁄gRñﬂd
;

363 if(!
f˚uödbg
)

364 
S⁄gRñﬂd
=0;

365  
x
;

367 if(!
f˚uödbg
)

369 
	`mem£t
(
RAM
,0x00,0x800);

371 
BWrôe
[0x4015](0x4015,0x0);

372 
x
=0;x<0x14;x++)

373 
BWrôe
[0x4000+
x
](0x4000+x,0);

374 
BWrôe
[0x4015](0x4015,0xF);

376 if(
NSFHódî
.
SoundChù
&4)

378 
BWrôe
[0x4017](0x4017,0xC0);

379 
BWrôe
[0x4089](0x4089,0x80);

380 
BWrôe
[0x408A](0x408A,0xE8);

384 
	`mem£t
(
ExWRAM
,0x00,8192);

385 
BWrôe
[0x4017](0x4017,0xC0);

386 
BWrôe
[0x4017](0x4017,0xC0);

387 
BWrôe
[0x4017](0x4017,0x40);

390 if(
BS⁄
)

392 
x
=0;x<8;x++)

393 
	`BANKSET
(0x8000+
x
*4096,
NSFHódî
.
B™kSwôch
[x]);

395  (
CuºítS⁄g
-1);

397 0x3FF3: 
PAL
;

400 
	}
}

402 
uöt8
 
FCEU_GëJoyJoy
();

404 
	g•ecül
=0;

406 
	$DøwNSF
(
uöt8
 *
XBuf
)

408 
¢buf
[16];

409 
öt32
 
mul
=0;

410 
x
;

412 if(
vismode
==0) ;

414 
x
=0;x<240;x++)

415 
	`mem£t
(
XBuf
+
SCREEN_OFFS
+
x
*
SCREEN_WIDTH
,0,256);

417 if(
FSëtögs
.
SoundVﬁume
)

418 
mul
=8192*240/(16384*
FSëtögs
.
SoundVﬁume
/50);

421 
öt16
 *
BuÂl
;

423 
l
;

424 
l
=
	`GëSoundBuf„r
(&
BuÂl
);

426 if(
•ecül
==0)

428 
x
=0;x<256;x++)

430 
uöt32
 
y
;

431 
y
=142+((
BuÂl
[(
x
*
l
)>>8]*
mul
)>>14);

432 if(
y
<240)

433 
XBuf
[
x
+
y
*
SCREEN_WIDTH
+
SCREEN_OFFS
]=3;

436 if(
•ecül
==1)

438 
x
=0;x<256;x++)

440 
r
;

441 
uöt32
 
xp
,
yp
;

443 
r
=(
BuÂl
[(
x
*
l
)>>8]*
mul
)>>14;

444 
xp
=128+
r
*
	`cos
(
x
*
M_PI
*2/256);

445 
yp
=120+
r
*
	`sö
(
x
*
M_PI
*2/256);

446 
xp
&=255;

447 
yp
%=240;

448 
XBuf
[
xp
+
yp
*
SCREEN_WIDTH
+
SCREEN_OFFS
]=3;

451 if(
•ecül
==2)

453 
thëa
=0;

454 
x
=0;x<128;x++)

456 
xc
,
yc
;

457 
r
,
t
;

458 
uöt32
 
m
,
n
;

460 
xc
=()128-
x
;

461 
yc
=0-(()–((
BuÂl
[(
x
*
l
)>>8]Ë*
mul
)>>14));

462 
t
=
M_PI
+
	`©™
(
yc
/
xc
);

463 
r
=
	`sqπ
(
xc
*xc+
yc
*yc);

465 
t
+=
thëa
;

466 
m
=128+
r
*
	`cos
(
t
);

467 
n
=120+
r
*
	`sö
(
t
);

469 if(
m
<256 && 
n
<240)

470 
XBuf
[
m
+
n
*
SCREEN_WIDTH
+
SCREEN_OFFS
]=3;

473 
x
=128;x<256;x++)

475 
xc
,
yc
;

476 
r
,
t
;

477 
uöt32
 
m
,
n
;

479 
xc
=()
x
-128;

480 
yc
=()((
BuÂl
[(
x
*
l
)>>8]*
mul
)>>14);

481 
t
=
	`©™
(
yc
/
xc
);

482 
r
=
	`sqπ
(
xc
*xc+
yc
*yc);

484 
t
+=
thëa
;

485 
m
=128+
r
*
	`cos
(
t
);

486 
n
=120+
r
*
	`sö
(
t
);

488 if(
m
<256 && 
n
<240)

489 
XBuf
[
m
+
n
*
SCREEN_WIDTH
+
SCREEN_OFFS
]=3;

492 
thëa
+=()
M_PI
/256;

496 
	`DøwTextTøns
(
XBuf
+10*
SCREEN_WIDTH
+
SCREEN_OFFS
+4+(((31-
	`°æí
((*)
NSFHódî
.
S⁄gName
))<<2)), SCREEN_WIDTH, NSFHeader.SongName, 6);

497 
	`DøwTextTøns
(
XBuf
+26*
SCREEN_WIDTH
+
SCREEN_OFFS
+4+(((31-
	`°æí
((*)
NSFHódî
.
Aπi°
))<<2)), SCREEN_WIDTH,NSFHeader.Artist, 6);

498 
	`DøwTextTøns
(
XBuf
+42*
SCREEN_WIDTH
+
SCREEN_OFFS
+4+(((31-
	`°æí
((*)
NSFHódî
.
C›yright
))<<2)), SCREEN_WIDTH,NSFHeader.Copyright, 6);

500 
	`DøwTextTøns
(
XBuf
+70*
SCREEN_WIDTH
+
SCREEN_OFFS
+4+(((31-
	`°æí
("S⁄g:"))<<2)), SCREEN_WIDTH, (
uöt8
*)"Song:", 6);

501 
	`•rötf
(
¢buf
,"<%d/%d>",
CuºítS⁄g
,
NSFHódî
.
TŸÆS⁄gs
);

502 
	`DøwTextTøns
(
XBuf
+82*
SCREEN_WIDTH
+
SCREEN_OFFS
+4+(((31-
	`°æí
(
¢buf
))<<2)), SCREEN_WIDTH, (
uöt8
*)snbuf, 6);

505 
uöt8
 
œ°
=0;

506 
uöt8
 
tmp
;

507 
tmp
=
	`FCEU_GëJoyJoy
();

508 if((
tmp
&
JOY_RIGHT
Ë&& !(
œ°
&JOY_RIGHT))

510 if(
CuºítS⁄g
<
NSFHódî
.
TŸÆS⁄gs
)

512 
CuºítS⁄g
++;

513 
S⁄gRñﬂd
=0xFF;

516 if((
tmp
&
JOY_LEFT
Ë&& !(
œ°
&JOY_LEFT))

518 if(
CuºítS⁄g
>1)

520 
CuºítS⁄g
--;

521 
S⁄gRñﬂd
=0xFF;

524 if((
tmp
&
JOY_UP
Ë&& !(
œ°
&JOY_UP))

526 
CuºítS⁄g
+=10;

527 if(
CuºítS⁄g
>
NSFHódî
.
TŸÆS⁄gs
) CurrentSong=NSFHeader.TotalSongs;

528 
S⁄gRñﬂd
=0xFF;

530 if((
tmp
&
JOY_DOWN
Ë&& !(
œ°
&JOY_DOWN))

532 
CuºítS⁄g
-=10;

533 if(
CuºítS⁄g
<1) CurrentSong=1;

534 
S⁄gRñﬂd
=0xFF;

536 if((
tmp
&
JOY_START
Ë&& !(
œ°
&JOY_START))

537 
S⁄gRñﬂd
=0xFF;

538 if((
tmp
&
JOY_A
Ë&& !(
œ°
&JOY_A))

540 
•ecül
=(special+1)%3;

542 
œ°
=
tmp
;

544 
	}
}

546 
	$DoNSFFøme
()

548 if(((
NSFNMIFœgs
&1Ë&& 
S⁄gRñﬂd
) || (NSFNMIFlags&2))

549 
	`TriggîNMI
();

550 
	}
}

552 
	$FCEUI_NSFSëVis
(
mode
)

554 
vismode
=
mode
;

555 
	}
}

557 
	$FCEUI_NSFCh™ge
(
amou¡
)

559 
CuºítS⁄g
+=
amou¡
;

560 if(
CuºítS⁄g
<1) CurrentSong=1;

561 if(
CuºítS⁄g
>
NSFHódî
.
TŸÆS⁄gs
) CurrentSong=NSFHeader.TotalSongs;

562 
S⁄gRñﬂd
=0xFF;

564 (
CuºítS⁄g
);

565 
	}
}

568 
	$FCEUI_NSFGëInfo
(
uöt8
 *
«me
, uöt8 *
¨ti°
, uöt8 *
c›yright
, 
maxÀn
)

570 
	`°∫˝y
((*)
«me
,(*)
NSFHódî
.
S⁄gName
,
maxÀn
);

571 
	`°∫˝y
((*)
¨ti°
,(*)
NSFHódî
.
Aπi°
,
maxÀn
);

572 
	`°∫˝y
((*)
c›yright
,(*)
NSFHódî
.
C›yright
,
maxÀn
);

573 (
NSFHódî
.
TŸÆS⁄gs
);

574 
	}
}

	@nsf.h

22 
	mID
[5];

23 
uöt8
 
	mVîsi⁄
;

24 
uöt8
 
	mTŸÆS⁄gs
;

25 
uöt8
 
	mSèπögS⁄g
;

26 
uöt8
 
	mLﬂdAddªssLow
;

27 
uöt8
 
	mLﬂdAddªssHigh
;

28 
uöt8
 
	mInôAddªssLow
;

29 
uöt8
 
	mInôAddªssHigh
;

30 
uöt8
 
	mPœyAddªssLow
;

31 
uöt8
 
	mPœyAddªssHigh
;

32 
uöt8
 
	mS⁄gName
[32];

33 
uöt8
 
	mAπi°
[32];

34 
uöt8
 
	mC›yright
[32];

35 
uöt8
 
	mNTSC•ìd
[2];

36 
uöt8
 
	mB™kSwôch
[8];

37 
uöt8
 
	mPAL•ìd
[2];

38 
uöt8
 
	mVideoSy°em
;

39 
uöt8
 
	mSoundChù
;

40 
uöt8
 
	mEx∑nsi⁄
[4];

41 
uöt8
 
	mª£rve
[8];

42 } 
	tNSF_HEADER
;

43 
NSF_öô
();

44 
DøwNSF
(
uöt8
 *
XBuf
);

45 
NSFDóŒoc
();

46 
NSFDodo
();

47 
DoNSFFøme
();

	@ops.h

22 
_PC
++;

23 
PUSH
(
_PC
>>8);

24 
PUSH
(
_PC
);

25 
	g_P
|=
B_FLAG
;

26 
PUSH
(
_P
|
U_FLAG
);

27 
	g_P
|=
I_FLAG
;

28 
	g_PC
=
RdMem
(0xFFFE);

29 
	g_PC
|=
RdMem
(0xFFFF)<<8;

33 
_P
=
POP
();

34 
	g_PI
=
_P
;

35 
	g_PC
=
POP
();

36 
	g_PC
|=
POP
()<<8;

40 
_PC
=
POP
();

41 
	g_PC
|=
POP
()<<8;

42 
	g_PC
++;

46 
PUSH
(
_A
);

49 
PUSH
(
_P
|
U_FLAG
|
B_FLAG
);

52 
_A
=
POP
();

53 
X_ZN
(
_A
);

56 
_P
=
POP
();

60 
≈c
;

67 
	g≈c
=
RdMem
(
_PC
++);

68 
	g≈c
|=
RdMem
(
_PC
++)<<8;

69 
	g_PC
=
≈c
;

74 
uöt32
 
tmp
;

75 
GëAB
(
tmp
);

76 
	g_PC
=
RdMem
(
tmp
);

77 
	g_PC
|=
RdMem
–((
tmp
+1)&0x00FF) | (tmp&0xFF00))<<8;

82 
uöt32
 
≈c
;

83 
	g≈c
=
RdMem
(
_PC
++);

84 
PUSH
(
_PC
>>8);

85 
PUSH
(
_PC
);

86 
	g≈c
|=
RdMem
(
_PC
++)<<8;

87 
	g_PC
=
≈c
;

92 
_X
=
_A
;

93 
X_ZN
(
_A
);

97 
_A
=
_X
;

98 
X_ZN
(
_A
);

102 
_Y
=
_A
;

103 
X_ZN
(
_A
);

106 
_A
=
_Y
;

107 
X_ZN
(
_A
);

111 
_X
=
_S
;

112 
X_ZN
(
_X
);

115 
_S
=
_X
;

119 
_X
--;

120 
X_ZN
(
_X
);

123 
_Y
--;

124 
X_ZN
(
_Y
);

128 
_X
++;

129 
X_ZN
(
_X
);

132 
_Y
++;

133 
X_ZN
(
_Y
);

137 
_P
&=~
C_FLAG
;

140 
_P
&=~
D_FLAG
;

143 
_P
&=~
I_FLAG
;

146 
_P
&=~
V_FLAG
;

150 
_P
|=
C_FLAG
;

153 
_P
|=
D_FLAG
;

156 
_P
|=
I_FLAG
;

162 0x0A: 
RMW_A
(
ASL
);

163 0x06: 
RMW_ZP
(
ASL
);

164 0x16: 
RMW_ZPX
(
ASL
);

165 0x0E: 
RMW_AB
(
ASL
);

166 0x1E: 
RMW_ABX
(
ASL
);

168 0xC6: 
RMW_ZP
(
DEC
);

169 0xD6: 
RMW_ZPX
(
DEC
);

170 0xCE: 
RMW_AB
(
DEC
);

171 0xDE: 
RMW_ABX
(
DEC
);

173 0xE6: 
RMW_ZP
(
INC
);

174 0xF6: 
RMW_ZPX
(
INC
);

175 0xEE: 
RMW_AB
(
INC
);

176 0xFE: 
RMW_ABX
(
INC
);

178 0x4A: 
RMW_A
(
LSR
);

179 0x46: 
RMW_ZP
(
LSR
);

180 0x56: 
RMW_ZPX
(
LSR
);

181 0x4E: 
RMW_AB
(
LSR
);

182 0x5E: 
RMW_ABX
(
LSR
);

184 0x2A: 
RMW_A
(
ROL
);

185 0x26: 
RMW_ZP
(
ROL
);

186 0x36: 
RMW_ZPX
(
ROL
);

187 0x2E: 
RMW_AB
(
ROL
);

188 0x3E: 
RMW_ABX
(
ROL
);

190 0x6A: 
RMW_A
(
ROR
);

191 0x66: 
RMW_ZP
(
ROR
);

192 0x76: 
RMW_ZPX
(
ROR
);

193 0x6E: 
RMW_AB
(
ROR
);

194 0x7E: 
RMW_ABX
(
ROR
);

196 0x69: 
LD_IM
(
ADC
);

197 0x65: 
LD_ZP
(
ADC
);

198 0x75: 
LD_ZPX
(
ADC
);

199 0x6D: 
LD_AB
(
ADC
);

200 0x7D: 
LD_ABX
(
ADC
);

201 0x79: 
LD_ABY
(
ADC
);

202 0x61: 
LD_IX
(
ADC
);

203 0x71: 
LD_IY
(
ADC
);

205 0x29: 
LD_IM
(
AND
);

206 0x25: 
LD_ZP
(
AND
);

207 0x35: 
LD_ZPX
(
AND
);

208 0x2D: 
LD_AB
(
AND
);

209 0x3D: 
LD_ABX
(
AND
);

210 0x39: 
LD_ABY
(
AND
);

211 0x21: 
LD_IX
(
AND
);

212 0x31: 
LD_IY
(
AND
);

214 0x24: 
LD_ZP
(
BIT
);

215 0x2C: 
LD_AB
(
BIT
);

217 0xC9: 
LD_IM
(
CMP
);

218 0xC5: 
LD_ZP
(
CMP
);

219 0xD5: 
LD_ZPX
(
CMP
);

220 0xCD: 
LD_AB
(
CMP
);

221 0xDD: 
LD_ABX
(
CMP
);

222 0xD9: 
LD_ABY
(
CMP
);

223 0xC1: 
LD_IX
(
CMP
);

224 0xD1: 
LD_IY
(
CMP
);

226 0xE0: 
LD_IM
(
CPX
);

227 0xE4: 
LD_ZP
(
CPX
);

228 0xEC: 
LD_AB
(
CPX
);

230 0xC0: 
LD_IM
(
CPY
);

231 0xC4: 
LD_ZP
(
CPY
);

232 0xCC: 
LD_AB
(
CPY
);

234 0x49: 
LD_IM
(
EOR
);

235 0x45: 
LD_ZP
(
EOR
);

236 0x55: 
LD_ZPX
(
EOR
);

237 0x4D: 
LD_AB
(
EOR
);

238 0x5D: 
LD_ABX
(
EOR
);

239 0x59: 
LD_ABY
(
EOR
);

240 0x41: 
LD_IX
(
EOR
);

241 0x51: 
LD_IY
(
EOR
);

243 0xA9: 
LD_IM
(
LDA
);

244 0xA5: 
LD_ZP
(
LDA
);

245 0xB5: 
LD_ZPX
(
LDA
);

246 0xAD: 
LD_AB
(
LDA
);

247 0xBD: 
LD_ABX
(
LDA
);

248 0xB9: 
LD_ABY
(
LDA
);

249 0xA1: 
LD_IX
(
LDA
);

250 0xB1: 
LD_IY
(
LDA
);

252 0xA2: 
LD_IM
(
LDX
);

253 0xA6: 
LD_ZP
(
LDX
);

254 0xB6: 
LD_ZPY
(
LDX
);

255 0xAE: 
LD_AB
(
LDX
);

256 0xBE: 
LD_ABY
(
LDX
);

258 0xA0: 
LD_IM
(
LDY
);

259 0xA4: 
LD_ZP
(
LDY
);

260 0xB4: 
LD_ZPX
(
LDY
);

261 0xAC: 
LD_AB
(
LDY
);

262 0xBC: 
LD_ABX
(
LDY
);

264 0x09: 
LD_IM
(
ORA
);

265 0x05: 
LD_ZP
(
ORA
);

266 0x15: 
LD_ZPX
(
ORA
);

267 0x0D: 
LD_AB
(
ORA
);

268 0x1D: 
LD_ABX
(
ORA
);

269 0x19: 
LD_ABY
(
ORA
);

270 0x01: 
LD_IX
(
ORA
);

271 0x11: 
LD_IY
(
ORA
);

274 0xE9: 
LD_IM
(
SBC
);

275 0xE5: 
LD_ZP
(
SBC
);

276 0xF5: 
LD_ZPX
(
SBC
);

277 0xED: 
LD_AB
(
SBC
);

278 0xFD: 
LD_ABX
(
SBC
);

279 0xF9: 
LD_ABY
(
SBC
);

280 0xE1: 
LD_IX
(
SBC
);

281 0xF1: 
LD_IY
(
SBC
);

283 0x85: 
ST_ZP
(
_A
);

284 0x95: 
ST_ZPX
(
_A
);

285 0x8D: 
ST_AB
(
_A
);

286 0x9D: 
ST_ABX
(
_A
);

287 0x99: 
ST_ABY
(
_A
);

288 0x81: 
ST_IX
(
_A
);

289 0x91: 
ST_IY
(
_A
);

291 0x86: 
ST_ZP
(
_X
);

292 0x96: 
ST_ZPY
(
_X
);

293 0x8E: 
ST_AB
(
_X
);

295 0x84: 
ST_ZP
(
_Y
);

296 0x94: 
ST_ZPX
(
_Y
);

297 0x8C: 
ST_AB
(
_Y
);

300 0x90: if(
_P
&
C_FLAG
Ë
_PC
++; {
JR
();} ;

303 0xB0: if(
_P
&
C_FLAG
Ë{
JR
();} 
	g_PC
++; ;

306 0xF0: if(
_P
&
Z_FLAG
Ë{
JR
();} 
	g_PC
++; ;

309 0xD0: if(
_P
&
Z_FLAG
Ë
_PC
++; {
JR
();} ;

312 0x30: if(
_P
&
N_FLAG
Ë{
JR
();} 
	g_PC
++; ;

315 0x10: if(
_P
&
N_FLAG
Ë
_PC
++; {
JR
();} ;

318 0x50: if(
_P
&
V_FLAG
Ë
_PC
++; {
JR
();} ;

321 0x70: if(
_P
&
V_FLAG
Ë{
JR
();} 
	g_PC
++; ;

329 0x0B: 
LD_IM
(
AND
;
_P
&=~
C_FLAG
;_P|=
_A
>>7);

332 0x87: 
ST_ZP
(
_A
&
_X
);

333 0x97: 
ST_ZPY
(
_A
&
_X
);

334 0x8F: 
ST_AB
(
_A
&
_X
);

335 0x83: 
ST_IX
(
_A
&
_X
);

339 
uöt8
 
¨πmp
;

340 
LD_IM
(
AND
;
_P
&=~
V_FLAG
;_P|=(
_A
^(_A>>1))&0x40;
¨πmp
=_A>>7;_A>>=1;_A|=(_P&
C_FLAG
)<<7;_P&=~C_FLAG;_P|˜ºtmp;
X_ZN
(_A));

343 0x4B: 
LD_IM
(
AND
;
LSRA
);

346 0xAB: 
LD_IM
(
_A
|=0xEE;
AND
;
_X
=_A);

349 0xCB: 
LD_IM
(
AXS
);

352 0xC7: 
RMW_ZP
(
DEC
;
CMP
);

353 0xD7: 
RMW_ZPX
(
DEC
;
CMP
);

354 0xCF: 
RMW_AB
(
DEC
;
CMP
);

355 0xDF: 
RMW_ABX
(
DEC
;
CMP
);

356 0xDB: 
RMW_ABY
(
DEC
;
CMP
);

357 0xC3: 
RMW_IX
(
DEC
;
CMP
);

358 0xD3: 
RMW_IY
(
DEC
;
CMP
);

361 0xE7: 
RMW_ZP
(
INC
;
SBC
);

362 0xF7: 
RMW_ZPX
(
INC
;
SBC
);

363 0xEF: 
RMW_AB
(
INC
;
SBC
);

364 0xFF: 
RMW_ABX
(
INC
;
SBC
);

365 0xFB: 
RMW_ABY
(
INC
;
SBC
);

366 0xE3: 
RMW_IX
(
INC
;
SBC
);

367 0xF3: 
RMW_IY
(
INC
;
SBC
);

371 0x04: 
_PC
++;;

372 0x14: 
_PC
++;;

373 0x34: 
_PC
++;;

374 0x44: 
_PC
++;;

375 0x54: 
_PC
++;;

376 0x64: 
_PC
++;;

377 0x74: 
_PC
++;;

379 0x80: 
_PC
++;;

380 0x82: 
_PC
++;;

381 0x89: 
_PC
++;;

382 0xC2: 
_PC
++;;

383 0xD4: 
_PC
++;;

384 0xE2: 
_PC
++;;

385 0xF4: 
_PC
++;;

400 0xF2:
ADDCYC
(0xFF);

401 
	g_jammed
=1;

402 
	g_PC
--;

406 0xBB: 
RMW_ABY
(
_S
&=
x
;
_A
=
_X
=_S;
X_ZN
(_X));

409 0xA7: 
LD_ZP
(
LDA
;
LDX
);

410 0xB7: 
LD_ZPY
(
LDA
;
LDX
);

411 0xAF: 
LD_AB
(
LDA
;
LDX
);

412 0xBF: 
LD_ABY
(
LDA
;
LDX
);

413 0xA3: 
LD_IX
(
LDA
;
LDX
);

414 0xB3: 
LD_IY
(
LDA
;
LDX
);

425 0x27: 
RMW_ZP
(
ROL
;
AND
);

426 0x37: 
RMW_ZPX
(
ROL
;
AND
);

427 0x2F: 
RMW_AB
(
ROL
;
AND
);

428 0x3F: 
RMW_ABX
(
ROL
;
AND
);

429 0x3B: 
RMW_ABY
(
ROL
;
AND
);

430 0x23: 
RMW_IX
(
ROL
;
AND
);

431 0x33: 
RMW_IY
(
ROL
;
AND
);

434 0x67: 
RMW_ZP
(
ROR
;
ADC
);

435 0x77: 
RMW_ZPX
(
ROR
;
ADC
);

436 0x6F: 
RMW_AB
(
ROR
;
ADC
);

437 0x7F: 
RMW_ABX
(
ROR
;
ADC
);

438 0x7B: 
RMW_ABY
(
ROR
;
ADC
);

439 0x63: 
RMW_IX
(
ROR
;
ADC
);

440 0x73: 
RMW_IY
(
ROR
;
ADC
);

443 0x07: 
RMW_ZP
(
ASL
;
ORA
);

444 0x17: 
RMW_ZPX
(
ASL
;
ORA
);

445 0x0F: 
RMW_AB
(
ASL
;
ORA
);

446 0x1F: 
RMW_ABX
(
ASL
;
ORA
);

447 0x1B: 
RMW_ABY
(
ASL
;
ORA
);

448 0x03: 
RMW_IX
(
ASL
;
ORA
);

449 0x13: 
RMW_IY
(
ASL
;
ORA
);

452 0x47: 
RMW_ZP
(
LSR
;
EOR
);

453 0x57: 
RMW_ZPX
(
LSR
;
EOR
);

454 0x4F: 
RMW_AB
(
LSR
;
EOR
);

455 0x5F: 
RMW_ABX
(
LSR
;
EOR
);

456 0x5B: 
RMW_ABY
(
LSR
;
EOR
);

457 0x43: 
RMW_IX
(
LSR
;
EOR
);

458 0x53: 
RMW_IY
(
LSR
;
EOR
);

461 0x93: 
ST_IY
(
_A
&
_X
&(((
A
-
_Y
)>>8)+1));

462 0x9F: 
ST_ABY
(
_A
&
_X
&(((
A
-
_Y
)>>8)+1));

465 0x9C: 
ST_ABX
(
_Y
&(((
A
-
_X
)>>8)+1));

468 0x9E: 
ST_ABY
(
_X
&(((
A
-
_Y
)>>8)+1));

471 0x9B: 
_S
=
_A
&
_X
;
ST_ABY
(_S& (((
A
-
_Y
)>>8)+1) );

474 0x0C: 
LD_AB
(;);

480 0xFC: 
LD_ABX
(;);

483 0x8B: 
_A
|=0xEE; 
	g_A
&=
_X
; 
LD_IM
(
AND
);

	@palette.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<m©h.h
>

25 
	~"ty≥s.h
"

26 
	~"f˚.h
"

27 
	~"gíîÆ.h
"

28 
	~"drivî.h
"

30 
	~"∑Àâe.h
"

31 
	~"∑Àâes/∑Àâes.h
"

33 
	~"svga.h
"

35 #i‚de‡
M_PI


36 
	#M_PI
 3.14159265358979323846

	)

39 
	g¡sccﬁ
=0;

40 
	g¡s˘öt
=46+10;

41 
	g¡schue
=72;

44 
∑l
 
	g∑Àâei
[64];

45 
∑l
 
	g∑Àâec
[64];

46 
∑l
 
	g∑Àâí
[64];

48 
CÆcuœãPÆëã
();

49 
Choo£PÆëã
();

50 
WrôePÆëã
();

51 
uöt8
 
	g∑À
=0;

53 
∑l
 *
	g∑lo
;

54 
∑l
 *
	g∑Õoöt
[8]=

56 
∑Àâe
,

57 
Ω2c04001
,

58 
Ω2c04002
,

59 
Ω2c04003
,

60 
Ω2c05004
,

63 
	$FCEUI_SëPÆëãAºay
(
uöt8
 *
∑l
)

65 if(!
∑l
)

66 
∑Õoöt
[0]=
∑Àâe
;

69 
x
;

70 
∑Õoöt
[0]=
∑Àâec
;

71 
x
=0;x<64;x++)

73 
∑Õoöt
[0][
x
].
r
=*((
uöt8
 *)
∑l
+x+x+x);

74 
∑Õoöt
[0][
x
].
g
=*((
uöt8
 *)
∑l
+x+x+x+1);

75 
∑Õoöt
[0][
x
].
b
=*((
uöt8
 *)
∑l
+x+x+x+2);

78 
	`FCEU_Re£tPÆëã
();

79 
	}
}

82 
	$FCEUI_SëNTSCTH
(
n
, 
töt
, 
hue
)

84 
¡s˘öt
=
töt
;

85 
¡schue
=
hue
;

86 
¡sccﬁ
=
n
;

87 
	`FCEU_Re£tPÆëã
();

88 
	}
}

90 
uöt8
 
	gœ°d
=0;

91 
	$SëNESDìmph
(
uöt8
 
d
, 
f‹˚
)

93 
uöt16
 
πmul
[7]={32768*1.239,32768*.794,32768*1.019,32768*.905,32768*1.023,32768*.741,32768*.75};

94 
uöt16
 
gtmul
[7]={32768*.915,32768*1.086,32768*.98,32768*1.026,32768*.908,32768*.987,32768*.75};

95 
uöt16
 
btmul
[7]={32768*.743,32768*.882,32768*.653,32768*1.277,32768*.979,32768*.101,32768*.75};

96 
uöt32
 
r
,
g
,
b
;

97 
x
;

102 if(!
f‹˚
)

104 if(
d
==
œ°d
)

109 
r
=
πmul
[6];

110 
g
=
πmul
[6];

111 
b
=
πmul
[6];

113 
x
=0;x<0x40;x++)

115 
uöt32
 
m
,
n
,
o
;

116 
m
=
∑lo
[
x
].
r
;

117 
n
=
∑lo
[
x
].
g
;

118 
o
=
∑lo
[
x
].
b
;

119 
m
=(m*
r
)>>15;

120 
n
=“*
g
)>>15;

121 
o
=(o*
b
)>>15;

122 if(
m
>0xff) m=0xff;

123 if(
n
>0xff)Ç=0xff;

124 if(
o
>0xff) o=0xff;

125 
	`FCEUD_SëPÆëã
(
x
|0xC0,
m
,
n
,
o
);

128 if(!
d
) ;

130 
r
=
πmul
[
d
-1];

131 
g
=
gtmul
[
d
-1];

132 
b
=
btmul
[
d
-1];

134 
x
=0;x<0x40;x++)

136 
uöt32
 
m
,
n
,
o
;

138 
m
=
∑lo
[
x
].
r
;

139 
n
=
∑lo
[
x
].
g
;

140 
o
=
∑lo
[
x
].
b
;

141 
m
=(m*
r
)>>15;

142 
n
=“*
g
)>>15;

143 
o
=(o*
b
)>>15;

144 if(
m
>0xff) m=0xff;

145 if(
n
>0xff)Ç=0xff;

146 if(
o
>0xff) o=0xff;

148 
	`FCEUD_SëPÆëã
(
x
|0x40,
m
,
n
,
o
);

151 
œ°d
=
d
;

152 
	}
}

155 
	$CÆcuœãPÆëã
()

157 
x
,
z
;

158 
r
,
g
,
b
;

159 
s
,
luma
,
thëa
;

160 
uöt8
 
cﬁs
[16]={0,24,21,18,15,12,9,6,3,0,33,30,27,0,0,0};

161 
uöt8
 
br1
[4]={6,9,12,12};

162 
br2
[4]={.29,.45,.73,.9};

163 
br3
[4]={0,.24,.47,.77};

165 
x
=0;x<=3;x++)

166 
z
=0;z<16;z++)

168 
s
=()
¡s˘öt
/128;

169 
luma
=
br2
[
x
];

170 if(
z
==0Ë{
s
=0;
luma
=(()
br1
[
x
])/12;}

172 if(
z
>=13)

174 
s
=
luma
=0;

175 if(
z
==13)

176 
luma
=
br3
[
x
];

179 
thëa
=()
M_PI
*()((()
cﬁs
[
z
]*10+ ((()
¡schue
/2)+300) )/()180);

180 
r
=()((
luma
+
s
*
	`sö
(
thëa
))*256);

181 
g
=()((
luma
-()27/53*
s
*
	`sö
(
thëa
)+()10/53*s*
	`cos
(theta))*256);

182 
b
=()((
luma
-
s
*
	`cos
(
thëa
))*256);

185 if(
r
>255)Ñ=255;

186 if(
g
>255) g=255;

187 if(
b
>255) b=255;

188 if(
r
<0)Ñ=0;

189 if(
g
<0) g=0;

190 if(
b
<0) b=0;

192 
∑Àâí
[(
x
<<4)+
z
].
r
=r;

193 
∑Àâí
[(
x
<<4)+
z
].
g
=g;

194 
∑Àâí
[(
x
<<4)+
z
].
b
=b;

196 
	`WrôePÆëã
();

197 
	}
}

199 
	gùÆëã
=0;

201 
	$FCEU_LﬂdGamePÆëã
()

203 
uöt8
 
±mp
[192];

204 
FILE
 *
Â
;

205 *
‚
;

207 
ùÆëã
=0;

209 
‚
=
	`FCEU_MakeFName
(
FCEUMKF_PALETTE
,0,0);

211 if((
Â
=
	`f›í
(
‚
,"rb")))

213 
x
;

214 
	`‰ód
(
±mp
,1,192,
Â
);

215 
	`f˛o£
(
Â
);

216 
x
=0;x<64;x++)

218 
∑Àâei
[
x
].
r
=
±mp
[x+x+x];

219 
∑Àâei
[
x
].
g
=
±mp
[x+x+x+1];

220 
∑Àâei
[
x
].
b
=
±mp
[x+x+x+2];

222 
ùÆëã
=1;

224 
	`‰ì
(
‚
);

225 
	}
}

227 
	$FCEU_Re£tPÆëã
()

231 
	`Choo£PÆëã
();

232 
	`WrôePÆëã
();

234 
	}
}

236 
	$Choo£PÆëã
()

238 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

239 
∑lo
=0;

240 if(
ùÆëã
)

241 
∑lo
=
∑Àâei
;

242 if(
¡sccﬁ
 && !
PAL
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
)

244 
∑lo
=
∑Àâí
;

245 
	`CÆcuœãPÆëã
();

248 
∑lo
=
∑Õoöt
[
∑À
];

249 
	}
}

251 
	$WrôePÆëã
()

253 
x
;

255 
x
=0;x<7;x++)

256 
	`FCEUD_SëPÆëã
(
x
,
unv∑Àâe
[x].
r
,unv∑Àâe[x].
g
,unv∑Àâe[x].
b
);

257 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

264 
x
=0;x<64;x++)

265 
	`FCEUD_SëPÆëã
(
x
+128,
∑lo
[x].
r
,∑lo[x].
g
,∑lo[x].
b
);

266 
	`SëNESDìmph
(
œ°d
,1);

268 
	}
}

270 
	$FCEUI_GëNTSCTH
(*
töt
, *
hue
)

272 *
töt
=
¡s˘öt
;

273 *
hue
=
¡schue
;

274 
	}
}

276 
	gc⁄åﬁ£À˘
=0;

277 
	gc⁄åﬁÀngth
=0;

279 
	$FCEUI_NTSCDEC
()

281 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 &&!
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
)

283 
which
;

284 if(
c⁄åﬁ£À˘
)

286 if(
c⁄åﬁÀngth
)

288 
which
=
c⁄åﬁ£À˘
==1?
¡schue
:
¡s˘öt
;

289 
which
--;

290 if(
which
<0) which=0;

291 if(
c⁄åﬁ£À˘
==1)

292 
¡schue
=
which
;

293 
¡s˘öt
=
which
;

294 
	`CÆcuœãPÆëã
();

296 
c⁄åﬁÀngth
=360;

299 
	}
}

301 
	$FCEUI_NTSCINC
()

303 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 && !
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
)

304 if(
c⁄åﬁ£À˘
)

306 if(
c⁄åﬁÀngth
)

308 
c⁄åﬁ£À˘
)

310 1:
¡schue
++;

311 if(
¡schue
>128)Çtschue=128;

312 
	`CÆcuœãPÆëã
();

314 2:
¡s˘öt
++;

315 if(
¡s˘öt
>128)Çtsctint=128;

316 
	`CÆcuœãPÆëã
();

320 
c⁄åﬁÀngth
=360;

322 
	}
}

324 
	$FCEUI_NTSCSELHUE
()

326 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 && !
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
){
c⁄åﬁ£À˘
=1;
c⁄åﬁÀngth
=360;}

327 
	}
}

329 
	$FCEUI_NTSCSELTINT
()

331 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 && !
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
){
c⁄åﬁ£À˘
=2;
c⁄åﬁÀngth
=360;}

332 
	}
}

334 
	$FCEU_DøwNTSCC⁄åﬁB¨s
(
uöt8
 *
XBuf
)

336 
uöt8
 *
XBaf
;

337 
which
=0;

338 
x
,
x2
;

340 if(!
c⁄åﬁÀngth
) ;

341 
c⁄åﬁÀngth
--;

342 if(!
XBuf
) ;

344 if(
c⁄åﬁ£À˘
==1)

346 
	`DøwTextTøns
(
XBuf
+128-12+180*256, 256, (
uöt8
 *)"Hue", 0x85);

347 
which
=
¡schue
<<1;

349 if(
c⁄åﬁ£À˘
==2)

351 
	`DøwTextTøns
(
XBuf
+128-16+180*256, 256, (
uöt8
 *)"Tint", 0x85);

352 
which
=
¡s˘öt
<<1;

355 
XBaf
=
XBuf
+200*256;

356 
x
=0;x<
which
;x+=2)

358 
x2
=6;x2>=-6;x2--)

360 
XBaf
[
x
-256*
x2
]=0x85;

363 ;
x
<256;x+=2)

365 
x2
=2;x2>=-2;x2--)

366 
XBaf
[
x
-256*
x2
]=0x85;

368 
	}
}

	@palette.h

2 
uöt8
 
	mr
,
	mg
,
	mb
;

3 } 
	t∑l
;

5 
∑l
 *
∑lo
;

7 
FCEU_Re£tPÆëã
();

8 
FCEU_Re£tMesßges
();

9 
FCEU_LﬂdGamePÆëã
();

10 
FCEU_DøwNTSCC⁄åﬁB¨s
(
uöt8
 *
XBuf
);

12 
SëNESDìmph
(
uöt8
 
d
, 
f‹˚
);

	@palettes/conv.c

3 
	~<°dio.h
>

4 
	~"../ty≥s.h
"

5 
	~"../∑Àâe.h
"

6 
	~"∑Àâes.h
"

9 
uöt8
 
	gΩ2c04001_cﬁ‹èbÀ
[] =

22 
uöt8
 
	gΩ2c04002_cﬁ‹èbÀ
[] =

36 
uöt8
 
	gΩ2c04003_cﬁ‹èbÀ
[] =

50 
uöt8
 
	gΩ2c05004_cﬁ‹èbÀ
[] =

63 
	$maö
()

65 
x
;

66 
x
=0;x<64;x++)

70 
	`¥ötf
("{0x%02x, 0x%02x, 0x%02x},\n",
∑Àâe
[
Ω2c04001_cﬁ‹èbÀ
[
x
]&0x3F].
r
,

71 
∑Àâe
[
Ω2c04001_cﬁ‹èbÀ
[
x
]&0x3F].
g
,

72 
∑Àâe
[
Ω2c04001_cﬁ‹èbÀ
[
x
]&0x3F].
b
);

74 
	}
}

	@palettes/palettes.h

1 
∑l
 
	gΩ2c04001
[64] = {

2 
	~"Ω2c04001.h
"

5 
∑l
 
	gΩ2c04002
[64] = {

6 
	~"Ω2c04002.h
"

9 
∑l
 
	gΩ2c04003
[64] = {

10 
	~"Ω2c04003.h
"

12 
∑l
 
	gΩ2c05004
[64] = {

13 
	~"Ω2c05004.h
"

16 
∑l
 
	gunv∑Àâe
[7] = {

28 
∑l
 
	g∑Àâe
[64] = {

	@palettes/rp2c04001.h

	@palettes/rp2c04002.h

	@palettes/rp2c04003.h

	@palettes/rp2c05004.h

	@ppu.c

6 
	~<°rög.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

10 
	~"ty≥s.h
"

11 
	~"x6502.h
"

12 
	~"f˚.h
"

13 
	~"sound.h
"

14 
	~"svga.h
"

15 
	~"√çœy.h
"

16 
	~"gíîÆ.h
"

17 
	~"ídün.h
"

18 
	~"vîsi⁄.h
"

19 
	~"mem‹y.h
"

21 
	~"ˇπ.h
"

22 
	~"nsf.h
"

23 
	~"fds.h
"

24 
	~"öes.h
"

25 
	~"unif.h
"

26 
	~"chót.h
"

28 
	#MMC5SPRVRAMADR
(
V
Ë&
MMC5SPRVPage
[(V)>>10][(V)]

	)

30 
	#VRAMADR
(
V
Ë&
VPage
[(V)>>10][(V)]

	)

32 
	#V_FLIP
 0x80

	)

33 
	#H_FLIP
 0x40

	)

34 
	#SP_BACK
 0x20

	)

36 
uöt8
 
	gSPRAM
[0x100] 
__©åibuã__
 ((
Æig√d
 (4)));

37 
uöt8
 
	gSPRBUF
[0x100] 
__©åibuã__
 ((
Æig√d
 (4)));

39 
uöt8
 
	g•æöebuf
[256+8] 
__©åibuã__
 ((
Æig√d
 (4)));

41 
öt32
 
	g•hôx
;

42 
uöt8
 
	g•hôd©a
;

43 
	g•‹k
=0;

49 
BGRídî
(
uöt8
 *
èrgë
);

52 
	gmax•rôes
=8;

53 
	g•æöebuf_em±y
=0;

56 
	$FCEUI_DißbÀS¥ôeLimô©i⁄
(
a
)

58 
max•rôes
=
a
?64:8;

59 
	}
}

64 
uöt8
 
	my
,
	mno
,
	m©r
,
	mx
;

65 } 
	tSPR
 
	t__©åibuã__
((
	tÆig√d
(1)));

69 
uöt8
 
	mˇ
[2],
	m©r
,
	mx
;

73 } 
	tSPRB
 
	t__©åibuã__
((
	tÆig√d
(1)));

77 
uöt8
 
	gno•rôes
,
	gS¥ôeBluΩ
;

79 
	$FëchS¥ôeD©a
()

81 
SPR
 *
•r
;

82 
uöt8
 
H
;

83 
n
,
vofs
;

85 
•r
=(
SPR
 *)
SPRAM
;

86 
H
=8;

88 
no•rôes
=
S¥ôeBluΩ
=0;

90 
vofs
=()(
PPU
[0]&0x8&(((PPU[0]&0x20)^0x20)>>2))<<9;

91 
H
+=(
PPU
[0]&0x20)>>2;

93 if(!
PPU_hook
)

94 
n
=63;n>=0;n--,
•r
++)

96 if(()(
sˇ∆öe
-
•r
->
y
)>=
H
) ;

98 if(
no•rôes
<
max•rôes
)

100 if(
n
==63Ë
S¥ôeBluΩ
=1;

103 
SPRB
 
d°
;

104 
uöt8
 *
C
;

105 
t
;

106 
vadr
;

108 
t
 = ()
sˇ∆öe
-(
•r
->
y
);

110 i‡(
S¥ôe16
)

111 
vadr
 = ((
•r
->
no
&1)<<12) + ((spr->no&0xFE)<<4);

113 
vadr
 = (
•r
->
no
<<4)+
vofs
;

115 i‡(
•r
->
©r
&
V_FLIP
)

117 
vadr
+=7;

118 
vadr
-=
t
;

119 
vadr
+=(
PPU
[0]&0x20)>>1;

120 
vadr
-=
t
&8;

124 
vadr
+=
t
;

125 
vadr
+=
t
&8;

129 if(
MMC5Hack
 && 
gíõ°age
!=1Ë
C
 = 
	`MMC5SPRVRAMADR
(
vadr
);

130 
C
 = 
	`VRAMADR
(
vadr
);

133 
d°
.
ˇ
[0]=
C
[0];

134 
d°
.
ˇ
[1]=
C
[8];

135 
d°
.
x
=
•r
->x;

136 
d°
.
©r
=
•r
->atr;

139 *(
uöt32
 *)&
SPRBUF
[
no•rôes
<<2]=*(uöt32 *)&
d°
;

142 
no•rôes
++;

146 
PPU_°©us
|=0x20;

151 
n
=63;n>=0;n--,
•r
++)

153 if(()(
sˇ∆öe
-
•r
->
y
)>=
H
) ;

155 if(
no•rôes
<
max•rôes
)

157 if(
n
==63Ë
S¥ôeBluΩ
=1;

160 
SPRB
 
d°
;

161 
uöt8
 *
C
;

162 
t
;

163 
vadr
;

165 
t
 = ()
sˇ∆öe
-(
•r
->
y
);

167 i‡(
S¥ôe16
)

168 
vadr
 = ((
•r
->
no
&1)<<12) + ((spr->no&0xFE)<<4);

170 
vadr
 = (
•r
->
no
<<4)+
vofs
;

172 i‡(
•r
->
©r
&
V_FLIP
)

174 
vadr
+=7;

175 
vadr
-=
t
;

176 
vadr
+=(
PPU
[0]&0x20)>>1;

177 
vadr
-=
t
&8;

181 
vadr
+=
t
;

182 
vadr
+=
t
&8;

185 if(
MMC5Hack
Ë
C
 = 
	`MMC5SPRVRAMADR
(
vadr
);

186 
C
 = 
	`VRAMADR
(
vadr
);

187 
d°
.
ˇ
[0]=
C
[0];

188 if(
no•rôes
<8)

190 
	`PPU_hook
(0x2000);

191 
	`PPU_hook
(
vadr
);

193 
d°
.
ˇ
[1]=
C
[8];

194 
d°
.
x
=
•r
->x;

195 
d°
.
©r
=
•r
->atr;

198 *(
uöt32
 *)&
SPRBUF
[
no•rôes
<<2]=*(uöt32 *)&
d°
;

201 
no•rôes
++;

205 
PPU_°©us
|=0x20;

210 if(
no•rôes
>8Ë
PPU_°©us
|=0x20;

212 if(
PPU_hook
)

214 
n
=0;n<(8-
no•rôes
);n++)

216 
	`PPU_hook
(0x2000);

217 
	`PPU_hook
(
vofs
);

221 
	}
}

223 #ifde‡
FRAMESKIP


224 
FSkù
;

227 
	$Re‰eshS¥ôes
()

229 
n
;

230 
SPRB
 *
•r
;

232 
•‹k
=0;

233 if(!
no•rôes
) ;

234 #ifde‡
FRAMESKIP


235 if(
FSkù
)

237 if(!
S¥ôeBluΩ
)

239 
no•rôes
=0;

243 
no•rôes
=1;

247 
no•rôes
--;

248 
•r
 = (
SPRB
*)
SPRBUF
+
no•rôes
;

250 i‡(!
•æöebuf_em±y
)

252 
	`FCEU_dwmem£t
(
•æöebuf
,0x80808080,256);

253 
•æöebuf_em±y
 = 1;

256 
n
=
no•rôes
;n>=0;n--,
•r
--)

258 
uöt32
 
J
;

260 
J
=
•r
->
ˇ
[0]|spr->ca[1];

262 i‡(
J
)

264 
uöt8
 
©r
,
c1
,
c2
;

265 
uöt8
 *
C
;

266 
uöt8
 *
VB
;

267 
x
=
•r
->x;

268 
©r
=
•r
->atr;

270 if(
n
==0 && 
S¥ôeBluΩ
 && !(
PPU_°©us
&0x40))

272 
•hôx
=
x
;

273 
•hôd©a
=
J
;

274 if(
©r
&
H_FLIP
)

275 
•hôd©a
((
J
<<7)&0x80) |

276 ((
J
<<5)&0x40) |

277 ((
J
<<3)&0x20) |

278 ((
J
<<1)&0x10) |

279 ((
J
>>1)&0x08) |

280 ((
J
>>3)&0x04) |

281 ((
J
>>5)&0x02) |

282 ((
J
>>7)&0x01);

286 
c1
=((
•r
->
ˇ
[0]>>1)&0x55)|(spr->ca[1]&0xAA);

287 
c2
=(
•r
->
ˇ
[0]&0x55)|((spr->ca[1]<<1)&0xAA);

289 
C
 = 
•æöebuf
+
x
;

290 
VB
 = (
PALRAM
+0x10)+((
©r
&3)<<2);

293 
J
 &= 0xff;

294 if(
©r
&
SP_BACK
Ë
J
 |= 0x4000;

295 i‡(
©r
&
H_FLIP
)

297 i‡(
J
&0x02Ë
C
[1]=
VB
[
c1
&3]|(J>>8);

298 i‡(
J
&0x01Ë*
C
=
VB
[
c2
&3]|(J>>8);

299 
c1
>>=2;
c2
>>=2;

300 i‡(
J
&0x08Ë
C
[3]=
VB
[
c1
&3]|(J>>8);

301 i‡(
J
&0x04Ë
C
[2]=
VB
[
c2
&3]|(J>>8);

302 
c1
>>=2;
c2
>>=2;

303 i‡(
J
&0x20Ë
C
[5]=
VB
[
c1
&3]|(J>>8);

304 i‡(
J
&0x10Ë
C
[4]=
VB
[
c2
&3]|(J>>8);

305 
c1
>>=2;
c2
>>=2;

306 i‡(
J
&0x80Ë
C
[7]=
VB
[
c1
]|(J>>8);

307 i‡(
J
&0x40Ë
C
[6]=
VB
[
c2
]|(J>>8);

309 i‡(
J
&0x02Ë
C
[6]=
VB
[
c1
&3]|(J>>8);

310 i‡(
J
&0x01Ë
C
[7]=
VB
[
c2
&3]|(J>>8);

311 
c1
>>=2;
c2
>>=2;

312 i‡(
J
&0x08Ë
C
[4]=
VB
[
c1
&3]|(J>>8);

313 i‡(
J
&0x04Ë
C
[5]=
VB
[
c2
&3]|(J>>8);

314 
c1
>>=2;
c2
>>=2;

315 i‡(
J
&0x20Ë
C
[2]=
VB
[
c1
&3]|(J>>8);

316 i‡(
J
&0x10Ë
C
[3]=
VB
[
c2
&3]|(J>>8);

317 
c1
>>=2;
c2
>>=2;

318 i‡(
J
&0x80Ë*
C
=
VB
[
c1
]|(J>>8);

319 i‡(
J
&0x40Ë
C
[1]=
VB
[
c2
]|(J>>8);

322 
•æöebuf_em±y
 = 0;

326 
no•rôes
=0;

327 
•‹k
=1;

328 
	}
}

331 
	$C›yS¥ôes
(
uöt8
 *
èrgë
)

333 
uöt8
 
n
=((
PPU
[1]&4)^4)<<1;

335 
lo›skõ
:

337 
uöt32
 
t
=*(uöt32 *)(
•æöebuf
+
n
);

338 if(
t
!=0x80808080)

340 #ifde‡
LSB_FIRST


341 
uöt32
 
tb
=*(uöt32 *)(
èrgë
+
n
);

342 if(!(
t
&0x00000080Ë&& (!—&0x00000040Ë|| (
tb
&0x00000040))) {

343 
tb
 &~0x000000ff;Åb |
t
 & 0x000000ff;

346 if(!(
t
&0x00008000Ë&& (!—&0x00004000Ë|| (
tb
&0x00004000))) {

347 
tb
 &~0x0000ff00;Åb |
t
 & 0x0000ff00;

350 if(!(
t
&0x00800000Ë&& (!—&0x00400000Ë|| (
tb
&0x00400000))) {

351 
tb
 &~0x00ff0000;Åb |
t
 & 0x00ff0000;

354 if(!(
t
&0x80000000Ë&& (!—&0x40000000Ë|| (
tb
&0x40000000))) {

355 
tb
 &~0xff000000;Åb |
t
 & 0xff000000;

357 *(
uöt32
 *)(
èrgë
+
n
)=
tb
;

359 #îr‹ 
nŸ
 
im∂emíãd


363 
n
+=4;

364 if(
n
Ë
lo›skõ
;

365 
	}
}

	@ppu.h

2 
uöt8
 
SPRAM
[0x100];

4 
FëchS¥ôeD©a
();

5 
Re‰eshS¥ôes
();

6 
C›yS¥ôes
(
uöt8
 *
èrgë
);

	@ppu098.c

22 
	~<°rög.h
>

24 
	~"ty≥s.h
"

25 
	~"x6502.h
"

26 
	~"f˚.h
"

27 
	~"µu098.h
"

28 
	~"nsf.h
"

29 
	~"sound.h
"

30 
	~"mem‹y.h
"

32 
	~"ˇπ.h
"

33 
	~"∑Àâe.h
"

34 
	~"video.h
"

35 
	~"öput.h
"

37 #ifde‡
GP2X


38 
	~"drivîs/gp2x/asmutûs.h
"

41 
	#PÆ
 (
PALRAM
)

	)

43 
FëchS¥ôeD©a098
();

44 
	$FASTAPASS
(1Ë
	`Re‰eshLöe098
(
œ°pixñ
);

45 
	`Re‰eshS¥ôes098
();

46 
	`C›yS¥ôes098
(
uöt8
 *
èrgë
);

48 
	`Fixô1
();

49 
uöt32
 
µulut1
[256];

50 
uöt32
 
µulut2
[256];

51 
uöt32
 
µulut3
[128];

53 
	$makïpulut
()

55 
x
;

56 
y
;

58 
x
=0;x<256;x++)

60 
µulut1
[
x
]=0;

61 
y
=0;y<8;y++)

62 
µulut1
[
x
]|=((x>>(7-
y
))&1)<<(y*4);

63 
µulut2
[
x
]=
µulut1
[x]<<1;

68 
cc
,
xo
,
pixñ
;

70 
cc
=0;cc<16;cc++)

72 
xo
=0;xo<8;xo++)

74 
µulut3
[
xo
|(
cc
<<3)]=0;

75 
pixñ
=0;pixel<8;pixel++)

77 
shi·r
;

78 
shi·r
=(
pixñ
+
xo
)/8;

79 
shi·r
*=2;

80 
µulut3
[
xo
|(
cc
<<3)]|=(–cc>>
shi·r
 )&3)<<(2+
pixñ
*4);

87 
	}
}

89 #i‡
deföed
(
ASM_6502
Ë&& !deföed(
DEBUG_ASM_6502
)

90 
	$asm˝u_upd©e
(
öt32
 
cy˛es
)

93 
fh˙t
-=
cy˛es
;

94 if(
fh˙t
<=0)

96 
	`FømeSoundUpd©e
();

97 
fh˙t
+=
fhöc
;

100 if(
PCMIRQCou¡
>0)

102 
PCMIRQCou¡
-=
cy˛es
;

103 if(
PCMIRQCou¡
<=0)

105 
vdis
=1;

106 if((
PSG
[0x10]&0x80) && !(PSG[0x10]&0x40))

108 
uöt8
 
SIRQSèt
;

109 
SIRQSèt
|=0x80;

110 
	`X6502_IRQBegö
(
FCEU_IQDPCM
);

114 
	}
}

117 
µudód
;

118 
kook
;

121 
uöt8
 
	gdìmp
=0;

122 
	gdìmp˙t
[8];

124 
max•rôes
;

126 
uöt8
 
PPUSPL
;

127 
uöt8
 
SPRAM
[0x100];

128 
uöt8
 
SPRBUF
[0x100];

131 
	#MMC5SPRVRAMADR
(
V
Ë&
MMC5SPRVPage
[(V)>>10][(V)]

	)

132 
	#MMC5BGVRAMADR
(
V
Ë&
MMC5BGVPage
[(V)>>10][(V)]

	)

133 
	#VRAMADR
(
V
Ë&
VPage
[(V)>>10][(V)]

	)

136 
	$DECLFR
(
A2002
)

138 
uöt8
 
ªt
;

140 
	`FCEUPPU_LöeUpd©e098
();

141 
ªt
 = 
PPU_°©us
;

142 
ªt
|=
PPUGíL©ch
&0x1F;

145 
vtoggÀ
=0;

146 
PPU_°©us
&=0x7F;

147 
PPUGíL©ch
=
ªt
;

149  
ªt
;

150 
	}
}

152 
	$DECLFR
(
A200x
)

154 
	`FCEUPPU_LöeUpd©e098
();

155  
PPUGíL©ch
;

156 
	}
}

183 
	$DECLFR
(
A2007
)

185 
uöt8
 
ªt
;

186 
uöt32
 
tmp
=
Re‰eshAddr
&0x3FFF;

188 
	`FCEUPPU_LöeUpd©e098
();

190 
ªt
=
VRAMBuf„r
;

193 if(
PPU_hook
Ë
	`PPU_hook
(
tmp
);

194 
PPUGíL©ch
=
VRAMBuf„r
;

195 if(
tmp
<0x2000)

197 
VRAMBuf„r
=
VPage
[
tmp
>>10][tmp];

201 
VRAMBuf„r
=
v«∑ge
[(
tmp
>>10)&0x3][tmp&0x3FF];

205 if(
INC32
Ë
Re‰eshAddr
+=32;

206 
Re‰eshAddr
++;

207 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

209  
ªt
;

210 
	}
}

212 
	$DECLFW
(
B2000
)

216 
	`FCEUPPU_LöeUpd©e098
();

217 
PPUGíL©ch
=
V
;

218 if(!(
PPU
[0]&0x80Ë&& (
V
&0x80Ë&& (
PPU_°©us
&0x80))

222 
	`TriggîNMI
();

224 
PPU
[0]=
V
;

225 
TempAddr
&=0xF3FF;

226 
TempAddr
|=(
V
&3)<<10;

227 
	}
}

229 
	$DECLFW
(
B2001
)

232 
	`FCEUPPU_LöeUpd©e098
();

233 
PPUGíL©ch
=
V
;

234 
PPU
[1]=
V
;

235 if(
V
&0xE0)

236 
dìmp
=
V
>>5;

237 
	}
}

239 
	$DECLFW
(
B2002
)

241 
PPUGíL©ch
=
V
;

242 
	}
}

244 
	$DECLFW
(
B2003
)

247 
PPUGíL©ch
=
V
;

248 
PPU
[3]=
V
;

249 
PPUSPL
=
V
&0x7;

250 
	}
}

252 
	$DECLFW
(
B2004
)

256 
PPUGíL©ch
=
V
;

257 if(
PPUSPL
>=8)

259 if(
PPU
[3]>=8)

260 
SPRAM
[
PPU
[3]]=
V
;

265 
SPRAM
[
PPUSPL
]=
V
;

267 
PPU
[3]++;

268 
PPUSPL
++;

270 
	}
}

272 
	$DECLFW
(
B2005
)

274 
uöt32
 
tmp
=
TempAddr
;

275 
	`FCEUPPU_LöeUpd©e098
();

276 
PPUGíL©ch
=
V
;

277 if(!
vtoggÀ
)

279 
tmp
&=0xFFE0;

280 
tmp
|=
V
>>3;

281 
XOff£t
=
V
&7;

285 
tmp
&=0x8C1F;

286 
tmp
|=((
V
&~0x7)<<2);

287 
tmp
|=(
V
&7)<<12;

289 
TempAddr
=
tmp
;

290 
vtoggÀ
^=1;

291 
	}
}

294 
	$DECLFW
(
B2006
)

296 
	`FCEUPPU_LöeUpd©e098
();

298 
PPUGíL©ch
=
V
;

299 if(!
vtoggÀ
)

301 
TempAddr
&=0x00FF;

302 
TempAddr
|=(
V
&0x3f)<<8;

306 
TempAddr
&=0xFF00;

307 
TempAddr
|=
V
;

309 
Re‰eshAddr
=
TempAddr
;

310 if(
PPU_hook
)

311 
	`PPU_hook
(
Re‰eshAddr
);

314 
vtoggÀ
^=1;

315 
	}
}

317 
	$DECLFW
(
B2007
)

319 
uöt32
 
tmp
=
Re‰eshAddr
&0x3FFF;

320 
PPUGíL©ch
=
V
;

321 if(
tmp
>=0x3F00)

324 if(!(
tmp
&0xf))

325 
PALRAM
[0x00]=PALRAM[0x04]=PALRAM[0x08]=PALRAM[0x0C]=
V
&0x3F;

326 if(
tmp
&3Ë
PALRAM
[—mp&0x1f)]=
V
&0x3f;

328 if(
tmp
<0x2000)

330 if(
PPUCHRRAM
&(1<<(
tmp
>>10)))

331 
VPage
[
tmp
>>10][tmp]=
V
;

335 if(
PPUNTARAM
&(1<<((
tmp
&0xF00)>>10)))

336 
v«∑ge
[((
tmp
&0xF00)>>10)][tmp&0x3FF]=
V
;

339 if(
INC32
Ë
Re‰eshAddr
+=32;

340 
Re‰eshAddr
++;

341 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

342 
	}
}

344 
	$DECLFW
(
B4014
)

346 
uöt32
 
t
=
V
<<8;

347 
x
;

351 
x
=0;x<256;x++)

352 
	`B2004
(0x2004,
X
.
DB
=
ARód
[
t
+
x
](t+x));

353 
	`X6502_AddCy˛es
(512);

354 
	}
}

356 
	#PAL
(
c
Ë((c)+
cc
)

	)

358 
	#GETLASTPIXEL
 (
PAL
?((
time°amp
*48-
löe°¨âs
)/15Ë: (—ime°amp*48-löe°¨âs)>>4Ë)

	)

360 
uöt8
 *
	gPlöe
=0,*
	gPlöef
;

361 
	gfú°tûe
;

362 
	glöe°¨âs
;

363 
	gtofix
=0;

365 
	$Re£tRL
(
uöt8
 *
èrgë
)

367 
	`FCEU_dwmem£t
(
èrgë
,0xffffffff,256);

368 if(
I≈utSˇ∆öeHook
)

369 
	`I≈utSˇ∆öeHook
(0,0,0,0);

370 
Plöef
=
èrgë
;

371 
Plöe
=
èrgë
;

372 
fú°tûe
=0;

373 
löe°¨âs
=
time°amp
*48+
	`X6502_GëCy˛eCou¡
();

374 
tofix
=0;

375 
	`FCEUPPU_LöeUpd©e098
();

376 
tofix
=1;

377 
	}
}

379 
uöt8
 
•æöebuf
[256+8];

381 
	$FCEUPPU_LöeUpd©e098
()

383 if(
Plöe
)

385 
l
=
GETLASTPIXEL
;

386 
	`Re‰eshLöe098
(
l
);

388 
	}
}

390 
	gªndis
 = 0;

392 
	$FCEUI_SëRídîDißbÀ
(
•rôes
, 
bg
)

395 if(
•rôes
 >= 0)

397 if(
•rôes
 =2Ë
ªndis
 ^= 1;

398 
ªndis
 = (ªndi†&~1Ë| 
•rôes
?1:0;

400 if(
bg
 >= 0)

402 if(
bg
 =2Ë
ªndis
 ^= 2;

403 
ªndis
 = (ªndi†&~2Ë| 
bg
?2:0;

405 
	}
}

407 
CheckS¥ôeHô
(
p
);

409 
	$EndRL
()

411 
	`Re‰eshLöe098
(272);

412 if(
tofix
)

413 
	`Fixô1
();

414 
	`CheckS¥ôeHô
(272);

415 
Plöe
=0;

416 
	}
}

418 
öt32
 
	g•hôx
;

419 
uöt8
 
	g•hôd©a
;

421 
	$CheckS¥ôeHô
(
p
)

423 
l
=
p
-16;

424 
x
;

426 if(
•hôx
==0x100) ;

428 
x
=
•hôx
;x<(•hôx+8Ë&& x<
l
;x++)

430 if((
•hôd©a
&(0x80>>(
x
-
•hôx
))Ë&& !(
Plöef
[x]&64))

432 
PPU_°©us
|=0x40;

437 
•hôx
=0x100;

441 
	}
}

442 
	g•‹k
=0;

448 
	$FASTAPASS
(1Ë
	$Re‰eshLöe098
(
œ°pixñ
)

450 
uöt32
 
pshi·
[2];

451 
uöt32
 
©œtch
;

452 
uöt32
 
sm‹kus
=
Re‰eshAddr
;

454 
	#Re‰eshAddr
 
sm‹kus


	)

455 
uöt32
 
vofs
;

456 
X1
;

458 
uöt8
 *
P
=
Plöe
;

459 
œ°tûe
=
œ°pixñ
>>3;

460 
numtûes
;

461 
n‹ecur£
=0;

466 if(
n‹ecur£
) ;

468 if(
•hôx
 !0x100 && !(
PPU_°©us
&0x40))

470 if((
•hôx
 < (
œ°pixñ
-16)Ë&& !(•hôx < ((
œ°tûe
 - 2)*8)))

473 
œ°tûe
++;

478 if(
œ°tûe
>34)Üasttile=34;

479 
numtûes
=
œ°tûe
-
fú°tûe
;

481 if(
numtûes
<=0) ;

483 
P
=
Plöe
;

485 
vofs
=0;

487 
vofs
=((
PPU
[0]&0x10)<<8Ë| ((
Re‰eshAddr
>>12)&7);

489 if(!
S¸ìnON
 && !
S¥ôeON
)

491 
uöt32
 
ãm
;

492 
tûes
;

493 
ãm
=
PÆ
[0]|(Pal[0]<<8)|(Pal[0]<<16)|(Pal[0]<<24);

494 
ãm
|=0x40404040;

495 
tûes
=
numtûes
;

496 if(
fú°tûe
+
tûes
 > 256/8)Åiles=256/8-firsttile;

497 if(
tûes
 > 0)

498 
	`FCEU_dwmem£t
(
Plöe
,
ãm
,
tûes
*8);

499 
P
+=
numtûes
*8;

500 
Plöe
=
P
;

502 
fú°tûe
=
œ°tûe
;

504 
	#TOFIXNUM
 (272-0x4)

	)

505 if(
œ°pixñ
>=
TOFIXNUM
 && 
tofix
)

507 
	`Fixô1
();

508 
tofix
=0;

511 if(
I≈utSˇ∆öeHook
 && (
œ°pixñ
-16)>=0)

513 
	`I≈utSˇ∆öeHook
(
Plöef
,
•‹k
?
•æöebuf
:0,
löe°¨âs
,
œ°tûe
*8-16);

519 
PÆ
[0]|=64;

520 
PÆ
[4]|=64;

521 
PÆ
[8]|=64;

522 
PÆ
[0xC]|=64;

529 
	#PPUT_MMC5


	)

530 if(
MMC5Hack
 && 
gíõ°age
!=1)

532 if(
MMC5HackCHRMode
==0 && (
MMC5HackSPMode
&0x80))

534 
toch™ge
=
MMC5HackSPMode
&0x1F;

535 
toch™ge
-=
fú°tûe
;

536 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

538 if((
toch™ge
<=0 && 
MMC5HackSPMode
&0x40) || (tochange>0 && !(MMC5HackSPMode&0x40)))

540 
	#PPUT_MMC5SP


	)

541 
	~"µutûe098.h
"

542 #unde‡
PPUT_MMC5SP


546 
	~"µutûe098.h
"

548 
toch™ge
--;

551 if(
MMC5HackCHRMode
==1 && (
MMC5HackSPMode
&0x80))

553 
toch™ge
=
MMC5HackSPMode
&0x1F;

554 
toch™ge
-=
fú°tûe
;

556 
	#PPUT_MMC5SP


	)

557 
	#PPUT_MMC5CHR1


	)

558 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

560 
	~"µutûe098.h
"

562 #unde‡
PPUT_MMC5CHR1


563 #unde‡
PPUT_MMC5SP


565 if(
MMC5HackCHRMode
==1)

567 
	#PPUT_MMC5CHR1


	)

568 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

570 
	~"µutûe098.h
"

572 #unde‡
PPUT_MMC5CHR1


576 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

578 
	~"µutûe098.h
"

582 #unde‡
PPUT_MMC5


583 if(
PPU_hook
)

585 
n‹ecur£
=1;

586 
	#PPUT_HOOK


	)

587 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

589 
	~"µutûe098.h
"

591 #unde‡
PPUT_HOOK


592 
n‹ecur£
=0;

596 
X1
=
fú°tûe
;X1<
œ°tûe
;X1++)

598 
	~"µutûe098.h
"

602 #unde‡
vofs


603 #unde‡
Re‰eshAddr


606 
PÆ
[0]&=63;

607 
PÆ
[4]&=63;

608 
PÆ
[8]&=63;

609 
PÆ
[0xC]&=63;

611 
Re‰eshAddr
=
sm‹kus
;

612 if(
fú°tûe
<=2 && 2<
œ°tûe
 && !(
PPU
[1]&2))

614 
uöt32
 
ãm
;

615 
ãm
=
PÆ
[0]|(Pal[0]<<8)|(Pal[0]<<16)|(Pal[0]<<24);

616 
ãm
|=0x40404040;

617 *(
uöt32
 *)
Plöef
=*(uöt32 *)(Plöef+4)=
ãm
;

620 if(!
S¸ìnON
)

622 
uöt32
 
ãm
;

623 
t°¨t
,
tcou¡
;

624 
ãm
=
PÆ
[0]|(Pal[0]<<8)|(Pal[0]<<16)|(Pal[0]<<24);

625 
ãm
|=0x40404040;

627 
tcou¡
=
œ°tûe
-
fú°tûe
;

628 
t°¨t
=
fú°tûe
-2;

629 if(
t°¨t
<0)

631 
tcou¡
+=
t°¨t
;

632 
t°¨t
=0;

634 if(
tcou¡
>0)

635 
	`FCEU_dwmem£t
(
Plöef
+
t°¨t
*8,
ãm
,
tcou¡
*8);

638 if(
œ°pixñ
>=
TOFIXNUM
 && 
tofix
)

641 
	`Fixô1
();

642 
tofix
=0;

647 
	`CheckS¥ôeHô
(
œ°pixñ
);

650 if(
I≈utSˇ∆öeHook
 && (
œ°pixñ
-16)>=0)

652 
	`I≈utSˇ∆öeHook
(
Plöef
,
•‹k
?
•æöebuf
:0,
löe°¨âs
,
œ°tûe
*8-16);

654 
Plöe
=
P
;

655 
fú°tûe
=
œ°tûe
;

656 
	}
}

658 
INLINE
 
	$Fixô2
()

660 if(
S¸ìnON
 || 
S¥ôeON
)

662 
uöt32
 
ød
=
Re‰eshAddr
;

663 
ød
&=0xFBE0;

664 
ød
|=
TempAddr
&0x041f;

665 
Re‰eshAddr
=
ød
;

669 
	}
}

671 
	$Fixô1
()

673 if(
S¸ìnON
 || 
S¥ôeON
)

675 
uöt32
 
ød
=
Re‰eshAddr
;

677 if((
ød
&0x7000)==0x7000)

679 
ød
^=0x7000;

680 if((
ød
&0x3E0)==0x3A0)

682 
ød
^=0x3A0;

683 
ød
^=0x800;

687 if((
ød
&0x3E0)==0x3e0)

688 
ød
^=0x3e0;

689 
ød
+=0x20;

693 
ød
+=0x1000;

694 
Re‰eshAddr
=
ød
;

697 
	}
}

699 
MMC5_hb
();

700 
	$DoLöe
()

702 #i‚de‡
GP2X


703 
x
;

705 
uöt8
 *
èrgë
=
XBuf
+
sˇ∆öe
*320+32;

707 if(
MMC5Hack
 && (
S¸ìnON
 || 
S¥ôeON
)Ë
	`MMC5_hb
(
sˇ∆öe
);

709 
	`X6502_Run
(256);

710 
	`EndRL
();

712 if(
ªndis
 & 2)

714 
uöt32
 
ãm
;

715 
ãm
=
PÆ
[0]|(Pal[0]<<8)|(Pal[0]<<16)|(Pal[0]<<24);

716 
ãm
|=0x40404040;

717 
	`FCEU_dwmem£t
(
èrgë
,
ãm
,256);

720 if(
S¥ôeON
)

721 
	`C›yS¥ôes098
(
èrgë
);

723 #ifde‡
GP2X


724 if(
S¸ìnON
 || 
S¥ôeON
)

726 if(
PPU
[1]&0x01)

727 
	`block_™d
(
èrgë
, 256, 0x30);

729 if((
PPU
[1]>>5)==0x7)

730 
	`block_‹
(
èrgë
, 256, 0xc0);

731 if(
PPU
[1]&0xE0)

732 
	`block_‹
(
èrgë
, 256, 0x40);

734 
	`block_™d‹
(
èrgë
, 256, 0x3f, 0x80);

736 if(
S¸ìnON
 || 
S¥ôeON
)

738 if(
PPU
[1]&0x01)

740 
x
=63;x>=0;x--)

741 *(
uöt32
 *)&
èrgë
[
x
<<2]=(*(uint32*)&target[x<<2])&0x30303030;

744 if((
PPU
[1]>>5)==0x7)

746 
x
=63;x>=0;x--)

747 *(
uöt32
 *)&
èrgë
[
x
<<2]=((*(uint32*)&target[x<<2])&0x3f3f3f3f)|0xc0c0c0c0;

749 if(
PPU
[1]&0xE0)

750 
x
=63;x>=0;x--)

751 *(
uöt32
 *)&
èrgë
[
x
<<2]=(*(uint32*)&target[x<<2])|0x40404040;

753 
x
=63;x>=0;x--)

754 *(
uöt32
 *)&
èrgë
[
x
<<2]=((*(uint32*)&target[x<<2])&0x3f3f3f3f)|0x80808080;

757 
•hôx
=0x100;

759 if(
S¸ìnON
 || 
S¥ôeON
)

760 
	`FëchS¥ôeD©a098
();

762 if(
GameHBIRQHook
 && (
S¸ìnON
 || 
S¥ôeON
Ë&& ((
PPU
[0]&0x38)!=0x18))

764 
	`X6502_Run
(6);

765 
	`Fixô2
();

766 
	`X6502_Run
(4);

767 
	`GameHBIRQHook
();

768 
	`X6502_Run
(85-16-10);

772 
	`X6502_Run
(6);

773 
	`Fixô2
();

774 
	`X6502_Run
(85-6-16);

777 if(
GameHBIRQHook
 && (
S¸ìnON
 || 
S¥ôeON
Ë&& ((
PPU
[0]&0x38)!=0x18))

778 
	`GameHBIRQHook
();

781 if(
S¥ôeON
)

782 
	`Re‰eshS¥ôes098
();

783 if(
GameHBIRQHook2
 && (
S¸ìnON
 || 
S¥ôeON
))

784 
	`GameHBIRQHook2
();

785 
sˇ∆öe
++;

786 if(
sˇ∆öe
<240)

788 
	`Re£tRL
(
XBuf
+
sˇ∆öe
*320+32);

790 
	`X6502_Run
(16);

791 
	}
}

793 
	#V_FLIP
 0x80

	)

794 
	#H_FLIP
 0x40

	)

795 
	#SP_BACK
 0x20

	)

798 
uöt8
 
	my
,
	mno
,
	m©r
,
	mx
;

799 } 
	tSPR
;

802 
uöt8
 
	mˇ
[2],
	m©r
,
	mx
;

803 } 
	tSPRB
;

805 
uöt8
 
	gnum•rôes
,
	gS¥ôeBluΩ
;

806 
	$FëchS¥ôeD©a098
()

808 
uöt8
 
ns
,
sb
;

809 
SPR
 *
•r
;

810 
uöt8
 
H
;

811 
n
;

812 
vofs
;

813 
uöt8
 
P0
=
PPU
[0];

815 
•r
=(
SPR
 *)
SPRAM
;

816 
H
=8;

818 
ns
=
sb
=0;

820 
vofs
=()(
P0
&0x8&(((P0&0x20)^0x20)>>2))<<9;

821 
H
+=(
P0
&0x20)>>2;

823 if(!
PPU_hook
)

824 
n
=63;n>=0;n--,
•r
++)

826 if(()(
sˇ∆öe
-
•r
->
y
)>=
H
) ;

828 if(
ns
<
max•rôes
)

830 if(
n
==63Ë
sb
=1;

833 
SPRB
 
d°
;

834 
uöt8
 *
C
;

835 
t
;

836 
vadr
;

838 
t
 = ()
sˇ∆öe
-(
•r
->
y
);

840 if(
S¥ôe16
)

841 
vadr
 = ((
•r
->
no
&1)<<12) + ((spr->no&0xFE)<<4);

843 
vadr
 = (
•r
->
no
<<4)+
vofs
;

845 if(
•r
->
©r
&
V_FLIP
)

847 
vadr
+=7;

848 
vadr
-=
t
;

849 
vadr
+=(
P0
&0x20)>>1;

850 
vadr
-=
t
&8;

854 
vadr
+=
t
;

855 
vadr
+=
t
&8;

859 if(
MMC5Hack
 && 
gíõ°age
!=1Ë
C
 = 
	`MMC5SPRVRAMADR
(
vadr
);

860 
C
 = 
	`VRAMADR
(
vadr
);

863 
d°
.
ˇ
[0]=
C
[0];

864 
d°
.
ˇ
[1]=
C
[8];

865 
d°
.
x
=
•r
->x;

866 
d°
.
©r
=
•r
->atr;

868 *(
uöt32
 *)&
SPRBUF
[
ns
<<2]=*(uöt32 *)&
d°
;

871 
ns
++;

875 
PPU_°©us
|=0x20;

880 
n
=63;n>=0;n--,
•r
++)

882 if(()(
sˇ∆öe
-
•r
->
y
)>=
H
) ;

884 if(
ns
<
max•rôes
)

886 if(
n
==63Ë
sb
=1;

889 
SPRB
 
d°
;

890 
uöt8
 *
C
;

891 
t
;

892 
vadr
;

894 
t
 = ()
sˇ∆öe
-(
•r
->
y
);

896 if(
S¥ôe16
)

897 
vadr
 = ((
•r
->
no
&1)<<12) + ((spr->no&0xFE)<<4);

899 
vadr
 = (
•r
->
no
<<4)+
vofs
;

901 if(
•r
->
©r
&
V_FLIP
)

903 
vadr
+=7;

904 
vadr
-=
t
;

905 
vadr
+=(
P0
&0x20)>>1;

906 
vadr
-=
t
&8;

910 
vadr
+=
t
;

911 
vadr
+=
t
&8;

914 if(
MMC5Hack
Ë
C
 = 
	`MMC5SPRVRAMADR
(
vadr
);

915 
C
 = 
	`VRAMADR
(
vadr
);

916 
d°
.
ˇ
[0]=
C
[0];

917 if(
ns
<8)

919 
	`PPU_hook
(0x2000);

920 
	`PPU_hook
(
vadr
);

922 
d°
.
ˇ
[1]=
C
[8];

923 
d°
.
x
=
•r
->x;

924 
d°
.
©r
=
•r
->atr;

927 *(
uöt32
 *)&
SPRBUF
[
ns
<<2]=*(uöt32 *)&
d°
;

930 
ns
++;

934 
PPU_°©us
|=0x20;

940 if(
ns
>8Ë
PPU_°©us
|=0x20;

942 if(
PPU_hook
)

944 
n
=0;n<(8-
ns
);n++)

946 
	`PPU_hook
(0x2000);

947 
	`PPU_hook
(
vofs
);

950 
num•rôes
=
ns
;

951 
S¥ôeBluΩ
=
sb
;

952 
	}
}

954 
	$Re‰eshS¥ôes098
()

956 
n
;

957 
SPRB
 *
•r
;

959 
•‹k
=0;

960 if(!
num•rôes
) ;

962 
	`FCEU_dwmem£t
(
•æöebuf
,0x80808080,256);

963 
num•rôes
--;

964 
•r
 = (
SPRB
*)
SPRBUF
+
num•rôes
;

966 
n
=
num•rôes
;n>=0;n--,
•r
--)

972 
uöt32
 
pixd©a
;

973 
uöt8
 
J
,
©r
;

976 
x
=
•r
->x;

977 
uöt8
 *
C
;

978 
uöt8
 *
VB
;

980 
pixd©a
=
µulut1
[
•r
->
ˇ
[0]]|
µulut2
[spr->ca[1]];

981 
J
=
•r
->
ˇ
[0]|spr->ca[1];

982 
©r
=
•r
->atr;

984 if(
J
)

986 if(
n
==0 && 
S¥ôeBluΩ
 && !(
PPU_°©us
&0x40))

988 
•hôx
=
x
;

989 
•hôd©a
=
J
;

990 if(
©r
&
H_FLIP
)

991 
•hôd©a
((
J
<<7)&0x80) |

992 ((
J
<<5)&0x40) |

993 ((
J
<<3)&0x20) |

994 ((
J
<<1)&0x10) |

995 ((
J
>>1)&0x08) |

996 ((
J
>>3)&0x04) |

997 ((
J
>>5)&0x02) |

998 ((
J
>>7)&0x01);

1001 
C
 = 
•æöebuf
+
x
;

1002 
VB
 = (
PALRAM
+0x10)+((
©r
&3)<<2);

1004 if(
©r
&
SP_BACK
)

1006 if(
©r
&
H_FLIP
)

1008 if(
J
&0x80Ë
C
[7]=
VB
[
pixd©a
&3]|0x40;

1009 
pixd©a
>>=4;

1010 if(
J
&0x40Ë
C
[6]=
VB
[
pixd©a
&3]|0x40;

1011 
pixd©a
>>=4;

1012 if(
J
&0x20Ë
C
[5]=
VB
[
pixd©a
&3]|0x40;

1013 
pixd©a
>>=4;

1014 if(
J
&0x10Ë
C
[4]=
VB
[
pixd©a
&3]|0x40;

1015 
pixd©a
>>=4;

1016 if(
J
&0x08Ë
C
[3]=
VB
[
pixd©a
&3]|0x40;

1017 
pixd©a
>>=4;

1018 if(
J
&0x04Ë
C
[2]=
VB
[
pixd©a
&3]|0x40;

1019 
pixd©a
>>=4;

1020 if(
J
&0x02Ë
C
[1]=
VB
[
pixd©a
&3]|0x40;

1021 
pixd©a
>>=4;

1022 if(
J
&0x01Ë
C
[0]=
VB
[
pixd©a
]|0x40;

1024 if(
J
&0x80Ë
C
[0]=
VB
[
pixd©a
&3]|0x40;

1025 
pixd©a
>>=4;

1026 if(
J
&0x40Ë
C
[1]=
VB
[
pixd©a
&3]|0x40;

1027 
pixd©a
>>=4;

1028 if(
J
&0x20Ë
C
[2]=
VB
[
pixd©a
&3]|0x40;

1029 
pixd©a
>>=4;

1030 if(
J
&0x10Ë
C
[3]=
VB
[
pixd©a
&3]|0x40;

1031 
pixd©a
>>=4;

1032 if(
J
&0x08Ë
C
[4]=
VB
[
pixd©a
&3]|0x40;

1033 
pixd©a
>>=4;

1034 if(
J
&0x04Ë
C
[5]=
VB
[
pixd©a
&3]|0x40;

1035 
pixd©a
>>=4;

1036 if(
J
&0x02Ë
C
[6]=
VB
[
pixd©a
&3]|0x40;

1037 
pixd©a
>>=4;

1038 if(
J
&0x01Ë
C
[7]=
VB
[
pixd©a
]|0x40;

1041 if(
©r
&
H_FLIP
)

1043 if(
J
&0x80Ë
C
[7]=
VB
[
pixd©a
&3];

1044 
pixd©a
>>=4;

1045 if(
J
&0x40Ë
C
[6]=
VB
[
pixd©a
&3];

1046 
pixd©a
>>=4;

1047 if(
J
&0x20Ë
C
[5]=
VB
[
pixd©a
&3];

1048 
pixd©a
>>=4;

1049 if(
J
&0x10Ë
C
[4]=
VB
[
pixd©a
&3];

1050 
pixd©a
>>=4;

1051 if(
J
&0x08Ë
C
[3]=
VB
[
pixd©a
&3];

1052 
pixd©a
>>=4;

1053 if(
J
&0x04Ë
C
[2]=
VB
[
pixd©a
&3];

1054 
pixd©a
>>=4;

1055 if(
J
&0x02Ë
C
[1]=
VB
[
pixd©a
&3];

1056 
pixd©a
>>=4;

1057 if(
J
&0x01Ë
C
[0]=
VB
[
pixd©a
];

1059 if(
J
&0x80Ë
C
[0]=
VB
[
pixd©a
&3];

1060 
pixd©a
>>=4;

1061 if(
J
&0x40Ë
C
[1]=
VB
[
pixd©a
&3];

1062 
pixd©a
>>=4;

1063 if(
J
&0x20Ë
C
[2]=
VB
[
pixd©a
&3];

1064 
pixd©a
>>=4;

1065 if(
J
&0x10Ë
C
[3]=
VB
[
pixd©a
&3];

1066 
pixd©a
>>=4;

1067 if(
J
&0x08Ë
C
[4]=
VB
[
pixd©a
&3];

1068 
pixd©a
>>=4;

1069 if(
J
&0x04Ë
C
[5]=
VB
[
pixd©a
&3];

1070 
pixd©a
>>=4;

1071 if(
J
&0x02Ë
C
[6]=
VB
[
pixd©a
&3];

1072 
pixd©a
>>=4;

1073 if(
J
&0x01Ë
C
[7]=
VB
[
pixd©a
];

1078 
S¥ôeBluΩ
=0;

1079 
•‹k
=1;

1080 
	}
}

1082 
	$C›yS¥ôes098
(
uöt8
 *
èrgë
)

1084 
uöt8
 
n
=((
PPU
[1]&4)^4)<<1;

1085 
uöt8
 *
P
=
èrgë
;

1087 if(!
•‹k
) ;

1088 
•‹k
=0;

1090 if(
ªndis
 & 1) ;

1092 
lo›skõ
:

1094 
uöt32
 
t
=*(uöt32 *)(
•æöebuf
+
n
);

1096 if(
t
!=0x80808080)

1098 #ifde‡
LSB_FIRST


1099 if(!(
t
&0x80))

1101 if(!(
t
&0x40Ë|| (
P
[
n
]&0x40))

1102 
P
[
n
]=
•æöebuf
[n];

1105 if(!(
t
&0x8000))

1107 if(!(
t
&0x4000Ë|| (
P
[
n
+1]&0x40))

1108 
P
[
n
+1]=(
•æöebuf
+1)[n];

1111 if(!(
t
&0x800000))

1113 if(!(
t
&0x400000Ë|| (
P
[
n
+2]&0x40))

1114 
P
[
n
+2]=(
•æöebuf
+2)[n];

1117 if(!(
t
&0x80000000))

1119 if(!(
t
&0x40000000Ë|| (
P
[
n
+3]&0x40))

1120 
P
[
n
+3]=(
•æöebuf
+3)[n];

1124 if(!(
t
&0x80000000))

1126 if(!(
t
&0x40000000))

1127 
P
[
n
]=
•æöebuf
[n];

1128 if(
P
[
n
]&64)

1129 
P
[
n
]=
•æöebuf
[n];

1132 if(!(
t
&0x800000))

1134 if(!(
t
&0x400000))

1135 
P
[
n
+1]=(
•æöebuf
+1)[n];

1136 if(
P
[
n
+1]&64)

1137 
P
[
n
+1]=(
•æöebuf
+1)[n];

1140 if(!(
t
&0x8000))

1142 if(!(
t
&0x4000))

1143 
P
[
n
+2]=(
•æöebuf
+2)[n];

1144 if(
P
[
n
+2]&64)

1145 
P
[
n
+2]=(
•æöebuf
+2)[n];

1148 if(!(
t
&0x80))

1150 if(!(
t
&0x40))

1151 
P
[
n
+3]=(
•æöebuf
+3)[n];

1152 if(
P
[
n
+3]&64)

1153 
P
[
n
+3]=(
•æöebuf
+3)[n];

1158 
n
+=4;

1159 if(
n
Ë
lo›skõ
;

1160 
	}
}

1162 
	$FCEUPPU_Inô
()

1164 
	`makïpulut
();

1165 
	}
}

1167 
	$FCEUPPU_Re£t
()

1169 
VRAMBuf„r
=
PPU
[0]=PPU[1]=
PPU_°©us
=PPU[3]=0;

1170 
PPUSPL
=0;

1171 
PPUGíL©ch
=0;

1172 
Re‰eshAddr
=
TempAddr
=0;

1173 
vtoggÀ
 = 0;

1174 
µudód
 = 2;

1175 
kook
 = 0;

1178 
	}
}

1180 
	$FCEUPPU_Powî
()

1182 
x
;

1184 
	`mem£t
(
NTARAM
,0x00,0x800);

1185 
	`mem£t
(
PALRAM
,0x00,0x20);

1186 
	`mem£t
(
SPRAM
,0x00,0x100);

1187 
	`FCEUPPU_Re£t
();

1189 
x
=0x2000;x<0x4000;x+=8)

1191 
ARód
[
x
]=
A200x
;

1192 
BWrôe
[
x
]=
B2000
;

1193 
ARód
[
x
+1]=
A200x
;

1194 
BWrôe
[
x
+1]=
B2001
;

1195 
ARód
[
x
+2]=
A2002
;

1196 
BWrôe
[
x
+2]=
B2002
;

1197 
ARód
[
x
+3]=
A200x
;

1198 
BWrôe
[
x
+3]=
B2003
;

1199 
ARód
[
x
+4]=
A200x
;

1200 
BWrôe
[
x
+4]=
B2004
;

1201 
ARód
[
x
+5]=
A200x
;

1202 
BWrôe
[
x
+5]=
B2005
;

1203 
ARód
[
x
+6]=
A200x
;

1204 
BWrôe
[
x
+6]=
B2006
;

1205 
ARód
[
x
+7]=
A2007
;

1206 
BWrôe
[
x
+7]=
B2007
;

1208 
BWrôe
[0x4014]=
B4014
;

1209 
	}
}

1212 
	$FCEUPPU_Lo›
(
skù
)

1214 
uöt32
 
sˇ∆öes_≥r_‰ame
 = 
PAL
 ? 312 : 262;

1216 if(
µudód
)

1220 
löes
;

1221 
löes
=
sˇ∆öes_≥r_‰ame
;lines;lines--)

1222 
	`X6502_Run
(256+85);

1223 
µudód
--;

1227 
	`X6502_Run
(256+85);

1228 
PPU_°©us
 |= 0x80;

1229 
PPU
[3]=
PPUSPL
=0;

1236 
	`X6502_Run
(12);

1237 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

1238 
	`DoNSFFøme
();

1241 if(
VBœnkON
)

1242 
	`TriggîNMI
();

1246 
löes
;

1247 
	`X6502_Run
(256+85-12);

1248 
löes
=
sˇ∆öes_≥r_‰ame
-242-1;lines;lines--)

1249 
	`X6502_Run
(256+85);

1251 
PPU_°©us
&=0x1f;

1252 
	`X6502_Run
(256);

1255 
x
;

1257 if(
S¸ìnON
 || 
S¥ôeON
)

1259 if(
GameHBIRQHook
 && ((
PPU
[0]&0x38)!=0x18))

1260 
	`GameHBIRQHook
();

1261 if(
PPU_hook
)

1262 
x
=0;x<42;x++Ë{
	`PPU_hook
(0x2000); PPU_hook(0);}

1263 if(
GameHBIRQHook2
)

1264 
	`GameHBIRQHook2
();

1266 
	`X6502_Run
(85-16);

1267 if(
S¸ìnON
 || 
S¥ôeON
)

1269 
Re‰eshAddr
=
TempAddr
;

1270 if(
PPU_hook
Ë
	`PPU_hook
(
Re‰eshAddr
&0x3fff);

1274 
•‹k
=
num•rôes
=0;

1275 
	`Re£tRL
(
XBuf
+32);

1277 
	`X6502_Run
(16-
kook
);

1278 
kook
 ^= 1;

1280 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

1283 
sˇ∆öe
=0;scanline<240;scanline++)

1284 
	`X6502_Run
(256+85);

1286 #ifde‡
FRAMESKIP


1287 if(
skù
)

1289 
y
, 
löes
;

1291 
y
=
SPRAM
[0];

1292 
y
++;

1294 
PPU_°©us
|=0x20;

1295 if(
GameHBIRQHook
)

1297 
	`X6502_Run
(256);

1298 
sˇ∆öe
=0;scanline<240;scanline++)

1300 if(
S¸ìnON
 || 
S¥ôeON
)

1301 
	`GameHBIRQHook
();

1302 if(
sˇ∆öe
==
y
 && 
S¥ôeON
Ë
PPU_°©us
|=0x40;

1303 
	`X6502_Run
((
sˇ∆öe
==239)?85:(256+85));

1306 if(
y
<240)

1308 
löes
=
y
;lines;lines--)

1309 
	`X6502_Run
(256+85);

1310 if(
S¥ôeON
Ë
PPU_°©us
|=0x40;

1311 
löes
=240-
y
;lines;lines--)

1312 
	`X6502_Run
(256+85);

1316 
löes
=240;lines;lines--)

1317 
	`X6502_Run
(256+85);

1323 
x
,
max
,
maxªf
;

1325 
dìmp
=
PPU
[1]>>5;

1326 
sˇ∆öe
=0;scanline<240;)

1328 
dìmp˙t
[
dìmp
]++;

1329 #ifde‡
WIN32


1330 if((
PPUVõwî
Ë&& (
sˇ∆öe
 =
PPUVõwSˇ∆öe
)Ë
	`Upd©ePPUVõw
(1);

1332 
	`DoLöe
();

1334 if(
MMC5Hack
 && (
S¸ìnON
 || 
S¥ôeON
)Ë
	`MMC5_hb
(
sˇ∆öe
);

1335 
x
=1,
max
=0,
maxªf
=0;x<7;x++)

1337 if(
dìmp˙t
[
x
]>
max
)

1339 
max
=
dìmp˙t
[
x
];

1340 
maxªf
=
x
;

1342 
dìmp˙t
[
x
]=0;

1346 
	`SëNESDìmph
(
maxªf
,0);

1349 
	}
}

	@ppu098.h

1 
FCEUPPU_Inô
();

2 
FCEUPPU_Re£t
();

3 
FCEUPPU_Powî
();

4 
FCEUPPU_Lo›
(
skù
);

6 
FCEUPPU_LöeUpd©e098
();

8 
	#FCEUPPU_LöeUpd©e
() \

9 i‡(
u£098code
Ë
	`FCEUPPU_LöeUpd©e098
()

	)

	@pputile098.h

1 
uöt8
 *
	gC
;

2 
uöt8
 
	gcc
;

3 
uöt32
 
	gvadr
;

5 #i‚de‡
PPUT_MMC5SP


6 
uöt8
 
	gzz
;

8 
uöt8
 
	gxs
,
	gys
;

9 
	gxs
=
X1
;

10 
	gys
=((
sˇ∆öe
>>3)+
MMC5HackSPS¸ﬁl
)&0x1F;

11 if(
	gys
>=0x1EË
ys
-=0x1E;

14 if(
	gX1
>=2)

16 
uöt8
 *
S
=
PALRAM
;

17 
uöt32
 
	gpixd©a
;

19 
	gpixd©a
=
µulut1
[(
pshi·
[0]>>(8-
XOff£t
))&0xFF]|
µulut2
[(pshift[1]>>(8-XOffset))&0xFF];

21 
	gpixd©a
|=
µulut3
[
XOff£t
|(
©œtch
<<3)];

24 #ifde‡
C80x86


25 
asm
 volatile(

75 : "S" (
S
), "D" (
	gP
), "b" (
	gpixd©a
)

78 
	gP
[0]=
S
[
pixd©a
&0xF];

79 
	gpixd©a
>>=4;

80 
	gP
[1]=
S
[
pixd©a
&0xF];

81 
	gpixd©a
>>=4;

82 
	gP
[2]=
S
[
pixd©a
&0xF];

83 
	gpixd©a
>>=4;

84 
	gP
[3]=
S
[
pixd©a
&0xF];

85 
	gpixd©a
>>=4;

86 
	gP
[4]=
S
[
pixd©a
&0xF];

87 
	gpixd©a
>>=4;

88 
	gP
[5]=
S
[
pixd©a
&0xF];

89 
	gpixd©a
>>=4;

90 
	gP
[6]=
S
[
pixd©a
&0xF];

91 
	gpixd©a
>>=4;

92 
	gP
[7]=
S
[
pixd©a
&0xF];

94 
	gP
+=8;

97 #ifde‡
PPUT_MMC5SP


98 
	gvadr
=(
MMC5HackExNTARAMPå
[
xs
|(
ys
<<5)]<<4)+(
vofs
&7);

100 
	gzz
=
Re‰eshAddr
&0x1F;

101 
	gC
=
v«∑ge
[(
Re‰eshAddr
>>10)&3];

102 
	gvadr
=(
C
[
Re‰eshAddr
&0x3ff]<<4)+
vofs
;

105 #ifde‡
PPUT_HOOK


106 
PPU_hook
(0x2000|(
Re‰eshAddr
&0xfff));

109 #ifde‡
PPUT_MMC5SP


110 
	gcc
=
MMC5HackExNTARAMPå
[0x3c0+(
xs
>>2)+((
ys
&0x1C)<<1)];

111 
	gcc
=((
cc
 >> ((
xs
&2Ë+ ((
ys
&0x2)<<1))) &3);

113 #ifde‡
PPUT_MMC5CHR1


114 
	gcc
=(
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff] & 0xC0)>>6;

116 
	gcc
=
C
[0x3c0+(
zz
>>2)+((
Re‰eshAddr
&0x380)>>4)];

117 
	gcc
=((
cc
 >> ((
zz
&2Ë+ ((
Re‰eshAddr
&0x40)>>4))) &3);

121 
	g©œtch
>>=2;

122 
	g©œtch
|=
cc
<<2;

124 
	gpshi·
[0]<<=8;

125 
	gpshi·
[1]<<=8;

127 #ifde‡
PPUT_MMC5SP


128 
	gC
 = 
MMC5HackVROMPTR
+
vadr
;

129 
	gC
 +((
MMC5HackSPPage
 & 0x3‡& 
MMC5HackVROMMask
) << 12);

131 #ifde‡
PPUT_MMC5CHR1


132 
	gC
 = 
MMC5HackVROMPTR
;

133 
	gC
 +(((
MMC5HackExNTARAMPå
[
Re‰eshAddr
 & 0x3ff]) & 0x3f &

134 
MMC5HackVROMMask
Ë<< 12Ë+ (
vadr
 & 0xfff);

135 #ñi‡
deföed
(
PPUT_MMC5
)

136 
	gC
=
MMC5BGVRAMADR
(
vadr
);

138 
	gC
 = 
VRAMADR
(
vadr
);

142 #ifde‡
PPUT_HOOK


143 
PPU_hook
(
vadr
);

146 
	gpshi·
[0]|=
C
[0];

147 
	gpshi·
[1]|=
C
[8];

149 if((
	gRe‰eshAddr
&0x1f)==0x1f)

150 
Re‰eshAddr
^=0x41F;

152 
	gRe‰eshAddr
++;

154 #ifde‡
PPUT_HOOK


155 
PPU_hook
(0x2000|(
Re‰eshAddr
&0xfff));

	@sound.c

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

33 
	~<°rög.h
>

35 
	~"ty≥s.h
"

36 
	~"x6502.h
"

38 
	~"f˚.h
"

39 
	~"svga.h
"

40 
	~"sound.h
"

42 
uöt32
 
	gWave
[2048+512];

43 
öt16
 
	gWaveFöÆM⁄o
[2048+512];

45 
EXPSOUND
 
	gGameExpSound
={0,0,0,0,0,0};

47 
uöt8
 
	gåimode
=0;

48 
uöt8
 
	gåico›
=0;

49 
uöt8
 
	gPSG
[0x18];

51 
uöt8
 
	gdecvﬁume
[3];

52 
uöt8
 
	gªÆvﬁume
[3];

54 
öt32
 
	gcou¡
[5];

55 
öt32
 
	gsqacc
[2]={0,0};

56 
uöt8
 
	gsqn⁄
=0;

58 
uöt32
 
	gsoundtsoffs
=0;

60 #unde‡
¥ötf


61 
uöt16
 
	gƒeg
;

63 
öt32
 
	gÀngthcou¡
[4];

65 
soundvﬁ
;

67 c⁄° 
uöt8
 
	gSÀngthèbÀ
[0x20]=

73 
uöt32
 
	gÀngthèbÀ
[0x20];

75 c⁄° 
uöt32
 
	gSNoi£FªqTabÀ
[0x10]=

79 
uöt32
 
	gNoi£FªqTabÀ
[0x10];

81 
öt32
 
	g√söcsize
;

82 
uöt32
 
	gsoundtsöc
;

83 
uöt32
 
	gsoundtsi
;

86 c⁄° 
uöt8
 
	gNTSCPCMTabÀ
[0x10]=

92 c⁄° 
uöt8
 
	gPALPCMTabÀ
[0x10]=

98 
uöt32
 
	gPSG_ba£
;

106 
öt32
 
	gPCMacc
=0;

107 
	gPCM‰eq
;

108 
öt32
 
	gPCMIRQCou¡
;

109 
uöt8
 
	gPCMBôIndex
=0;

110 
uöt32
 
	gPCMAddªssIndex
=0;

111 
öt32
 
	gPCMSizeIndex
=0;

112 
uöt8
 
	gPCMBuf„r
=0;

113 
	gvdis
=0;

115 
	$Dummyfunc
(
íd
Ë{
	}
};

117 (*
DoNoi£
)(
íd
)=
Dummyfunc
;

118 (*
DoTrüngÀ
)(
íd
)=
Dummyfunc
;

119 (*
DoPCM
)(
íd
)=
Dummyfunc
;

120 (*
DoSQ1
)(
íd
)=
Dummyfunc
;

121 (*
DoSQ2
)(
íd
)=
Dummyfunc
;

123 
	$CÆcDPCMIRQ
()

125 
uöt32
 
‰eq
;

126 
uöt32
 
h⁄k
;

127 
uöt32
 
cy˛es
;

129 if(
PAL
)

130 
‰eq
=(
PALPCMTabÀ
[
PSG
[0x10]&0xF]<<4);

132 
‰eq
=(
NTSCPCMTabÀ
[
PSG
[0x10]&0xF]<<4);

134 
cy˛es
=(((
PSG
[0x13]<<4)+1));

135 
cy˛es
*=
‰eq
/14;

136 
h⁄k
=((
PSG
[0x13]<<4)+1)*
‰eq
;

137 
h⁄k
-=
cy˛es
;

140 
PCMIRQCou¡
=
h⁄k
*48;

143 
vdis
=0;

144 
	}
}

146 
	$PªpDPCM
()

148 
PCMAddªssIndex
=0x4000+(
PSG
[0x12]<<6);

149 
PCMSizeIndex
=(
PSG
[0x13]<<4)+1;

150 
PCMBôIndex
=0;

152 if(
PAL
)

153 
PCM‰eq
=
PALPCMTabÀ
[
PSG
[0x10]&0xF];

155 
PCM‰eq
=
NTSCPCMTabÀ
[
PSG
[0x10]&0xF];

156 
PCMacc
=
PCM‰eq
<<18;

157 
	}
}

159 
uöt8
 
	gswìp⁄
[2]={0,0};

160 
öt32
 
	gcur‰eq
[2]={0,0};

163 
uöt8
 
	gSIRQSèt
=0;

165 
uöt8
 
	gSwìpCou¡
[2];

166 
uöt8
 
	gDecCou¡To1
[3];

168 
uöt8
 
	gf˙t
=0;

169 
öt32
 
	gfh˙t
=0;

170 
öt32
 
	gfhöc
;

172 
uöt8
 
	gœ°î
;

175 
	$FASTAPASS
(2Ë
	$CheckFªq
(
uöt32
 
cf
, 
uöt8
 
§
)

177 
uöt32
 
mod
;

178 if(!(
§
&0x8))

180 
mod
=
cf
>>(
§
&7);

181 if((
mod
+
cf
)&0x800)

185 
	}
}

187 
	$DECLFW
(
Wrôe0x11
)

189 
	`DoPCM
(0);

190 
PSG
[0x11]=
V
&0x7F;

191 
	}
}

193 
uöt8
 
	gDutyCou¡
[2]={0,0};

195 
	$DECLFW
(
Wrôe_PSG
)

199 
A
&=0x1f;

200 
A
)

203 
	`DoSQ1
(0);

204 if(
V
&0x10)

205 
ªÆvﬁume
[0]=
V
&0xF;

208 
swìp⁄
[0]=
V
&0x80;

211 
	`DoSQ1
(0);

212 
cur‰eq
[0]&=0xFF00;

213 
cur‰eq
[0]|=
V
;

216 if(
PSG
[0x15]&1)

218 
	`DoSQ1
(0);

219 
Àngthcou¡
[0]=
ÀngthèbÀ
[(
V
>>3)&0x1f];

220 
sqn⁄
|=1;

222 
swìp⁄
[0]=
PSG
[1]&0x80;

223 
cur‰eq
[0]=
PSG
[0x2]|((
V
&7)<<8);

224 
decvﬁume
[0]=0xF;

225 
DecCou¡To1
[0]=(
PSG
[0]&0xF)+1;

226 
SwìpCou¡
[0]=((
PSG
[0x1]>>4)&7)+1;

227 
DutyCou¡
[0]=0;

228 
sqacc
[0]=((
öt32
)
cur‰eq
[0]+1)<<18;

232 
	`DoSQ2
(0);

233 if(
V
&0x10)

234 
ªÆvﬁume
[1]=
V
&0xF;

237 
swìp⁄
[1]=
V
&0x80;

240 
	`DoSQ2
(0);

241 
cur‰eq
[1]&=0xFF00;

242 
cur‰eq
[1]|=
V
;

245 if(
PSG
[0x15]&2)

247 
	`DoSQ2
(0);

248 
Àngthcou¡
[1]=
ÀngthèbÀ
[(
V
>>3)&0x1f];

249 
sqn⁄
|=2;

251 
swìp⁄
[1]=
PSG
[0x5]&0x80;

252 
cur‰eq
[1]=
PSG
[0x6]|((
V
&7)<<8);

253 
decvﬁume
[1]=0xF;

254 
DecCou¡To1
[1]=(
PSG
[0x4]&0xF)+1;

255 
SwìpCou¡
[1]=((
PSG
[0x5]>>4)&7)+1;

256 
DutyCou¡
[1]=0;

257 
sqacc
[1]=((
öt32
)
cur‰eq
[1]+1)<<18;

260 
	`DoTrüngÀ
(0);

261 if(
œ°î
&0x80)

263 
åico›
=
V
&0x7F;

264 
åimode
=
V
&0x80;

266 if(!(
V
&0x7F))

267 
åico›
=0;

268 
œ°î
=
V
&0x80;

270 0xa:
	`DoTrüngÀ
(0);

273 if(
PSG
[0x15]&0x4)

275 
	`DoTrüngÀ
(0);

276 
sqn⁄
|=4;

277 
Àngthcou¡
[2]=
ÀngthèbÀ
[(
V
>>3)&0x1f];

279 
œ°î
=0x80;

280 
åico›
=
PSG
[0x8]&0x7f;

281 
åimode
=
PSG
[0x8]&0x80;

283 0xC:
	`DoNoi£
(0);

284 if(
V
&0x10)

285 
ªÆvﬁume
[2]=
V
&0xF;

287 0xE:
	`DoNoi£
(0);;

289 if(
PSG
[0x15]&8)

291 
	`DoNoi£
(0);

292 
sqn⁄
|=8;

293 
Àngthcou¡
[3]=
ÀngthèbÀ
[(
V
>>3)&0x1f];

295 
decvﬁume
[2]=0xF;

296 
DecCou¡To1
[2]=(
PSG
[0xC]&0xF)+1;

298 0x10:
	`DoPCM
(0);

299 if(!(
V
&0x80))

300 
	`X6502_IRQEnd
(
FCEU_IQDPCM
);

304 
t
=
V
^
PSG
[0x15];

306 if(
t
&1)

307 
	`DoSQ1
(0);

308 if(
t
&2)

309 
	`DoSQ2
(0);

310 if(
t
&4)

311 
	`DoTrüngÀ
(0);

312 if(
t
&8)

313 
	`DoNoi£
(0);

314 if(
t
&0x10)

315 
	`DoPCM
(0);

316 
sqn⁄
&=
V
;

317 if(
V
&0x10)

319 if(!(
PSG
[0x15]&0x10))

321 
	`PªpDPCM
();

322 
	`CÆcDPCMIRQ
();

324 if(
vdis
)

325 
	`CÆcDPCMIRQ
();

328 
PCMIRQCou¡
=0;

329 
	`X6502_IRQEnd
(
FCEU_IQDPCM
);

333 
PSG
[
A
]=
V
;

334 
	}
}

336 
	$DECLFR
(
Ród_PSG
)

338 
uöt8
 
ªt
;

339 if(
PSG
[0x15]&0x10)

340 
	`DoPCM
(0);

341 
ªt
=(
PSG
[0x15]&(
sqn⁄
|0x10))|
SIRQSèt
;

342 
SIRQSèt
&=~0x40;

343 
	`X6502_IRQEnd
–
FCEU_IQFCOUNT
);

344  
ªt
;

345 
	}
}

347 
	$DECLFR
(
Ród_PSGDummy
)

349 
uöt8
 
ªt
;

351 
ªt
=(
PSG
[0x15]&
sqn⁄
)|
SIRQSèt
;

352 
SIRQSèt
&=~0x40;

353 
	`X6502_IRQEnd
–
FCEU_IQFCOUNT
);

354  
ªt
;

355 
	}
}

357 
	$FASTAPASS
(1Ë
	$FømeSoundStuff
(
V
)

359 
P
;

360 
uöt32
 
íd
 = (
SOUNDTS
<<16)/
soundtsöc
;

362 
	`DoSQ1
(
íd
);

363 
	`DoSQ2
(
íd
);

364 
	`DoNoi£
(
íd
);

366 (
V
&1))

369 if(
PSG
[0x15]&4 && 
sqn⁄
&4)

370 if(!(
PSG
[8]&0x80))

372 if(
Àngthcou¡
[2]>0)

374 
Àngthcou¡
[2]--;

375 if(
Àngthcou¡
[2]<=0)

377 
	`DoTrüngÀ
(0);

378 
sqn⁄
&=~4;

383 
P
=0;P<2;P++)

385 if(
PSG
[0x15]&(
P
+1Ë&& 
sqn⁄
&(P+1))

387 if(!(
PSG
[
P
<<2]&0x20))

389 if(
Àngthcou¡
[
P
]>0)

391 
Àngthcou¡
[
P
]--;

392 if(
Àngthcou¡
[
P
]<=0)

394 
sqn⁄
&=~(
P
+1);

402 if(
swìp⁄
[
P
])

404 
öt32
 
mod
=0;

406 if(
SwìpCou¡
[
P
]>0) SweepCount[P]--;

407 if(
SwìpCou¡
[
P
]<=0)

409 
SwìpCou¡
[
P
]=((
PSG
[(P<<2)+0x1]>>4)&7)+1;

411 if(
PSG
[(
P
<<2)+0x1]&0x8)

413 
mod
-=(
P
^1)+((
cur‰eq
[P])>>(
PSG
[(P<<2)+0x1]&7));

415 if(
cur‰eq
[
P
] && (
PSG
[(P<<2)+0x1]&7) )

417 
cur‰eq
[
P
]+=
mod
;

422 
mod
=
cur‰eq
[
P
]>>(
PSG
[(P<<2)+0x1]&7);

423 if((
mod
+
cur‰eq
[
P
])&0x800)

425 
swìp⁄
[
P
]=0;

426 
cur‰eq
[
P
]=0;

430 if(
cur‰eq
[
P
] && (
PSG
[(P<<2)+0x1]&7) )

432 
cur‰eq
[
P
]+=
mod
;

441 if(
PSG
[0x15]&0x8 && 
sqn⁄
&8)

443 if(!(
PSG
[0xC]&0x20))

445 if(
Àngthcou¡
[3]>0)

447 
Àngthcou¡
[3]--;

448 if(
Àngthcou¡
[3]<=0)

450 
sqn⁄
&=~8;

457 if(!
åimode
)

459 
œ°î
=0;

460 if(
åico›
)

462 if(
åico›
==1Ë
	`DoTrüngÀ
(0);

463 
åico›
--;

467 
P
=0;P<2;P++)

469 if(
DecCou¡To1
[
P
]>0) DecCountTo1[P]--;

470 if(
DecCou¡To1
[
P
]<=0)

472 
DecCou¡To1
[
P
]=(
PSG
[P<<2]&0xF)+1;

473 if(
decvﬁume
[
P
] || 
PSG
[P<<2]&0x20)

475 
decvﬁume
[
P
]--;

480 if((
PSG
[
P
<<2]&0x20Ë&& (
decvﬁume
[P]==0))

481 
DecCou¡To1
[
P
]<<=1;

482 
decvﬁume
[
P
]&=15;

485 if(!(
PSG
[
P
<<2]&0x10))

486 
ªÆvﬁume
[
P
]=
decvﬁume
[P];

489 if(
DecCou¡To1
[2]>0) DecCountTo1[2]--;

490 if(
DecCou¡To1
[2]<=0)

492 
DecCou¡To1
[2]=(
PSG
[0xC]&0xF)+1;

493 if(
decvﬁume
[2] || 
PSG
[0xC]&0x20)

495 
decvﬁume
[2]--;

500 if((
PSG
[0xC]&0x20Ë&& (
decvﬁume
[2]==0))

501 
DecCou¡To1
[2]<<=1;

502 
decvﬁume
[2]&=15;

505 if(!(
PSG
[0xC]&0x10))

506 
ªÆvﬁume
[2]=
decvﬁume
[2];

511 
	}
}

513 
	$FømeSoundUpd©e
()

518 if(
f˙t
==3)

520 if(
PSG
[0x17]&0x80)

521 
fh˙t
+=
fhöc
;

522 if(!(
PSG
[0x17]&0xC0))

524 
SIRQSèt
|=0x40;

525 
	`X6502_IRQBegö
(
FCEU_IQFCOUNT
);

529 
	`FømeSoundStuff
(
f˙t
);

530 
f˙t
=(fcnt+1)&3;

531 
	}
}

533 
uöt32
 
	gCh™√lBC
[5];

535 
uöt32
 
	gRe˘Amp
[2][8];

537 
	$FASTAPASS
(1Ë
	$CÆcRe˘Amp
(
P
)

539 
èl
[4]={1,2,4,6};

540 
V
;

541 
x
;

542 
uöt32
 *
b
=
Re˘Amp
[
P
];

543 
m
;

546 
V
=
ªÆvﬁume
[
P
]<<4;

550 
m
=
èl
[(
PSG
[
P
<<2]&0xC0)>>6];

551 
x
=0;x<
m
;x++,
b
++)

552 *
b
=0;

553 ;
x
<8;x++,
b
++)

554 *
b
=
V
;

555 
	}
}

557 
	$RDoPCM
(
öt32
 
íd
)

559 
öt32
 
V
;

560 
öt32
 
°¨t
;

561 
öt32
 
‰eq
;

562 
uöt32
 
out
=
PSG
[0x11]<<3;

564 
°¨t
=
Ch™√lBC
[4];

565 if(
íd
==0Ëíd=(
SOUNDTS
<<16)/
soundtsöc
;

566 if(
íd
<=
°¨t
) ;

567 
Ch™√lBC
[4]=
íd
;

569 if(
PSG
[0x15]&0x10)

571 
‰eq
=
PCM‰eq
;

572 
‰eq
<<=18;

574 
V
=
°¨t
;V<
íd
;V++)

576 
PCMacc
-=
√söcsize
;

577 if(
PCMacc
<=0)

579 if(!
PCMBôIndex
)

581 
PCMSizeIndex
--;

582 if(!
PCMSizeIndex
)

584 if(
PSG
[0x10]&0x40)

585 
	`PªpDPCM
();

588 
PSG
[0x15]&=~0x10;

589 ;
V
<
íd
;V++)

590 
Wave
[
V
>>4]+=
PSG
[0x11]<<3;

591 
íd›cmo
;

596 
PCMBuf„r
=
ARód
[0x8000+
PCMAddªssIndex
](0x8000+PCMAddressIndex);

597 
PCMAddªssIndex
=(PCMAddressIndex+1)&0x7fff;

602 
t
=(((
PCMBuf„r
>>
PCMBôIndex
)&1)<<2)-2;

603 
uöt8
 
bah
=
PSG
[0x11];

605 
PCMacc
+=
‰eq
;

606 
PSG
[0x11]+=
t
;

607 if(
PSG
[0x11]&0x80)

608 
PSG
[0x11]=
bah
;

610 
out
=
PSG
[0x11]<<3;

612 
PCMBôIndex
=(PCMBitIndex+1)&7;

614 
Wave
[
V
>>4]+=
out
;

619 if((
íd
-
°¨t
)>64)

621 
V
=
°¨t
;V<=(start|15);V++)

622 
Wave
[
V
>>4]+=
out
;

623 
out
<<=4;

624 
V
=(
°¨t
>>4)+1;V<(
íd
>>4);V++)

625 
Wave
[
V
]+=
out
;

626 
out
>>=4;

627 
V
=
íd
&(~15);V<end;V++)

628 
Wave
[
V
>>4]+=
out
;

631 
V
=
°¨t
;V<
íd
;V++)

632 
Wave
[
V
>>4]+=
out
;

634 
íd›cmo
:;

635 
	}
}

637 
	$RDoSQ1
(
öt32
 
íd
)

639 
öt32
 
V
;

640 
öt32
 
°¨t
;

641 
öt32
 
‰eq
;

643 
°¨t
=
Ch™√lBC
[0];

644 if(
íd
==0Ëíd=(
SOUNDTS
<<16)/
soundtsöc
;

645 if(
íd
<=
°¨t
) ;

646 
Ch™√lBC
[0]=
íd
;

648 if(!(
PSG
[0x15]&1 && 
sqn⁄
&1))

651 if(
cur‰eq
[0]<8 || curfreq[0]>0x7ff)

653 if(!
	`CheckFªq
(
cur‰eq
[0],
PSG
[0x1]))

656 
	`CÆcRe˘Amp
(0);

659 
uöt32
 
out
=
Re˘Amp
[0][
DutyCou¡
[0]];

660 
‰eq
=
cur‰eq
[0]+1;

662 
‰eq
<<=18;

663 
V
=
°¨t
;V<
íd
;V++)

665 
Wave
[
V
>>4]+=
out
;

666 
sqacc
[0]-=
√söcsize
;

667 if(
sqacc
[0]<=0)

669 
ªa
:

670 
sqacc
[0]+=
‰eq
;

671 
DutyCou¡
[0]++;

672 if(
sqacc
[0]<=0Ë
ªa
;

674 
DutyCou¡
[0]&=7;

675 
out
=
Re˘Amp
[0][
DutyCou¡
[0]];

680 
	}
}

682 
	$RDoSQ2
(
öt32
 
íd
)

684 
öt32
 
V
;

685 
öt32
 
°¨t
;

686 
öt32
 
‰eq
;

688 
°¨t
=
Ch™√lBC
[1];

689 if(
íd
==0Ëíd=(
SOUNDTS
<<16)/
soundtsöc
;

690 if(
íd
<=
°¨t
) ;

691 
Ch™√lBC
[1]=
íd
;

693 if(!(
PSG
[0x15]&2 && 
sqn⁄
&2))

696 if(
cur‰eq
[1]<8 || curfreq[1]>0x7ff)

698 if(!
	`CheckFªq
(
cur‰eq
[1],
PSG
[0x5]))

701 
	`CÆcRe˘Amp
(1);

704 
uöt32
 
out
=
Re˘Amp
[1][
DutyCou¡
[1]];

705 
‰eq
=
cur‰eq
[1]+1;

708 
‰eq
<<=18;

709 
V
=
°¨t
;V<
íd
;V++)

711 
Wave
[
V
>>4]+=
out
;

712 
sqacc
[1]-=
√söcsize
;

713 if(
sqacc
[1]<=0)

715 
ªa
:

716 
sqacc
[1]+=
‰eq
;

717 
DutyCou¡
[1]++;

718 if(
sqacc
[1]<=0Ë
ªa
;

720 
DutyCou¡
[1]&=7;

721 
out
=
Re˘Amp
[1][
DutyCou¡
[1]];

726 
	}
}

729 
	$RDoTrüngÀ
(
öt32
 
íd
)

731 
uöt32
 
tcout
=0;

732 
öt32
 
V
;

733 
öt32
 
°¨t
;

734 
öt32
 
‰eq
=(((
PSG
[0xa]|((PSG[0xb]&7)<<8))+1));

736 
°¨t
=
Ch™√lBC
[2];

737 if(
íd
==0Ëíd=(
SOUNDTS
<<16)/
soundtsöc
;

738 if(
íd
<=
°¨t
) ;

739 
Ch™√lBC
[2]=
íd
;

741 if(! (
PSG
[0x15]&0x4 && 
sqn⁄
&4 && 
åico›
) )

743 
V
=
°¨t
;V<
íd
;V++)

744 
Wave
[
V
>>4]+=
tcout
;

746 if(
‰eq
<=4)

755 
V
=
°¨t
;V<
íd
;V++)

756 
Wave
[
V
>>4]+=((0xF<<4)+(0xF<<2))>>1;

760 
öt32
 
åücc
=0;

761 
uöt8
 
tc
=0;

763 
‰eq
<<=17;

764 
V
=
°¨t
;V<
íd
;V++)

766 
åücc
-=
√söcsize
;

767 if(
åücc
<=0)

769 
ªa
:

770 
åücc
+=
‰eq
;

771 
tc
=(tc+1)&0x1F;

772 if(
åücc
<=0Ë
ªa
;

774 
tcout
=(
tc
&0xF);

775 if(
tc
&0x10Ë
tcout
^=0xF;

776 
tcout
=(tcout<<4)+(tcout<<2);

778 
Wave
[
V
>>4]+=
tcout
;

781 
	}
}

783 
	$RDoNoi£
(
öt32
 
íd
)

785 
öt32
 
öc
,
V
;

786 
öt32
 
°¨t
;

788 
°¨t
=
Ch™√lBC
[3];

789 if(
íd
==0Ëíd=(
SOUNDTS
<<16)/
soundtsöc
;

790 if(
íd
<=
°¨t
) ;

791 
Ch™√lBC
[3]=
íd
;

793 if(
PSG
[0x15]&0x8 && 
sqn⁄
&8)

795 
uöt32
 
outo
;

796 
uöt32
 
am±ab
[2];

797 
uöt8
 
am∂ôude
;

799 
am∂ôude
=
ªÆvﬁume
[2];

805 
öc
=
Noi£FªqTabÀ
[
PSG
[0xE]&0xF];

806 
am±ab
[0]=((
am∂ôude
<<2)+amplitude+amplitude)<<1;

807 
am±ab
[1]=0;

808 
outo
=
am±ab
[
ƒeg
&1];

810 if(
am∂ôude
)

812 if(
PSG
[0xE]&0x80)

813 
V
=
°¨t
;V<
íd
;V++)

815 
Wave
[
V
>>4]+=
outo
;

816 if(
cou¡
[3]>=
öc
)

818 
uöt8
 
„edback
;

820 
„edback
=((
ƒeg
>>8)&1)^((nreg>>14)&1);

821 
ƒeg
=“ªg<<1)+
„edback
;

822 
ƒeg
&=0x7fff;

823 
outo
=
am±ab
[
ƒeg
&1];

824 
cou¡
[3]-=
öc
;

826 
cou¡
[3]+=0x1000;

829 
V
=
°¨t
;V<
íd
;V++)

831 
Wave
[
V
>>4]+=
outo
;

832 if(
cou¡
[3]>=
öc
)

834 
uöt8
 
„edback
;

836 
„edback
=((
ƒeg
>>13)&1)^((nreg>>14)&1);

837 
ƒeg
=“ªg<<1)+
„edback
;

838 
ƒeg
&=0x7fff;

839 
outo
=
am±ab
[
ƒeg
&1];

840 
cou¡
[3]-=
öc
;

842 
cou¡
[3]+=0x1000;

846 
	}
}

848 
	$DECLFW
(
Wrôe_IRQFM
)

850 
PSG
[0x17]=
V
;

851 
V
=(V&0xC0)>>6;

852 
f˙t
=0;

853 if(
V
&0x2)

854 
	`FømeSoundUpd©e
();

855 
f˙t
=1;

856 
fh˙t
=
fhöc
;

857 
	`X6502_IRQEnd
(
FCEU_IQFCOUNT
);

858 
SIRQSèt
&=~0x40;

860 
	}
}

862 
	$SëNESSoundM≠
()

864 
	`SëWrôeH™dÀr
(0x4000,0x4013,
Wrôe_PSG
);

865 
	`SëWrôeH™dÀr
(0x4011,0x4011,
Wrôe0x11
);

866 
	`SëWrôeH™dÀr
(0x4015,0x4015,
Wrôe_PSG
);

867 
	`SëWrôeH™dÀr
(0x4017,0x4017,
Wrôe_IRQFM
);

868 
	`SëRódH™dÀr
(0x4015,0x4015,
Ród_PSG
);

869 
	}
}

871 
öt32
 
	ghighp
;

873 
öt32
 
	glowp
;

875 
öt32
 
	gÊt_acc
=0, 
	gÊt_acc2
=0;

877 
	$FûãrSound
(
uöt32
 *
ö
, 
öt16
 *
outM⁄o
, 
cou¡
)

880 
sh
=2;

881 i‡(
soundvﬁ
 < 5Ë
sh
 += 5 - soundvol;

883 ;
cou¡
;cou¡--,
ö
++,
outM⁄o
++)

885 
öt32
 
diff
;

887 
diff
 = *
ö
 - 
Êt_acc
;

889 
Êt_acc
 +(
diff
*
highp
)>>16;

890 
Êt_acc2
+(
öt32
Ë(((
öt64
)((
diff
-Êt_acc2)*
lowp
))>>16);

891 *
ö
=0;

893 *
outM⁄o
 = 
Êt_acc2
*7 >> 
sh
;

897 
	}
}

901 
öt32
 
	göbuf
=0;

902 
	$FlushEmuœãSound
()

904 
x
;

905 
uöt32
 
íd
;

907 if(!
time°amp
) (0);

909 if(!
FSëtögs
.
SndR©e
 || (
soundvﬁ
 == 0))

911 
íd
=0;

912 
nosoundo
;

915 
íd
=(
SOUNDTS
<<16)/
soundtsöc
;

916 
	`DoSQ1
(
íd
);

917 
	`DoSQ2
(
íd
);

918 
	`DoTrüngÀ
(
íd
);

919 
	`DoNoi£
(
íd
);

920 
	`DoPCM
(
íd
);

922 if(
GameExpSound
.
Fûl
)

923 
GameExpSound
.
	`Fûl
(
íd
&0xF);

925 
	`FûãrSound
(
Wave
,
WaveFöÆM⁄o
,
íd
>>4);

927 if(
íd
&0xF)

928 
Wave
[0]=Wave[(
íd
>>4)];

929 
Wave
[(
íd
>>4)]=0;

931 
nosoundo
:

932 
x
=0;x<5;x++)

933 
Ch™√lBC
[
x
]=
íd
&0xF;

934 
soundtsoffs
=(
soundtsöc
*(
íd
&0xF))>>16;

935 
íd
>>=4;

936 
öbuf
=
íd
;

937 (
íd
);

938 
	}
}

940 
	$GëSoundBuf„r
(
öt16
 **
W
)

942 *
W
=
WaveFöÆM⁄o
;

943  
öbuf
;

944 
	}
}

946 
	$PowîSound
()

948 
x
;

950 
	`SëNESSoundM≠
();

952 
x
=0;x<0x16;x++)

953 if(
x
!=0x14)

954 
BWrôe
[0x4000+
x
](0x4000+x,0);

955 
PSG
[0x17]=0;

956 
fh˙t
=
fhöc
;

957 
f˙t
=0;

958 
ƒeg
=1;

959 
soundtsoffs
=0;

960 
	}
}

962 
	$Re£tSound
()

964 
x
;

965 
x
=0;x<0x16;x++)

966 if(
x
!=1 && x!=5 && x!=0x14Ë
BWrôe
[0x4000+x](0x4000+x,0);

967 
PSG
[0x17]=0;

968 
fh˙t
=
fhöc
;

969 
f˙t
=0;

970 
ƒeg
=1;

971 
	}
}

973 
	$SëSoundV¨übÀs
()

975 
x
;

977 
fhöc
=
PAL
?16626:14915;

978 
fhöc
*=24;

979 
x
=0;x<0x20;x++)

980 
ÀngthèbÀ
[
x
]=
SÀngthèbÀ
[x]<<1;

982 if(
FSëtögs
.
SndR©e
)

984 
DoNoi£
=
RDoNoi£
;

985 
DoTrüngÀ
=
RDoTrüngÀ
;

986 
DoPCM
=
RDoPCM
;

987 
DoSQ1
=
RDoSQ1
;

988 
DoSQ2
=
RDoSQ2
;

992 
DoNoi£
=
DoTrüngÀ
=
DoPCM
=
DoSQ1
=
DoSQ2
=
Dummyfunc
;

995 if(!
FSëtögs
.
SndR©e
) ;

996 if(
GameExpSound
.
RCh™ge
)

997 
GameExpSound
.
	`RCh™ge
();

1000 
√söcsize
=(
öt32
)(((
öt64
)1<<17)*()(
PAL
?
PAL_CPU
:
NTSC_CPU
)/(
FSëtögs
.
SndR©e
 * 16));

1001 
PSG_ba£
=(
uöt32
)(
PAL
?()
PAL_CPU
/16:()
NTSC_CPU
/16);

1003 
x
=0;x<0x10;x++)

1005 
z
;

1006 
z
=
SNoi£FªqTabÀ
[
x
]<<1;

1007 
z
=(
PAL
?
PAL_CPU
:
NTSC_CPU
)/z;

1008 
z
=()((
uöt32
)((
FSëtögs
.
SndR©e
 
OVERSAMPLE
)<<12))/z;

1009 
Noi£FªqTabÀ
[
x
]=
z
;

1011 
soundtsöc
=(
uöt32
)((
uöt64
)(
PAL
?()
PAL_CPU
*65536:()
NTSC_CPU
*65536)/(
FSëtögs
.
SndR©e
 
OVERSAMPLE
));

1012 
	`mem£t
(
Wave
,0,(Wave));

1013 
x
=0;x<5;x++)

1014 
Ch™√lBC
[
x
]=0;

1015 
highp
=(250<<16)/
FSëtögs
.
SndR©e
;

1016 
lowp
=(25000<<16)/
FSëtögs
.
SndR©e
;

1018 if(
highp
>(1<<16)) highp=1<<16;

1019 if(
lowp
>(1<<16))Üowp=1<<16;

1021 
Êt_acc
=
Êt_acc2
=0;

1022 
	}
}

1024 
	$FixOldSaveSèãSFªq
()

1026 
x
;

1027 
x
=0;x<2;x++)

1029 
cur‰eq
[
x
]=
PSG
[0x2+(x<<2)]|((PSG[0x3+(x<<2)]&7)<<8);

1031 
	}
}

1033 
	$FCEUI_Sound
(
R©e
)

1035 
FSëtögs
.
SndR©e
=
R©e
;

1036 
	`SëSoundV¨übÀs
();

1037 
	}
}

1039 
	$FCEUI_SëSoundVﬁume
(
uöt32
 
vﬁume
)

1041 
FSëtögs
.
SoundVﬁume
=
vﬁume
;

1042 
	}
}

	@sound.h

21 
	#OVERSAMPLESHIFT
 4

	)

22 
	#OVERSAMPLE
 *16

	)

23 
	#SND_BUFSIZE
 256

	)

27 (*
	mFûl
)(
	mCou¡
);

28 (*
	mRCh™ge
)();

29 (*
	mKûl
)();

32 (*
	mNeoFûl
)(
öt32
 *
	mWave
, 
	mCou¡
);

33 (*
	mHiFûl
)();

34 (*
	mHiSync
)(
öt32
 
	mts
);

35 } 
	tEXPSOUND
;

37 
EXPSOUND
 
GameExpSound
;

40 
öt32
 
√söcsize
;

41 
uöt8
 
PSG
[0x18];

42 
uöt32
 
PSG_ba£
;

43 
öt32
 
PCMIRQCou¡
;

45 
SëSoundV¨übÀs
();

46 
PowîSound
();

47 
Re£tSound
();

48 
uöt8
 
decvﬁume
[];

50 
vdis
;

51 
uöt8
 
sqn⁄
;

52 
uöt16
 
ƒeg
;

54 
uöt8
 
åimode
;

55 
uöt8
 
åico›
;

56 
uöt8
 
PCMBôIndex
;

57 
uöt32
 
PCMAddªssIndex
;

58 
öt32
 
PCMSizeIndex
;

59 
uöt8
 
PCMBuf„r
;

61 
uöt8
 
swìp⁄
[2];

62 
öt32
 
cur‰eq
[2];

64 
uöt8
 
SwìpCou¡
[2];

65 
uöt8
 
DecCou¡To1
[3];

67 
uöt8
 
f˙t
;

68 
öt32
 
fh˙t
;

69 
öt32
 
fhöc
;

71 
uöt8
 
FCEU_GëJoyJoy
();

73 
GëSoundBuf„r
(
öt16
 **
W
);

74 
FlushEmuœãSound
();

75 
uöt32
 
Wave
[2048+512];

76 
öt16
 
WaveFöÆM⁄o
[2048+512];

77 
uöt32
 
soundtsöc
;

79 
uöt32
 
soundtsoffs
;

80 
	#SOUNDTS
 (
time°amp
 + 
soundtsoffs
)

	)

82 
SëNESSoundM≠
();

83 
FømeSoundUpd©e
();

84 
FixOldSaveSèãSFªq
();

86 
DECLFW
(
Wrôe_IRQFM
);

	@state.c

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 #ifde‡
GP2X


28 
	~<uni°d.h
>

31 
	~"ty≥s.h
"

32 
	~"x6502.h
"

33 
	~"vîsi⁄.h
"

34 
	~"f˚.h
"

35 
	~"sound.h
"

36 
	#INESPRIV


37 
	~"öes.h
"

	)

38 
	~"svga.h
"

39 
	~"ídün.h
"

40 
	~"fds.h
"

41 
	~"gíîÆ.h
"

42 
	~"°©e.h
"

43 
	~"mem‹y.h
"

44 
	~"µu.h
"

46 (*
SPªSave
)() = 0;

47 (*
SPo°Save
)() = 0;

49 
	#SFMDATA_SIZE
 (64)

	)

50 
SFORMAT
 
SFMDATA
[
SFMDATA_SIZE
];

51 
SFEXINDEX
;

52 
°©evîsi⁄
;

54 
SFORMAT
 
FCEUPPU_STATEINFO
[];

55 
SFORMAT
 
FCEUCTRL_STATEINFO
[];

57 
SFORMAT
 
SFCPU
[]={

58 { &
X
.
PC
, 2|
RLSB
, "PC\0"},

59 { &
X
.
A
, 1, "A\0\0"},

60 { &
X
.
P
, 1, "P\0\0"},

61 { &
X
.X, 1, "X\0\0"},

62 { &
X
.
Y
, 1, "Y\0\0"},

63 { &
X
.
S
, 1, "S\0\0"},

64 { 
RAM
, 0x800, "RAM"},

66 
	}
};

68 
SFORMAT
 
	gSFCPUC
[]={

69 { &
X
.
jammed
, 1, "JAMM"},

70 { &
X
.
IRQlow
, 1, "IRQL"},

71 { &
X
.
tcou¡
, 4|
RLSB
, "ICoa"},

72 { &
X
.
cou¡
, 4|
RLSB
, "ICou"},

73 { &
time°amp
, 4|
RLSB
, "TIME"},

74 { &
time°ampba£
, 8|
RLSB
, "TMEB"},

76 { &
time°ampba£
, —ime°ampba£Ë| 
RLSB
, "TSBS"},

77 { &
X
.
mooPI
, 1, "MooP"},

82 
uöt16
 
TempAddrT
,
Re‰eshAddrT
;

85 
SFORMAT
 
	gSFSND
[]={

86 { &
fh˙t
, 4|
RLSB
,"FHCN"},

87 { &
f˙t
, 1, "FCNT"},

88 { 
PSG
, 14, "PSG"},

89 { &
PSG
[0x15], 1, "P15"},

90 { &
PSG
[0x17], 1, "P17"},

91 { 
decvﬁume
, 3, "DECV"},

92 { &
sqn⁄
, 1, "SQNO"},

93 { &
ƒeg
, 2|
RLSB
, "NREG"},

94 { &
åimode
, 1, "TRIM"},

95 { &
åico›
, 1, "TRIC"},

96 { 
swìp⁄
, 2, "SWEE"},

97 { &
cur‰eq
[0], 4|
RLSB
,"CRF1"},

98 { &
cur‰eq
[1], 4|
RLSB
,"CRF2"},

99 { 
SwìpCou¡
, 2,"SWCT"},

100 { 
DecCou¡To1
, 3,"DCT1"},

101 { &
PCMBôIndex
, 1,"PBIN"},

102 { &
PCMAddªssIndex
, 4|
RLSB
, "PAIN"},

103 { &
PCMSizeIndex
, 4|
RLSB
, "PSIN"},

109 
	$SubWrôe
(
FILE
 *
°
, 
SFORMAT
 *
sf
)

111 
uöt32
 
acc
=0;

113 
sf
->
v
)

115 if(
sf
->
s
==~0)

117 
uöt32
 
tmp
;

119 if(!(
tmp
=
	`SubWrôe
(
°
,(
SFORMAT
 *)
sf
->
v
)))

121 
acc
+=
tmp
;

122 
sf
++;

126 
acc
+=8;

127 
acc
+=
sf
->
s
&(~
RLSB
);

129 if(
°
)

131 
	`fwrôe
(
sf
->
desc
,1,4,
°
);

132 
	`wrôe32À
(
sf
->
s
&(~
RLSB
),
°
);

134 #i‚de‡
LSB_FIRST


135 if(
sf
->
s
&
RLSB
)

136 
	`FlùByãOrdî
(
sf
->
v
,sf->
s
&(~
RLSB
));

139 
	`fwrôe
((
uöt8
 *)
sf
->
v
,1,sf->
s
&(~
RLSB
),
°
);

141 #i‚de‡
LSB_FIRST


142 if(
sf
->
s
&
RLSB
)

143 
	`FlùByãOrdî
(
sf
->
v
,sf->
s
&(~
RLSB
));

146 
sf
++;

149 (
acc
);

150 
	}
}

152 
	$WrôeSèãChunk
(
FILE
 *
°
, 
ty≥
, 
SFORMAT
 *
sf
)

154 
bsize
;

156 
	`Âutc
(
ty≥
,
°
);

158 
bsize
=
	`SubWrôe
(0,
sf
);

159 
	`wrôe32À
(
bsize
,
°
);

161 if(!
	`SubWrôe
(
°
,
sf
))

165  (
bsize
+5);

166 
	}
}

168 
SFORMAT
 *
	$CheckS
(
SFORMAT
 *
sf
, 
uöt32
 
tsize
, *
desc
)

170 
sf
->
v
)

172 if(
sf
->
s
==~0)

174 
SFORMAT
 *
tmp
;

175 if((
tmp

	`CheckS
((
SFORMAT
 *)
sf
->
v
, 
tsize
, 
desc
) ))

176 (
tmp
);

177 
sf
++;

180 if(!
	`memcmp
(
desc
,
sf
->desc,4))

182 if(
tsize
!=(
sf
->
s
&(~
RLSB
)))

184 
	`¥ötf
("RódSèãChunk: se˘ \"%c%c%c%c\" ha†wr⁄g size\n", 
desc
[0], desc[1], desc[2], desc[3]);

187 (
sf
);

189 
sf
++;

192 
	}
}

194 
	$RódSèãChunk
(
FILE
 *
°
, 
SFORMAT
 *
sf
, 
size
)

199 
SFORMAT
 *
tmp
;

200 
ãmp
;

201 
ãmp
=
	`·ñl
(
°
);

203 
	`·ñl
(
°
)<
ãmp
+
size
)

205 
uöt32
 
tsize
;

206 
tﬂ
[4];

207 if(
	`‰ód
(
tﬂ
,1,4,
°
)<=0)

210 
	`ªad32À
(&
tsize
,
°
);

212 if((
tmp
=
	`CheckS
(
sf
,
tsize
,
tﬂ
)))

214 
	`‰ód
((
uöt8
 *)
tmp
->
v
,1,tmp->
s
&(~
RLSB
),
°
);

216 #i‚de‡
LSB_FIRST


217 if(
tmp
->
s
&
RLSB
)

218 
	`FlùByãOrdî
(
tmp
->
v
,tmp->
s
&(~
RLSB
));

223 
	`f£ek
(
°
,
tsize
,
SEEK_CUR
);

224 
	`¥ötf
("RódSèãChunk: se˘ \"%c%c%c%c\"ÇŸ h™dÀd\n", 
tﬂ
[0],Åoa[1],Åoa[2],Åoa[3]);

228 
	}
}

231 
	$RódSèãChunks
(
FILE
 *
°
)

233 
t
;

234 
uöt32
 
size
;

235 
ªt
=1;

239 
t
=
	`fgëc
(
°
);

240 if(
t
==
EOF
) ;

241 if(!
	`ªad32
(&
size
,
°
)) ;

244 
t
)

246 1:if(!
	`RódSèãChunk
(
°
,
SFCPU
,
size
)Ë
ªt
=0;

247 #ifde‡
ASM_6502


248 
	`asm˝u_u≈ack
();

251 2:if(!
	`RódSèãChunk
(
°
,
SFCPUC
,
size
)Ë
ªt
=0;

254 
X
.
mooPI
=X.
P
;

257 3:if(!
	`RódSèãChunk
(
°
,
FCEUPPU_STATEINFO
,
size
)Ë
ªt
=0;;

258 4:if(!
	`RódSèãChunk
(
°
,
FCEUCTRL_STATEINFO
,
size
)Ë
ªt
=0;;

259 5:if(!
	`RódSèãChunk
(
°
,
SFSND
,
size
)Ë
ªt
=0;;

260 0x10:if(!
	`RódSèãChunk
(
°
,
SFMDATA
,
size
)Ë
ªt
=0;;

261 :
	`¥ötf
("RódSèãChunks: unknow¿chunk: %i\n", 
t
);

262 if(
	`f£ek
(
°
,
size
,
SEEK_CUR
)<0Ë
ído
;;

265 
ído
:

266  
ªt
;

267 
	}
}

270 
	gCuºítSèã
=0;

271 
gíõ°age
;

272 
	$SaveSèã
(c⁄° *
‚ame
)

274 
FILE
 *
°
=
NULL
;

276 
TempAddrT
=
TempAddr
;

277 
Re‰eshAddrT
=
Re‰eshAddr
;

279 if(
gíõ°age
==1)

281 
	`FCEU_Di•Mesßge
("Cannot save FCS in GG screen.");

285 i‡(
‚ame
)

286 
°
=
	`f›í
(
‚ame
,"wb");

288 
‚ame
 = 
	`FCEU_MakeFName
(
FCEUMKF_STATE
,
CuºítSèã
,0);

289 
°
=
	`f›í
(
‚ame
,"wb");

290 
	`‰ì
(
‚ame
);

293 if(
°
!=
NULL
)

295 
uöt32
 
tŸÆsize
;

296 
uöt8
 
hódî
[16]="FCS";

297 
	`mem£t
(
hódî
+4,0,12);

298 
hódî
[3]=
VERSION_NUMERIC
;

299 
	`fwrôe
(
hódî
,1,16,
°
);

301 #ifde‡
ASM_6502


302 
	`asm˝u_∑ck
();

304 
tŸÆsize
=
	`WrôeSèãChunk
(
°
,1,
SFCPU
);

305 
tŸÆsize
+=
	`WrôeSèãChunk
(
°
,2,
SFCPUC
);

306 
tŸÆsize
+=
	`WrôeSèãChunk
(
°
,3,
FCEUPPU_STATEINFO
);

307 
tŸÆsize
+=
	`WrôeSèãChunk
(
°
,4,
FCEUCTRL_STATEINFO
);

308 
tŸÆsize
+=
	`WrôeSèãChunk
(
°
,5,
SFSND
);

311 if(
SPªSave
Ë
	`SPªSave
();

312 
tŸÆsize
+=
	`WrôeSèãChunk
(
°
,0x10,
SFMDATA
);

313 if(
SPo°Save
Ë
	`SPo°Save
();

315 
	`f£ek
(
°
,4,
SEEK_SET
);

316 
	`wrôe32
(
tŸÆsize
,
°
);

317 
SaveSèãSètus
[
CuºítSèã
]=1;

318 
	`f˛o£
(
°
);

319 #ifde‡
GP2X


320 
	`sync
();

323 
	`FCEU_Di•Mesßge
("State saved.");

327 
	`FCEU_Di•Mesßge
("State saveÉrror.");

328 
	}
}

330 
LﬂdSèãOld
(
FILE
 *
°
);

331 
	$FCEUSS_LﬂdFP
(
FILE
 *
°
, 
make_backup
)

333 
x
;

334 if(
°
!=
NULL
)

336 
uöt8
 
hódî
[16];

338 
	`‰ód
(&
hódî
,1,16,
°
);

339 if(
	`memcmp
(
hódî
,"FCS",3))

341 
	`f£ek
(
°
,0,
SEEK_SET
);

342 if(!
	`LﬂdSèãOld
(
°
))

343 
Àº‹
;

344 
oklﬂd
;

346 
°©evîsi⁄
=
hódî
[3];

347 if(
°©evîsi⁄
<53)

348 
	`FixOldSaveSèãSFªq
();

349 
x
=
	`RódSèãChunks
(
°
);

350 if(
GameSèãRe°‹e
Ë
	`GameSèãRe°‹e
(
hódî
[3]);

351 if(
x
)

353 
oklﬂd
:

354 
TempAddr
=
TempAddrT
;

355 
Re‰eshAddr
=
Re‰eshAddrT
;

357 
SaveSèãSètus
[
CuºítSèã
]=1;

358 
	`FCEU_Di•Mesßge
("Sèã %dÜﬂded.",
CuºítSèã
);

359 
SaveSèãSètus
[
CuºítSèã
]=1;

363 
SaveSèãSètus
[
CuºítSèã
]=1;

364 
	`FCEU_Di•Mesßge
("Eº‹(sËªadög sèã %d!",
CuºítSèã
);

369 
Àº‹
:

370 
	`FCEU_Di•Mesßge
("Sèã %dÜﬂdÉº‹.",
CuºítSèã
);

371 
SaveSèãSètus
[
CuºítSèã
]=0;

375 
	}
}

377 
	$LﬂdSèã
(c⁄° *
‚ame
)

379 
FILE
 *
°
=
NULL
;

381 if(
gíõ°age
==1)

383 
	`FCEU_Di•Mesßge
("CannotÜoad FCS in GG screen.");

387 i‡(
‚ame
)

388 
°
=
	`f›í
(
‚ame
,"rb");

390 
‚ame
 = 
	`FCEU_MakeFName
(
FCEUMKF_STATE
,
CuºítSèã
,0);

391 
°
=
	`f›í
(
‚ame
,"rb");

392 
	`‰ì
(
‚ame
);

395 i‡(
°
)

397 
	`FCEUSS_LﬂdFP
(
°
, 0);

398 
	`f˛o£
(
°
);

402 
	`FCEU_Di•Mesßge
("Sèã %dÜﬂdÉº‹ (nÿfûe).",
CuºítSèã
);

403 
SaveSèãSètus
[
CuºítSèã
]=0;

405 
	}
}

407 
	gSaveSèãSètus
[10];

409 
	$CheckSèãs
()

411 
FILE
 *
°
=
NULL
;

412 
s£l
;

414 if(
SaveSèãSètus
[0]==()-1)

415 
s£l
=0;ssel<10;ssel++)

417 
°
=
	`f›í
(
	`FCEU_MakeFName
(
FCEUMKF_STATE
,
s£l
,0),"rb");

418 if(
°
)

420 
SaveSèãSètus
[
s£l
]=1;

421 
	`f˛o£
(
°
);

424 
SaveSèãSètus
[
s£l
]=0;

426 
	}
}

429 
	$SaveSèãRe‰esh
()

431 
SaveSèãSètus
[0]=-1;

432 
	}
}

434 
Re£tExSèã
((*
PªSave
)(), (*
Po°Save
)())

436 
x
;

437 
x
=0;x<
SFEXINDEX
;x++)

439 if(
SFMDATA
[
x
].
desc
)

440 
	`‰ì
(
SFMDATA
[
x
].
desc
);

442 
SPªSave
 = 
PªSave
;

443 
SPo°Save
 = 
Po°Save
;

444 
SFEXINDEX
=0;

445 
	}
}

448 
	$AddExSèã
(*
v
, 
uöt32
 
s
, 
ty≥
, *
desc
)

450 if(
desc
)

452 
SFMDATA
[
SFEXINDEX
].
desc
=(*)
	`FCEU_mÆloc
(5);

453 
	`°r˝y
(
SFMDATA
[
SFEXINDEX
].
desc
,desc);

456 
SFMDATA
[
SFEXINDEX
].
desc
=0;

457 
SFMDATA
[
SFEXINDEX
].
v
=v;

458 
SFMDATA
[
SFEXINDEX
].
s
=s;

459 if(
ty≥
Ë
SFMDATA
[
SFEXINDEX
].
s
|=
RLSB
;

460 if(
SFEXINDEX
<
SFMDATA_SIZE
-1)

461 
SFEXINDEX
++;

464 
⁄˚
=1;

465 if(
⁄˚
)

467 
⁄˚
=0;

468 
	`FCEU_PrötEº‹
("Error in AddExState: SFEXINDEX overflow.\nSomebody made SFMDATA_SIZEÅoo small.");

471 
SFMDATA
[
SFEXINDEX
].
v
=0;

472 
	}
}

477 
uöt8
 *
	gSèãBuf„r
;

478 
	göto°©e
;

480 
	$a‰ód
(*
±r
, 
size_t
 
_size
, size_à
_√Àm
)

482 
	`mem˝y
(
±r
,
SèãBuf„r
+
öto°©e
,
_size
*
_√Àm
);

483 
öto°©e
+=
_size
*
_√Àm
;

484 
	}
}

487 
	$¨ódlowî8of16
(
öt8
 *
d
)

489 #ifde‡
LSB_FIRST


490 *
d
=
SèãBuf„r
[
öto°©e
++];

492 
d
[1]=
SèãBuf„r
[
öto°©e
++];

494 
	}
}

497 
	$¨óduµî8of16
(
öt8
 *
d
)

499 #ifde‡
LSB_FIRST


500 
d
[1]=
SèãBuf„r
[
öto°©e
++];

502 *
d
=
SèãBuf„r
[
öto°©e
++];

504 
	}
}

507 
	$¨ód16
(
öt8
 *
d
)

509 #ifde‡
LSB_FIRST


510 *
d
=
SèãBuf„r
[
öto°©e
++];

511 
d
[1]=
SèãBuf„r
[
öto°©e
++];

513 
d
[1]=
SèãBuf„r
[
öto°©e
++];

514 *
d
=
SèãBuf„r
[
öto°©e
++];

516 
	}
}

519 
	$¨ód32
(
öt8
 *
d
)

521 #ifde‡
LSB_FIRST


522 *
d
=
SèãBuf„r
[
öto°©e
++];

523 
d
[1]=
SèãBuf„r
[
öto°©e
++];

524 
d
[2]=
SèãBuf„r
[
öto°©e
++];

525 
d
[3]=
SèãBuf„r
[
öto°©e
++];

527 
d
[3]=
SèãBuf„r
[
öto°©e
++];

528 
d
[2]=
SèãBuf„r
[
öto°©e
++];

529 
d
[1]=
SèãBuf„r
[
öto°©e
++];

530 *
d
=
SèãBuf„r
[
öto°©e
++];

532 
	}
}

534 
	$LﬂdSèãOld
(
FILE
 *
°
)

536 
x
;

537 
öt32
 
«da
;

538 
uöt8
 
vîsi⁄
;

539 
«da
=0;

541 
	`¥ötf
("LoadStateOld\n");

543 
SèãBuf„r
=
	`FCEU_mÆloc
(59999);

544 if(
SèãBuf„r
==
NULL
)

546 if(!
	`‰ód
(
SèãBuf„r
,59999,1,
°
))

548 
	`f˛o£
(
°
);

549 
	`‰ì
(
SèãBuf„r
);

553 
öto°©e
=0;

556 
uöt8
 
a
[2];

557 
	`a‰ód
(&
a
[0],1,1);

558 
	`a‰ód
(&
a
[1],1,1);

559 
X
.
PC
=
a
[0]|(a[1]<<8);

561 
	`a‰ód
(&
X
.
A
,1,1);

562 
	`a‰ód
(&
X
.
P
,1,1);

563 
	`a‰ód
(&
X
.X,1,1);

564 
	`a‰ód
(&
X
.
Y
,1,1);

565 
	`a‰ód
(&
X
.
S
,1,1);

566 
	`a‰ód
(&
vîsi⁄
,1,1);

567 
	`a‰ód
(&
«da
,1,1);

568 
	`a‰ód
(&
«da
,1,1);

569 
	`a‰ód
(&
«da
,1,1);

570 
	`a‰ód
(&
«da
,1,1);

571 
	`¨ód32
((
öt8
 *)&
X
.
cou¡
);

572 
	`a‰ód
(&
«da
,1,1);

573 
	`a‰ód
(&
«da
,1,1);

574 
	`a‰ód
(&
«da
,1,1);

575 
	`a‰ód
(&
«da
,1,1);

576 
	`¨ód32
((
öt8
 *)&
«da
);

577 
	`a‰ód
(&
«da
,1,1);

578 
	`a‰ód
(&
«da
,1,1);

579 
	`a‰ód
(&
«da
,1,1);

580 
	`a‰ód
(&
«da
,1,1);

582 
x
=0;x<8;x++)

583 
	`¨óduµî8of16
((
öt8
 *)&
CHRB™kLi°
[
x
]);

584 
	`a‰ód
(
PRGB™kLi°
,4,1);

585 
x
=0;x<8;x++)

586 
	`¨ódlowî8of16
((
öt8
 *)&
CHRB™kLi°
[
x
]);

587 
	`a‰ód
(
CHRRAM
,1,0x2000);

588 
	`a‰ód
(
NTARAM
,1,0x400);

589 
	`a‰ód
(
ExåaNTARAM
,1,0x400);

590 
	`a‰ód
(
NTARAM
+0x400,1,0x400);

591 
	`a‰ód
(
ExåaNTARAM
+0x400,1,0x400);

593 
x
=0;x<0xF00;x++)

594 
	`a‰ód
(&
«da
,1,1);

595 
	`a‰ód
(
PALRAM
,1,0x20);

596 
x
=0;x<256-32;x++)

597 
	`a‰ód
(&
«da
,1,1);

598 
x
=0x00;x<0x20;x++)

599 
PALRAM
[
x
]&=0x3f;

600 
	`a‰ód
(
PPU
,1,4);

601 
	`a‰ód
(
SPRAM
,1,0x100);

602 
	`a‰ód
(
WRAM
,1,8192);

603 
	`a‰ód
(
RAM
,1,0x800);

604 
	`¨ód16
((
öt8
 *)&
sˇ∆öe
);

605 
	`¨ód16
((
öt8
 *)&
Re‰eshAddr
);

606 
	`a‰ód
(&
VRAMBuf„r
,1,1);

608 
	`a‰ód
(&
IRQa
,1,1);

609 
	`¨ód32
((
öt8
 *)&
IRQCou¡
);

610 
	`¨ód32
((
öt8
 *)&
IRQL©ch
);

611 
	`a‰ód
(&
Múr‹ög
,1,1);

612 
	`a‰ód
(
PSG
,1,0x17);

613 
PSG
[0x11]&=0x7F;

614 
	`a‰ód
(
M≠≥rExRAM
,1,193);

615 if(
vîsi⁄
>=31)

616 
PSG
[0x17]=
M≠≥rExRAM
[115];

618 
PSG
[0x17]|=0x40;

619 
PSG
[0x15]&=0xF;

620 
sqn⁄
=
PSG
[0x15];

622 
X
.
IRQlow
=0;

623 
	`a‰ód
(&
«da
,1,1);

624 
	`a‰ód
(&
«da
,1,1);

625 
	`a‰ód
(&
«da
,1,1);

626 
	`a‰ód
(&
«da
,1,1);

627 
	`a‰ód
(&
«da
,1,1);

628 
	`a‰ód
(&
«da
,1,1);

629 
	`a‰ód
(&
XOff£t
,1,1);

630 
PPUCHRRAM
=0;

631 
x
=0;x<8;x++)

633 
«da
=0;

634 
	`a‰ód
(&
«da
,1,1);

635 
PPUCHRRAM
|=(
«da
?1:0)<<
x
;

638 
	`a‰ód
(
m≠byã1
,1,8);

639 
	`a‰ód
(
m≠byã2
,1,8);

640 
	`a‰ód
(
m≠byã3
,1,8);

641 
	`a‰ód
(
m≠byã4
,1,8);

642 
x
=0;x<4;x++)

643 
	`¨ód16
((
öt8
 *)&
«da
);

645 
PPUNTARAM
=0;

646 
x
=0;x<4;x++)

648 
«da
=0;

649 
	`¨ód16
((
öt8
 *)&
«da
);

650 
PPUNTARAM
|=((
«da
&0x800)?0:1)<<
x
;

652 
	`a‰ód
(
M≠≥rExRAM
,1,32768);

653 
	`a‰ód
(&
vtoggÀ
,1,1);

654 
	`¨ód16
((
öt8
 *)&
TempAddrT
);

655 
	`¨ód16
((
öt8
 *)&
Re‰eshAddrT
);

657 if(
GameSèãRe°‹e
Ë
	`GameSèãRe°‹e
(
vîsi⁄
);

658 
	`‰ì
(
SèãBuf„r
);

659 
	`FixOldSaveSèãSFªq
();

660 
X
.
mooPI
=X.
P
;

662 
	}
}

	@state.h

21 
	~<°dio.h
>

23 
SaveSèã
(c⁄° *
‚ame
);

24 
LﬂdSèã
(c⁄° *
‚ame
);

25 
FCEUSS_LﬂdFP
(
FILE
 *
°
, 
make_backup
);

27 
uöt8
 
SèãName
[2048];

28 
uöt8
 
SèãFûe
[2048];

29 
CuºítSèã
;

30 
SaveSèãSètus
[10];

31 
CheckSèãs
();

32 
SaveSèãRe‰esh
();

35 *
	mv
;

36 
uöt32
 
	ms
;

37 *
	mdesc
;

38 } 
	tSFORMAT
;

40 
Re£tExSèã
((*
PªSave
)(), (*
Po°Save
)());

41 
	`AddExSèã
(*
v
, 
uöt32
 
s
, 
ty≥
, *
desc
);

43 
	#RLSB
 0x80000000

	)

44 
	#FCEUSTATE_RLSB
 
RLSB


	)

	@svga.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<m©h.h
>

28 
	~<°rög.h
>

30 
	~<°d¨g.h
>

33 #i‚de‡
M_PI


34 
	#M_PI
 3.14159265358979323846

	)

37 
	~"ty≥s.h
"

38 
	~"svga.h
"

39 
	~"f˚.h
"

40 
	~"gíîÆ.h
"

41 
	~"video.h
"

42 
	~"sound.h
"

43 
	~"vîsi⁄.h
"

44 
	~"nsf.h
"

45 
	~"∑Àâe.h
"

46 
	~"fds.h
"

47 
	~"√çœy.h
"

48 
	~"°©e.h
"

49 
	~"ˇπ.h
"

50 
	~"öput.h
"

52 
	~"vsuni.h
"

54 
FCEUS
 
	gFSëtögs
;

56 
	ghowl⁄g
;

57 
	gîrmsg
[65];

59 
	$FCEU_PrötEº‹
(*
f‹m©
, ...)

61 
ãmp
[2048];

63 
va_li°
 
≠
;

65 
	`va_°¨t
(
≠
,
f‹m©
);

66 
	`v•rötf
(
ãmp
,
f‹m©
,
≠
);

67 
	`FCEUD_PrötEº‹
(
ãmp
);

69 
	`va_íd
(
≠
);

70 
	}
}

72 
	$FCEU_Di•Mesßge
(*
f‹m©
, ...)

74 
va_li°
 
≠
;

76 
	`va_°¨t
(
≠
,
f‹m©
);

77 
	`v•rötf
(
îrmsg
,
f‹m©
,
≠
);

78 
	`va_íd
(
≠
);

80 
howl⁄g
=180;

81 i‡(
îrmsg
[0] != '|')

82 
	`¥ötf
("%s\n", 
îrmsg
);

83 
	}
}

85 
	$FCEU_C™˚lDi•Mesßge
()

87 
howl⁄g
=0;

88 
	}
}

90 
	$FCEUI_SëRídîedLöes
(
¡scf
, 
¡s˛
, 
∑lf
, 
∑Œ
)

92 
FSëtögs
.
U§Fú°SLöe
[0]=
¡scf
;

93 
FSëtögs
.
U§La°SLöe
[0]=
¡s˛
;

94 
FSëtögs
.
U§Fú°SLöe
[1]=
∑lf
;

95 
FSëtögs
.
U§La°SLöe
[1]=
∑Œ
;

96 if(
PAL
)

98 
FSëtögs
.
Fú°SLöe
=FSëtögs.
U§Fú°SLöe
[1];

99 
FSëtögs
.
La°SLöe
=FSëtögs.
U§La°SLöe
[1];

103 
FSëtögs
.
Fú°SLöe
=FSëtögs.
U§Fú°SLöe
[0];

104 
FSëtögs
.
La°SLöe
=FSëtögs.
U§La°SLöe
[0];

107 
	}
}

109 
	$FCEUI_SëVidSy°em
(
a
)

111 
FSëtögs
.
PAL
=
a
?1:0;

112 
	`FCEU_Re£tVidSys
();

113 
	`FCEU_Re£tPÆëã
();

114 
	}
}

116 
	$FCEUI_GëCuºítVidSy°em
(*
¶°¨t
, *
¶íd
)

118 if(
¶°¨t
)

119 *
¶°¨t
=
FSëtögs
.
Fú°SLöe
;

120 if(
¶íd
)

121 *
¶íd
=
FSëtögs
.
La°SLöe
;

122 (
PAL
);

123 
	}
}

125 #ifde‡
NETWORK


126 
	$FCEUI_SëNëw‹kPœy
(
ty≥
)

128 
FSëtögs
.
Nëw‹kPœy
=
ty≥
;

129 
	}
}

132 
	$FCEUI_SëGameGíõ
(
a
)

134 
FSëtögs
.
GameGíõ
=
a
?1:0;

135 
	}
}

137 #i‚de‡
NETWORK


138 
	#√çœy
 0

	)

141 
uöt8
 
	gExô
=0;

143 
uöt8
 
	gDIPS
=0;

145 
uöt8
 
	gComm™dQueue
=0;

148 
	$FCEUI_SëS«pName
(
a
)

150 
FSëtögs
.
S«pName
=
a
;

151 
	}
}

153 
	$FCEUI_SaveExåaD©aUndîBa£
(
a
)

155 
FSëtögs
.
SUndîBa£
=
a
;

156 
	}
}

159 
	$FCEUI_Sñe˘Sèã
(
w
)

163 
	}
}

165 
	$FCEUI_SaveSèã
(c⁄° *
‚ame
)

171 
	`SaveSèã
(
‚ame
);

172 
	}
}

174 
	$FCEUI_LﬂdSèã
(c⁄° *
‚ame
)

179 
	`LﬂdSèã
(
‚ame
);

180 
	}
}

182 
öt32
 
	$FCEUI_GëDesúedFPS
()

184 if(
PAL
)

188 
	}
}

190 
	gdo¢≠ßve
=0;

191 
	$FCEUI_SaveS«pshŸ
()

193 
do¢≠ßve
=1;

194 
	}
}

197 
	$RóŒyS«p
()

199 
x
=
	`SaveS«pshŸ
();

200 if(!
x
)

201 
	`FCEU_Di•Mesßge
("Error saving screen snapshot.");

203 
	`FCEU_Di•Mesßge
("S¸ì¿¢≠shŸ %d saved.",
x
-1);

204 
	}
}

206 
	$DrivîI¡îÁ˚
(
w
, *
d
)

208 
w
)

210 
DES_RESET
:if(
√çœy
!=2Ë
Comm™dQueue
=30;;

211 
DES_POWER
:if(
√çœy
!=2Ë
Comm™dQueue
=31;;

213 
DES_VSUNIDIPSET
:
Comm™dQueue
=10+()
d
;;

214 
DES_VSUNITOGGLEDIPVIEW
:
Comm™dQueue
=10;;

215 
DES_VSUNICOIN
:
Comm™dQueue
=19;;

217 
DES_NTSCDEC
:

218 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 && !
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
)

220 
which
;

221 if(
c⁄åﬁ£À˘
)

223 if(
c⁄åﬁÀngth
)

225 
which
=
c⁄åﬁ£À˘
==1?
¡schue
:
¡s˘öt
;

226 
which
--;

227 if(
which
<0) which=0;

228 if(
c⁄åﬁ£À˘
==1)

229 
¡schue
=
which
;

230 
¡s˘öt
=
which
;

231 
	`CÆcuœãPÆëã
();

233 
c⁄åﬁÀngth
=360;

237 
DES_NTSCINC
:

238 if(
¡sccﬁ
 && 
FCEUGameInfo
.
ty≥
!=
GIT_VSUNI
 && !
PAL
 && FCEUGameInfo.ty≥!=
GIT_NSF
)

239 if(
c⁄åﬁ£À˘
)

241 if(
c⁄åﬁÀngth
)

243 
c⁄åﬁ£À˘
)

245 1:
¡schue
++;

246 if(
¡schue
>128)Çtschue=128;

247 
	`CÆcuœãPÆëã
();

249 2:
¡s˘öt
++;

250 if(
¡s˘öt
>128)Çtsctint=128;

251 
	`CÆcuœãPÆëã
();

255 
c⁄åﬁÀngth
=360;

260 
	}
}

263 
	~"døwög.h
"

264 #ifde‡
FRAMESKIP


265 
	$FCEU_PutImageDummy
()

267 if(
howl⁄g
) howlong--;

268 #ifde‡
FPS


270 
uöt64
 
‰cou¡
;

271 
‰cou¡
++;

275 
	}
}

278 
	$FCEU_PutImage
()

280 if(
FCEUGameInfo
.
ty≥
==
GIT_NSF
)

282 
	`DøwNSF
(
XBuf
);

286 if(
do¢≠ßve
)

288 
	`RóŒyS«p
();

289 
do¢≠ßve
=0;

295 if(
do¢≠ßve
)

297 
	`RóŒyS«p
();

298 
do¢≠ßve
=0;

300 if(
FCEUGameInfo
.
ty≥
==
GIT_VSUNI
)

301 
	`FCEU_VSUniDøw
(
XBuf
);

310 
	`DøwMesßge
();

311 #ifde‡
FPS


313 
uöt64
 
‰cou¡
;

314 
‰cou¡
++;

317 
	`DøwI≈ut
(
XBuf
+8);

318 
	}
}

321 
	$DoComm™d
(
uöt8
 
c
)

323 
c
)

325 1:
	`FDSC⁄åﬁ
(
FDS_SELECT
);;

326 2:
	`FDSC⁄åﬁ
(
FDS_IDISK
);;

327 3:
	`FDSC⁄åﬁ
(
FDS_EJECT
);;

329 10:
DIPS
^=2;;

330 11:
vsdù
^=1;
DIPS
|=2;;

331 12:
vsdù
^=2;
DIPS
|=2;;

332 13:
vsdù
^=4;
DIPS
|=2;;

333 14:
vsdù
^=8;
DIPS
|=2;;

334 15:
vsdù
^=0x10;
DIPS
|=2;;

335 16:
vsdù
^=0x20;
DIPS
|=2;;

336 17:
vsdù
^=0x40;
DIPS
|=2;;

337 18:
vsdù
^=0x80;
DIPS
|=2;;

338 19:
coö⁄
=6;;

339 30:
	`Re£tNES
();;

340 31:
	`PowîNES
();;

341 40:
	`CheckSèãs
();
SèãShow
=0;
	`SaveSèã
();;

342 41:
	`CheckSèãs
();
SèãShow
=0;
	`LﬂdSèã
();;

344 50: 51:
SèãShow
=180;
CuºítSèã
=
c
-42;
	`CheckSèãs
();;

346 
	}
}

	@svga.h

22 
	~"drivî.h
"

25 
	mPAL
;

26 #ifde‡
NETWORK


27 
	mNëw‹kPœy
;

29 
	mSoundVﬁume
;

30 
	mGameGíõ
;

31 
	mSUndîBa£
;

34 
	mFú°SLöe
;

35 
	mLa°SLöe
;

40 
	mU§Fú°SLöe
[2];

41 
	mU§La°SLöe
[2];

42 
	mS«pName
;

43 
	mSndR©e
;

44 } 
	tFCEUS
;

46 
FCEUS
 
FSëtögs
;

48 
FCEU_PrötEº‹
(*
f‹m©
, ...);

49 
FCEU_Di•Mesßge
(*
f‹m©
, ...);

50 
	#FCEU_¥ötf
 
¥ötf


	)

52 
DøwTextTøns
(
uöt8
 *
de°
, 
uöt32
 
width
, uöt8 *
ãxtmsg
, uöt8 
fgcﬁ‹
);

53 
FCEU_PutImage
();

54 #ifde‡
FRAMESKIP


55 
FCEU_PutImageDummy
();

58 
uöt8
 
Exô
;

59 
uöt8
 
∑À
;

60 
uöt8
 
vsdù
;

62 
	#JOY_A
 1

	)

63 
	#JOY_B
 2

	)

64 
	#JOY_SELECT
 4

	)

65 
	#JOY_START
 8

	)

66 
	#JOY_UP
 0x10

	)

67 
	#JOY_DOWN
 0x20

	)

68 
	#JOY_LEFT
 0x40

	)

69 
	#JOY_RIGHT
 0x80

	)

71 
DoComm™d
(
uöt8
 
c
);

72 
uöt8
 
Comm™dQueue
;

74 
FlushComm™dQueue
();

	@types.h

22 #i‚de‡
__FCEU_TYPES


23 
	#__FCEU_TYPES


	)

25 
	~<öây≥s.h
>

26 
öt8_t
 
	töt8
;

27 
öt16_t
 
	töt16
;

28 
öt32_t
 
	töt32
;

30 
uöt8_t
 
	tuöt8
;

31 
uöt16_t
 
	tuöt16
;

32 
uöt32_t
 
	tuöt32
;

38 #ifde‡
__GNUC__


39 
	tuöt64
;

40 
	töt64
;

41 
	#INLINE
 
ölöe


	)

42 
	#GINLINE
 
ölöe


	)

43 #ñi‡
MSVC


44 
__öt64
 
	töt64
;

45 
	t__öt64
 
	tuöt64
;

46 
	#INLINE
 
__ölöe


	)

47 
	#GINLINE


	)

50 
	#PSS_STYLE
 2

	)

57 
	#byã
 
uöt8


	)

58 
	#w‹d
 
uöt16


	)

60 #ifde‡
__GNUC__


61 #ifde‡
C80x86


62 
	#FASTAPASS
(
x
Ë
	`__©åibuã__
((
	`ªg∑rm
(x)))

	)

63 
	#FP_FASTAPASS
 
FASTAPASS


	)

65 
	#FASTAPASS
(
x
)

	)

66 
	#FP_FASTAPASS
(
x
)

	)

69 
	#FP_FASTAPASS
(
x
)

	)

70 
	#FASTAPASS
(
x
Ë
__Á°ˇŒ


	)

73 
	tFP_FASTAPASS
(2Ë(*
	twrôefunc
)(
	tuöt32
 
	tA
, 
	tuöt8
 
	tV
);

74 
uöt8
 
	tFP_FASTAPASS
(1Ë(*
	tªadfunc
)(
	tuöt32
 
	tA
);

	@unif.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

30 
	~"ty≥s.h
"

31 
	~"f˚.h
"

32 
	~"ˇπ.h
"

33 
	~"unif.h
"

34 
	~"öes.h
"

35 
	~"gíîÆ.h
"

36 
	~"°©e.h
"

37 
	~"ídün.h
"

38 
	~"fûe.h
"

39 
	~"mem‹y.h
"

40 
	~"öput.h
"

41 
	~"md5.h
"

43 
	~"svga.h
"

46 
	mID
[4];

47 
uöt32
 
	möfo
;

48 } 
	tUNIF_HEADER
;

51 *
	m«me
;

52 (*
	möô
)(
	mC¨tInfo
 *);

53 
	mÊags
;

54 } 
	tBMAPPING
;

57 *
	m«me
;

58 (*
	möô
)(
	mÂ
);

59 } 
	tBFMAPPING
;

61 
C¨tInfo
 
	gUNIFC¨t
;

63 
	gvømo
;

64 
	gmúr‹todo
;

65 *
	gbﬂrd«me
;

66 *
	gsbﬂrd«me
;

68 
uöt32
 
	gCHRRAMSize
;

69 
uöt8
 *
	gUNIFchºama
=0;

71 
UNIF_HEADER
 
	gunhód
;

72 
UNIF_HEADER
 
	guchód
;

75 
uöt8
 *
	gmÆlo˚d
[32];

76 
uöt32
 
	gmÆlo˚dsizes
[32];

78 
	$FixRomSize
(
uöt32
 
size
, uöt32 
möimum
)

80 
x
=1;

82 if(
size
<
möimum
)

83  
möimum
;

84 
x
<
size
)

85 
x
<<=1;

86  
x
;

87 
	}
}

89 
	$FªeUNIF
()

91 
x
;

92 if(
UNIFchºama
)

93 {
	`‰ì
(
UNIFchºama
);UNIFchrrama=0;}

94 if(
bﬂrd«me
)

95 {
	`‰ì
(
bﬂrd«me
);boardname=0;}

96 
x
=0;x<32;x++)

98 if(
mÆlo˚d
[
x
])

99 {
	`‰ì
(
mÆlo˚d
[
x
]);malloced[x]=0;}

101 
	}
}

103 
	$Re£tUNIF
()

105 
x
;

106 
x
=0;x<32;x++)

107 
mÆlo˚d
[
x
]=0;

108 
vømo
=0;

109 
bﬂrd«me
=0;

110 
múr‹todo
=0;

111 
	`mem£t
(&
UNIFC¨t
,0,(UNIFCart));

112 
UNIFchºama
=0;

113 
	}
}

115 
uöt8
 
	gex¡¨
[2048];

117 
	$MooMúr‹ög
()

119 if(
múr‹todo
<0x4)

120 
	`SëupC¨tMúr‹ög
(
múr‹todo
,1,0);

121 if(
múr‹todo
==0x4)

123 
	`SëupC¨tMúr‹ög
(4,1,
ex¡¨
);

124 
	`AddExSèã
(
ex¡¨
, 2048, 0,"EXNR");

127 
	`SëupC¨tMúr‹ög
(0,0,0);

128 
	}
}

130 
	$DoMúr‹ög
(
Â
)

132 
uöt8
 
t
;

133 
t
=
	`FCEU_fgëc
(
Â
);

134 
múr‹todo
=
t
;

137 *
°uffo
[6]={"Horizontal","Vertical","$2000","$2400","\"Four-screen\"","Controlled by Mapper Hardware"};

138 if(
t
<6)

139 
	`FCEU_¥ötf
(" Name/Aâribuã TabÀ Múr‹ög: %s\n",
°uffo
[
t
]);

142 
	}
}

144 
	$NAME
(
Â
)

146 
«mebuf
[100];

147 
ödex
;

148 
t
;

150 
	`FCEU_¥ötf
(" Name: ");

151 
ödex
=0;

153 (
t
=
	`FCEU_fgëc
(
Â
))>0)

154 if(
ödex
<99)

155 
«mebuf
[
ödex
++]=
t
;

157 
«mebuf
[
ödex
]=0;

158 
	`FCEU_¥ötf
("%s\n",
«mebuf
);

160 if(!
FCEUGameInfo
.
«me
)

162 
FCEUGameInfo
.
«me
=
	`mÆloc
(
	`°æí
(
«mebuf
)+1);

163 
	`°r˝y
((*)
FCEUGameInfo
.
«me
,
«mebuf
);

166 
	}
}

167 
	$DINF
(
Â
)

169 
«me
[100], 
mëhod
[100];

170 
uöt8
 
d
, 
m
;

171 
uöt16
 
y
;

172 
t
;

174 if(
	`FCEU_‰ód
(
«me
,1,100,
Â
)!=100)

176 if((
t
=
	`FCEU_fgëc
(
Â
))==
EOF
) (0);

177 
d
=
t
;

178 if((
t
=
	`FCEU_fgëc
(
Â
))==
EOF
) (0);

179 
m
=
t
;

180 if((
t
=
	`FCEU_fgëc
(
Â
))==
EOF
) (0);

181 
y
=
t
;

182 if((
t
=
	`FCEU_fgëc
(
Â
))==
EOF
) (0);

183 
y
|=
t
<<8;

184 if(
	`FCEU_‰ód
(
mëhod
,1,100,
Â
)!=100)

186 
«me
[99]=
mëhod
[99]=0;

187 
	`FCEU_¥ötf
(" Dum≥d by: %s\n",
«me
);

188 
	`FCEU_¥ötf
(" Dum≥d wôh: %s\n",
mëhod
);

190 *
m⁄ths
[12]={"January","February","March","April","May","June","July",

192 
	`FCEU_¥ötf
(" Dum≥d on: %†%d, %d\n",
m⁄ths
[(
m
-1)%12],
d
,
y
);

195 
	}
}

197 
	$CTRL
(
Â
)

199 
t
;

201 if((
t
=
	`FCEU_fgëc
(
Â
))==
EOF
)

207 if(
t
&1Ë
FCEUGameInfo
.
öput
[0]=FCEUGameInfo.öput[1]=
SI_GAMEPAD
;

208 
FCEUGameInfo
.
öput
[0]=FCEUGameInfo.öput[1]=
SI_NONE
;

210 if(
t
&2Ë
FCEUGameInfo
.
öput
[1]=
SI_ZAPPER
;

214 
	}
}

216 
	$TVCI
(
Â
)

218 
t
;

219 if–(
t
=
	`FCEU_fgëc
(
Â
)Ë==
EOF
)

221 if(
t
<=2)

223 *
°uffo
[3]={"NTSC","PAL","NTSCánd PAL"};

224 if(
t
==0)

226 
FCEUGameInfo
.
vidsys
=
GIV_NTSC
;

227 
	`FCEUI_SëVidSy°em
(0);

229 if(
t
==1)

231 
FCEUGameInfo
.
vidsys
=
GIV_PAL
;

232 
	`FCEUI_SëVidSy°em
(1);

234 
	`FCEU_¥ötf
(" TV Sènd¨d Com∑tibûôy: %s\n",
°uffo
[
t
]);

237 
	}
}

239 
	$E«bÀB©ãry
(
Â
)

241 
	`FCEU_¥ötf
(" Battery-backed.\n");

242 if(
	`FCEU_fgëc
(
Â
)==
EOF
)

244 
UNIFC¨t
.
b©ãry
=1;

246 
	}
}

248 
	$LﬂdPRG
(
Â
)

250 
z
,
t
;

251 
z
=
uchód
.
ID
[3]-'0';

253 if(
z
<0 || z>15)

255 
	`FCEU_¥ötf
(" PRG ROM %d size: %d",
z
,(Ë
uchód
.
öfo
);

256 if(
mÆlo˚d
[
z
])

257 
	`‰ì
(
mÆlo˚d
[
z
]);

258 
t
=
	`FixRomSize
(
uchód
.
öfo
,2048);

259 if(!(
mÆlo˚d
[
z
]=(
uöt8
 *)
	`FCEU_mÆloc
(
t
)))

261 
mÆlo˚dsizes
[
z
]=
t
;

262 
	`mem£t
(
mÆlo˚d
[
z
]+
uchód
.
öfo
,0xFF,
t
-uchead.info);

263 if(
	`FCEU_‰ód
(
mÆlo˚d
[
z
],1,
uchód
.
öfo
,
Â
)!=uchead.info)

265 
	`FCEU_¥ötf
("Read Error!\n");

269 
	`FCEU_¥ötf
("\n");

271 
	`SëupC¨tPRGM≠pög
(
z
,
mÆlo˚d
[z],
t
,0);

273 
	}
}

275 
	$SëBﬂrdName
(
Â
)

277 if(!(
bﬂrd«me
=
	`FCEU_mÆloc
(
uchód
.
öfo
+1)))

279 
	`FCEU_‰ód
(
bﬂrd«me
,1,
uchód
.
öfo
,
Â
);

280 
bﬂrd«me
[
uchód
.
öfo
]=0;

281 
	`FCEU_¥ötf
(" BﬂrdÇame: %s\n",
bﬂrd«me
);

282 
sbﬂrd«me
=
bﬂrd«me
;

283 if(!
	`memcmp
(
bﬂrd«me
,"NES-",4) || !memcmp(boardname,"UNL-",4) || !memcmp(boardname,"HVC-",4) || !memcmp(boardname,"BTL-",4) || !memcmp(boardname,"BMC-",4))

284 
sbﬂrd«me
+=4;

286 
	}
}

288 
	$LﬂdCHR
(
Â
)

290 
z
,
t
;

291 
z
=
uchód
.
ID
[3]-'0';

292 if(
z
<0 || z>15)

294 
	`FCEU_¥ötf
(" CHR ROM %d size: %d",
z
,(Ë
uchód
.
öfo
);

295 if(
mÆlo˚d
[16+
z
])

296 
	`‰ì
(
mÆlo˚d
[16+
z
]);

297 
t
=
	`FixRomSize
(
uchód
.
öfo
,8192);

298 if(!(
mÆlo˚d
[16+
z
]=(
uöt8
 *)
	`FCEU_mÆloc
(
t
)))

300 
mÆlo˚dsizes
[16+
z
]=
t
;

301 
	`mem£t
(
mÆlo˚d
[16+
z
]+
uchód
.
öfo
,0xFF,
t
-uchead.info);

302 if(
	`FCEU_‰ód
(
mÆlo˚d
[16+
z
],1,
uchód
.
öfo
,
Â
)!=uchead.info)

304 
	`FCEU_¥ötf
("Read Error!\n");

308 
	`FCEU_¥ötf
("\n");

310 
	`SëupC¨tCHRM≠pög
(
z
,
mÆlo˚d
[16+z],
t
,0);

312 
	}
}

315 
	#BMCFLAG_FORCE4
 1

	)

316 
	#BMCFLAG_16KCHRR
 2

	)

317 
	#BMCFLAG_32KCHRR
 4

	)

319 
BMAPPING
 
	gbm≠
[] = {

322 { "TC-U01-1.5M", 
TCU01_Inô
,0},

323 { "Sachí-8259A", 
S8259A_Inô
,0},

324 { "Sachí-8259B", 
S8259B_Inô
,0},

325 { "Sachí-8259C", 
S8259C_Inô
,0},

326 { "Sachí-8259D", 
S8259D_Inô
,0},

327 { "Sachí-74LS374N", 
S74LS374N_Inô
,0},

328 { "Sachí-74LS374NA", 
S74LS374NA_Inô
,0},

329 { "SA-016-1M", 
SA0161M_Inô
,0},

330 { "SA-72007", 
SA72007_Inô
,0},

331 { "SA-72008", 
SA72008_Inô
,0},

332 { "SA-0036", 
SA0036_Inô
,0},

333 { "SA-0037", 
SA0037_Inô
,0},

334 { "SA-NROM", 
TCA01_Inô
,0},

342 { "ANROM", 
ANROM_Inô
,0},

344 { "HKROM", 
HKROM_Inô
,0},

346 { "EWROM", 
EWROM_Inô
,0},

347 { "EKROM", 
EKROM_Inô
,0},

348 { "ELROM", 
ELROM_Inô
,0},

349 { "ETROM", 
ETROM_Inô
,0},

351 { "SAROM", 
SAROM_Inô
,0},

352 { "SBROM", 
SBROM_Inô
,0},

353 { "SCROM", 
SCROM_Inô
,0},

354 { "SEROM", 
SEROM_Inô
,0},

355 { "SGROM", 
SGROM_Inô
,0},

356 { "SKROM", 
SKROM_Inô
,0},

357 { "SLROM", 
SLROM_Inô
,0},

358 { "SL1ROM", 
SL1ROM_Inô
,0},

359 { "SNROM", 
SNROM_Inô
,0},

360 { "SOROM", 
SOROM_Inô
,0},

362 { "TGROM", 
TGROM_Inô
,0},

363 { "TR1ROM", 
TFROM_Inô
,
BMCFLAG_FORCE4
},

365 { "TEROM", 
TEROM_Inô
,0},

366 { "TFROM", 
TFROM_Inô
,0},

367 { "TLROM", 
TLROM_Inô
,0},

368 { "TKROM", 
TKROM_Inô
,0},

369 { "TSROM", 
TSROM_Inô
,0},

371 { "TLSROM", 
TLSROM_Inô
,0},

372 { "TKSROM", 
TKSROM_Inô
,0},

373 { "TQROM", 
TQROM_Inô
,0},

374 { "TVROM", 
TLROM_Inô
,
BMCFLAG_FORCE4
},

376 { "CPROM", 
CPROM_Inô
,
BMCFLAG_16KCHRR
},

377 { "CNROM", 
CNROM_Inô
,0},

378 { "NROM", 
NROM_Inô
,0 },

379 { "NROM-128", 
NROM_Inô
,0 },

380 { "NROM-256", 
NROM_Inô
,0 },

381 { "RROM", 
NROM_Inô
,0 },

382 { "RROM-128", 
NROM_Inô
,0 },

383 { "MHROM", 
MHROM_Inô
,0},

384 { "UNROM", 
UNROM_Inô
,0},

385 { "SUNSOFT_UNROM", 
SUNSOFT_UNROM_Inô
,0},

386 { "MARIO1-MALEE2", 
MALEE_Inô
,0},

388 { "CC-21", 
UNLCC21_Inô
,0},

390 { "H2288", 
UNLH2288_Inô
,0},

391 { "KOF97", 
UNLKOF97_Inô
,0},

392 { "SL1632", 
UNLSL1632_Inô
,0},

393 { "SHERO", 
UNLSHî€s_Inô
,0},

394 { "8237", 
UNL8237_Inô
,0},

395 { "8157", 
UNL8157_Inô
,0},

396 { "T-262", 
BMCT262_Inô
,0},

397 { "FK23C", 
BMCFK23C_Inô
,0},

398 { "Su≥rvisi⁄16ö1", 
Su≥rvisi⁄16_Inô
,0},

399 { "NovñDüm⁄d9999999ö1", 
Novñ_Inô
,0},

400 { "Su≥r24ö1SC03", 
Su≥r24_Inô
,0},

401 { "42ö1Re£tSwôch", 
BMC42ö1r_Inô
, 0},

402 { "64ö1NoRïót", 
BMC64ö1ƒ_Inô
, 0},

403 { "13ö1JY110", 
BMC13ö1JY110_Inô
, 0},

404 { "70ö1", 
BMC70ö1_Inô
, 0},

405 { "70ö1B", 
BMC70ö1B_Inô
, 0},

406 { "GK-192", 
M≠≥r58_Inô
, 0},

407 { "Su≥rHIK8ö1", 
M≠≥r45_Inô
,0},

409 { "DREAMTECH01", 
DªamTech01_Inô
,0},

410 { "KONAMI-QTAI", 
M≠≥r190_Inô
,0},

412 { "TEK90", 
M≠≥r90_Inô
,0},

417 
BFMAPPING
 
	gbfunc
[] = {

418 { "CTRL", 
CTRL
 },

419 { "TVCI", 
TVCI
 },

420 { "BATR", 
E«bÀB©ãry
 },

421 { "MIRR", 
DoMúr‹ög
 },

422 { "PRG", 
LﬂdPRG
 },

423 { "CHR", 
LﬂdCHR
 },

424 { "NAME", 
NAME
 },

425 { "MAPR", 
SëBﬂrdName
 },

426 { "DINF", 
DINF
 },

430 
	$LﬂdUNIFChunks
(
Â
)

432 
x
;

433 
t
;

436 
t
=
	`FCEU_‰ód
(&
uchód
,1,4,
Â
);

437 if(
t
<4)

439 if(
t
>0)

443 if(!(
	`FCEU_ªad32
(&
uchód
.
öfo
,
Â
)))

445 
t
=0;

446 
x
=0;

448 
bfunc
[
x
].
«me
)

450 if(!
	`memcmp
(&
uchód
,
bfunc
[
x
].
«me
,
	`°æí
(bfunc[x].name)))

452 if(!
bfunc
[
x
].
	`öô
(
Â
))

454 
t
=1;

457 
x
++;

459 if(!
t
)

460 if(
	`FCEU_f£ek
(
Â
,
uchód
.
öfo
,
SEEK_CUR
))

463 
	}
}

465 
	$InôülizeBﬂrd
()

467 
x
=0;

469 if(!
sbﬂrd«me
) (0);

471 
bm≠
[
x
].
«me
)

473 if(!
	`°rcmp
(
sbﬂrd«me
,(*)
bm≠
[
x
].
«me
))

475 if(!
mÆlo˚d
[16])

477 if(
bm≠
[
x
].
Êags
 & 
BMCFLAG_16KCHRR
)

478 
CHRRAMSize
 = 16384;

480 
CHRRAMSize
 = 8192;

481 if((
UNIFchºama
=(
uöt8
 *)
	`FCEU_mÆloc
(
CHRRAMSize
)))

483 
	`SëupC¨tCHRM≠pög
(0,
UNIFchºama
,
CHRRAMSize
,1);

484 
	`AddExSèã
(
UNIFchºama
, 
CHRRAMSize
, 0,"CHRR");

489 if(
bm≠
[
x
].
Êags
&
BMCFLAG_FORCE4
)

490 
múr‹todo
=4;

491 
	`MooMúr‹ög
();

492 
bm≠
[
x
].
	`öô
(&
UNIFC¨t
);

495 
x
++;

497 
	`FCEU_PrötEº‹
("BoardÅypeÇot supported.");

499 
	}
}

501 
	$UNIFGI
(
h
, *
∑øm
)

503 
h
)

505 
GI_RESETM2
:

506 if(
UNIFC¨t
.
Re£t
)

507 
UNIFC¨t
.
	`Re£t
();

509 
GI_POWER
:

510 if(
UNIFC¨t
.
Powî
)

511 
UNIFC¨t
.
	`Powî
();

512 if(
UNIFchºama
Ë
	`mem£t
(UNIFchrrama,0,8192);

514 
GI_CLOSE
:

515 
	`FCEU_SaveGameSave
(&
UNIFC¨t
);

516 if(
UNIFC¨t
.
Clo£
)

517 
UNIFC¨t
.
	`Clo£
();

518 
	`FªeUNIF
();

519 
	`Re£tExSèã
(0,0);

521 
GI_INFOSTRING
:

523 
bﬂrd
[24];

524 
	`°∫˝y
(
bﬂrd
, 
sbﬂrd«me
, 20);

525 
bﬂrd
[20] = 0;

526 
	`•rötf
(
∑øm
, "UNIF, %s, %s%s", 
bﬂrd
, 
PAL
?"PAL":"NTSC", 
UNIFC¨t
.
b©ãry
?", BB":"");

530 
	}
}

532 
	$UNIFLﬂd
(c⁄° *
«me
, 
Â
)

534 
	`FCEU_f£ek
(
Â
,0,
SEEK_SET
);

535 
	`FCEU_‰ód
(&
unhód
,1,4,
Â
);

536 if(
	`memcmp
(&
unhód
,"UNIF",4))

539 
	`Re£tC¨tM≠pög
();

541 
	`Re£tExSèã
(0,0);

542 
	`Re£tUNIF
();

543 if(!
	`FCEU_ªad32
(&
unhód
.
öfo
,
Â
))

544 
ab‹to
;

545 if(
	`FCEU_f£ek
(
Â
,0x20,
SEEK_SET
)<0)

546 
ab‹to
;

547 if(!
	`LﬂdUNIFChunks
(
Â
))

548 
ab‹to
;

550 
x
;

551 
md5_c⁄ãxt
 
md5
;

553 
	`md5_°¨ts
(&
md5
);

555 
x
=0;x<32;x++)

556 if(
mÆlo˚d
[
x
])

558 
	`md5_upd©e
(&
md5
,
mÆlo˚d
[
x
],
mÆlo˚dsizes
[x]);

560 
	`md5_föish
(&
md5
,
UNIFC¨t
.
MD5
);

561 
	`FCEU_¥ötf
(" ROM MD5: 0x");

562 
x
=0;x<16;x++)

563 
	`FCEU_¥ötf
("%02x",
UNIFC¨t
.
MD5
[
x
]);

564 
	`FCEU_¥ötf
("\n");

565 
	`mem˝y
(
FCEUGameInfo
.
MD5
,
UNIFC¨t
.MD5,(UNIFCart.MD5));

568 if(!
	`InôülizeBﬂrd
())

569 
ab‹to
;

571 
	`FCEU_LﬂdGameSave
(&
UNIFC¨t
);

572 
GameI¡îÁ˚
=
UNIFGI
;

575 
ab‹to
:

577 
	`FªeUNIF
();

578 
	`Re£tUNIF
();

582 
	}
}

	@unif.h

21 
ANROM_Inô
(
C¨tInfo
 *
öfo
);

23 
HKROM_Inô
(
C¨tInfo
 *
öfo
);

25 
ETROM_Inô
(
C¨tInfo
 *
öfo
);

26 
EKROM_Inô
(
C¨tInfo
 *
öfo
);

27 
ELROM_Inô
(
C¨tInfo
 *
öfo
);

28 
EWROM_Inô
(
C¨tInfo
 *
öfo
);

30 
SAROM_Inô
(
C¨tInfo
 *
öfo
);

31 
SBROM_Inô
(
C¨tInfo
 *
öfo
);

32 
SCROM_Inô
(
C¨tInfo
 *
öfo
);

33 
SEROM_Inô
(
C¨tInfo
 *
öfo
);

34 
SGROM_Inô
(
C¨tInfo
 *
öfo
);

35 
SKROM_Inô
(
C¨tInfo
 *
öfo
);

36 
SLROM_Inô
(
C¨tInfo
 *
öfo
);

37 
SL1ROM_Inô
(
C¨tInfo
 *
öfo
);

38 
SNROM_Inô
(
C¨tInfo
 *
öfo
);

39 
SOROM_Inô
(
C¨tInfo
 *
öfo
);

41 
NROM_Inô
(
C¨tInfo
 *
öfo
);

42 
MHROM_Inô
(
C¨tInfo
 *
öfo
);

43 
UNROM_Inô
(
C¨tInfo
 *
öfo
);

44 
SUNSOFT_UNROM_Inô
(
C¨tInfo
 *
öfo
);

45 
MALEE_Inô
(
C¨tInfo
 *
öfo
);

46 
CNROM_Inô
(
C¨tInfo
 *
öfo
);

47 
CPROM_Inô
(
C¨tInfo
 *
öfo
);

48 
GNROM_Inô
(
C¨tInfo
 *
öfo
);

50 
TEROM_Inô
(
C¨tInfo
 *
öfo
);

51 
TFROM_Inô
(
C¨tInfo
 *
öfo
);

52 
TGROM_Inô
(
C¨tInfo
 *
öfo
);

53 
TKROM_Inô
(
C¨tInfo
 *
öfo
);

54 
TSROM_Inô
(
C¨tInfo
 *
öfo
);

55 
TLROM_Inô
(
C¨tInfo
 *
öfo
);

56 
TLSROM_Inô
(
C¨tInfo
 *
öfo
);

57 
TKSROM_Inô
(
C¨tInfo
 *
öfo
);

58 
TQROM_Inô
(
C¨tInfo
 *
öfo
);

59 
TQROM_Inô
(
C¨tInfo
 *
öfo
);

61 
DEIROM_Inô
(
C¨tInfo
 *
öfo
);

63 
TCA01_Inô
(
C¨tInfo
 *
öfo
);

64 
TCU01_Inô
(
C¨tInfo
 *
öfo
);

65 
S8259A_Inô
(
C¨tInfo
 *
öfo
);

66 
S8259B_Inô
(
C¨tInfo
 *
öfo
);

67 
S8259C_Inô
(
C¨tInfo
 *
öfo
);

68 
S8259D_Inô
(
C¨tInfo
 *
öfo
);

69 
S74LS374N_Inô
(
C¨tInfo
 *
öfo
);

70 
S74LS374NA_Inô
(
C¨tInfo
 *
öfo
);

71 
SA0161M_Inô
(
C¨tInfo
 *
öfo
);

73 
SA72007_Inô
(
C¨tInfo
 *
öfo
);

74 
SA72008_Inô
(
C¨tInfo
 *
öfo
);

75 
SA0036_Inô
(
C¨tInfo
 *
öfo
);

76 
SA0037_Inô
(
C¨tInfo
 *
öfo
);

78 
Su≥rvisi⁄16_Inô
(
C¨tInfo
 *
öfo
);

79 
Su≥r24_Inô
(
C¨tInfo
 *
öfo
);

80 
Novñ_Inô
(
C¨tInfo
 *
öfo
);

82 
BMC42ö1r_Inô
(
C¨tInfo
 *
öfo
);

83 
BMC64ö1ƒ_Inô
(
C¨tInfo
 *
öfo
);

84 
BMC70ö1_Inô
(
C¨tInfo
 *
öfo
);

85 
BMC70ö1B_Inô
(
C¨tInfo
 *
öfo
);

86 
BMC13ö1JY110_Inô
(
C¨tInfo
 *
öfo
);

87 
BMCT262_Inô
(
C¨tInfo
 *
öfo
);

88 
BMCFK23C_Inô
(
C¨tInfo
 *
öfo
);

90 
DªamTech01_Inô
(
C¨tInfo
 *
öfo
);

91 
M≠≥r190_Inô
(
C¨tInfo
 *
öfo
);

92 
UNLCC21_Inô
(
C¨tInfo
 *
öfo
);

93 
UNLSL1632_Inô
(
C¨tInfo
 *
öfo
);

94 
UNLKOF97_Inô
(
C¨tInfo
 *
öfo
);

95 
UNLS⁄ic_Inô
(
C¨tInfo
 *
öfo
);

96 
UNLSHî€s_Inô
(
C¨tInfo
 *
öfo
);

97 
UNLH2288_Inô
(
C¨tInfo
 *
öfo
);

98 
UNL8237_Inô
(
C¨tInfo
 *
öfo
);

99 
UNL8157_Inô
(
C¨tInfo
 *
öfo
);

101 
uöt8
 *
UNIFchºama
;

	@version.h

1 
	#VERSION_NUMERIC
 81

	)

2 
	#VERSION_STRING
 ".81"

	)

4 #i‡
PSS_STYLE
==2

6 
	#PSS
 "\\"

	)

7 
	#PS
 '\\'

	)

9 #ñi‡
PSS_STYLE
==1

11 
	#PSS
 "/"

	)

12 
	#PS
 '/'

	)

14 #ñi‡
PSS_STYLE
==3

16 
	#PSS
 "\\"

	)

17 
	#PS
 '\\'

	)

19 #ñi‡
PSS_STYLE
==4

21 
	#PSS
 ":"

	)

22 
	#PS
 ':'

	)

26 #ifde‡
NOSTDOUT


27 
	#puts
(
x
)

	)

28 
	#¥ötf
(
x
,...)

	)

	@video.c

30 
	~<°rög.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 #ifde‡
GP2X


34 
	~<uni°d.h
>

37 
	~"ty≥s.h
"

38 
	~"video.h
"

39 
	~"f˚.h
"

40 
	~"svga.h
"

41 
	~"vîsi⁄.h
"

42 
	~"gíîÆ.h
"

43 
	~"mem‹y.h
"

45 
uöt8
 *
	gXBuf
=
NULL
;

47 
	$InôVútuÆVideo
()

49 if(!
XBuf
)

50 if(!(
XBuf
 = (
uöt8
*Ë(
	`FCEU_mÆloc
(320 * 240))))

60 
	`mem£t
(
XBuf
,0,320*240);

62 
	}
}

64 #i‚de‡
ZLIB


65 
uöt8
 
	gpcxhódî
[128] =

73 
	$SaveS«pshŸ
()

75 *
‚
=0;

76 
uöt8
 *
tmp
;

77 
x
,
u
,
y
;

78 
FILE
 *
µ
=
NULL
;

80 
u
=0;u<999;u++)

82 
µ
=
	`f›í
((
‚
=
	`FCEU_MakeFName
(
FCEUMKF_SNAP
,
u
,"pcx")),"rb");

83 if(
µ
==
NULL
) ;

84 
	`f˛o£
(
µ
);

87 if(!(
µ
=
	`f›í
(
‚
,"wb")))

91 
tŸÆlöes
=
FSëtögs
.
La°SLöe
-FSëtögs.
Fú°SLöe
+1;

93 
tmp
=
XBuf
+8+
FSëtögs
.
Fú°SLöe
*272;

95 
pcxhódî
[10]=
tŸÆlöes
;

96 
	`fwrôe
(
pcxhódî
,1,128,
µ
);

97 
y
=0;y<
tŸÆlöes
;y++)

99 
x
=0;x<256;x++)

101 if(*
tmp
>=0xc0Ë
	`Âutc
(0xC1,
µ
);

102 
	`Âutc
(*
tmp
,
µ
);

103 
tmp
++;

105 
tmp
+=16;

109 
	`Âutc
(0xC,
µ
);

110 
x
=0;x<256;x++)

112 
uöt8
 
r
,
g
,
b
;

114 
	`FCEUD_GëPÆëã
(
x
,&
r
,&
g
,&
b
);

115 
	`Âutc
(
r
,
µ
);

116 
	`Âutc
(
g
,
µ
);

117 
	`Âutc
(
b
,
µ
);

119 
	`f˛o£
(
µ
);

121  
u
+1;

122 
	}
}

126 
	~<zlib.h
>

127 
	~"¸c32.h
"

129 
	$WrôePNGChunk
(
FILE
 *
Â
, 
uöt32
 
size
, *
ty≥
, 
uöt8
 *
d©a
)

131 
uöt32
 
¸c
;

133 
uöt8
 
ãmpo
[4];

135 
ãmpo
[0]=
size
>>24;

136 
ãmpo
[1]=
size
>>16;

137 
ãmpo
[2]=
size
>>8;

138 
ãmpo
[3]=
size
;

140 if(
	`fwrôe
(
ãmpo
,4,1,
Â
)!=1)

142 if(
	`fwrôe
(
ty≥
,4,1,
Â
)!=1)

145 if(
size
)

146 if(
	`fwrôe
(
d©a
,1,
size
,
Â
)!=size)

149 
¸c
=
	`CÆcCRC32
(0,(
uöt8
 *)
ty≥
,4);

150 if(
size
)

151 
¸c
=
	`CÆcCRC32
(¸c,
d©a
,
size
);

153 
ãmpo
[0]=
¸c
>>24;

154 
ãmpo
[1]=
¸c
>>16;

155 
ãmpo
[2]=
¸c
>>8;

156 
ãmpo
[3]=
¸c
;

158 if(
	`fwrôe
(
ãmpo
,4,1,
Â
)!=1)

161 
	}
}

163 
	$SaveS«pshŸ
()

165 *
‚
=0;

166 
tŸÆlöes
=
FSëtögs
.
La°SLöe
-FSëtögs.
Fú°SLöe
+1;

167 
x
,
u
,
y
;

168 
FILE
 *
µ
=
NULL
;

169 
uöt8
 *
compmem
=
NULL
;

170 
compmemsize
=
tŸÆlöes
*263+12;

172 if(!(
compmem
=
	`FCEU_mÆloc
(
compmemsize
)))

175 
u
=0;u<999;u++)

177 
µ
=
	`f›í
((
‚
=
	`FCEU_MakeFName
(
FCEUMKF_SNAP
,
u
,"png")),"rb");

178 if(
µ
==
NULL
) ;

179 
	`f˛o£
(
µ
);

182 if(!(
µ
=
	`f›í
(
‚
,"wb")))

185 
uöt8
 
hódî
[8]={137,80,78,71,13,10,26,10};

186 if(
	`fwrôe
(
hódî
,8,1,
µ
)!=1)

187 
PNGîr
;

191 
uöt8
 
chunko
[13];

193 
chunko
[0]=chunko[1]=chunko[3]=0;

194 
chunko
[2]=0x1;

196 
chunko
[4]=chunko[5]=chunko[6]=0;

197 
chunko
[7]=
tŸÆlöes
;

199 
chunko
[8]=8;

200 
chunko
[9]=3;

201 
chunko
[10]=0;

202 
chunko
[11]=0;

203 
chunko
[12]=0;

205 if(!
	`WrôePNGChunk
(
µ
,13,"IHDR",
chunko
))

206 
PNGîr
;

210 
pd©a
[256*3];

213 
x
=0;x<256;x++)

214 
	`FCEUD_GëPÆëã
(
x
,(
uöt8
*)(
pd©a
+x*3),(*)(pdata+x*3+1),(*)(pdata+x*3+2));

216 if(!
	`WrôePNGChunk
(
µ
,256*3,"PLTE",(
uöt8
 *)
pd©a
))

217 
PNGîr
;

221 
uöt8
 *
tmp
=
XBuf
+
FSëtögs
.
Fú°SLöe
*272+8;

222 
uöt8
 *
de°
,*
mÆ
,*
m‹k
;

227 if(!(
mÆ
=
m‹k
=
de°
=
	`mÆloc
((
tŸÆlöes
<<8)+totallines)))

228 
m‹k
=
de°
=
XBuf
;

230 
y
=0;y<
tŸÆlöes
;y++)

232 *
de°
=0;

233 
de°
++;

234 
x
=256;x;x--,
tmp
++,
de°
++)

235 *
de°
=*
tmp
;

236 
tmp
+=16;

239 if(
	`com¥ess
(
compmem
,&
compmemsize
,
m‹k
,(
tŸÆlöes
<<8)+tŸÆlöes)!=
Z_OK
)

241 if(
mÆ
Ë
	`‰ì
(mal);

242 
PNGîr
;

244 if(
mÆ
Ë
	`‰ì
(mal);

245 if(!
	`WrôePNGChunk
(
µ
,
compmemsize
,"IDAT",
compmem
))

246 
PNGîr
;

248 if(!
	`WrôePNGChunk
(
µ
,0,"IEND",0))

249 
PNGîr
;

251 
	`‰ì
(
compmem
);

252 
	`f˛o£
(
µ
);

253 #ifde‡
GP2X


254 
	`sync
();

257  
u
+1;

260 
PNGîr
:

261 if(
compmem
)

262 
	`‰ì
(
compmem
);

263 if(
µ
)

264 
	`f˛o£
(
µ
);

266 
	}
}

	@video.h

1 
	~"ty≥s.h
"

2 
InôVútuÆVideo
();

3 
SaveS«pshŸ
();

4 
uöt8
 *
XBuf
;

	@vsuni.c

21 
	~<°rög.h
>

22 
	~<°dio.h
>

24 
	~"ty≥s.h
"

25 
	~"x6502.h
"

26 
	~"f˚.h
"

27 
	~"öput.h
"

28 
	~"√çœy.h
"

29 
	~"vsuni.h
"

30 
	~"°©e.h
"

32 
	~"svga.h
"

34 
	#IOPTION_GUN
 0x1

	)

35 
	#IOPTION_SWAPDIRAB
 0x2

	)

37 
	#IOPTION_PREDIP
 0x10

	)

40 *
	m«me
;

41 
uöt64
 
	mmd5∑πül
;

42 
	mm≠≥r
;

43 
	mmúr‹ög
;

44 
	mµu
;

45 
	mi›ti⁄
;

46 
	m¥edù
;

47 } 
	tVSUNIENTRY
;

49 
VSUNIENTRY
 *
	gcurvs
;

51 
uöt8
 
	gDIPS
=0;

52 
uöt8
 
	gvsdù
=0;

54 
	$FCEUI_VSUniToggÀDIPVõw
()

56 
DIPS
=!DIPS;

57 
	}
}

59 
	$FCEU_VSUniToggÀDIP
(
w
)

61 
vsdù
^=1<<
w
;

62 
	}
}

64 
	$FCEUI_VSUniSëDIP
(
w
, 
°©e
)

66 if(((
vsdù
 >> 
w
Ë& 1Ë!
°©e
)

67 
	`FCEUI_VSUniToggÀDIP
(
w
);

68 
	}
}

70 
uöt8
 
	$FCEUI_VSUniGëDIPs
()

72 (
vsdù
);

73 
	}
}

75 
uöt8
 
	g£cd©a
[2][32]=

91 
uöt8
 *
	g£˝å
;

93 
uöt8
 
	gVSödex
;

95 
	$DECLFR
(
VSSecRód
)

97 
A
)

99 0x5e00: 
VSödex
=0; 
X
.
DB
;

100 0x5e01: (
£˝å
[(
VSödex
++)&0x1F]);

103 
	}
}

104 
uöt8
 
	gcoö⁄
=0;

106 
	$FCEU_VSUniCoö
()

108 
coö⁄
=6;

109 
	}
}

111 
	gcuΩpu
;

112 
öt64
 
	gcurmd5
;

114 
	#RP2C04_001
 1

	)

115 
	#RP2C04_002
 2

	)

116 
	#RP2C04_003
 3

	)

117 
	#RP2C05_004
 4

	)

118 
	#RCP2C03B
 5

	)

119 
	#RC2C05_01
 6

	)

120 
	#RC2C05_02
 7

	)

121 
	#RC2C05_03
 8

	)

122 
	#RC2C05_04
 9

	)

124 
ªadfunc
 
	gOldRódPPU
;

125 
wrôefunc
 
	gOldWrôePPU
[2];

127 
	$DECLFR
(
A2002_Gumsh€
)

129 –(
	`OldRódPPU
(
A
)&~0x3F) | 0x1C);

130 
	}
}

132 
	$DECLFR
(
A2002_T›gun
)

134 –(
	`OldRódPPU
(
A
)&~0x3F) | 0x1B);

135 
	}
}

137 
	$DECLFR
(
A2002_MBJ
)

139 –(
	`OldRódPPU
(
A
)&~0x3F) | 0x3D);

140 
	}
}

142 
	$DECLFW
(
B2000_2001_2C05
)

144 
OldWrôePPU
[(
A
&1)^1](A ^ 1, 
V
);

145 
	}
}

146 
uöt8
 
	gxev£À˘
 = 0;

147 
	$DECLFR
(
XevRód
)

150 if(
A
 == 0x54FF)

154 if(
A
 == 0x5678)

156 (
xev£À˘
?0:1);

158 if(
A
 == 0x578F)

160 (
xev£À˘
?0xd1:0x89);

162 if(
A
 == 0x5567)

164 
xev£À˘
 ^=1;

165 (
xev£À˘
?0x37:0x3E);

167 (
X
.
DB
);

168 
	}
}

170 
	$FCEU_VSUniSw≠
(
uöt8
 *
j0
, uöt8 *
j1
)

172 if(
curvs
->
i›ti⁄
 & 
IOPTION_SWAPDIRAB
)

174 
uöt16
 
t
=*
j0
;

175 *
j0
=(*j0&0xC)|(*
j1
&0xF3);

176 *
j1
=(*j1&0xC)|(
t
&0xF3);

178 
	}
}

180 
	$FCEU_VSUniPowî
()

182 
coö⁄
 = 0;

183 
VSödex
 = 0;

185 if(
£˝å
)

186 
	`SëRódH™dÀr
(0x5e00,0x5e01,
VSSecRód
);

188 if(
cuΩpu
 =
RC2C05_04
)

190 
OldRódPPU
 = 
	`GëRódH™dÀr
(0x2002);

191 
	`SëRódH™dÀr
(0x2002, 0x2002, 
A2002_T›gun
);

193 if(
cuΩpu
 =
RC2C05_03
)

195 
OldRódPPU
 = 
	`GëRódH™dÀr
(0x2002);

196 
	`SëRódH™dÀr
(0x2002, 0x2002, 
A2002_Gumsh€
);

198 if(
cuΩpu
 =
RC2C05_02
)

200 
OldRódPPU
 = 
	`GëRódH™dÀr
(0x2002);

201 
	`SëRódH™dÀr
(0x2002, 0x2002, 
A2002_MBJ
);

203 if(
cuΩpu
 =
RC2C05_04
 || cuΩpu =
RC2C05_01
 || cuΩpu =
RC2C05_03
 || cuΩpu =
RC2C05_02
)

205 
OldWrôePPU
[0] = 
	`GëWrôeH™dÀr
(0x2000);

206 
OldWrôePPU
[1] = 
	`GëWrôeH™dÀr
(0x2001);

207 
	`SëWrôeH™dÀr
(0x2000, 0x2001, 
B2000_2001_2C05
);

209 if(
curmd5
 == 0x2d396247cf58f9faLL)

211 
	`SëRódH™dÀr
(0x5400,0x57FF,
XevRód
);

213 
	}
}

285 
VSUNIENTRY
 
	gVSUniGames
[] =

287 {"Ba£bÆl", 0x691d4200ó42be45LL, 99, 2,
RP2C04_001
,0},

288 {"B©éêCôy", 0x8540949d74c4d0ebLL, 99, 2,
RP2C04_001
,0},

289 {"B©éêCôy(BoŸÀg)",0x8093cbe7137ac031LL, 99, 2,
RP2C04_001
,0},

291 {"Clu Clu L™d", 0x1b8123218f62b1ìLL, 99, 2,
RP2C05_004
,
IOPTION_SWAPDIRAB
},

292 {"D∏M¨io", 0xe1af09c477dc0081LL, 1, 0,
RP2C04_003
,
IOPTION_SWAPDIRAB
},

293 {"Duck Hu¡", 0x47735d1e5f1205bbLL, 99, 2,
RCP2C03B
 ,
IOPTION_GUN
},

294 {"Excôebike", 0x3dcd1401bˇfde77LL, 99, 2,
RP2C04_003
,0},

295 {"Excôebikê(J)", 0x7ó51c9d007375f0LL, 99, 2,
RP2C05_004
,0},

296 {"Fªedom F‹˚", 0xed96436bd1b5e688LL, 4, 0,
RP2C04_001
,
IOPTION_GUN
},

297 {"Såokê™d M©ch Gﬁf",0x612325606e82bc66LL, 99, 2,
RP2C04_002
,
IOPTION_SWAPDIRAB
|
IOPTION_PREDIP
,0x01},

299 {"Go⁄õs", 0x3b0085c4ff29098eLL, 151,1,
RP2C04_003
,0},

300 {"Gødius", 0x50687´63bdad976LL,151, 1,
RP2C04_001
,
IOPTION_SWAPDIRAB
},

301 {"Gumsh€", 0xb8500780bf69˚29LL, 99, 2,
RC2C05_03
,
IOPTION_GUN
},

302 {"Hog™'†AŒey", 0xd78b7f0bb621fb45LL, 99, 2,
RP2C04_001
,
IOPTION_GUN
},

303 {"I˚ Climbî", 0xd21e999513435e2aLL, 99, 2,
RP2C05_004
,
IOPTION_SWAPDIRAB
},

304 {"Ladõ†Gﬁf", 0x781b24be57ef6785LL, 99, 2,
RP2C04_002
,
IOPTION_SWAPDIRAB
|
IOPTION_PREDIP
,0x1},

306 {"Mach Ridî", 0x015672618af06441LL, 99, 2, 
RP2C04_002
,0},

307 {"Mach Ridî (J)", 0xa625afb399811a8aLL, 99, 2, 
RP2C04_001
,0},

308 {"Mighty Bomb Jack", 0xe6a89f4873Ác37bLL, 0, 2, 
RC2C05_02
,0},

309 {"Nöj®Jajam¨u Kun", 0xb26a2c31474099c0LL, 99, 2,
RC2C05_01
 ,
IOPTION_SWAPDIRAB
},

310 {"PöbÆl", 0xc5f49d3de7f2e9b8LL, 99, 2,
RP2C04_001
,
IOPTION_PREDIP
,0x01},

311 {"PöbÆ»(J)", 0x66ab1a3828cc901cLL, 99, 2,
RCP2C03B
,
IOPTION_PREDIP
,0x1},

312 {"Pœto⁄", 0x160f237351c19f1fLL, 68, 1,
RP2C04_001
,0},

313 {"RBI Ba£bÆl", 0x6a02d345812938afLL, 4, 1,
RP2C04_001
 ,
IOPTION_SWAPDIRAB
},

314 {"Soc˚r", 0xd4e7a9058780eda3LL, 99, 2,
RP2C04_003
,
IOPTION_SWAPDIRAB
},

315 {"Sè∏Lu°î", 0x8360e134b316d94cLL, 99, 2,
RCP2C03B
 ,0},

316 {"Såokê™d M©ch Gﬁ‡(J)",0x869bb83e02509747LL, 99, 2,
RCP2C03B
,
IOPTION_SWAPDIRAB
|
IOPTION_PREDIP
,0x1},

317 {"Su≥∏Sky Kid", 0x78d04c1dd4ec0101LL, 4, 1,
RCP2C03B
 ,
IOPTION_SWAPDIRAB
 | 
IOPTION_PREDIP
,0x20},

319 {"Su≥∏Xevious", 0x2d396247cf58f9ÁLL, 206, 0,
RP2C04_001
,0},

320 {"Tëris", 0x531a5e8ìa4˚157LL, 99, 2,
RCP2C03B
 ,
IOPTION_PREDIP
,0x20},

321 {"T› Gun", 0xf1dó36e6a7b531dLL, 2, 0,
RC2C05_04
 ,0},

322 {"VS Ca°Àv™ü", 0x92fd6909c81305b9LL, 2, 1,
RP2C04_002
,0},

323 {"VS Sœlom", 0x4889b5a50a623215LL, 0, 1,
RP2C04_002
,0},

324 {"VS Su≥∏M¨iÿBros",0x39d8cÁ788e20b6cLL, 99, 2,
RP2C05_004
,0},

325 {"VS TKO Boxög", 0x6e1ì06171d8˚3aLL,4, 1,
RP2C04_003
,
IOPTION_PREDIP
,0x00},

329 
	$FCEU_VSUniCheck
(
uöt64
 
md5∑πül
, *
M≠≥rNo
, 
uöt8
 *
Múr‹ög
)

331 
VSUNIENTRY
 *
vs
 = 
VSUniGames
;

333 
vs
->
«me
)

335 if(
md5∑πül
 =
vs
->md5partial)

338 if(
vs
->
µu
 < 
RCP2C03B
Ë
∑À
 = vs->ppu;

340 *
M≠≥rNo
 = 
vs
->
m≠≥r
;

341 *
Múr‹ög
 = 
vs
->
múr‹ög
;

342 
FCEUGameInfo
.
ty≥
 = 
GIT_VSUNI
;

343 
FCEUGameInfo
.
c•ecül
 = 
SIS_VSUNISYSTEM
;

344 
FCEUGameInfo
.
öputfc
 = 
SIFC_NONE
;

345 
cuΩpu
 = 
vs
->
µu
;

346 
curmd5
 = 
md5∑πül
;

348 
£˝å
 = 0;

351 
öt64
 
tko
=0x6e1ì06171d8˚3aULL, 
rbi
=0x6a02d345812938afULL;

352 if(
md5∑πül
 =
tko
)

353 
£˝å
=
£cd©a
[0];

354 if(
md5∑πül
 =
rbi
)

355 
£˝å
 = 
£cd©a
[1];

358 
vsdù
 = 0x0;

359 if(
vs
->
i›ti⁄
 & 
IOPTION_PREDIP
)

361 
vsdù

vs
->
¥edù
;

363 if(
vs
->
i›ti⁄
 & 
IOPTION_GUN
)

365 
FCEUGameInfo
.
öput
[0] = 
SI_ZAPPER
;

366 
FCEUGameInfo
.
öput
[1] = 
SI_NONE
;

370 
FCEUGameInfo
.
öput
[0] = FCEUGameInfo.öput[1] = 
SI_GAMEPAD
;

372 
curvs
 = 
vs
;

375 
vs
++;

377 
	}
}

379 
	#SCREEN_WIDTH
 320

	)

380 
	#SCREEN_OFFS
 32

	)

382 
	$FCEU_VSUniDøw
(
uöt8
 *
XBuf
)

384 
uöt32
 *
de°
;

385 
y
,
x
;

387 if(!
DIPS
) ;

389 
de°
=(
uöt32
 *)(
XBuf
+
SCREEN_WIDTH
*12+164+
SCREEN_OFFS
);

390 
y
=24;y;y--,
de°
+=(
SCREEN_WIDTH
-72)>>2)

392 
x
=72>>2;x;x--,
de°
++)

393 *
de°
=0;

396 
de°
=(
uöt32
 *)(
XBuf
+
SCREEN_WIDTH
*(12+4)+164+6+
SCREEN_OFFS
 );

397 
y
=16;y;y--,
de°
+=(
SCREEN_WIDTH
>>2)-16)

398 
x
=8;x;x--)

400 *
de°
=0x01010101;

401 
de°
+=2;

404 
de°
=(
uöt32
 *)(
XBuf
+
SCREEN_WIDTH
*(12+4)+164+6+
SCREEN_OFFS
 );

405 
x
=0;x<8;x++,
de°
+=2)

407 
uöt32
 *
da
=
de°
+(
SCREEN_WIDTH
>>2);

409 if(!((
vsdù
>>
x
)&1))

410 
da
+=(
SCREEN_WIDTH
>>2)*10;

411 
y
=4;y;y--,
da
+=
SCREEN_WIDTH
>>2)

412 *
da
=0;

414 
	}
}

417 
SFORMAT
 
	gFCEUVSUNI_STATEINFO
[]={

418 { &
vsdù
, 1, "vsdp"},

419 { &
coö⁄
, 1, "vscn"},

420 { &
VSödex
, 1, "vsin"},

	@vsuni.h

1 
FCEU_VSUniPowî
();

2 
FCEU_VSUniCheck
(
uöt64
 
md5∑πül
, *, 
uöt8
 *);

3 
FCEU_VSUniDøw
(
uöt8
 *
XBuf
);

5 
FCEU_VSUniToggÀDIP
();

6 
FCEU_VSUniCoö
();

7 
FCEU_VSUniSw≠
(
uöt8
 *
j0
, uöt8 *
j1
);

9 
uöt8
 
coö⁄
;

	@x6502.c

21 
	~<°rög.h
>

23 
	~"ty≥s.h
"

24 
	~"x6502.h
"

25 
	~"f˚.h
"

26 
	~"sound.h
"

27 
	~"ˇπ.h
"

29 
	~"d¥ötf.h
"

31 #ifde‡
DEBUG_ASM_6502


32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
uöt32
 
PC_¥ev
, 
OP_¥ev
;

35 
uöt8
 
dªads
[4];

36 
uöt32
 
dwrôes_c
[2];

37 
dªad_cou¡_c
, 
dwrôe_cou¡_c
;

38 
m≠úq_cyc_c
;

39 (*
M≠IRQHook
)(
a
);

40 
	#DummyRdMem
(...)

	)

42 
	#DummyRdMem
 
RdMem


	)

43 
	`FP_FASTAPASS
(1Ë(*
M≠IRQHook
)(
a
);

46 
X6502
 
X
;

47 
uöt32
 
time°amp
;

49 
	#_PC
 
X
.
PC


	)

50 
	#_A
 
X
.
A


	)

51 
	#_X
 
X
.
	)
X

52 
	#_Y
 
X
.
Y


	)

53 
	#_S
 
X
.
S


	)

54 
	#_P
 
X
.
P


	)

55 
	#_PI
 
X
.
mooPI


	)

57 
	#_DB
 
X
.
DB


	)

58 
	#_cou¡
 
X
.
cou¡


	)

59 
	#_tcou¡
 
X
.
tcou¡


	)

60 
	#_IRQlow
 
X
.
IRQlow


	)

61 
	#_jammed
 
X
.
jammed


	)

64 
INLINE
 
uöt8
 
	$RdMem
(
A
)

66 
_DB1
=
ARód
[
A
](A);

67 #ifde‡
DEBUG_ASM_6502


70 i‡(
A
 >= 0x2000) {

71 i‡(
A
 =
_PC
 || A == _PC - 1 || A == _PC + 1) {

74 
_DB
=
_DB1
;

76 i‡(
A
 >0x2000 && A !
_PC
 - 1) {

77 
dªads
[
dªad_cou¡_c
++] = 
_DB1
;

78 i‡(
dªad_cou¡_c
 > 4Ë{ 
	`¥ötf
("dªad_cou¡ ouào‡ønge\n"); 
	`exô
(1); }

81 
_DB
=
_DB1
;

83  
_DB1
;

84 
	}
}

86 
INLINE
 
	$WrMem
(
A
, 
uöt8
 
V
)

89 i‡((
A
&0xe000) == 0) {

90 
RAM
[
A
&0x7FF] = 
V
;

93 
BWrôe
[
A
](A,
V
);

94 #ifde‡
DEBUG_ASM_6502


95 
dwrôes_c
[
dwrôe_cou¡_c
++] = (
A
<<8)|
V
;

96 i‡(
dwrôe_cou¡_c
 > 2Ë{ 
	`¥ötf
("dwrôe_cou¡_¯ouào‡ønge\n"); 
	`exô
(1); }

98 
	}
}

100 
INLINE
 
uöt8
 
	$RdRAM
(
A
)

103 
_DB1
=
RAM
[
A
];

104 #i‚de‡
DEBUG_ASM_6502


105 
_DB
=
_DB1
;

107  
_DB1
;

108 
	}
}

110 
INLINE
 
	$WrRAM
(
A
, 
uöt8
 
V
)

112 
RAM
[
A
]=
V
;

113 
	}
}

115 
INLINE
 
	$ADDCYC
(
x
)

117 
_tcou¡
+=
x
;

118 
_cou¡
-=
x
*48;

119 
time°amp
+=
x
;

120 
	}
}

122 
	$FASTAPASS
(1Ë
	$X6502_AddCy˛es_c
(
x
)

124 
	`ADDCYC
(
x
);

125 
	}
}

127 
INLINE
 
	$PUSH
(
uöt8
 
V
)

129 
	`WrRAM
(0x100+
_S
,
V
);

130 
_S
--;

131 
	}
}

133 
INLINE
 
uöt8
 
	$POP
()

135 
_S
++;

136 (
	`RdRAM
(0x100+
_S
));

137 
	}
}

140 
uöt8
 
	gZNTabÀ
[256] = {

141 
Z_FLAG
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

149 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

150 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

151 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

152 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

153 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

154 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

155 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,

156 
N_FLAG
,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG,N_FLAG

163 
	#X_ZN
(
z‹t
Ë
_P
&=~(
Z_FLAG
|
N_FLAG
);if(!z‹tË_P|=Z_FLAG;_P|=z‹t&
	)
N_FLAG

164 
	#X_ZNT
(
z‹t
Ëif(!z‹tË
_P
|=
Z_FLAG
;_P|=(z‹t&
N_FLAG
)

	)

167 
	#JR
(); \

169 
uöt32
 
tmp
; \

170 
öt8
 
di•
; \

171 
di•
=
	`RdMem
(
_PC
++); \

172 
	`ADDCYC
(1); \

173 
tmp
=
_PC
; \

174 
_PC
+=
di•
; \

175 if((
tmp
^
_PC
)&0x100) \

176 
	`ADDCYC
(1); \

177 }

	)

179 
	#LDA
 
_A
=
x
;
	`X_ZN
(_A)

	)

180 
	#LDX
 
_X
=
x
;
	`X_ZN
(_X)

	)

181 
	#LDY
 
_Y
=
x
;
	`X_ZN
(_Y)

	)

184 
	#AND
 
_A
&=
x
;
	`X_ZN
(_A)

	)

186 
	#BIT
 
_P
&=~(
Z_FLAG
|
V_FLAG
|
N_FLAG
);if(!(
x
&
_A
)Ë_P|=Z_FLAG;_P|=x&(V_FLAG|N_FLAG)

	)

187 
	#EOR
 
_A
^=
x
;
	`X_ZN
(_A)

	)

188 
	#ORA
 
_A
|=
x
;
	`X_ZN
(_A)

	)

190 
	#ADC
 { \

191 
uöt32
 
l
=
_A
+
x
+(
_P
&1); \

192 
_P
&=~(
Z_FLAG
|
C_FLAG
|
N_FLAG
|
V_FLAG
); \

193 
_P
|=((((
_A
^
x
)&0x80)^0x80Ë& ((_A^
l
)&0x80))>>1; \

194 
_P
|=(
l
>>8)&
C_FLAG
; \

195 
_A
=
l
; \

196 
	`X_ZNT
(
_A
); \

197 }

	)

198 
	#SBC
 { \

199 
uöt32
 
l
=
_A
-
x
-((
_P
&1)^1); \

200 
_P
&=~(
Z_FLAG
|
C_FLAG
|
N_FLAG
|
V_FLAG
); \

201 
_P
|=((
_A
^
l
)&(_A^
x
)&0x80)>>1; \

202 
_P
|=((
l
>>8)&
C_FLAG
)^C_FLAG; \

203 
_A
=
l
; \

204 
	`X_ZNT
(
_A
); \

205 }

	)

207 
	#CMPL
(
a1
,
a2
) { \

208 
uöt32
 
t
=
a1
-
a2
; \

209 
	`X_ZN
(
t
&0xFF); \

210 
_P
&=~
C_FLAG
; \

211 
_P
|=((
t
>>8)&
C_FLAG
)^C_FLAG; \

212 }

	)

215 
	#AXS
 { \

216 
uöt32
 
t
=(
_A
&
_X
)-
x
; \

217 
	`X_ZN
(
t
&0xFF); \

218 
_P
&=~
C_FLAG
; \

219 
_P
|=((
t
>>8)&
C_FLAG
)^C_FLAG; \

220 
_X
=
t
; \

221 }

	)

223 
	#CMP
 
	`CMPL
(
_A
,
x
)

	)

224 
	#CPX
 
	`CMPL
(
_X
,
x
)

	)

225 
	#CPY
 
	`CMPL
(
_Y
,
x
)

	)

228 
	#DEC
 
x
--;
	`X_ZN
(x)

	)

229 
	#INC
 
x
++;
	`X_ZN
(x)

	)

231 
	#ASL
 
_P
&=~
C_FLAG
;_P|=
x
>>7;x<<=1;
	`X_ZN
(x)

	)

232 
	#LSR
 
_P
&=~(
C_FLAG
|
N_FLAG
|
Z_FLAG
);_P|=
x
&1;x>>=1;
	`X_ZNT
(x)

	)

235 
	#LSRA
 
_P
&=~(
C_FLAG
|
N_FLAG
|
Z_FLAG
);_P|=
_A
&1;_A>>=1;
	`X_ZNT
(_A)

	)

237 
	#ROL
 { \

238 
uöt8
 
l
=
x
>>7; \

239 
x
<<=1; \

240 
x
|=
_P
&
C_FLAG
; \

241 
_P
&=~(
Z_FLAG
|
N_FLAG
|
C_FLAG
); \

242 
_P
|=
l
; \

243 
	`X_ZNT
(
x
); \

244 }

	)

245 
	#ROR
 { \

246 
uöt8
 
l
=
x
&1; \

247 
x
>>=1; \

248 
x
|=(
_P
&
C_FLAG
)<<7; \

249 
_P
&=~(
Z_FLAG
|
N_FLAG
|
C_FLAG
); \

250 
_P
|=
l
; \

251 
	`X_ZNT
(
x
); \

252 }

	)

259 
	#GëAB
(
èrgë
) \

261 
èrgë
=
	`RdMem
(
_PC
++); \

262 
èrgë
|=
	`RdMem
(
_PC
++)<<8; \

263 }

	)

266 
	#GëABIRD
(
èrgë
, 
i
) \

268 
tmp
; \

269 
	`GëAB
(
tmp
); \

270 
èrgë
=
tmp
; \

271 
èrgë
+=
i
; \

272 if((
èrgë
^
tmp
)&0x100) \

274 
èrgë
&=0xFFFF; \

275 
	`DummyRdMem
(
èrgë
^0x100); \

276 
	`ADDCYC
(1); \

278 }

	)

281 
	#GëABIWR
(
èrgë
, 
i
) \

283 
π
; \

284 
	`GëAB
(
π
); \

285 
èrgë
=
π
; \

286 
èrgë
+=
i
; \

287 
èrgë
&=0xFFFF; \

288 
	`DummyRdMem
((
èrgë
&0x00FF)|(
π
&0xFF00)); \

289 }

	)

292 
	#GëZP
(
èrgë
) \

294 
èrgë
=
	`RdMem
(
_PC
++); \

295 }

	)

298 
	#GëZPI
(
èrgë
,
i
) \

300 
èrgë
=
i
+
	`RdMem
(
_PC
++); \

301 }

	)

304 
	#GëIX
(
èrgë
) \

306 
uöt8
 
tmp
; \

307 
tmp
=
	`RdMem
(
_PC
++); \

308 
tmp
+=
_X
; \

309 
èrgë
=
	`RdRAM
(
tmp
++); \

310 
èrgë
|=
	`RdRAM
(
tmp
)<<8; \

311 }

	)

314 
	#GëIYRD
(
èrgë
) \

316 
π
; \

317 
uöt8
 
tmp
; \

318 
tmp
=
	`RdMem
(
_PC
++); \

319 
π
=
	`RdRAM
(
tmp
++); \

320 
π
|=
	`RdRAM
(
tmp
)<<8; \

321 
èrgë
=
π
; \

322 
èrgë
+=
_Y
; \

323 if((
èrgë
^
π
)&0x100) \

325 
èrgë
&=0xFFFF; \

326 
	`DummyRdMem
(
èrgë
^0x100); \

327 
	`ADDCYC
(1); \

329 }

	)

332 
	#GëIYWR
(
èrgë
) \

334 
π
; \

335 
uöt8
 
tmp
; \

336 
tmp
=
	`RdMem
(
_PC
++); \

337 
π
=
	`RdRAM
(
tmp
++); \

338 
π
|=
	`RdRAM
(
tmp
)<<8; \

339 
èrgë
=
π
; \

340 
èrgë
+=
_Y
; \

341 
	`DummyRdMem
((
èrgë
&0x00FF)|(
π
&0xFF00)); \

342 }

	)

349 
	#RMW_A
(
›
Ë{
uöt8
 
x
=
_A
; op; _A=x; ; }

	)

350 
	#RMW_AB
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëAB
(A); x=
	`RdMem
(A); 
	`WrMem
(A,x); op; WrMem(A,x); ; }

	)

351 
	#RMW_ABI
(
ªg
,
›
Ë{
A
; 
uöt8
 
x
; 
	`GëABIWR
(A,ªg); x=
	`RdMem
(A); 
	`WrMem
(A,x); op; WrMem(A,x); ; }

	)

352 
	#RMW_ABX
(
›
Ë
	`RMW_ABI
(
_X
,›)

	)

353 
	#RMW_ABY
(
›
Ë
	`RMW_ABI
(
_Y
,›)

	)

354 
	#RMW_IX
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëIX
(A); x=
	`RdMem
(A); 
	`WrMem
(A,x); op; WrMem(A,x); ; }

	)

355 
	#RMW_IY
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëIYWR
(A); x=
	`RdMem
(A); 
	`WrMem
(A,x); op; WrMem(A,x); ; }

	)

356 
	#RMW_ZP
(
›
Ë{
uöt8
 
A
; uöt8 
x
; 
	`GëZP
(A); x=
	`RdRAM
(A); op; 
	`WrRAM
(A,x); ; }

	)

357 
	#RMW_ZPX
(
›
Ë{
uöt8
 
A
; uöt8 
x
; 
	`GëZPI
(A,
_X
); x=
	`RdRAM
(A); op; 
	`WrRAM
(A,x); ;}

	)

359 
	#LD_IM
(
›
Ë{
uöt8
 
x
; x=
	`RdMem
(
_PC
++); op; ;}

	)

360 
	#LD_ZP
(
›
Ë{
uöt8
 
A
; uöt8 
x
; 
	`GëZP
(A); x=
	`RdRAM
(A); op; ;}

	)

361 
	#LD_ZPX
(
›
Ë{
uöt8
 
A
; uöt8 
x
; 
	`GëZPI
(A,
_X
); x=
	`RdRAM
(A); op; ;}

	)

362 
	#LD_ZPY
(
›
Ë{
uöt8
 
A
; uöt8 
x
; 
	`GëZPI
(A,
_Y
); x=
	`RdRAM
(A); op; ;}

	)

363 
	#LD_AB
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëAB
(A); x=
	`RdMem
(A); op; ; }

	)

364 
	#LD_ABI
(
ªg
,
›
Ë{
A
; 
uöt8
 
x
; 
	`GëABIRD
(A,ªg); x=
	`RdMem
(A); op; ;}

	)

365 
	#LD_ABX
(
›
Ë
	`LD_ABI
(
_X
,›)

	)

366 
	#LD_ABY
(
›
Ë
	`LD_ABI
(
_Y
,›)

	)

367 
	#LD_IX
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëIX
(A); x=
	`RdMem
(A); op; ;}

	)

368 
	#LD_IY
(
›
Ë{
A
; 
uöt8
 
x
; 
	`GëIYRD
(A); x=
	`RdMem
(A); op; ;}

	)

370 
	#ST_ZP
(
r
Ë{
uöt8
 
A
; 
	`GëZP
(A); 
	`WrRAM
(A,r); ;}

	)

371 
	#ST_ZPX
(
r
Ë{
uöt8
 
A
; 
	`GëZPI
(A,
_X
); 
	`WrRAM
(A,r); ;}

	)

372 
	#ST_ZPY
(
r
Ë{
uöt8
 
A
; 
	`GëZPI
(A,
_Y
); 
	`WrRAM
(A,r); ;}

	)

373 
	#ST_AB
(
r
Ë{
A
; 
	`GëAB
(A); 
	`WrMem
(A,r); ;}

	)

374 
	#ST_ABI
(
ªg
,
r
Ë{
A
; 
	`GëABIWR
(A,ªg); 
	`WrMem
(A,r); ; }

	)

375 
	#ST_ABX
(
r
Ë
	`ST_ABI
(
_X
,r)

	)

376 
	#ST_ABY
(
r
Ë
	`ST_ABI
(
_Y
,r)

	)

377 
	#ST_IX
(
r
Ë{
A
; 
	`GëIX
(A); 
	`WrMem
(A,r); ; }

	)

378 
	#ST_IY
(
r
Ë{
A
; 
	`GëIYWR
(A); 
	`WrMem
(A,r); ; }

	)

380 
uöt8
 
	gCycTabÀ
[256] =

401 
	$FASTAPASS
(1Ë
	$X6502_IRQBegö_c
(
w
)

403 
	`d¥ötf
("IRQB %02x",
w
);

404 
_IRQlow
|=
w
;

405 
	}
}

407 
	$FASTAPASS
(1Ë
	$X6502_IRQEnd_c
(
w
)

409 
	`d¥ötf
("IRQE %02x",
w
);

410 
_IRQlow
&=~
w
;

411 
	}
}

413 
	$TriggîIRQ_c
()

415 
_IRQlow
|=
FCEU_IQTEMP
;

416 
	}
}

418 
	$TriggîNMI_c
()

420 
_IRQlow
|=
FCEU_IQNMI
;

421 
	}
}

423 
	$TriggîNMIRól
()

425 if(!
_jammed
)

427 
	`d¥ötf
("NMI");

428 
	`ADDCYC
(7);

429 
	`PUSH
(
_PC
>>8);

430 
	`PUSH
(
_PC
);

431 
_P
&=~
B_FLAG
;

432 
	`PUSH
(
_P
|
U_FLAG
);

433 
_PC
=
	`RdMem
(0xFFFA);

434 
_PC
|=
	`RdMem
(0xFFFB)<<8;

435 #ifde‡
DEBUG_ASM_6502


436 
PC_¥ev
 = 
_PC
;

437 
OP_¥ev
 = 0x100;

440 
	}
}

442 
	$TriggîIRQRól
()

444 if(!(
_PI
&
I_FLAG
Ë&& !
_jammed
)

446 
	`d¥ötf
("IRQ");

447 
	`ADDCYC
(7);

448 
	`PUSH
(
_PC
>>8);

449 
	`PUSH
(
_PC
);

450 
_P
&=~
B_FLAG
;

451 
	`PUSH
(
_P
|
U_FLAG
);

452 
_P
|=
I_FLAG
;

453 
_PC
=
	`RdMem
(0xFFFE);

454 
_PC
|=
	`RdMem
(0xFFFF)<<8;

455 #ifde‡
DEBUG_ASM_6502


456 
PC_¥ev
 = 
_PC
;

457 
OP_¥ev
 = 0x101;

460 
	}
}

462 
	$X6502_Re£t_c
()

464 
_PC
=
	`RdMem
(0xFFFC);

465 
_PC
|=
	`RdMem
(0xFFFD)<<8;

466 
_jammed
=0;

467 
_PI
=
_P
=
I_FLAG
;

468 
	}
}

470 
	$X6502_Powî_c
()

472 
	`mem£t
((*)&
X
,0,(X));

473 
time°amp
=0;

474 
	`X6502_Re£t_c
();

475 
	}
}

479 
	$X6502_Run_c
()

491 
_cou¡
>0)

493 
öt32
 
ãmp
;

494 
uöt8
 
b1
;

496 if(
_IRQlow
)

498 if(
_IRQlow
&
FCEU_IQNMI
)

499 
	`TriggîNMIRól
();

501 
	`TriggîIRQRól
();

503 
_IRQlow
&=~(
FCEU_IQTEMP
|
FCEU_IQNMI
);

504 if(
_cou¡
<=0)

506 #ifde‡
DEBUG_ASM_6502


507 if(
M≠IRQHook
Ë
m≠úq_cyc_c
 = 
_tcou¡
;

508 
_tcou¡
=0;

510 
_PI
=
_P
;

514 
_PI
=
_P
;

515 #ifde‡
DEBUG_ASM_6502


516 
b1
=
	`RdMem
(
_PC
++); _PC--;

518 
b1
=
	`RdMem
(
_PC
);

520 
	`ADDCYC
(
CycTabÀ
[
b1
]);

521 
ãmp
=
_tcou¡
;

523 
ãmp
*=48;

525 
fh˙t
-=
ãmp
;

526 if(
fh˙t
<=0)

528 
	`FømeSoundUpd©e
();

529 
fh˙t
+=
fhöc
;

532 if(
PCMIRQCou¡
>0)

534 
PCMIRQCou¡
-=
ãmp
;

535 if(
PCMIRQCou¡
<=0)

537 
vdis
=1;

538 if((
PSG
[0x10]&0x80) && !(PSG[0x10]&0x40))

540 
uöt8
 
SIRQSèt
;

541 
SIRQSèt
|=0x80;

542 
	`X6502_IRQBegö
(
FCEU_IQDPCM
);

547 #ifde‡
DEBUG_ASM_6502


548 
PC_¥ev
 = 
_PC
;

549 
OP_¥ev
 = 
b1
;

554 
_PC
++;

555 
b1
)

557 
	~"›s.h
"

560 
ãmp
=
_tcou¡
;

561 
_tcou¡
=0;

563 if(
M≠IRQHook
) {

564 #ifde‡
DEBUG_ASM_6502


565 
m≠úq_cyc_c
 = 
ãmp
;

567 
	`M≠IRQHook
(
ãmp
);

570 #ifde‡
DEBUG_ASM_6502


571 
_PI
=
_P
;

574 
	}
}

	@x6502.h

22 
öt32
 
	mcou¡
;

23 
öt32
 
	mtcou¡
;

24 
uöt16
 
	mPC
;

27 
uöt8
 
	mA
,
	mX
,
	mY
,
	mS
,
	mP
,
	mmooPI
;

28 
uöt8
 
	mDB
;

29 
uöt8
 
	mIRQlow
;

30 
uöt8
 
	mjammed
;

31 } 
	tX6502
;

33 
X6502
 
X
;

35 
	#N_FLAG
 0x80

	)

36 
	#V_FLAG
 0x40

	)

37 
	#U_FLAG
 0x20

	)

38 
	#B_FLAG
 0x10

	)

39 
	#D_FLAG
 0x08

	)

40 
	#I_FLAG
 0x04

	)

41 
	#Z_FLAG
 0x02

	)

42 
	#C_FLAG
 0x01

	)

44 
uöt32
 
time°amp
;

45 
FP_FASTAPASS
(1Ë(*
M≠IRQHook
)(
a
);

47 
	#NTSC_CPU
 1789772.7272727272727272

	)

48 
	#PAL_CPU
 1662607.125

	)

50 
	#FCEU_IQEXT
 0x01

	)

51 
	#FCEU_IQNMI
 0x08

	)

52 
	#FCEU_IQDPCM
 0x10

	)

53 
	#FCEU_IQFCOUNT
 0x20

	)

54 
	#FCEU_IQTEMP
 0x80

	)

56 
	#FCEU_IQEXT2
 0x02

	)

58 #i‡
deföed
(
DEBUG_ASM_6502
)

59 
	#TriggîIRQ
 
TriggîIRQ_d


	)

60 
	#TriggîNMI
 
TriggîNMI_d


	)

61 
	#X6502_Run
 
X6502_Run_d


	)

62 
	#X6502_Re£t
 
X6502_Re£t_d


	)

63 
	#X6502_Powî
 
X6502_Powî_d


	)

64 
	#X6502_AddCy˛es
 
X6502_AddCy˛es_d


	)

65 
	#X6502_IRQBegö
 
X6502_IRQBegö_d


	)

66 
	#X6502_IRQEnd
 
X6502_IRQEnd_d


	)

67 
	#X6502_Reba£
 
X6502_Reba£_d


	)

68 
	#X6502_GëCy˛eCou¡
(Ë
g_˙t


	)

69 
	#X6502_C


	)

70 
	#X6502_A


	)

71 
	#X6502_D


	)

73 #ñi‡
deföed
(
ASM_6502
)

74 
	#TriggîIRQ
 
TriggîIRQ_a


	)

75 
	#TriggîNMI
 
TriggîNMI_a


	)

76 
	#X6502_Re£t
 
X6502_Re£t_a


	)

77 
	#X6502_Powî
 
X6502_Powî_a


	)

78 
	#X6502_AddCy˛es
 
X6502_AddCy˛es_a


	)

81 
	#X6502_IRQBegö
(
w
Ë
√s_ªgi°îs
[4]|=w<<8

	)

82 
	#X6502_IRQEnd
(
w
Ë
√s_ªgi°îs
[4]&=~(w<<8)

	)

83 
	#X6502_Reba£
 
X6502_Reba£_a


	)

84 
	#X6502_GëCy˛eCou¡
(Ë((
öt32
)
√s_ªgi°îs
[7]>>16)

	)

85 
	#X6502_A


	)

87 
	#X6502_Run
(
c
) \

89 
öt32
 
cy˛es
 = (
c
) << 4; \

90 i‡(
PAL
Ë
cy˛es
 -(
c
); \

91 
√s_ªgi°îs
[7]+=
cy˛es
<<16; \

92 
cy˛es
=(
öt32
)
√s_ªgi°îs
[7]>>16; \

93 i‡(
cy˛es
 > 0) { \

94 
	`X6502_Run_a
(); \

95 
cy˛es
 -(
öt32
)
√s_ªgi°îs
[7]>>16; \

96 
	`asm˝u_upd©e
(
cy˛es
); \

98 }

	)

101 
	#TriggîIRQ
 
TriggîIRQ_c


	)

102 
	#TriggîNMI
 
TriggîNMI_c


	)

103 
	#X6502_Re£t
 
X6502_Re£t_c


	)

104 
	#X6502_Powî
 
X6502_Powî_c


	)

105 
	#X6502_AddCy˛es
 
X6502_AddCy˛es_c


	)

106 
	#X6502_IRQBegö
 
X6502_IRQBegö_c


	)

107 
	#X6502_IRQEnd
 
X6502_IRQEnd_c


	)

108 
	#X6502_Reba£
(...)

	)

109 
	#X6502_GëCy˛eCou¡
(Ë
X
.
cou¡


	)

110 
	#X6502_C


	)

112 
	#X6502_Run
(
c
) \

114 
öt32
 
cy˛es
 = (
c
) << 4; \

115 i‡(
PAL
Ë
cy˛es
 -(
c
); \

116 
X
.
cou¡
+=
cy˛es
; \

117 i‡(
X
.
cou¡
 > 0Ë
	`X6502_Run_c
(); \

118 }

	)

119 
	#X6502_C


	)

123 #ifde‡
X6502_C


124 
öt32
 
g_˙t
;

125 
TriggîIRQ_c
();

126 
TriggîNMI_c
();

127 
X6502_Run_c
();

128 
X6502_Re£t_c
();

129 
X6502_Powî_c
();

130 
	$FASTAPASS
(1Ë
	`X6502_AddCy˛es_c
(
x
);

131 
	$FASTAPASS
(1Ë
	`X6502_IRQBegö_c
(
w
);

132 
	$FASTAPASS
(1Ë
	`X6502_IRQEnd_c
(
w
);

136 #ifde‡
X6502_A


137 
uöt32
 
√s_ªgi°îs
[0x10];

138 
uöt32
 
pc_ba£
;

139 
	`TriggîIRQ_a
();

140 
	`TriggîNMI_a
();

141 
	`X6502_Run_a
();

142 
	`X6502_Re£t_a
();

143 
	`X6502_Powî_a
();

144 
	`X6502_AddCy˛es_a
(
x
);

145 
	`X6502_IRQBegö_a
(
w
);

146 
	`X6502_IRQEnd_a
(
w
);

147 
	`X6502_Reba£_a
();

151 #ifde‡
X6502_D


152 
	`TriggîIRQ_d
();

153 
	`TriggîNMI_d
();

154 
	`X6502_Run_d
(
öt32
 
c
);

155 
	`X6502_Re£t_d
();

156 
	`X6502_Powî_d
();

157 
	`X6502_AddCy˛es_d
(
x
);

158 
	`X6502_IRQBegö_d
(
w
);

159 
	`X6502_IRQEnd_d
(
w
);

160 
	`X6502_Reba£_d
();

	@zlib/unzip.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~"zlib.h
"

12 
	~"unzù.h
"

14 #ifde‡
STDC


15 
	~<°ddef.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

19 #ifde‡
NO_ERRNO_H


20 
î∫o
;

22 
	~<î∫o.h
>

26 #i‚de‡
loˇl


27 
	#loˇl
 

	)

33 #i‡!
deföed
(
unix
Ë&& !deföed(
CASESENSITIVITYDEFAULT_YES
) && \

34 !
	$deföed
(
CASESENSITIVITYDEFAULT_NO
)

35 
	#CASESENSITIVITYDEFAULT_NO


	)

39 #i‚de‡
UNZ_BUFSIZE


40 
	#UNZ_BUFSIZE
 (16384)

	)

43 #i‚de‡
UNZ_MAXFILENAMEINZIP


44 
	#UNZ_MAXFILENAMEINZIP
 (256)

	)

47 #i‚de‡
ALLOC


48 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

50 #i‚de‡
TRYFREE


51 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);
	}

	)
}

54 
	#SIZECENTRALDIRITEM
 (0x2e)

	)

55 
	#SIZEZIPLOCALHEADER
 (0x1e)

	)

60 #i‚de‡
SEEK_CUR


61 
	#SEEK_CUR
 1

	)

64 #i‚de‡
SEEK_END


65 
	#SEEK_END
 2

	)

68 #i‚de‡
SEEK_SET


69 
	#SEEK_SET
 0

	)

72 c⁄° 
	gunz_c›yright
[] =

76 
	sunz_fûe_öfo_öã∫Æ_s


78 
uL⁄g
 
	moff£t_curfûe
;

79 } 
	tunz_fûe_öfo_öã∫Æ
;

86 *
	mªad_buf„r
;

87 
z_°ªam
 
	m°ªam
;

89 
uL⁄g
 
	mpos_ö_zùfûe
;

90 
uL⁄g
 
	m°ªam_öôüli£d
;

92 
uL⁄g
 
	moff£t_loˇl_exåafõld
;

93 
uI¡
 
	msize_loˇl_exåafõld
;

94 
uL⁄g
 
	mpos_loˇl_exåafõld
;

96 
uL⁄g
 
	m¸c32
;

97 
uL⁄g
 
	m¸c32_waô
;

98 
uL⁄g
 
	mª°_ªad_com¥es£d
;

99 
uL⁄g
 
	mª°_ªad_uncom¥es£d
;

100 
FILE
* 
	mfûe
;

101 
uL⁄g
 
	mcom¥essi⁄_mëhod
;

102 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

103 } 
	tfûe_ö_zù_ªad_öfo_s
;

110 
FILE
* 
	mfûe
;

111 
unz_globÆ_öfo
 
	mgi
;

112 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

113 
uL⁄g
 
	mnum_fûe
;

114 
uL⁄g
 
	mpos_ö_˚¡øl_dú
;

115 
uL⁄g
 
	mcuºít_fûe_ok
;

116 
uL⁄g
 
	m˚¡øl_pos
;

118 
uL⁄g
 
	msize_˚¡øl_dú
;

119 
uL⁄g
 
	moff£t_˚¡øl_dú
;

122 
unz_fûe_öfo
 
	mcur_fûe_öfo
;

123 
unz_fûe_öfo_öã∫Æ
 
	mcur_fûe_öfo_öã∫Æ
;

124 
fûe_ö_zù_ªad_öfo_s
* 
	mpfûe_ö_zù_ªad
;

126 } 
	tunz_s
;

136 
loˇl
 
	$unzloˇl_gëByã
(
fö
,
pi
)

137 
FILE
 *
fö
;

138 *
pi
;

140 
c
;

141 
îr
 = 
	`‰ód
(&
c
, 1, 1, 
fö
);

142 i‡(
îr
==1)

144 *
pi
 = ()
c
;

145  
UNZ_OK
;

149 i‡(
	`„º‹
(
fö
))

150  
UNZ_ERRNO
;

152  
UNZ_EOF
;

154 
	}
}

160 
loˇl
 
	$unzloˇl_gëSh‹t
 (
fö
,
pX
)

161 
FILE
* 
fö
;

162 
uL⁄g
 *
pX
;

164 
uL⁄g
 
x
 ;

165 
i
=0;

166 
îr
;

168 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

169 
x
 = (
uL⁄g
)
i
;

171 i‡(
îr
==
UNZ_OK
)

172 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

173 
x
 +((
uL⁄g
)
i
)<<8;

175 i‡(
îr
==
UNZ_OK
)

176 *
pX
 = 
x
;

178 *
pX
 = 0;

179  
îr
;

180 
	}
}

182 
loˇl
 
	$unzloˇl_gëL⁄g
 (
fö
,
pX
)

183 
FILE
* 
fö
;

184 
uL⁄g
 *
pX
;

186 
uL⁄g
 
x
 ;

187 
i
=0;

188 
îr
;

190 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

191 
x
 = (
uL⁄g
)
i
;

193 i‡(
îr
==
UNZ_OK
)

194 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

195 
x
 +((
uL⁄g
)
i
)<<8;

197 i‡(
îr
==
UNZ_OK
)

198 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

199 
x
 +((
uL⁄g
)
i
)<<16;

201 i‡(
îr
==
UNZ_OK
)

202 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

203 
x
 +((
uL⁄g
)
i
)<<24;

205 i‡(
îr
==
UNZ_OK
)

206 *
pX
 = 
x
;

208 *
pX
 = 0;

209  
îr
;

210 
	}
}

214 
loˇl
 
	$°rcmpˇ£no£nsôive_öã∫Æ
 (
fûeName1
,
fûeName2
)

215 c⁄° * 
fûeName1
;

216 c⁄° * 
fûeName2
;

220 
c1
=*(
fûeName1
++);

221 
c2
=*(
fûeName2
++);

222 i‡((
c1
>='a') && (c1<='z'))

223 
c1
 -= 0x20;

224 i‡((
c2
>='a') && (c2<='z'))

225 
c2
 -= 0x20;

226 i‡(
c1
=='\0')

227  ((
c2
=='\0') ? 0 : -1);

228 i‡(
c2
=='\0')

230 i‡(
c1
<
c2
)

232 i‡(
c1
>
c2
)

235 
	}
}

238 #ifde‡ 
CASESENSITIVITYDEFAULT_NO


239 
	#CASESENSITIVITYDEFAULTVALUE
 2

	)

241 
	#CASESENSITIVITYDEFAULTVALUE
 1

	)

244 #i‚de‡
STRCMPCASENOSENTIVEFUNCTION


245 
	#STRCMPCASENOSENTIVEFUNCTION
 
°rcmpˇ£no£nsôive_öã∫Æ


	)

257 
ZEXPORT
 
	$unzSåögFûeNameCom∑ª
 (
fûeName1
,
fûeName2
,
iCa£Sísôivôy
)

258 c⁄° * 
fûeName1
;

259 c⁄° * 
fûeName2
;

260 
iCa£Sísôivôy
;

262 i‡(
iCa£Sísôivôy
==0)

263 
iCa£Sísôivôy
=
CASESENSITIVITYDEFAULTVALUE
;

265 i‡(
iCa£Sísôivôy
==1)

266  
	`°rcmp
(
fûeName1
,
fûeName2
);

268  
	`STRCMPCASENOSENTIVEFUNCTION
(
fûeName1
,
fûeName2
);

269 
	}
}

271 
	#BUFREADCOMMENT
 (0x400)

	)

277 
loˇl
 
uL⁄g
 
	$unzloˇl_SórchCíåÆDú
(
fö
)

278 
FILE
 *
fö
;

280 * 
buf
;

281 
uL⁄g
 
uSizeFûe
;

282 
uL⁄g
 
uBackRód
;

283 
uL⁄g
 
uMaxBack
=0xffff;

284 
uL⁄g
 
uPosFound
=0;

286 i‡(
	`f£ek
(
fö
,0,
SEEK_END
) != 0)

290 
uSizeFûe
 = 
	`·ñl
–
fö
 );

292 i‡(
uMaxBack
>
uSizeFûe
)

293 
uMaxBack
 = 
uSizeFûe
;

295 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

296 i‡(
buf
==
NULL
)

299 
uBackRód
 = 4;

300 
uBackRód
<
uMaxBack
)

302 
uL⁄g
 
uRódSize
,
uRódPos
 ;

303 
i
;

304 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

305 
uBackRód
 = 
uMaxBack
;

307 
uBackRód
+=
BUFREADCOMMENT
;

308 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

310 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

311 (
BUFREADCOMMENT
+4Ë: (
uSizeFûe
-
uRódPos
);

312 i‡(
	`f£ek
(
fö
,
uRódPos
,
SEEK_SET
)!=0)

315 i‡(
	`‰ód
(
buf
,(
uI¡
)
uRódSize
,1,
fö
)!=1)

318 
i
=()
uRódSize
-3; (i--)>0;)

319 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

320 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

322 
uPosFound
 = 
uRódPos
+
i
;

326 i‡(
uPosFound
!=0)

329 
	`TRYFREE
(
buf
);

330  
uPosFound
;

331 
	}
}

342 
unzFûe
 
ZEXPORT
 
	$unzO≥n
 (
∑th
)

343 c⁄° *
∑th
;

345 
unz_s
 
us
;

346 
unz_s
 *
s
;

347 
uL⁄g
 
˚¡øl_pos
,
uL
;

348 
FILE
 * 
fö
 ;

350 
uL⁄g
 
numbî_disk
;

352 
uL⁄g
 
numbî_disk_wôh_CD
;

354 
uL⁄g
 
numbî_íåy_CD
;

358 
îr
=
UNZ_OK
;

360 i‡(
unz_c›yright
[0]!=' ')

361  
NULL
;

363 
fö
=
	`f›í
(
∑th
,"rb");

364 i‡(
fö
==
NULL
)

365  
NULL
;

367 
˚¡øl_pos
 = 
	`unzloˇl_SórchCíåÆDú
(
fö
);

368 i‡(
˚¡øl_pos
==0)

369 
îr
=
UNZ_ERRNO
;

371 i‡(
	`f£ek
(
fö
,
˚¡øl_pos
,
SEEK_SET
)!=0)

372 
îr
=
UNZ_ERRNO
;

375 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
uL
)!=
UNZ_OK
)

376 
îr
=
UNZ_ERRNO
;

379 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_disk
)!=
UNZ_OK
)

380 
îr
=
UNZ_ERRNO
;

383 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_disk_wôh_CD
)!=
UNZ_OK
)

384 
îr
=
UNZ_ERRNO
;

387 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
us
.
gi
.
numbî_íåy
)!=
UNZ_OK
)

388 
îr
=
UNZ_ERRNO
;

391 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_íåy_CD
)!=
UNZ_OK
)

392 
îr
=
UNZ_ERRNO
;

394 i‡((
numbî_íåy_CD
!=
us
.
gi
.
numbî_íåy
) ||

395 (
numbî_disk_wôh_CD
!=0) ||

396 (
numbî_disk
!=0))

397 
îr
=
UNZ_BADZIPFILE
;

400 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
us
.
size_˚¡øl_dú
)!=
UNZ_OK
)

401 
îr
=
UNZ_ERRNO
;

405 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
us
.
off£t_˚¡øl_dú
)!=
UNZ_OK
)

406 
îr
=
UNZ_ERRNO
;

409 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
us
.
gi
.
size_commít
)!=
UNZ_OK
)

410 
îr
=
UNZ_ERRNO
;

412 i‡((
˚¡øl_pos
<
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
) &&

413 (
îr
==
UNZ_OK
))

414 
îr
=
UNZ_BADZIPFILE
;

416 i‡(
îr
!=
UNZ_OK
)

418 
	`f˛o£
(
fö
);

419  
NULL
;

422 
us
.
fûe
=
fö
;

423 
us
.
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 -

424 (
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
);

425 
us
.
˚¡øl_pos
 = central_pos;

426 
us
.
pfûe_ö_zù_ªad
 = 
NULL
;

429 
s
=(
unz_s
*)
	`ALLOC
((unz_s));

430 *
s
=
us
;

431 
	`unzGoToFú°Fûe
((
unzFûe
)
s
);

432  (
unzFûe
)
s
;

433 
	}
}

441 
ZEXPORT
 
	$unzClo£
 (
fûe
)

442 
unzFûe
 
fûe
;

444 
unz_s
* 
s
;

445 i‡(
fûe
==
NULL
)

446  
UNZ_PARAMERROR
;

447 
s
=(
unz_s
*)
fûe
;

449 i‡(
s
->
pfûe_ö_zù_ªad
!=
NULL
)

450 
	`unzClo£CuºítFûe
(
fûe
);

452 
	`f˛o£
(
s
->
fûe
);

453 
	`TRYFREE
(
s
);

454  
UNZ_OK
;

455 
	}
}

462 
ZEXPORT
 
	$unzGëGlobÆInfo
 (
fûe
,
pglobÆ_öfo
)

463 
unzFûe
 
fûe
;

464 
unz_globÆ_öfo
 *
pglobÆ_öfo
;

466 
unz_s
* 
s
;

467 i‡(
fûe
==
NULL
)

468  
UNZ_PARAMERROR
;

469 
s
=(
unz_s
*)
fûe
;

470 *
pglobÆ_öfo
=
s
->
gi
;

471  
UNZ_OK
;

472 
	}
}

478 
loˇl
 
	$unzloˇl_DosD©eToTmuD©e
 (
ulDosD©e
, 
±m
)

479 
uL⁄g
 
ulDosD©e
;

480 
tm_unz
* 
±m
;

482 
uL⁄g
 
uD©e
;

483 
uD©e
 = (
uL⁄g
)(
ulDosD©e
>>16);

484 
±m
->
tm_mday
 = (
uI¡
)(
uD©e
&0x1f) ;

485 
±m
->
tm_m⁄
 = (
uI¡
)((((
uD©e
)&0x1E0)/0x20)-1) ;

486 
±m
->
tm_yór
 = (
uI¡
)(((
uD©e
&0x0FE00)/0x0200)+1980) ;

488 
±m
->
tm_hour
 = (
uI¡
Ë((
ulDosD©e
 &0xF800)/0x800);

489 
±m
->
tm_mö
 = (
uI¡
Ë((
ulDosD©e
&0x7E0)/0x20) ;

490 
±m
->
tm_£c
 = (
uI¡
Ë(2*(
ulDosD©e
&0x1f)) ;

491 
	}
}

496 
loˇl
 
unzloˇl_GëCuºítFûeInfoI¡î«l
 
OF
((
unzFûe
 
fûe
,

497 
unz_fûe_öfo
 *
pfûe_öfo
,

498 
unz_fûe_öfo_öã∫Æ


499 *
pfûe_öfo_öã∫Æ
,

500 *
szFûeName
,

501 
uL⁄g
 
fûeNameBuf„rSize
,

502 *
exåaFõld
,

503 
uL⁄g
 
exåaFõldBuf„rSize
,

504 *
szCommít
,

505 
uL⁄g
 
commítBuf„rSize
));

507 
loˇl
 
	$unzloˇl_GëCuºítFûeInfoI¡î«l
 (
fûe
,

508 
pfûe_öfo
,

509 
pfûe_öfo_öã∫Æ
,

510 
szFûeName
, 
fûeNameBuf„rSize
,

511 
exåaFõld
, 
exåaFõldBuf„rSize
,

512 
szCommít
, 
commítBuf„rSize
)

513 
unzFûe
 
fûe
;

514 
unz_fûe_öfo
 *
pfûe_öfo
;

515 
unz_fûe_öfo_öã∫Æ
 *
pfûe_öfo_öã∫Æ
;

516 *
szFûeName
;

517 
uL⁄g
 
fûeNameBuf„rSize
;

518 *
exåaFõld
;

519 
uL⁄g
 
exåaFõldBuf„rSize
;

520 *
szCommít
;

521 
uL⁄g
 
commítBuf„rSize
;

523 
unz_s
* 
s
;

524 
unz_fûe_öfo
 
fûe_öfo
;

525 
unz_fûe_öfo_öã∫Æ
 
fûe_öfo_öã∫Æ
;

526 
îr
=
UNZ_OK
;

527 
uL⁄g
 
uMagic
;

528 
lSìk
=0;

530 i‡(
fûe
==
NULL
)

531  
UNZ_PARAMERROR
;

532 
s
=(
unz_s
*)
fûe
;

533 i‡(
	`f£ek
(
s
->
fûe
,s->
pos_ö_˚¡øl_dú
+s->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

534 
îr
=
UNZ_ERRNO
;

538 i‡(
îr
==
UNZ_OK
)

540 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uMagic
Ë!
UNZ_OK
)

541 
îr
=
UNZ_ERRNO
;

542 i‡(
uMagic
!=0x02014b50)

543 
îr
=
UNZ_BADZIPFILE
;

546 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
vîsi⁄
Ë!
UNZ_OK
)

547 
îr
=
UNZ_ERRNO
;

549 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
vîsi⁄_√eded
Ë!
UNZ_OK
)

550 
îr
=
UNZ_ERRNO
;

552 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
Êag
Ë!
UNZ_OK
)

553 
îr
=
UNZ_ERRNO
;

555 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
com¥essi⁄_mëhod
Ë!
UNZ_OK
)

556 
îr
=
UNZ_ERRNO
;

558 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
dosD©e
Ë!
UNZ_OK
)

559 
îr
=
UNZ_ERRNO
;

561 
	`unzloˇl_DosD©eToTmuD©e
(
fûe_öfo
.
dosD©e
,&fûe_öfo.
tmu_d©e
);

563 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
¸c
Ë!
UNZ_OK
)

564 
îr
=
UNZ_ERRNO
;

566 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
com¥es£d_size
Ë!
UNZ_OK
)

567 
îr
=
UNZ_ERRNO
;

569 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
uncom¥es£d_size
Ë!
UNZ_OK
)

570 
îr
=
UNZ_ERRNO
;

572 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûíame
Ë!
UNZ_OK
)

573 
îr
=
UNZ_ERRNO
;

575 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûe_exåa
Ë!
UNZ_OK
)

576 
îr
=
UNZ_ERRNO
;

578 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûe_commít
Ë!
UNZ_OK
)

579 
îr
=
UNZ_ERRNO
;

581 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
disk_num_°¨t
Ë!
UNZ_OK
)

582 
îr
=
UNZ_ERRNO
;

584 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
öã∫Æ_Á
Ë!
UNZ_OK
)

585 
îr
=
UNZ_ERRNO
;

587 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
exã∫Æ_Á
Ë!
UNZ_OK
)

588 
îr
=
UNZ_ERRNO
;

590 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo_öã∫Æ
.
off£t_curfûe
Ë!
UNZ_OK
)

591 
îr
=
UNZ_ERRNO
;

593 
lSìk
+=
fûe_öfo
.
size_fûíame
;

594 i‡((
îr
==
UNZ_OK
Ë&& (
szFûeName
!=
NULL
))

596 
uL⁄g
 
uSizeRód
 ;

597 i‡(
fûe_öfo
.
size_fûíame
<
fûeNameBuf„rSize
)

599 *(
szFûeName
+
fûe_öfo
.
size_fûíame
)='\0';

600 
uSizeRód
 = 
fûe_öfo
.
size_fûíame
;

603 
uSizeRód
 = 
fûeNameBuf„rSize
;

605 i‡((
fûe_öfo
.
size_fûíame
>0Ë&& (
fûeNameBuf„rSize
>0))

606 i‡(
	`‰ód
(
szFûeName
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

607 
îr
=
UNZ_ERRNO
;

608 
lSìk
 -
uSizeRód
;

612 i‡((
îr
==
UNZ_OK
Ë&& (
exåaFõld
!=
NULL
))

614 
uL⁄g
 
uSizeRód
 ;

615 i‡(
fûe_öfo
.
size_fûe_exåa
<
exåaFõldBuf„rSize
)

616 
uSizeRód
 = 
fûe_öfo
.
size_fûe_exåa
;

618 
uSizeRód
 = 
exåaFõldBuf„rSize
;

620 i‡(
lSìk
!=0)

622 i‡(
	`f£ek
(
s
->
fûe
,
lSìk
,
SEEK_CUR
)==0)

623 
lSìk
=0;

625 
îr
=
UNZ_ERRNO
;

627 i‡((
fûe_öfo
.
size_fûe_exåa
>0Ë&& (
exåaFõldBuf„rSize
>0))

628 i‡(
	`‰ód
(
exåaFõld
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

629 
îr
=
UNZ_ERRNO
;

630 
lSìk
 +
fûe_öfo
.
size_fûe_exåa
 - 
uSizeRód
;

633 
lSìk
+=
fûe_öfo
.
size_fûe_exåa
;

636 i‡((
îr
==
UNZ_OK
Ë&& (
szCommít
!=
NULL
))

638 
uL⁄g
 
uSizeRód
 ;

639 i‡(
fûe_öfo
.
size_fûe_commít
<
commítBuf„rSize
)

641 *(
szCommít
+
fûe_öfo
.
size_fûe_commít
)='\0';

642 
uSizeRód
 = 
fûe_öfo
.
size_fûe_commít
;

645 
uSizeRód
 = 
commítBuf„rSize
;

647 i‡(
lSìk
!=0)

649 i‡(
	`f£ek
(
s
->
fûe
,
lSìk
,
SEEK_CUR
)==0)

650 
lSìk
=0;

652 
îr
=
UNZ_ERRNO
;

654 i‡((
fûe_öfo
.
size_fûe_commít
>0Ë&& (
commítBuf„rSize
>0))

655 i‡(
	`‰ód
(
szCommít
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

656 
îr
=
UNZ_ERRNO
;

657 
lSìk
+=
fûe_öfo
.
size_fûe_commít
 - 
uSizeRód
;

660 
lSìk
+=
fûe_öfo
.
size_fûe_commít
;

662 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo
!=
NULL
))

663 *
pfûe_öfo
=
fûe_öfo
;

665 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo_öã∫Æ
!=
NULL
))

666 *
pfûe_öfo_öã∫Æ
=
fûe_öfo_öã∫Æ
;

668  
îr
;

669 
	}
}

678 
ZEXPORT
 
	$unzGëCuºítFûeInfo
 (
fûe
,

679 
pfûe_öfo
,

680 
szFûeName
, 
fûeNameBuf„rSize
,

681 
exåaFõld
, 
exåaFõldBuf„rSize
,

682 
szCommít
, 
commítBuf„rSize
)

683 
unzFûe
 
fûe
;

684 
unz_fûe_öfo
 *
pfûe_öfo
;

685 *
szFûeName
;

686 
uL⁄g
 
fûeNameBuf„rSize
;

687 *
exåaFõld
;

688 
uL⁄g
 
exåaFõldBuf„rSize
;

689 *
szCommít
;

690 
uL⁄g
 
commítBuf„rSize
;

692  
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,
pfûe_öfo
,
NULL
,

693 
szFûeName
,
fûeNameBuf„rSize
,

694 
exåaFõld
,
exåaFõldBuf„rSize
,

695 
szCommít
,
commítBuf„rSize
);

696 
	}
}

702 
ZEXPORT
 
	$unzGoToFú°Fûe
 (
fûe
)

703 
unzFûe
 
fûe
;

705 
îr
=
UNZ_OK
;

706 
unz_s
* 
s
;

707 i‡(
fûe
==
NULL
)

708  
UNZ_PARAMERROR
;

709 
s
=(
unz_s
*)
fûe
;

710 
s
->
pos_ö_˚¡øl_dú
=s->
off£t_˚¡øl_dú
;

711 
s
->
num_fûe
=0;

712 
îr
=
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

713 &
s
->
cur_fûe_öfo_öã∫Æ
,

714 
NULL
,0,NULL,0,NULL,0);

715 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

716  
îr
;

717 
	}
}

725 
ZEXPORT
 
	$unzGoToNextFûe
 (
fûe
)

726 
unzFûe
 
fûe
;

728 
unz_s
* 
s
;

729 
îr
;

731 i‡(
fûe
==
NULL
)

732  
UNZ_PARAMERROR
;

733 
s
=(
unz_s
*)
fûe
;

734 i‡(!
s
->
cuºít_fûe_ok
)

735  
UNZ_END_OF_LIST_OF_FILE
;

736 i‡(
s
->
num_fûe
+1==s->
gi
.
numbî_íåy
)

737  
UNZ_END_OF_LIST_OF_FILE
;

739 
s
->
pos_ö_˚¡øl_dú
 +
SIZECENTRALDIRITEM
 + s->
cur_fûe_öfo
.
size_fûíame
 +

740 
s
->
cur_fûe_öfo
.
size_fûe_exåa
 + s->cur_fûe_öfo.
size_fûe_commít
 ;

741 
s
->
num_fûe
++;

742 
îr
 = 
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

743 &
s
->
cur_fûe_öfo_öã∫Æ
,

744 
NULL
,0,NULL,0,NULL,0);

745 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

746  
îr
;

747 
	}
}

758 
ZEXPORT
 
	$unzLoˇãFûe
 (
fûe
, 
szFûeName
, 
iCa£Sísôivôy
)

759 
unzFûe
 
fûe
;

760 c⁄° *
szFûeName
;

761 
iCa£Sísôivôy
;

763 
unz_s
* 
s
;

764 
îr
;

767 
uL⁄g
 
num_fûeSaved
;

768 
uL⁄g
 
pos_ö_˚¡øl_dúSaved
;

771 i‡(
fûe
==
NULL
)

772  
UNZ_PARAMERROR
;

774 i‡(
	`°æí
(
szFûeName
)>=
UNZ_MAXFILENAMEINZIP
)

775  
UNZ_PARAMERROR
;

777 
s
=(
unz_s
*)
fûe
;

778 i‡(!
s
->
cuºít_fûe_ok
)

779  
UNZ_END_OF_LIST_OF_FILE
;

781 
num_fûeSaved
 = 
s
->
num_fûe
;

782 
pos_ö_˚¡øl_dúSaved
 = 
s
->
pos_ö_˚¡øl_dú
;

784 
îr
 = 
	`unzGoToFú°Fûe
(
fûe
);

786 
îr
 =
UNZ_OK
)

788 
szCuºítFûeName
[
UNZ_MAXFILENAMEINZIP
+1];

789 
	`unzGëCuºítFûeInfo
(
fûe
,
NULL
,

790 
szCuºítFûeName
,(szCurrentFileName)-1,

791 
NULL
,0,NULL,0);

792 i‡(
	`unzSåögFûeNameCom∑ª
(
szCuºítFûeName
,

793 
szFûeName
,
iCa£Sísôivôy
)==0)

794  
UNZ_OK
;

795 
îr
 = 
	`unzGoToNextFûe
(
fûe
);

798 
s
->
num_fûe
 = 
num_fûeSaved
 ;

799 
s
->
pos_ö_˚¡øl_dú
 = 
pos_ö_˚¡øl_dúSaved
 ;

800  
îr
;

801 
	}
}

811 
loˇl
 
	$unzloˇl_CheckCuºítFûeCohîícyHódî
 (
s
,
piSizeV¨
,

812 
poff£t_loˇl_exåafõld
,

813 
psize_loˇl_exåafõld
)

814 
unz_s
* 
s
;

815 
uI¡
* 
piSizeV¨
;

816 
uL⁄g
 *
poff£t_loˇl_exåafõld
;

817 
uI¡
 *
psize_loˇl_exåafõld
;

819 
uL⁄g
 
uMagic
,
uD©a
,
uFœgs
;

820 
uL⁄g
 
size_fûíame
;

821 
uL⁄g
 
size_exåa_fõld
;

822 
îr
=
UNZ_OK
;

824 *
piSizeV¨
 = 0;

825 *
poff£t_loˇl_exåafõld
 = 0;

826 *
psize_loˇl_exåafõld
 = 0;

828 i‡(
	`f£ek
(
s
->
fûe
,s->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

829 
s
->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

830  
UNZ_ERRNO
;

833 i‡(
îr
==
UNZ_OK
)

835 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uMagic
Ë!
UNZ_OK
)

836 
îr
=
UNZ_ERRNO
;

837 i‡(
uMagic
!=0x04034b50)

838 
îr
=
UNZ_BADZIPFILE
;

841 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

842 
îr
=
UNZ_ERRNO
;

847 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
uFœgs
Ë!
UNZ_OK
)

848 
îr
=
UNZ_ERRNO
;

850 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

851 
îr
=
UNZ_ERRNO
;

852 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
))

853 
îr
=
UNZ_BADZIPFILE
;

855 i‡((
îr
==
UNZ_OK
Ë&& (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

856 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

857 
îr
=
UNZ_BADZIPFILE
;

859 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

860 
îr
=
UNZ_ERRNO
;

862 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

863 
îr
=
UNZ_ERRNO
;

864 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
¸c
) &&

865 ((
uFœgs
 & 8)==0))

866 
îr
=
UNZ_BADZIPFILE
;

868 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

869 
îr
=
UNZ_ERRNO
;

870 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥es£d_size
) &&

871 ((
uFœgs
 & 8)==0))

872 
îr
=
UNZ_BADZIPFILE
;

874 i‡(
	`unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

875 
îr
=
UNZ_ERRNO
;

876 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
uncom¥es£d_size
) &&

877 ((
uFœgs
 & 8)==0))

878 
îr
=
UNZ_BADZIPFILE
;

881 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
size_fûíame
Ë!
UNZ_OK
)

882 
îr
=
UNZ_ERRNO
;

883 i‡((
îr
==
UNZ_OK
Ë&& (
size_fûíame
!=
s
->
cur_fûe_öfo
.size_filename))

884 
îr
=
UNZ_BADZIPFILE
;

886 *
piSizeV¨
 +(
uI¡
)
size_fûíame
;

888 i‡(
	`unzloˇl_gëSh‹t
(
s
->
fûe
,&
size_exåa_fõld
Ë!
UNZ_OK
)

889 
îr
=
UNZ_ERRNO
;

890 *
poff£t_loˇl_exåafõld

s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

891 
SIZEZIPLOCALHEADER
 + 
size_fûíame
;

892 *
psize_loˇl_exåafõld
 = (
uI¡
)
size_exåa_fõld
;

894 *
piSizeV¨
 +(
uI¡
)
size_exåa_fõld
;

896  
îr
;

897 
	}
}

903 
ZEXPORT
 
	$unzO≥nCuºítFûe
 (
fûe
)

904 
unzFûe
 
fûe
;

906 
îr
=
UNZ_OK
;

907 
St‹e
;

908 
uI¡
 
iSizeV¨
;

909 
unz_s
* 
s
;

910 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

911 
uL⁄g
 
off£t_loˇl_exåafõld
;

912 
uI¡
 
size_loˇl_exåafõld
;

914 i‡(
fûe
==
NULL
)

915  
UNZ_PARAMERROR
;

916 
s
=(
unz_s
*)
fûe
;

917 i‡(!
s
->
cuºít_fûe_ok
)

918  
UNZ_PARAMERROR
;

920 i‡(
s
->
pfûe_ö_zù_ªad
 !
NULL
)

921 
	`unzClo£CuºítFûe
(
fûe
);

923 i‡(
	`unzloˇl_CheckCuºítFûeCohîícyHódî
(
s
,&
iSizeV¨
,

924 &
off£t_loˇl_exåafõld
,&
size_loˇl_exåafõld
)!=
UNZ_OK
)

925  
UNZ_BADZIPFILE
;

927 
pfûe_ö_zù_ªad_öfo
 = (
fûe_ö_zù_ªad_öfo_s
*)

928 
	`ALLOC
((
fûe_ö_zù_ªad_öfo_s
));

929 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

930  
UNZ_INTERNALERROR
;

932 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
=(*)
	`ALLOC
(
UNZ_BUFSIZE
);

933 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 = offset_local_extrafield;

934 
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 = size_local_extrafield;

935 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
=0;

937 i‡(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
==
NULL
)

939 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

940  
UNZ_INTERNALERROR
;

943 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=0;

945 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

946 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

947 
îr
=
UNZ_BADZIPFILE
;

948 
St‹e
 = 
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
==0;

950 
pfûe_ö_zù_ªad_öfo
->
¸c32_waô
=
s
->
cur_fûe_öfo
.
¸c
;

951 
pfûe_ö_zù_ªad_öfo
->
¸c32
=0;

952 
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
 =

953 
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
;

954 
pfûe_ö_zù_ªad_öfo
->
fûe
=
s
->file;

955 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
=
s
->byte_before_the_zipfile;

957 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 = 0;

959 i‡(!
St‹e
)

961 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
zÆloc
 = (
Æloc_func
)0;

962 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
z‰ì
 = (
‰ì_func
)0;

963 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
›aque
 = (
voidpf
)0;

965 
îr
=
	`öÊ©eInô2
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
, -
MAX_WBITS
);

966 i‡(
îr
 =
Z_OK
)

967 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=1;

976 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 =

977 
s
->
cur_fûe_öfo
.
com¥es£d_size
 ;

978 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 =

979 
s
->
cur_fûe_öfo
.
uncom¥es£d_size
 ;

982 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 =

983 
s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 + 
SIZEZIPLOCALHEADER
 +

984 
iSizeV¨
;

986 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)0;

989 
s
->
pfûe_ö_zù_ªad
 = 
pfûe_ö_zù_ªad_öfo
;

990  
UNZ_OK
;

991 
	}
}

1004 
ZEXPORT
 
	$unzRódCuºítFûe
 (
fûe
, 
buf
, 
Àn
)

1005 
unzFûe
 
fûe
;

1006 
voidp
 
buf
;

1007 
Àn
;

1009 
îr
=
UNZ_OK
;

1010 
uI¡
 
iRód
 = 0;

1011 
unz_s
* 
s
;

1012 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1013 i‡(
fûe
==
NULL
)

1014  
UNZ_PARAMERROR
;

1015 
s
=(
unz_s
*)
fûe
;

1016 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1018 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1019  
UNZ_PARAMERROR
;

1022 i‡((
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 =
NULL
))

1023  
UNZ_END_OF_LIST_OF_FILE
;

1024 i‡(
Àn
==0)

1027 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 = (
Byãf
*)
buf
;

1029 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 = (
uI¡
)
Àn
;

1031 i‡(
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
)

1032 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1033 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
;

1035 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
>0)

1037 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
==0) &&

1038 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
>0))

1040 
uI¡
 
uRódThis
 = 
UNZ_BUFSIZE
;

1041 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
<
uRódThis
)

1042 
uRódThis
 = (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
;

1043 i‡(
uRódThis
 == 0)

1044  
UNZ_EOF
;

1045 i‡(
	`f£ek
(
pfûe_ö_zù_ªad_öfo
->
fûe
,

1046 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +

1047 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

1048  
UNZ_ERRNO
;

1049 i‡(
	`‰ód
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
,
uRódThis
,1,

1050 
pfûe_ö_zù_ªad_öfo
->
fûe
)!=1)

1051  
UNZ_ERRNO
;

1052 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +
uRódThis
;

1054 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
-=
uRódThis
;

1056 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 =

1057 (
Byãf
*)
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
;

1058 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)
uRódThis
;

1061 i‡(
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
==0)

1063 
uI¡
 
uDoC›y
,
i
 ;

1064 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 <

1065 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
)

1066 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 ;

1068 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 ;

1070 
i
=0;i<
uDoC›y
;i++)

1071 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
+
i
) =

1072 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
+
i
);

1074 
pfûe_ö_zù_ªad_öfo
->
¸c32
 = 
	`¸c32
(pfile_in_zip_read_info->crc32,

1075 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
,

1076 
uDoC›y
);

1077 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
-=
uDoC›y
;

1078 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 -
uDoC›y
;

1079 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 -
uDoC›y
;

1080 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 +
uDoC›y
;

1081 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 +
uDoC›y
;

1082 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 +
uDoC›y
;

1083 
iRód
 +
uDoC›y
;

1087 
uL⁄g
 
uTŸÆOutBef‹e
,
uTŸÆOutA·î
;

1088 c⁄° 
Byãf
 *
bufBef‹e
;

1089 
uL⁄g
 
uOutThis
;

1090 
Êush
=
Z_SYNC_FLUSH
;

1092 
uTŸÆOutBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1093 
bufBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
;

1101 
îr
=
	`öÊ©e
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
,
Êush
);

1103 
uTŸÆOutA·î
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1104 
uOutThis
 = 
uTŸÆOutA·î
-
uTŸÆOutBef‹e
;

1106 
pfûe_ö_zù_ªad_öfo
->
¸c32
 =

1107 
	`¸c32
(
pfûe_ö_zù_ªad_öfo
->
¸c32
,
bufBef‹e
,

1108 (
uI¡
)(
uOutThis
));

1110 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 -=

1111 
uOutThis
;

1113 
iRód
 +(
uI¡
)(
uTŸÆOutA·î
 - 
uTŸÆOutBef‹e
);

1115 i‡(
îr
==
Z_STREAM_END
)

1116  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1117 i‡(
îr
!=
Z_OK
)

1122 i‡(
îr
==
Z_OK
)

1123  
iRód
;

1124  
îr
;

1125 
	}
}

1131 
z_off_t
 
ZEXPORT
 
	$unzãŒ
 (
fûe
)

1132 
unzFûe
 
fûe
;

1134 
unz_s
* 
s
;

1135 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1136 i‡(
fûe
==
NULL
)

1137  
UNZ_PARAMERROR
;

1138 
s
=(
unz_s
*)
fûe
;

1139 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1141 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1142  
UNZ_PARAMERROR
;

1144  (
z_off_t
)
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1145 
	}
}

1151 
ZEXPORT
 
	$unzeof
 (
fûe
)

1152 
unzFûe
 
fûe
;

1154 
unz_s
* 
s
;

1155 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1156 i‡(
fûe
==
NULL
)

1157  
UNZ_PARAMERROR
;

1158 
s
=(
unz_s
*)
fûe
;

1159 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1161 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1162  
UNZ_PARAMERROR
;

1164 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1168 
	}
}

1184 
ZEXPORT
 
	$unzGëLoˇlExåafõld
 (
fûe
,
buf
,
Àn
)

1185 
unzFûe
 
fûe
;

1186 
voidp
 
buf
;

1187 
Àn
;

1189 
unz_s
* 
s
;

1190 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1191 
uI¡
 
ªad_now
;

1192 
uL⁄g
 
size_to_ªad
;

1194 i‡(
fûe
==
NULL
)

1195  
UNZ_PARAMERROR
;

1196 
s
=(
unz_s
*)
fûe
;

1197 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1199 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1200  
UNZ_PARAMERROR
;

1202 
size_to_ªad
 = (
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 -

1203 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
);

1205 i‡(
buf
==
NULL
)

1206  ()
size_to_ªad
;

1208 i‡(
Àn
>
size_to_ªad
)

1209 
ªad_now
 = (
uI¡
)
size_to_ªad
;

1211 
ªad_now
 = (
uI¡
)
Àn
 ;

1213 i‡(
ªad_now
==0)

1216 i‡(
	`f£ek
(
pfûe_ö_zù_ªad_öfo
->
fûe
,

1217 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 +

1218 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
,
SEEK_SET
)!=0)

1219  
UNZ_ERRNO
;

1221 i‡(
	`‰ód
(
buf
,(
uI¡
)
size_to_ªad
,1,
pfûe_ö_zù_ªad_öfo
->
fûe
)!=1)

1222  
UNZ_ERRNO
;

1224  ()
ªad_now
;

1225 
	}
}

1231 
ZEXPORT
 
	$unzClo£CuºítFûe
 (
fûe
)

1232 
unzFûe
 
fûe
;

1234 
îr
=
UNZ_OK
;

1236 
unz_s
* 
s
;

1237 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1238 i‡(
fûe
==
NULL
)

1239  
UNZ_PARAMERROR
;

1240 
s
=(
unz_s
*)
fûe
;

1241 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1243 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1244  
UNZ_PARAMERROR
;

1247 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1249 i‡(
pfûe_ö_zù_ªad_öfo
->
¸c32
 !pfûe_ö_zù_ªad_öfo->
¸c32_waô
)

1250 
îr
=
UNZ_CRCERROR
;

1254 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
);

1255 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 = 
NULL
;

1256 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
)

1257 
	`öÊ©eEnd
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
);

1259 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 = 0;

1260 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1262 
s
->
pfûe_ö_zù_ªad
=
NULL
;

1264  
îr
;

1265 
	}
}

1273 
ZEXPORT
 
	$unzGëGlobÆCommít
 (
fûe
, 
szCommít
, 
uSizeBuf
)

1274 
unzFûe
 
fûe
;

1275 *
szCommít
;

1276 
uL⁄g
 
uSizeBuf
;

1278 
unz_s
* 
s
;

1279 
uL⁄g
 
uRódThis
 ;

1280 i‡(
fûe
==
NULL
)

1281  
UNZ_PARAMERROR
;

1282 
s
=(
unz_s
*)
fûe
;

1284 
uRódThis
 = 
uSizeBuf
;

1285 i‡(
uRódThis
>
s
->
gi
.
size_commít
)

1286 
uRódThis
 = 
s
->
gi
.
size_commít
;

1288 i‡(
	`f£ek
(
s
->
fûe
,s->
˚¡øl_pos
+22,
SEEK_SET
)!=0)

1289  
UNZ_ERRNO
;

1291 i‡(
uRódThis
>0)

1293 *
szCommít
='\0';

1294 i‡(
	`‰ód
(
szCommít
,(
uI¡
)
uRódThis
,1,
s
->
fûe
)!=1)

1295  
UNZ_ERRNO
;

1298 i‡((
szCommít
 !
NULL
Ë&& (
uSizeBuf
 > 
s
->
gi
.
size_commít
))

1299 *(
szCommít
+
s
->
gi
.
size_commít
)='\0';

1300  ()
uRódThis
;

1301 
	}
}

	@zlib/unzip.h

41 #i‚de‡
_unz_H


42 
	#_unz_H


	)

44 #ifde‡
__˝lu•lus


48 #i‚de‡
_ZLIB_H


49 
	~"zlib.h
"

52 #i‡
deföed
(
STRICTUNZIP
Ë|| deföed(
STRICTZIPUNZIP
)

55 
	sTagunzFûe__
 { 
unu£d
; } 
	tunzFûe__
;

56 
unzFûe__
 *
	tunzFûe
;

58 
voidp
 
	tunzFûe
;

62 
	#UNZ_OK
 (0)

	)

63 
	#UNZ_END_OF_LIST_OF_FILE
 (-100)

	)

64 
	#UNZ_ERRNO
 (
Z_ERRNO
)

	)

65 
	#UNZ_EOF
 (0)

	)

66 
	#UNZ_PARAMERROR
 (-102)

	)

67 
	#UNZ_BADZIPFILE
 (-103)

	)

68 
	#UNZ_INTERNALERROR
 (-104)

	)

69 
	#UNZ_CRCERROR
 (-105)

	)

72 
	stm_unz_s


74 
uI¡
 
	gtm_£c
;

75 
uI¡
 
	gtm_mö
;

76 
uI¡
 
	gtm_hour
;

77 
uI¡
 
	gtm_mday
;

78 
uI¡
 
	gtm_m⁄
;

79 
uI¡
 
	gtm_yór
;

80 } 
	ttm_unz
;

84 
	sunz_globÆ_öfo_s


86 
uL⁄g
 
	gnumbî_íåy
;

88 
uL⁄g
 
	gsize_commít
;

89 } 
	tunz_globÆ_öfo
;

93 
	sunz_fûe_öfo_s


95 
uL⁄g
 
	gvîsi⁄
;

96 
uL⁄g
 
	gvîsi⁄_√eded
;

97 
uL⁄g
 
	gÊag
;

98 
uL⁄g
 
	gcom¥essi⁄_mëhod
;

99 
uL⁄g
 
	gdosD©e
;

100 
uL⁄g
 
	g¸c
;

101 
uL⁄g
 
	gcom¥es£d_size
;

102 
uL⁄g
 
	guncom¥es£d_size
;

103 
uL⁄g
 
	gsize_fûíame
;

104 
uL⁄g
 
	gsize_fûe_exåa
;

105 
uL⁄g
 
	gsize_fûe_commít
;

107 
uL⁄g
 
	gdisk_num_°¨t
;

108 
uL⁄g
 
	göã∫Æ_Á
;

109 
uL⁄g
 
	gexã∫Æ_Á
;

111 
tm_unz
 
	gtmu_d©e
;

112 } 
	tunz_fûe_öfo
;

114 
ZEXPORT
 
unzSåögFûeNameCom∑ª
 
OF
 ((c⁄° * 
fûeName1
,

115 c⁄° * 
fûeName2
,

116 
iCa£Sísôivôy
));

127 
unzFûe
 
ZEXPORT
 
unzO≥n
 
OF
((c⁄° *
∑th
));

138 
ZEXPORT
 
unzClo£
 
OF
((
unzFûe
 
fûe
));

145 
ZEXPORT
 
unzGëGlobÆInfo
 
OF
((
unzFûe
 
fûe
,

146 
unz_globÆ_öfo
 *
pglobÆ_öfo
));

153 
ZEXPORT
 
unzGëGlobÆCommít
 
OF
((
unzFûe
 
fûe
,

154 *
szCommít
,

155 
uL⁄g
 
uSizeBuf
));

166 
ZEXPORT
 
unzGoToFú°Fûe
 
OF
((
unzFûe
 
fûe
));

172 
ZEXPORT
 
unzGoToNextFûe
 
OF
((
unzFûe
 
fûe
));

179 
ZEXPORT
 
unzLoˇãFûe
 
OF
((
unzFûe
 
fûe
,

180 c⁄° *
szFûeName
,

181 
iCa£Sísôivôy
));

192 
ZEXPORT
 
unzGëCuºítFûeInfo
 
OF
((
unzFûe
 
fûe
,

193 
unz_fûe_öfo
 *
pfûe_öfo
,

194 *
szFûeName
,

195 
uL⁄g
 
fûeNameBuf„rSize
,

196 *
exåaFõld
,

197 
uL⁄g
 
exåaFõldBuf„rSize
,

198 *
szCommít
,

199 
uL⁄g
 
commítBuf„rSize
));

218 
ZEXPORT
 
unzO≥nCuºítFûe
 
OF
((
unzFûe
 
fûe
));

224 
ZEXPORT
 
unzClo£CuºítFûe
 
OF
((
unzFûe
 
fûe
));

231 
ZEXPORT
 
unzRódCuºítFûe
 
OF
((
unzFûe
 
fûe
,

232 
voidp
 
buf
,

233 
Àn
));

245 
z_off_t
 
ZEXPORT
 
unzãŒ
 
OF
((
unzFûe
 
fûe
));

250 
ZEXPORT
 
unzeof
 
OF
((
unzFûe
 
fûe
));

255 
ZEXPORT
 
unzGëLoˇlExåafõld
 
OF
((
unzFûe
 
fûe
,

256 
voidp
 
buf
,

257 
Àn
));

271 #ifde‡
__˝lu•lus


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_GNU


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

242 
	#__√ed_size_t


	)

243 
	~<°ddef.h
>

249 #i‚de‡
__USE_FILE_OFFSET64


250 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

251 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

252 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

253 (*
__cmp
Ë(
__c⁄°
 *, __const *))

254 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
sˇndú
,

258 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

259 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

260 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

261 (*
__cmp
Ë(
__c⁄°
 *, __const *)),

262 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

264 
	#sˇndú
 
sˇndú64


	)

268 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


271 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

272 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

273 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

274 (*
__cmp
Ë(
__c⁄°
 *, __const *))

275 
	`__n⁄nuŒ
 ((1, 2));

279 #i‚de‡
__USE_FILE_OFFSET64


280 
	$Æphas‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

283 #ifde‡
__REDIRECT


284 
	`__REDIRECT_NTH
 (
Æphas‹t
,

285 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

286 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
	#Æphas‹t
 
Æphas‹t64


	)

292 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


293 
	$Æphas‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__USE_GNU


299 #i‚de‡
__USE_FILE_OFFSET64


300 
	$vîsi⁄s‹t
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

301 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 #ifde‡
__REDIRECT


304 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

305 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
),

306 
vîsi⁄s‹t64
)

307 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

313 #ifde‡
__USE_LARGEFILE64


314 
	$vîsi⁄s‹t64
 (
__c⁄°
 *
__e1
, __c⁄° *
__e2
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

325 
size_t
 
__nbyãs
,

326 
__off_t
 *
__ª°ri˘
 
__ba£p
)

327 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

329 #ifde‡
__REDIRECT


330 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

331 (
__fd
, *
__ª°ri˘
 
__buf
,

332 
size_t
 
__nbyãs
,

333 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

334 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

336 
	#gëdúíåõs
 
gëdúíåõs64


	)

340 #ifde‡
__USE_LARGEFILE64


341 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

342 
size_t
 
__nbyãs
,

343 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

349 
__END_DECLS


	@/usr/include/dlfcn.h

21 #i‚def 
_DLFCN_H


22 
	#_DLFCN_H
 1

	)

24 
	~<„©uªs.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

29 
	~<bôs/dlf˙.h
>

32 #ifde‡
__USE_GNU


37 
	#RTLD_NEXT
 ((*Ë-1l)

	)

42 
	#RTLD_DEFAULT
 ((*Ë0)

	)

46 
	tLmid_t
;

49 
	#LM_ID_BASE
 0

	)

50 
	#LM_ID_NEWLM
 -1

	)

54 
__BEGIN_DECLS


58 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

62 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

66 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

67 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #ifde‡
__USE_GNU


71 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

75 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

76 
__c⁄°
 *
__ª°ri˘
 
__«me
,

77 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

78 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

84 *
	$dÀº‹
 (Ë
__THROW
;

87 #ifde‡
__USE_GNU


92 
__c⁄°
 *
dli_‚ame
;

93 *
dli_fba£
;

94 
__c⁄°
 *
dli_¢ame
;

95 *
dli_ßddr
;

96 } 
	tDl_öfo
;

100 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

101 
__THROW
 
	`__n⁄nuŒ
 ((2));

104 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

105 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

113 
RTLD_DL_SYMENT
 = 1,

116 
RTLD_DL_LINKMAP
 = 2

125 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

126 
__ªque°
, *
__ª°ri˘
 
__¨g
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

133 
RTLD_DI_LMID
 = 1,

137 
RTLD_DI_LINKMAP
 = 2,

139 
RTLD_DI_CONFIGADDR
 = 3,

146 
RTLD_DI_SERINFO
 = 4,

147 
RTLD_DI_SERINFOSIZE
 = 5,

151 
RTLD_DI_ORIGIN
 = 6,

153 
RTLD_DI_PROFILENAME
 = 7,

154 
RTLD_DI_PROFILEOUT
 = 8,

159 
RTLD_DI_TLS_MODID
 = 9,

165 
RTLD_DI_TLS_DATA
 = 10,

167 
RTLD_DI_MAX
 = 10,

175 *
dls_«me
;

176 
dls_Êags
;

177 } 
	tDl_£Ω©h
;

183 
size_t
 
dls_size
;

184 
dls_˙t
;

185 
Dl_£Ω©h
 
dls_£Ω©h
[1];

186 } 
	tDl_£röfo
;

190 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

215 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

216 && 
deföed
 
__va_¨g_∑ck_Àn


217 
	~<bôs/f˙é2.h
>

220 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/joystick.h

1 #i‚de‡
_LINUX_JOYSTICK_H


2 
	#_LINUX_JOYSTICK_H


	)

30 
	~<asm/ty≥s.h
>

31 
	~<löux/öput.h
>

37 
	#JS_VERSION
 0x020100

	)

43 
	#JS_EVENT_BUTTON
 0x01

	)

44 
	#JS_EVENT_AXIS
 0x02

	)

45 
	#JS_EVENT_INIT
 0x80

	)

47 
	sjs_evít
 {

48 
__u32
 
	mtime
;

49 
__s16
 
	mvÆue
;

50 
__u8
 
	mty≥
;

51 
__u8
 
	mnumbî
;

58 
	#JSIOCGVERSION
 
	`_IOR
('j', 0x01, 
__u32
Ë

	)

60 
	#JSIOCGAXES
 
	`_IOR
('j', 0x11, 
__u8
Ë

	)

61 
	#JSIOCGBUTTONS
 
	`_IOR
('j', 0x12, 
__u8
Ë

	)

62 
	#JSIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'j', 0x13,ÜíË

	)

64 
	#JSIOCSCORR
 
	`_IOW
('j', 0x21, 
js_c‹r
Ë

	)

65 
	#JSIOCGCORR
 
	`_IOR
('j', 0x22, 
js_c‹r
Ë

	)

67 
	#JSIOCSAXMAP
 
	`_IOW
('j', 0x31, 
__u8
[
ABS_MAX
 + 1]Ë

	)

68 
	#JSIOCGAXMAP
 
	`_IOR
('j', 0x32, 
__u8
[
ABS_MAX
 + 1]Ë

	)

69 
	#JSIOCSBTNMAP
 
	`_IOW
('j', 0x33, 
__u16
[
KEY_MAX
 - 
BTN_MISC
 + 1]Ë

	)

70 
	#JSIOCGBTNMAP
 
	`_IOR
('j', 0x34, 
__u16
[
KEY_MAX
 - 
BTN_MISC
 + 1]Ë

	)

76 
	#JS_CORR_NONE
 0x00

	)

77 
	#JS_CORR_BROKEN
 0x01

	)

79 
	sjs_c‹r
 {

80 
__s32
 
	mc€f
[8];

81 
__s16
 
	m¥ec
;

82 
__u16
 
	mty≥
;

89 
	#JS_RETURN
 (
JS_DATA_TYPE
)

	)

90 
	#JS_TRUE
 1

	)

91 
	#JS_FALSE
 0

	)

92 
	#JS_X_0
 0x01

	)

93 
	#JS_Y_0
 0x02

	)

94 
	#JS_X_1
 0x04

	)

95 
	#JS_Y_1
 0x08

	)

96 
	#JS_MAX
 2

	)

98 
	#JS_DEF_TIMEOUT
 0x1300

	)

99 
	#JS_DEF_CORR
 0

	)

100 
	#JS_DEF_TIMELIMIT
 10L

	)

102 
	#JS_SET_CAL
 1

	)

103 
	#JS_GET_CAL
 2

	)

104 
	#JS_SET_TIMEOUT
 3

	)

105 
	#JS_GET_TIMEOUT
 4

	)

106 
	#JS_SET_TIMELIMIT
 5

	)

107 
	#JS_GET_TIMELIMIT
 6

	)

108 
	#JS_GET_ALL
 7

	)

109 
	#JS_SET_ALL
 8

	)

111 
	sJS_DATA_TYPE
 {

112 
__s32
 
	mbuâ⁄s
;

113 
__s32
 
	mx
;

114 
__s32
 
	my
;

117 
	sJS_DATA_SAVE_TYPE_32
 {

118 
__s32
 
	mJS_TIMEOUT
;

119 
__s32
 
	mBUSY
;

120 
__s32
 
	mJS_EXPIRETIME
;

121 
__s32
 
	mJS_TIMELIMIT
;

122 
JS_DATA_TYPE
 
	mJS_SAVE
;

123 
JS_DATA_TYPE
 
	mJS_CORR
;

126 
	sJS_DATA_SAVE_TYPE_64
 {

127 
__s32
 
	mJS_TIMEOUT
;

128 
__s32
 
	mBUSY
;

129 
__s64
 
	mJS_EXPIRETIME
;

130 
__s64
 
	mJS_TIMELIMIT
;

131 
JS_DATA_TYPE
 
	mJS_SAVE
;

132 
JS_DATA_TYPE
 
	mJS_CORR
;

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

28 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

34 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

37 
	#__FUNCTION__
 (
__func__
)

	)

40 #ifde‡
CONFIG_NUMA


41 
	#NUMA_BUILD
 1

	)

43 
	#NUMA_BUILD
 0

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132635

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

282 #ifdef 
__USE_MISC


286 
_IEEE_
 = -1,

287 
_SVID_
,

288 
_XOPEN_
,

289 
_POSIX_
,

290 
_ISOC_


291 } 
	t_LIB_VERSION_TYPE
;

296 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

300 #ifde‡
__USE_SVID


306 #ifde‡
__˝lu•lus


307 
__ex˚±i⁄


309 
ex˚±i⁄


312 
ty≥
;

313 *
«me
;

314 
¨g1
;

315 
¨g2
;

316 
ªtvÆ
;

317 
	}
};

319 #ifde‡
__˝lu•lus


320 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

322 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

325 
	#X_TLOSS
 1.41484755040568800000e+16

	)

328 
	#DOMAIN
 1

	)

329 
	#SING
 2

	)

330 
	#OVERFLOW
 3

	)

331 
	#UNDERFLOW
 4

	)

332 
	#TLOSS
 5

	)

333 
	#PLOSS
 6

	)

336 
	#HUGE
 3.40282347e+38F

	)

340 #ifde‡
__USE_XOPEN


342 
	#MAXFLOAT
 3.40282347e+38F

	)

349 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


350 
	#M_E
 2.7182818284590452354

	)

351 
	#M_LOG2E
 1.4426950408889634074

	)

352 
	#M_LOG10E
 0.43429448190325182765

	)

353 
	#M_LN2
 0.69314718055994530942

	)

354 
	#M_LN10
 2.30258509299404568402

	)

355 
	#M_PI
 3.14159265358979323846

	)

356 
	#M_PI_2
 1.57079632679489661923

	)

357 
	#M_PI_4
 0.78539816339744830962

	)

358 
	#M_1_PI
 0.31830988618379067154

	)

359 
	#M_2_PI
 0.63661977236758134308

	)

360 
	#M_2_SQRTPI
 1.12837916709551257390

	)

361 
	#M_SQRT2
 1.41421356237309504880

	)

362 
	#M_SQRT1_2
 0.70710678118654752440

	)

368 #ifde‡
__USE_GNU


369 
	#M_El
 2.7182818284590452353602874713526625L

	)

370 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

371 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

372 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

373 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

374 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

375 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

376 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

377 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

378 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

379 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

380 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

381 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

388 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


389 
	#__NO_MATH_INLINES
 1

	)

392 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

399 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

400 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

401 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

402 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

403 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

404 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

408 #ifde‡
__USE_EXTERN_INLINES


409 
	~<bôs/m©hölöe.h
>

412 #ifde‡
__USE_ISOC99


416 #i‚de‡
isgª©î


417 
	#isgª©î
(
x
, 
y
) \

418 (
__exãnsi⁄__
 \

419 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

420 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

424 #i‚de‡
isgª©îequÆ


425 
	#isgª©îequÆ
(
x
, 
y
) \

426 (
__exãnsi⁄__
 \

427 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

428 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

432 #i‚de‡
i¶ess


433 
	#i¶ess
(
x
, 
y
) \

434 (
__exãnsi⁄__
 \

435 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

436 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

440 #i‚de‡
i¶es£quÆ


441 
	#i¶es£quÆ
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

448 #i‚de‡
i¶essgª©î


449 
	#i¶essgª©î
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

456 #i‚de‡
isun‹dîed


457 
	#isun‹dîed
(
u
, 
v
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

460 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

465 
	g__END_DECLS


	@/usr/include/menu.h

35 #i‚de‡
ETI_MENU


36 
	#ETI_MENU


	)

38 #ifde‡
AMIGA


39 
	#TEXT
 
TEXT_ncur£s


	)

42 
	~<cur£s.h
>

43 
	~<ëi.h
>

45 #ifde‡
__˝lu•lus


49 
	tMíu_O±i⁄s
;

50 
	tIãm_O±i⁄s
;

53 
	#O_ONEVALUE
 (0x01)

	)

54 
	#O_SHOWDESC
 (0x02)

	)

55 
	#O_ROWMAJOR
 (0x04)

	)

56 
	#O_IGNORECASE
 (0x08)

	)

57 
	#O_SHOWMATCH
 (0x10)

	)

58 
	#O_NONCYCLIC
 (0x20)

	)

61 
	#O_SELECTABLE
 (0x01)

	)

65 c⁄° * 
°r
;

66 
Àngth
;

67 } 
	tTEXT
;

69 
	sègITEM


71 
TEXT
 
«me
;

72 
TEXT
 
des¸ùti⁄
;

73 
ègMENU
 *
imíu
;

74 *
u£Ωå
;

75 
Iãm_O±i⁄s
 
›t
;

76 
ödex
;

77 
y
;

78 
x
;

79 
boﬁ
 
vÆue
;

81 
ègITEM
 *
À·
;

82 
ègITEM
 *
right
;

83 
ègITEM
 *
up
;

84 
ègITEM
 *
down
;

86 } 
	tITEM
;

88 (*
Míu_Hook
)(
	tègMENU
 *);

90 
	sègMENU


92 
height
;

93 
width
;

94 
rows
;

95 
cﬁs
;

96 
‰ows
;

97 
fcﬁs
;

98 
¨ows
;

99 
«mñí
;

100 
des˛í
;

101 
m¨kÀn
;

102 
ôemÀn
;

103 
•c_desc
;

104 
•c_cﬁs
;

105 
•c_rows
;

106 *
∑âîn
;

107 
pödex
;

108 
WINDOW
 *
wö
;

109 
WINDOW
 *
sub
;

110 
WINDOW
 *
u£rwö
;

111 
WINDOW
 *
u£rsub
;

112 
ITEM
 **
ôems
;

113 
nôems
;

114 
ITEM
 *
curôem
;

115 
t›row
;

116 
chty≥
 
f‹e
;

117 
chty≥
 
back
;

118 
chty≥
 
gªy
;

119 
∑d
;

121 
Míu_Hook
 
míuöô
;

122 
Míu_Hook
 
míuãrm
;

123 
Míu_Hook
 
ôemöô
;

124 
Míu_Hook
 
ôemãrm
;

126 *
u£Ωå
;

127 *
m¨k
;

129 
Míu_O±i⁄s
 
›t
;

130 
°©us
;

132 } 
	tMENU
;

137 
	#REQ_LEFT_ITEM
 (
KEY_MAX
 + 1)

	)

138 
	#REQ_RIGHT_ITEM
 (
KEY_MAX
 + 2)

	)

139 
	#REQ_UP_ITEM
 (
KEY_MAX
 + 3)

	)

140 
	#REQ_DOWN_ITEM
 (
KEY_MAX
 + 4)

	)

141 
	#REQ_SCR_ULINE
 (
KEY_MAX
 + 5)

	)

142 
	#REQ_SCR_DLINE
 (
KEY_MAX
 + 6)

	)

143 
	#REQ_SCR_DPAGE
 (
KEY_MAX
 + 7)

	)

144 
	#REQ_SCR_UPAGE
 (
KEY_MAX
 + 8)

	)

145 
	#REQ_FIRST_ITEM
 (
KEY_MAX
 + 9)

	)

146 
	#REQ_LAST_ITEM
 (
KEY_MAX
 + 10)

	)

147 
	#REQ_NEXT_ITEM
 (
KEY_MAX
 + 11)

	)

148 
	#REQ_PREV_ITEM
 (
KEY_MAX
 + 12)

	)

149 
	#REQ_TOGGLE_ITEM
 (
KEY_MAX
 + 13)

	)

150 
	#REQ_CLEAR_PATTERN
 (
KEY_MAX
 + 14)

	)

151 
	#REQ_BACK_PATTERN
 (
KEY_MAX
 + 15)

	)

152 
	#REQ_NEXT_MATCH
 (
KEY_MAX
 + 16)

	)

153 
	#REQ_PREV_MATCH
 (
KEY_MAX
 + 17)

	)

155 
	#MIN_MENU_COMMAND
 (
KEY_MAX
 + 1)

	)

156 
	#MAX_MENU_COMMAND
 (
KEY_MAX
 + 17)

	)

162 #i‡
deföed
(
MAX_COMMAND
)

163 #i‡(
MAX_MENU_COMMAND
 > 
MAX_COMMAND
)

164 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_MENU_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


165 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

166 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

169 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

175 
NCURSES_EXPORT
(
ITEM
 **Ë
míu_ôems
 (c⁄° 
MENU
 *);

176 
NCURSES_EXPORT
(
ITEM
 *Ë
cuºít_ôem
 (c⁄° 
MENU
 *);

177 
NCURSES_EXPORT
(
ITEM
 *Ë
√w_ôem
 (const *,const *);

179 
NCURSES_EXPORT
(
MENU
 *Ë
√w_míu
 (
ITEM
 **);

181 
NCURSES_EXPORT
(
Iãm_O±i⁄s
Ë
ôem_›ts
 (c⁄° 
ITEM
 *);

182 
NCURSES_EXPORT
(
Míu_O±i⁄s
Ë
míu_›ts
 (c⁄° 
MENU
 *);

184 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_öô
 (c⁄° 
MENU
 *);

185 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_ãrm
 (c⁄° 
MENU
 *);

186 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_öô
 (c⁄° 
MENU
 *);

187 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_ãrm
 (c⁄° 
MENU
 *);

189 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_sub
 (c⁄° 
MENU
 *);

190 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_wö
 (c⁄° 
MENU
 *);

192 
NCURSES_EXPORT
(c⁄° *Ë
ôem_des¸ùti⁄
 (c⁄° 
ITEM
 *);

193 
NCURSES_EXPORT
(c⁄° *Ë
ôem_«me
 (c⁄° 
ITEM
 *);

194 
NCURSES_EXPORT
(c⁄° *Ë
míu_m¨k
 (c⁄° 
MENU
 *);

195 
NCURSES_EXPORT
(c⁄° *Ë
míu_ªque°_«me
 ();

197 
NCURSES_EXPORT
(*Ë
míu_∑âîn
 (c⁄° 
MENU
 *);

199 
NCURSES_EXPORT
(*Ë
míu_u£Ωå
 (c⁄° 
MENU
 *);

200 
NCURSES_EXPORT
(*Ë
ôem_u£Ωå
 (c⁄° 
ITEM
 *);

202 
NCURSES_EXPORT
(
chty≥
Ë
míu_back
 (c⁄° 
MENU
 *);

203 
NCURSES_EXPORT
(
chty≥
Ë
míu_f‹e
 (c⁄° 
MENU
 *);

204 
NCURSES_EXPORT
(
chty≥
Ë
míu_gªy
 (c⁄° 
MENU
 *);

206 
NCURSES_EXPORT
(Ë
‰ì_ôem
 (
ITEM
 *);

207 
NCURSES_EXPORT
(Ë
‰ì_míu
 (
MENU
 *);

208 
NCURSES_EXPORT
(Ë
ôem_cou¡
 (c⁄° 
MENU
 *);

209 
NCURSES_EXPORT
(Ë
ôem_ödex
 (c⁄° 
ITEM
 *);

210 
NCURSES_EXPORT
(Ë
ôem_›ts_off
 (
ITEM
 *,
Iãm_O±i⁄s
);

211 
NCURSES_EXPORT
(Ë
ôem_›ts_⁄
 (
ITEM
 *,
Iãm_O±i⁄s
);

212 
NCURSES_EXPORT
(Ë
míu_drivî
 (
MENU
 *,);

213 
NCURSES_EXPORT
(Ë
míu_›ts_off
 (
MENU
 *,
Míu_O±i⁄s
);

214 
NCURSES_EXPORT
(Ë
míu_›ts_⁄
 (
MENU
 *,
Míu_O±i⁄s
);

215 
NCURSES_EXPORT
(Ë
míu_∑d
 (c⁄° 
MENU
 *);

216 
NCURSES_EXPORT
(Ë
pos_míu_curs‹
 (c⁄° 
MENU
 *);

217 
NCURSES_EXPORT
(Ë
po°_míu
 (
MENU
 *);

218 
NCURSES_EXPORT
(Ë
sˇÀ_míu
 (c⁄° 
MENU
 *,*,*);

219 
NCURSES_EXPORT
(Ë
£t_cuºít_ôem
 (
MENU
 *
míu
,
ITEM
 *
ôem
);

220 
NCURSES_EXPORT
(Ë
£t_ôem_öô
 (
MENU
 *, 
Míu_Hook
);

221 
NCURSES_EXPORT
(Ë
£t_ôem_›ts
 (
ITEM
 *,
Iãm_O±i⁄s
);

222 
NCURSES_EXPORT
(Ë
£t_ôem_ãrm
 (
MENU
 *, 
Míu_Hook
);

223 
NCURSES_EXPORT
(Ë
£t_ôem_u£Ωå
 (
ITEM
 *, *);

224 
NCURSES_EXPORT
(Ë
£t_ôem_vÆue
 (
ITEM
 *,
boﬁ
);

225 
NCURSES_EXPORT
(Ë
£t_míu_back
 (
MENU
 *,
chty≥
);

226 
NCURSES_EXPORT
(Ë
£t_míu_f‹e
 (
MENU
 *,
chty≥
);

227 
NCURSES_EXPORT
(Ë
£t_míu_f‹m©
 (
MENU
 *,,);

228 
NCURSES_EXPORT
(Ë
£t_míu_gªy
 (
MENU
 *,
chty≥
);

229 
NCURSES_EXPORT
(Ë
£t_míu_öô
 (
MENU
 *, 
Míu_Hook
);

230 
NCURSES_EXPORT
(Ë
£t_míu_ôems
 (
MENU
 *,
ITEM
 **);

231 
NCURSES_EXPORT
(Ë
£t_míu_m¨k
 (
MENU
 *, const *);

232 
NCURSES_EXPORT
(Ë
£t_míu_›ts
 (
MENU
 *,
Míu_O±i⁄s
);

233 
NCURSES_EXPORT
(Ë
£t_míu_∑d
 (
MENU
 *,);

234 
NCURSES_EXPORT
(Ë
£t_míu_∑âîn
 (
MENU
 *,const *);

235 
NCURSES_EXPORT
(Ë
£t_míu_sub
 (
MENU
 *,
WINDOW
 *);

236 
NCURSES_EXPORT
(Ë
£t_míu_ãrm
 (
MENU
 *, 
Míu_Hook
);

237 
NCURSES_EXPORT
(Ë
£t_míu_u£Ωå
 (
MENU
 *,*);

238 
NCURSES_EXPORT
(Ë
£t_míu_wö
 (
MENU
 *,
WINDOW
 *);

239 
NCURSES_EXPORT
(Ë
£t_t›_row
 (
MENU
 *,);

240 
NCURSES_EXPORT
(Ë
t›_row
 (c⁄° 
MENU
 *);

241 
NCURSES_EXPORT
(Ë
u≈o°_míu
 (
MENU
 *);

242 
NCURSES_EXPORT
(Ë
míu_ªque°_by_«me
 (const *);

243 
NCURSES_EXPORT
(Ë
£t_míu_•acög
 (
MENU
 *,,,);

244 
NCURSES_EXPORT
(Ë
míu_•acög
 (c⁄° 
MENU
 *,*,*,*);

247 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_vÆue
 (c⁄° 
ITEM
 *);

248 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_visibÀ
 (c⁄° 
ITEM
 *);

250 
NCURSES_EXPORT
(Ë
míu_f‹m©
 (c⁄° 
MENU
 *,*,*);

252 #ifde‡
__˝lu•lus


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

72 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


73 
	#NETDB_INTERNAL
 -1

	)

74 
	#NETDB_SUCCESS
 0

	)

75 
	#NO_ADDRESS
 
NO_DATA


	)

78 #ifde‡
__USE_XOPEN2K


80 
	#IPPORT_RESERVED
 1024

	)

83 #ifde‡
__USE_GNU


85 
	#SCOPE_DELIMITER
 '%'

	)

88 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


91 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

94 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

99 
	sho°ít


101 *
h_«me
;

102 **
h_Æü£s
;

103 
h_addπy≥
;

104 
h_Àngth
;

105 **
h_addr_li°
;

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


107 
	#h_addr
 
h_addr_li°
[0]

	)

116 
	`£tho°ít
 (
__°ay_›í
);

122 
	`ídho°ít
 ();

129 
ho°ít
 *
	`gëho°ít
 ();

136 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

137 
__ty≥
);

143 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

145 #ifde‡
__USE_MISC


154 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

166 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

168 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

169 *
__ª°ri˘
 
__h_î∫›
);

171 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

172 
__ty≥
,

173 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

175 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

176 *
__ª°ri˘
 
__h_î∫›
);

178 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

179 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

180 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

181 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

182 *
__ª°ri˘
 
__h_î∫›
);

184 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

185 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

186 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

187 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

188 *
__ª°ri˘
 
__h_î∫›
);

197 
	`£äëít
 (
__°ay_›í
);

203 
	`íd√ã¡
 ();

210 
√ã¡
 *
	`gë√ã¡
 ();

217 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

223 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

225 #ifdef 
__USE_MISC


236 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

237 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

238 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

239 *
__ª°ri˘
 
__h_î∫›
);

241 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

242 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

243 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

244 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

245 *
__ª°ri˘
 
__h_î∫›
);

247 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

248 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

249 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

250 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

251 *
__ª°ri˘
 
__h_î∫›
);

256 
	s£rvít


258 *
s_«me
;

259 **
s_Æü£s
;

260 
s_p‹t
;

261 *
s_¥Ÿo
;

269 
	`£t£rvít
 (
__°ay_›í
);

275 
	`íd£rvít
 ();

282 
£rvít
 *
	`gë£rvít
 ();

289 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

290 
__c⁄°
 *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

313 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

424 
__c⁄°
 *
__u£r
, __c⁄° *
domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

453 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

454 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

465 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

466 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 
__c⁄°
 *
__ª°ri˘
 
__«me
,

481 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

482 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 
__c⁄°
 *
__ª°ri˘
 
__«me
,

493 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

494 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

506 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

516 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

527 
	`ºesvp‹t
 (*
__Æp‹t
);

536 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

541 #ifdef 
__USE_POSIX


543 
	saddröfo


545 
ai_Êags
;

546 
ai_Ámûy
;

547 
ai_sockty≥
;

548 
ai_¥Ÿocﬁ
;

549 
sockÀn_t
 
ai_addæí
;

550 
sockaddr
 *
ai_addr
;

551 *
ai_ˇn⁄«me
;

552 
addröfo
 *
ai_√xt
;

555 #ifde‡
__USE_GNU


557 
	sgaicb


559 c⁄° *
¨_«me
;

560 c⁄° *
¨_£rvi˚
;

561 c⁄° 
addröfo
 *
¨_ªque°
;

562 
addröfo
 *
¨_ªsu…
;

564 
__ªtu∫
;

565 
__unu£d
[5];

569 
	#GAI_WAIT
 0

	)

570 
	#GAI_NOWAIT
 1

	)

574 
	#AI_PASSIVE
 0x0001

	)

575 
	#AI_CANONNAME
 0x0002

	)

576 
	#AI_NUMERICHOST
 0x0004

	)

577 
	#AI_V4MAPPED
 0x0008

	)

578 
	#AI_ALL
 0x0010

	)

579 
	#AI_ADDRCONFIG
 0x0020

	)

581 #ifde‡
__USE_GNU


582 
	#AI_IDN
 0x0040

	)

585 
	#AI_CANONIDN
 0x0080

	)

586 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

588 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

591 
	#AI_NUMERICSERV
 0x0400

	)

594 
	#EAI_BADFLAGS
 -1

	)

595 
	#EAI_NONAME
 -2

	)

596 
	#EAI_AGAIN
 -3

	)

597 
	#EAI_FAIL
 -4

	)

598 
	#EAI_FAMILY
 -6

	)

599 
	#EAI_SOCKTYPE
 -7

	)

600 
	#EAI_SERVICE
 -8

	)

601 
	#EAI_MEMORY
 -10

	)

602 
	#EAI_SYSTEM
 -11

	)

603 
	#EAI_OVERFLOW
 -12

	)

604 #ifde‡
__USE_GNU


605 
	#EAI_NODATA
 -5

	)

606 
	#EAI_ADDRFAMILY
 -9

	)

607 
	#EAI_INPROGRESS
 -100

	)

608 
	#EAI_CANCELED
 -101

	)

609 
	#EAI_NOTCANCELED
 -102

	)

610 
	#EAI_ALLDONE
 -103

	)

611 
	#EAI_INTR
 -104

	)

612 
	#EAI_IDN_ENCODE
 -105

	)

615 #ifde‡
__USE_MISC


616 
	#NI_MAXHOST
 1025

	)

617 
	#NI_MAXSERV
 32

	)

620 
	#NI_NUMERICHOST
 1

	)

621 
	#NI_NUMERICSERV
 2

	)

622 
	#NI_NOFQDN
 4

	)

623 
	#NI_NAMEREQD
 8

	)

624 
	#NI_DGRAM
 16

	)

625 #ifde‡
__USE_GNU


626 
	#NI_IDN
 32

	)

627 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

629 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

638 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

639 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

640 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

641 
addröfo
 **
__ª°ri˘
 
__∑i
);

644 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

647 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

653 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

654 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

655 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

656 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

659 #ifde‡
__USE_GNU


668 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

669 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

679 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

680 
__c⁄°
 
time•ec
 *
__timeout
);

683 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

686 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

689 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_IPV6
 = 41,

57 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

58 
	mIPPROTO_ROUTING
 = 43,

59 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

60 
	mIPPROTO_FRAGMENT
 = 44,

61 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

62 
	mIPPROTO_RSVP
 = 46,

63 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

64 
	mIPPROTO_GRE
 = 47,

65 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

66 
	mIPPROTO_ESP
 = 50,

67 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

68 
	mIPPROTO_AH
 = 51,

69 
	#IPPROTO_AH
 
IPPROTO_AH


	)

70 
	mIPPROTO_ICMPV6
 = 58,

71 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

72 
	mIPPROTO_NONE
 = 59,

73 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

74 
	mIPPROTO_DSTOPTS
 = 60,

75 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

76 
	mIPPROTO_MTP
 = 92,

77 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_RAW
 = 255,

87 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

88 
	mIPPROTO_MAX


93 
uöt16_t
 
	tö_p‹t_t
;

98 
	mIPPORT_ECHO
 = 7,

99 
	mIPPORT_DISCARD
 = 9,

100 
	mIPPORT_SYSTAT
 = 11,

101 
	mIPPORT_DAYTIME
 = 13,

102 
	mIPPORT_NETSTAT
 = 15,

103 
	mIPPORT_FTP
 = 21,

104 
	mIPPORT_TELNET
 = 23,

105 
	mIPPORT_SMTP
 = 25,

106 
	mIPPORT_TIMESERVER
 = 37,

107 
	mIPPORT_NAMESERVER
 = 42,

108 
	mIPPORT_WHOIS
 = 43,

109 
	mIPPORT_MTP
 = 57,

111 
	mIPPORT_TFTP
 = 69,

112 
	mIPPORT_RJE
 = 77,

113 
	mIPPORT_FINGER
 = 79,

114 
	mIPPORT_TTYLINK
 = 87,

115 
	mIPPORT_SUPDUP
 = 95,

118 
	mIPPORT_EXECSERVER
 = 512,

119 
	mIPPORT_LOGINSERVER
 = 513,

120 
	mIPPORT_CMDSERVER
 = 514,

121 
	mIPPORT_EFSSERVER
 = 520,

124 
	mIPPORT_BIFFUDP
 = 512,

125 
	mIPPORT_WHOSERVER
 = 513,

126 
	mIPPORT_ROUTESERVER
 = 520,

129 
	mIPPORT_RESERVED
 = 1024,

132 
	mIPPORT_USERRESERVED
 = 5000

137 
uöt32_t
 
	tö_addr_t
;

138 
	sö_addr


140 
ö_addr_t
 
	ms_addr
;

149 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

150 
	#IN_CLASSA_NET
 0xff000000

	)

151 
	#IN_CLASSA_NSHIFT
 24

	)

152 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

153 
	#IN_CLASSA_MAX
 128

	)

155 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

156 
	#IN_CLASSB_NET
 0xffff0000

	)

157 
	#IN_CLASSB_NSHIFT
 16

	)

158 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

159 
	#IN_CLASSB_MAX
 65536

	)

161 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

162 
	#IN_CLASSC_NET
 0xffffff00

	)

163 
	#IN_CLASSC_NSHIFT
 8

	)

164 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

166 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

167 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

169 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

170 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

173 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

175 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

177 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

180 
	#IN_LOOPBACKNET
 127

	)

182 #i‚de‡
INADDR_LOOPBACK


183 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

187 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

188 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

189 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

190 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

194 
	sö6_addr


198 
uöt8_t
 
	m__u6_addr8
[16];

199 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


200 
uöt16_t
 
	m__u6_addr16
[8];

201 
uöt32_t
 
	m__u6_addr32
[4];

203 } 
	m__ö6_u
;

204 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

205 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


206 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

207 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

211 c⁄° 
ö6_addr
 
ö6addr_™y
;

212 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

213 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

214 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

216 
	#INET_ADDRSTRLEN
 16

	)

217 
	#INET6_ADDRSTRLEN
 46

	)

221 
	ssockaddr_ö


223 
__SOCKADDR_COMMON
 (
sö_
);

224 
ö_p‹t_t
 
	msö_p‹t
;

225 
ö_addr
 
	msö_addr
;

228 
	msö_zîo
[ (
sockaddr
) -

229 
__SOCKADDR_COMMON_SIZE
 -

230  (
ö_p‹t_t
) -

231  (
ö_addr
)];

235 
	ssockaddr_ö6


237 
__SOCKADDR_COMMON
 (
sö6_
);

238 
ö_p‹t_t
 
	msö6_p‹t
;

239 
uöt32_t
 
	msö6_Êowöfo
;

240 
ö6_addr
 
	msö6_addr
;

241 
uöt32_t
 
	msö6_sc›e_id
;

245 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


247 
	sù_mªq


250 
ö_addr
 
	mimr_mu…üddr
;

253 
ö_addr
 
	mimr_öãrÁ˚
;

256 
	sù_mªq_sour˚


259 
ö_addr
 
	mimr_mu…üddr
;

262 
ö_addr
 
	mimr_öãrÁ˚
;

265 
ö_addr
 
	mimr_sour˚addr
;

271 
	sùv6_mªq


274 
ö6_addr
 
	mùv6mr_mu…üddr
;

277 
	mùv6mr_öãrÁ˚
;

281 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


283 
	sgroup_ªq


286 
uöt32_t
 
	mgr_öãrÁ˚
;

289 
sockaddr_°‹age
 
	mgr_group
;

292 
	sgroup_sour˚_ªq


295 
uöt32_t
 
	mg§_öãrÁ˚
;

298 
sockaddr_°‹age
 
	mg§_group
;

301 
sockaddr_°‹age
 
	mg§_sour˚
;

306 
	sù_msfûãr


309 
ö_addr
 
	mimsf_mu…üddr
;

312 
ö_addr
 
	mimsf_öãrÁ˚
;

315 
uöt32_t
 
	mimsf_fmode
;

318 
uöt32_t
 
	mimsf_num§c
;

320 
ö_addr
 
	mimsf_¶i°
[1];

323 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

324 -  (
ö_addr
) \

325 + (
num§c
Ë*  (
ö_addr
))

	)

327 
	sgroup_fûãr


330 
uöt32_t
 
	mgf_öãrÁ˚
;

333 
sockaddr_°‹age
 
	mgf_group
;

336 
uöt32_t
 
	mgf_fmode
;

339 
uöt32_t
 
	mgf_num§c
;

341 
sockaddr_°‹age
 
	mgf_¶i°
[1];

344 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

345 -  (
sockaddr_°‹age
) \

346 + ((
num§c
) \

347 *  (
sockaddr_°‹age
)))

	)

352 
	~<bôs/ö.h
>

361 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

362 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

363 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

364 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

365 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

369 
	~<ídün.h
>

372 
	~<bôs/byãsw≠.h
>

374 #ifde‡
__OPTIMIZE__


378 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


381 
	#¡ohl
(
x
Ë(x)

	)

382 
	#¡ohs
(
x
Ë(x)

	)

383 
	#ht⁄l
(
x
Ë(x)

	)

384 
	#ht⁄s
(
x
Ë(x)

	)

386 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


387 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

388 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

389 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

390 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

395 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

396 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

397 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

398 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

399 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

401 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

402 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

404 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

405 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

407 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

409 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

410 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

411 =
	`ht⁄l
 (0x„800000))

	)

413 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„c00000))

	)

417 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

419 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

420 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

422 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

423 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

425 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

426 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

428 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

429 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

430 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

431 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

432 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

434 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


436 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

439 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

440 
__THROW
;

444 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

445 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

446 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

448 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

452 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

456 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

460 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

465 #ifde‡
__USE_GNU


467 
	sö6_pktöfo


469 
ö6_addr
 
ùi6_addr
;

470 
ùi6_ifödex
;

474 
	sù6_mtuöfo


476 
sockaddr_ö6
 
ù6m_addr
;

477 
uöt32_t
 
ù6m_mtu
;

482 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

483 
__THROW
 
__©åibuã_dïªˇãd__
;

484 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

485 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

486 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

487 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

488 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

489 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

490 
__mu…x
, 
__∂usy
)

491 
__THROW
 
__©åibuã_dïªˇãd__
;

492 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

493 
uöt8_t
 **
__çåp
)

494 
__THROW
 
__©åibuã_dïªˇãd__
;

495 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

496 
uöt8_t
 **
__çåp
, 
__ty≥
)

497 
__THROW
 
__©åibuã_dïªˇãd__
;

501 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

502 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

503 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

504 **
__d©abuÂ
Ë
__THROW
;

505 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

506 
__THROW
;

507 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

508 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

509 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

510 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

511 **
__d©abuÂ
Ë
__THROW
;

512 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

513 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

514 **
__d©abuÂ
Ë
__THROW
;

515 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

516 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

520 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

521 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

522 
__£gmíts
Ë
__THROW
;

523 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

524 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

525 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

526 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

527 
__THROW
;

533 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

534 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

535 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

536 
__THROW
;

539 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

540 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

541 
uöt32_t
 
__num§c
,

542 
__c⁄°
 
ö_addr
 *
__¶i°
)

543 
__THROW
;

547 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

548 
__c⁄°
 
sockaddr
 *
__group
,

549 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

550 
uöt32_t
 *
__num§c
,

551 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

554 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

555 
__c⁄°
 
sockaddr
 *
__group
,

556 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

557 
uöt32_t
 
__num§c
,

558 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

561 
__END_DECLS


	@/usr/include/png.h

382 #i‚de‡
PNG_H


383 
	#PNG_H


	)

392 
	#PNG_LIBPNG_VER_STRING
 "1.2.27"

	)

393 
	#PNG_HEADER_VERSION_STRING
 \

394 "Üib≤g vîsi⁄ 1.2.27 - A¥û 29, 2008\n"

	)

396 
	#PNG_LIBPNG_VER_SONUM
 0

	)

397 
	#PNG_LIBPNG_VER_DLLNUM
 13

	)

400 
	#PNG_LIBPNG_VER_MAJOR
 1

	)

401 
	#PNG_LIBPNG_VER_MINOR
 2

	)

402 
	#PNG_LIBPNG_VER_RELEASE
 27

	)

406 
	#PNG_LIBPNG_VER_BUILD
 0

	)

409 
	#PNG_LIBPNG_BUILD_ALPHA
 1

	)

410 
	#PNG_LIBPNG_BUILD_BETA
 2

	)

411 
	#PNG_LIBPNG_BUILD_RC
 3

	)

412 
	#PNG_LIBPNG_BUILD_STABLE
 4

	)

413 
	#PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK
 7

	)

416 
	#PNG_LIBPNG_BUILD_PATCH
 8

	)

418 
	#PNG_LIBPNG_BUILD_PRIVATE
 16

	)

420 
	#PNG_LIBPNG_BUILD_SPECIAL
 32

	)

423 
	#PNG_LIBPNG_BUILD_BASE_TYPE
 
PNG_LIBPNG_BUILD_STABLE


	)

430 
	#PNG_LIBPNG_VER
 10227

	)

432 #i‚de‡
PNG_VERSION_INFO_ONLY


434 
	~"zlib.h
"

438 
	~"≤gc⁄f.h
"

453 #i‡
deföed
(
PNG_USER_PRIVATEBUILD
)

454 
	#PNG_LIBPNG_BUILD_TYPE
 \

455 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_PRIVATE
)

	)

457 #i‡
deföed
(
PNG_LIBPNG_SPECIALBUILD
)

458 
	#PNG_LIBPNG_BUILD_TYPE
 \

459 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_SPECIAL
)

	)

461 
	#PNG_LIBPNG_BUILD_TYPE
 (
PNG_LIBPNG_BUILD_BASE_TYPE
)

	)

465 #i‚de‡
PNG_VERSION_INFO_ONLY


468 #ifde‡
__˝lu•lus


478 #i‚de‡
PNG_NO_TYPECAST_NULL


479 
	#öt_p_NULL
 (*)
NULL


	)

480 
	#≤g_byãp_NULL
 (
≤g_byãp
)
NULL


	)

481 
	#≤g_byãµ_NULL
 (
≤g_byãµ
)
NULL


	)

482 
	#≤g_doubÀp_NULL
 (
≤g_doubÀp
)
NULL


	)

483 
	#≤g_îr‹_±r_NULL
 (
≤g_îr‹_±r
)
NULL


	)

484 
	#≤g_Êush_±r_NULL
 (
≤g_Êush_±r
)
NULL


	)

485 
	#≤g_‰ì_±r_NULL
 (
≤g_‰ì_±r
)
NULL


	)

486 
	#≤g_öf›p_NULL
 (
≤g_öf›p
)
NULL


	)

487 
	#≤g_mÆloc_±r_NULL
 (
≤g_mÆloc_±r
)
NULL


	)

488 
	#≤g_ªad_°©us_±r_NULL
 (
≤g_ªad_°©us_±r
)
NULL


	)

489 
	#≤g_rw_±r_NULL
 (
≤g_rw_±r
)
NULL


	)

490 
	#≤g_°ru˘p_NULL
 (
≤g_°ru˘p
)
NULL


	)

491 
	#≤g_uöt_16p_NULL
 (
≤g_uöt_16p
)
NULL


	)

492 
	#≤g_voidp_NULL
 (
≤g_voidp
)
NULL


	)

493 
	#≤g_wrôe_°©us_±r_NULL
 (
≤g_wrôe_°©us_±r
)
NULL


	)

495 
	#öt_p_NULL
 
NULL


	)

496 
	#≤g_byãp_NULL
 
NULL


	)

497 
	#≤g_byãµ_NULL
 
NULL


	)

498 
	#≤g_doubÀp_NULL
 
NULL


	)

499 
	#≤g_îr‹_±r_NULL
 
NULL


	)

500 
	#≤g_Êush_±r_NULL
 
NULL


	)

501 
	#≤g_‰ì_±r_NULL
 
NULL


	)

502 
	#≤g_öf›p_NULL
 
NULL


	)

503 
	#≤g_mÆloc_±r_NULL
 
NULL


	)

504 
	#≤g_ªad_°©us_±r_NULL
 
NULL


	)

505 
	#≤g_rw_±r_NULL
 
NULL


	)

506 
	#≤g_°ru˘p_NULL
 
NULL


	)

507 
	#≤g_uöt_16p_NULL
 
NULL


	)

508 
	#≤g_voidp_NULL
 
NULL


	)

509 
	#≤g_wrôe_°©us_±r_NULL
 
NULL


	)

513 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

517 #ifde‡
PNG_USE_GLOBAL_ARRAYS


518 
PNG_EXPORT_VAR
 (
PNG_CONST
 Ë
≤g_lib≤g_vî
[18];

521 
	#≤g_lib≤g_vî
 
	`≤g_gë_hódî_vî
(
NULL
)

	)

524 #ifde‡
PNG_USE_GLOBAL_ARRAYS


527 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_°¨t
[7];

528 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_öc
[7];

529 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_y°¨t
[7];

530 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_yöc
[7];

531 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_mask
[7];

532 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_d•_mask
[7];

544 
	s≤g_cﬁ‹_°ru˘


546 
≤g_byã
 
ªd
;

547 
≤g_byã
 
gªí
;

548 
≤g_byã
 
blue
;

549 } 
	t≤g_cﬁ‹
;

550 
≤g_cﬁ‹
 
	tFAR
 * 
	t≤g_cﬁ‹p
;

551 
≤g_cﬁ‹
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹µ
;

553 
	s≤g_cﬁ‹_16_°ru˘


555 
≤g_byã
 
ödex
;

556 
≤g_uöt_16
 
ªd
;

557 
≤g_uöt_16
 
gªí
;

558 
≤g_uöt_16
 
blue
;

559 
≤g_uöt_16
 
gøy
;

560 } 
	t≤g_cﬁ‹_16
;

561 
≤g_cﬁ‹_16
 
	tFAR
 * 
	t≤g_cﬁ‹_16p
;

562 
≤g_cﬁ‹_16
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_16µ
;

564 
	s≤g_cﬁ‹_8_°ru˘


566 
≤g_byã
 
ªd
;

567 
≤g_byã
 
gªí
;

568 
≤g_byã
 
blue
;

569 
≤g_byã
 
gøy
;

570 
≤g_byã
 
Æpha
;

571 } 
	t≤g_cﬁ‹_8
;

572 
≤g_cﬁ‹_8
 
	tFAR
 * 
	t≤g_cﬁ‹_8p
;

573 
≤g_cﬁ‹_8
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_8µ
;

579 
	s≤g_sPLT_íåy_°ru˘


581 
≤g_uöt_16
 
ªd
;

582 
≤g_uöt_16
 
gªí
;

583 
≤g_uöt_16
 
blue
;

584 
≤g_uöt_16
 
Æpha
;

585 
≤g_uöt_16
 
‰equícy
;

586 } 
	t≤g_sPLT_íåy
;

587 
≤g_sPLT_íåy
 
	tFAR
 * 
	t≤g_sPLT_íåyp
;

588 
≤g_sPLT_íåy
 
	tFAR
 * FAR * 
	t≤g_sPLT_íåyµ
;

595 
	s≤g_sPLT_°ru˘


597 
≤g_ch¨p
 
«me
;

598 
≤g_byã
 
dïth
;

599 
≤g_sPLT_íåyp
 
íåõs
;

600 
≤g_öt_32
 
√¡rõs
;

601 } 
	t≤g_sPLT_t
;

602 
≤g_sPLT_t
 
	tFAR
 * 
	t≤g_sPLT_ç
;

603 
≤g_sPLT_t
 
	tFAR
 * FAR * 
	t≤g_sPLT_çp
;

605 #ifde‡
PNG_TEXT_SUPPORTED


614 
	s≤g_ãxt_°ru˘


616 
com¥essi⁄
;

621 
≤g_ch¨p
 
key
;

622 
≤g_ch¨p
 
ãxt
;

624 
≤g_size_t
 
ãxt_Àngth
;

625 #ifde‡
PNG_iTXt_SUPPORTED


626 
≤g_size_t
 
ôxt_Àngth
;

627 
≤g_ch¨p
 
œng
;

629 
≤g_ch¨p
 
œng_key
;

632 } 
	t≤g_ãxt
;

633 
≤g_ãxt
 
	tFAR
 * 
	t≤g_ãxç
;

634 
≤g_ãxt
 
	tFAR
 * FAR * 
	t≤g_ãxçp
;

639 
	#PNG_TEXT_COMPRESSION_NONE_WR
 -3

	)

640 
	#PNG_TEXT_COMPRESSION_zTXt_WR
 -2

	)

641 
	#PNG_TEXT_COMPRESSION_NONE
 -1

	)

642 
	#PNG_TEXT_COMPRESSION_zTXt
 0

	)

643 
	#PNG_ITXT_COMPRESSION_NONE
 1

	)

644 
	#PNG_ITXT_COMPRESSION_zTXt
 2

	)

645 
	#PNG_TEXT_COMPRESSION_LAST
 3

	)

653 
	s≤g_time_°ru˘


655 
≤g_uöt_16
 
yór
;

656 
≤g_byã
 
m⁄th
;

657 
≤g_byã
 
day
;

658 
≤g_byã
 
hour
;

659 
≤g_byã
 
möuã
;

660 
≤g_byã
 
£c⁄d
;

661 } 
	t≤g_time
;

662 
≤g_time
 
	tFAR
 * 
	t≤g_timï
;

663 
≤g_time
 
	tFAR
 * FAR * 
	t≤g_timïp
;

665 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

671 
	#PNG_CHUNK_NAME_LENGTH
 5

	)

672 
	s≤g_unknown_chunk_t


674 
≤g_byã
 
«me
[
PNG_CHUNK_NAME_LENGTH
];

675 
≤g_byã
 *
d©a
;

676 
≤g_size_t
 
size
;

679 
≤g_byã
 
loˇti⁄
;

681 
	t≤g_unknown_chunk
;

682 
≤g_unknown_chunk
 
	tFAR
 * 
	t≤g_unknown_chunkp
;

683 
≤g_unknown_chunk
 
	tFAR
 * FAR * 
	t≤g_unknown_chunkµ
;

725 
	s≤g_öfo_°ru˘


728 
≤g_uöt_32
 
width
;

729 
≤g_uöt_32
 
height
;

730 
≤g_uöt_32
 
vÆid
;

731 
≤g_uöt_32
 
rowbyãs
;

732 
≤g_cﬁ‹p
 
∑Àâe
;

733 
≤g_uöt_16
 
num_∑Àâe
;

734 
≤g_uöt_16
 
num_å™s
;

735 
≤g_byã
 
bô_dïth
;

736 
≤g_byã
 
cﬁ‹_ty≥
;

738 
≤g_byã
 
com¥essi⁄_ty≥
;

739 
≤g_byã
 
fûãr_ty≥
;

740 
≤g_byã
 
öãæa˚_ty≥
;

743 
≤g_byã
 
ch™√ls
;

744 
≤g_byã
 
pixñ_dïth
;

745 
≤g_byã
 
•¨e_byã
;

746 
≤g_byã
 
sig«tuª
[8];

754 #i‡
deföed
(
PNG_gAMA_SUPPORTED
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

759 
gamma
;

762 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

765 
≤g_byã
 
§gb_öã¡
;

768 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

777 
num_ãxt
;

778 
max_ãxt
;

779 
≤g_ãxç
 
ãxt
;

782 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

786 
≤g_time
 
mod_time
;

789 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

796 
≤g_cﬁ‹_8
 
sig_bô
;

799 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_EXPAND_SUPPORTED
) || \

800 
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

810 
≤g_byãp
 
å™s
;

811 
≤g_cﬁ‹_16
 
å™s_vÆues
;

814 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

821 
≤g_cﬁ‹_16
 
background
;

824 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

830 
≤g_öt_32
 
x_off£t
;

831 
≤g_öt_32
 
y_off£t
;

832 
≤g_byã
 
off£t_unô_ty≥
;

835 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

840 
≤g_uöt_32
 
x_pixñs_≥r_unô
;

841 
≤g_uöt_32
 
y_pixñs_≥r_unô
;

842 
≤g_byã
 
phys_unô_ty≥
;

845 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

852 
≤g_uöt_16p
 
hi°
;

855 #ifde‡
PNG_cHRM_SUPPORTED


862 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


863 
x_whôe
;

864 
y_whôe
;

865 
x_ªd
;

866 
y_ªd
;

867 
x_gªí
;

868 
y_gªí
;

869 
x_blue
;

870 
y_blue
;

874 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

886 
≤g_ch¨p
 
pˇl_puΩo£
;

887 
≤g_öt_32
 
pˇl_X0
;

888 
≤g_öt_32
 
pˇl_X1
;

889 
≤g_ch¨p
 
pˇl_unôs
;

890 
≤g_ch¨µ
 
pˇl_∑øms
;

891 
≤g_byã
 
pˇl_ty≥
;

892 
≤g_byã
 
pˇl_≈¨ams
;

896 #ifde‡
PNG_FREE_ME_SUPPORTED


897 
≤g_uöt_32
 
‰ì_me
;

900 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

902 
≤g_unknown_chunkp
 
unknown_chunks
;

903 
≤g_size_t
 
unknown_chunks_num
;

906 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

908 
≤g_ch¨p
 
ic˝_«me
;

909 
≤g_ch¨p
 
ic˝_¥ofûe
;

911 
≤g_uöt_32
 
ic˝_¥oÊí
;

912 
≤g_byã
 
ic˝_com¥essi⁄
;

915 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

917 
≤g_sPLT_ç
 
•…_∑Àâes
;

918 
≤g_uöt_32
 
•…_∑Àâes_num
;

921 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

929 
≤g_byã
 
sˇl_unô
;

930 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


931 
sˇl_pixñ_width
;

932 
sˇl_pixñ_height
;

934 #ifde‡
PNG_FIXED_POINT_SUPPORTED


935 
≤g_ch¨p
 
sˇl_s_width
;

936 
≤g_ch¨p
 
sˇl_s_height
;

940 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

943 
≤g_byãµ
 
row_poöãrs
;

946 #i‡
deföed
(
PNG_FIXED_POINT_SUPPORTED
Ë&& deföed(
PNG_gAMA_SUPPORTED
)

947 
≤g_fixed_poöt
 
öt_gamma
;

950 #i‡
deföed
(
PNG_cHRM_SUPPORTED
Ë&& deföed(
PNG_FIXED_POINT_SUPPORTED
)

951 
≤g_fixed_poöt
 
öt_x_whôe
;

952 
≤g_fixed_poöt
 
öt_y_whôe
;

953 
≤g_fixed_poöt
 
öt_x_ªd
;

954 
≤g_fixed_poöt
 
öt_y_ªd
;

955 
≤g_fixed_poöt
 
öt_x_gªí
;

956 
≤g_fixed_poöt
 
öt_y_gªí
;

957 
≤g_fixed_poöt
 
öt_x_blue
;

958 
≤g_fixed_poöt
 
öt_y_blue
;

961 } 
	t≤g_öfo
;

963 
≤g_öfo
 
	tFAR
 * 
	t≤g_öf›
;

964 
≤g_öfo
 
	tFAR
 * FAR * 
	t≤g_öf›p
;

967 
	#PNG_UINT_31_MAX
 ((
≤g_uöt_32
)0x7fffffffL)

	)

968 
	#PNG_UINT_32_MAX
 ((
≤g_uöt_32
)(-1))

	)

969 
	#PNG_SIZE_MAX
 ((
≤g_size_t
)(-1))

	)

970 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

972 
	#PNG_MAX_UINT
 
PNG_UINT_31_MAX


	)

977 
	#PNG_COLOR_MASK_PALETTE
 1

	)

978 
	#PNG_COLOR_MASK_COLOR
 2

	)

979 
	#PNG_COLOR_MASK_ALPHA
 4

	)

982 
	#PNG_COLOR_TYPE_GRAY
 0

	)

983 
	#PNG_COLOR_TYPE_PALETTE
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_PALETTE
)

	)

984 
	#PNG_COLOR_TYPE_RGB
 (
PNG_COLOR_MASK_COLOR
)

	)

985 
	#PNG_COLOR_TYPE_RGB_ALPHA
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_ALPHA
)

	)

986 
	#PNG_COLOR_TYPE_GRAY_ALPHA
 (
PNG_COLOR_MASK_ALPHA
)

	)

988 
	#PNG_COLOR_TYPE_RGBA
 
PNG_COLOR_TYPE_RGB_ALPHA


	)

989 
	#PNG_COLOR_TYPE_GA
 
PNG_COLOR_TYPE_GRAY_ALPHA


	)

992 
	#PNG_COMPRESSION_TYPE_BASE
 0

	)

993 
	#PNG_COMPRESSION_TYPE_DEFAULT
 
PNG_COMPRESSION_TYPE_BASE


	)

996 
	#PNG_FILTER_TYPE_BASE
 0

	)

997 
	#PNG_INTRAPIXEL_DIFFERENCING
 64

	)

998 
	#PNG_FILTER_TYPE_DEFAULT
 
PNG_FILTER_TYPE_BASE


	)

1001 
	#PNG_INTERLACE_NONE
 0

	)

1002 
	#PNG_INTERLACE_ADAM7
 1

	)

1003 
	#PNG_INTERLACE_LAST
 2

	)

1006 
	#PNG_OFFSET_PIXEL
 0

	)

1007 
	#PNG_OFFSET_MICROMETER
 1

	)

1008 
	#PNG_OFFSET_LAST
 2

	)

1011 
	#PNG_EQUATION_LINEAR
 0

	)

1012 
	#PNG_EQUATION_BASE_E
 1

	)

1013 
	#PNG_EQUATION_ARBITRARY
 2

	)

1014 
	#PNG_EQUATION_HYPERBOLIC
 3

	)

1015 
	#PNG_EQUATION_LAST
 4

	)

1018 
	#PNG_SCALE_UNKNOWN
 0

	)

1019 
	#PNG_SCALE_METER
 1

	)

1020 
	#PNG_SCALE_RADIAN
 2

	)

1021 
	#PNG_SCALE_LAST
 3

	)

1024 
	#PNG_RESOLUTION_UNKNOWN
 0

	)

1025 
	#PNG_RESOLUTION_METER
 1

	)

1026 
	#PNG_RESOLUTION_LAST
 2

	)

1029 
	#PNG_sRGB_INTENT_PERCEPTUAL
 0

	)

1030 
	#PNG_sRGB_INTENT_RELATIVE
 1

	)

1031 
	#PNG_sRGB_INTENT_SATURATION
 2

	)

1032 
	#PNG_sRGB_INTENT_ABSOLUTE
 3

	)

1033 
	#PNG_sRGB_INTENT_LAST
 4

	)

1036 
	#PNG_KEYWORD_MAX_LENGTH
 79

	)

1039 
	#PNG_MAX_PALETTE_LENGTH
 256

	)

1046 
	#PNG_INFO_gAMA
 0x0001

	)

1047 
	#PNG_INFO_sBIT
 0x0002

	)

1048 
	#PNG_INFO_cHRM
 0x0004

	)

1049 
	#PNG_INFO_PLTE
 0x0008

	)

1050 
	#PNG_INFO_tRNS
 0x0010

	)

1051 
	#PNG_INFO_bKGD
 0x0020

	)

1052 
	#PNG_INFO_hIST
 0x0040

	)

1053 
	#PNG_INFO_pHYs
 0x0080

	)

1054 
	#PNG_INFO_oFFs
 0x0100

	)

1055 
	#PNG_INFO_tIME
 0x0200

	)

1056 
	#PNG_INFO_pCAL
 0x0400

	)

1057 
	#PNG_INFO_sRGB
 0x0800

	)

1058 
	#PNG_INFO_iCCP
 0x1000

	)

1059 
	#PNG_INFO_sPLT
 0x2000

	)

1060 
	#PNG_INFO_sCAL
 0x4000

	)

1061 
	#PNG_INFO_IDAT
 0x8000L

	)

1067 
	s≤g_row_öfo_°ru˘


1069 
≤g_uöt_32
 
width
;

1070 
≤g_uöt_32
 
rowbyãs
;

1071 
≤g_byã
 
cﬁ‹_ty≥
;

1072 
≤g_byã
 
bô_dïth
;

1073 
≤g_byã
 
ch™√ls
;

1074 
≤g_byã
 
pixñ_dïth
;

1075 } 
	t≤g_row_öfo
;

1077 
≤g_row_öfo
 
	tFAR
 * 
	t≤g_row_öf›
;

1078 
≤g_row_öfo
 
	tFAR
 * FAR * 
	t≤g_row_öf›p
;

1086 
≤g_°ru˘_def
 
	t≤g_°ru˘
;

1087 
≤g_°ru˘
 
	tFAR
 * 
	t≤g_°ru˘p
;

1089 (
PNGAPI
 *
	t≤g_îr‹_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_c⁄°_ch¨p
));

1090 (
PNGAPI
 *
	t≤g_rw_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
, 
	t≤g_size_t
));

1091 (
PNGAPI
 *
	t≤g_Êush_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1092 (
PNGAPI
 *
	t≤g_ªad_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1094 (
PNGAPI
 *
	t≤g_wrôe_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1097 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1098 (
PNGAPI
 *
	t≤g_¥ogªssive_öfo_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1099 (
PNGAPI
 *
	t≤g_¥ogªssive_íd_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1100 (
PNGAPI
 *
	t≤g_¥ogªssive_row_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
,

1101 
	t≤g_uöt_32
, ));

1104 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1105 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1106 
deföed
(
PNG_LEGACY_SUPPORTED
)

1107 (
PNGAPI
 *
	t≤g_u£r_å™sf‹m_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
,

1108 
	t≤g_row_öf›
, 
	t≤g_byãp
));

1111 #i‡
deföed
(
PNG_USER_CHUNKS_SUPPORTED
)

1112 (
PNGAPI
 *
	t≤g_u£r_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_unknown_chunkp
));

1114 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1115 (
PNGAPI
 *
	t≤g_unknown_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1119 
	#PNG_TRANSFORM_IDENTITY
 0x0000

	)

1120 
	#PNG_TRANSFORM_STRIP_16
 0x0001

	)

1121 
	#PNG_TRANSFORM_STRIP_ALPHA
 0x0002

	)

1122 
	#PNG_TRANSFORM_PACKING
 0x0004

	)

1123 
	#PNG_TRANSFORM_PACKSWAP
 0x0008

	)

1124 
	#PNG_TRANSFORM_EXPAND
 0x0010

	)

1125 
	#PNG_TRANSFORM_INVERT_MONO
 0x0020

	)

1126 
	#PNG_TRANSFORM_SHIFT
 0x0040

	)

1127 
	#PNG_TRANSFORM_BGR
 0x0080

	)

1128 
	#PNG_TRANSFORM_SWAP_ALPHA
 0x0100

	)

1129 
	#PNG_TRANSFORM_SWAP_ENDIAN
 0x0200

	)

1130 
	#PNG_TRANSFORM_INVERT_ALPHA
 0x0400

	)

1131 
	#PNG_TRANSFORM_STRIP_FILLER
 0x0800

	)

1134 
	#PNG_FLAG_MNG_EMPTY_PLTE
 0x01

	)

1135 
	#PNG_FLAG_MNG_FILTER_64
 0x04

	)

1136 
	#PNG_ALL_MNG_FEATURES
 0x05

	)

1138 
≤g_voidp
 (*
	t≤g_mÆloc_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_size_t
));

1139 (*
≤g_‰ì_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_voidp
));

1148 
	s≤g_°ru˘_def


1150 #ifde‡
PNG_SETJMP_SUPPORTED


1151 
jmp_buf
 
jmpbuf
;

1153 
≤g_îr‹_±r
 
îr‹_‚
;

1154 
≤g_îr‹_±r
 
w¨nög_‚
;

1155 
≤g_voidp
 
îr‹_±r
;

1156 
≤g_rw_±r
 
wrôe_d©a_‚
;

1157 
≤g_rw_±r
 
ªad_d©a_‚
;

1158 
≤g_voidp
 
io_±r
;

1160 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
)

1161 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
;

1164 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1165 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
;

1169 #i‡
deföed
(
PNG_USER_TRANSFORM_PTR_SUPPORTED
)

1170 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1171 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1172 
≤g_voidp
 
u£r_å™sf‹m_±r
;

1173 
≤g_byã
 
u£r_å™sf‹m_dïth
;

1174 
≤g_byã
 
u£r_å™sf‹m_ch™√ls
;

1178 
≤g_uöt_32
 
mode
;

1179 
≤g_uöt_32
 
Êags
;

1180 
≤g_uöt_32
 
å™sf‹m©i⁄s
;

1182 
z_°ªam
 
z°ªam
;

1183 
≤g_byãp
 
zbuf
;

1184 
≤g_size_t
 
zbuf_size
;

1185 
zlib_Àvñ
;

1186 
zlib_mëhod
;

1187 
zlib_wödow_bôs
;

1188 
zlib_mem_Àvñ
;

1189 
zlib_°øãgy
;

1191 
≤g_uöt_32
 
width
;

1192 
≤g_uöt_32
 
height
;

1193 
≤g_uöt_32
 
num_rows
;

1194 
≤g_uöt_32
 
u§_width
;

1195 
≤g_uöt_32
 
rowbyãs
;

1196 
≤g_uöt_32
 
úowbyãs
;

1197 
≤g_uöt_32
 
iwidth
;

1198 
≤g_uöt_32
 
row_numbî
;

1199 
≤g_byãp
 
¥ev_row
;

1200 
≤g_byãp
 
row_buf
;

1201 #i‚de‡
PNG_NO_WRITE_FILTERING


1202 
≤g_byãp
 
sub_row
;

1203 
≤g_byãp
 
up_row
;

1204 
≤g_byãp
 
avg_row
;

1205 
≤g_byãp
 
∑ëh_row
;

1207 
≤g_row_öfo
 
row_öfo
;

1209 
≤g_uöt_32
 
id©_size
;

1210 
≤g_uöt_32
 
¸c
;

1211 
≤g_cﬁ‹p
 
∑Àâe
;

1212 
≤g_uöt_16
 
num_∑Àâe
;

1213 
≤g_uöt_16
 
num_å™s
;

1214 
≤g_byã
 
chunk_«me
[5];

1215 
≤g_byã
 
com¥essi⁄
;

1216 
≤g_byã
 
fûãr
;

1217 
≤g_byã
 
öãæa˚d
;

1218 
≤g_byã
 
∑ss
;

1219 
≤g_byã
 
do_fûãr
;

1220 
≤g_byã
 
cﬁ‹_ty≥
;

1221 
≤g_byã
 
bô_dïth
;

1222 
≤g_byã
 
u§_bô_dïth
;

1223 
≤g_byã
 
pixñ_dïth
;

1224 
≤g_byã
 
ch™√ls
;

1225 
≤g_byã
 
u§_ch™√ls
;

1226 
≤g_byã
 
sig_byãs
;

1228 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1229 #ifde‡
PNG_LEGACY_SUPPORTED


1230 
≤g_byã
 
fûÀr
;

1232 
≤g_uöt_16
 
fûÀr
;

1236 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

1237 
≤g_byã
 
background_gamma_ty≥
;

1238 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1239 
background_gamma
;

1241 
≤g_cﬁ‹_16
 
background
;

1242 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

1243 
≤g_cﬁ‹_16
 
background_1
;

1247 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

1248 
≤g_Êush_±r
 
ouçut_Êush_‚
;

1249 
≤g_uöt_32
 
Êush_di°
;

1250 
≤g_uöt_32
 
Êush_rows
;

1253 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1254 
gamma_shi·
;

1255 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1256 
gamma
;

1257 
s¸ìn_gamma
;

1261 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1262 
≤g_byãp
 
gamma_èbÀ
;

1263 
≤g_byãp
 
gamma_‰om_1
;

1264 
≤g_byãp
 
gamma_to_1
;

1265 
≤g_uöt_16µ
 
gamma_16_èbÀ
;

1266 
≤g_uöt_16µ
 
gamma_16_‰om_1
;

1267 
≤g_uöt_16µ
 
gamma_16_to_1
;

1270 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_sBIT_SUPPORTED
)

1271 
≤g_cﬁ‹_8
 
sig_bô
;

1274 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1275 
≤g_cﬁ‹_8
 
shi·
;

1278 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) \

1279 || 
deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1280 
≤g_byãp
 
å™s
;

1281 
≤g_cﬁ‹_16
 
å™s_vÆues
;

1284 
≤g_ªad_°©us_±r
 
ªad_row_‚
;

1285 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
;

1286 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1287 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
;

1288 
≤g_¥ogªssive_row_±r
 
row_‚
;

1289 
≤g_¥ogªssive_íd_±r
 
íd_‚
;

1290 
≤g_byãp
 
ßve_buf„r_±r
;

1291 
≤g_byãp
 
ßve_buf„r
;

1292 
≤g_byãp
 
cuºít_buf„r_±r
;

1293 
≤g_byãp
 
cuºít_buf„r
;

1294 
≤g_uöt_32
 
push_Àngth
;

1295 
≤g_uöt_32
 
skù_Àngth
;

1296 
≤g_size_t
 
ßve_buf„r_size
;

1297 
≤g_size_t
 
ßve_buf„r_max
;

1298 
≤g_size_t
 
buf„r_size
;

1299 
≤g_size_t
 
cuºít_buf„r_size
;

1300 
¥o˚ss_mode
;

1301 
cur_∑Àâe
;

1303 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

1304 
≤g_size_t
 
cuºít_ãxt_size
;

1305 
≤g_size_t
 
cuºít_ãxt_À·
;

1306 
≤g_ch¨p
 
cuºít_ãxt
;

1307 
≤g_ch¨p
 
cuºít_ãxt_±r
;

1311 #i‡
deföed
(
__TURBOC__
Ë&& !deföed(
_Wödows
Ë&& !deföed(
__FLAT__
)

1313 
≤g_byãµ
 
off£t_èbÀ_±r
;

1314 
≤g_byãp
 
off£t_èbÀ
;

1315 
≤g_uöt_16
 
off£t_èbÀ_numbî
;

1316 
≤g_uöt_16
 
off£t_èbÀ_cou¡
;

1317 
≤g_uöt_16
 
off£t_èbÀ_cou¡_‰ì
;

1320 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1321 
≤g_byãp
 
∑Àâe_lookup
;

1322 
≤g_byãp
 
dôhî_ödex
;

1325 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
Ë|| deföed(
PNG_hIST_SUPPORTED
)

1326 
≤g_uöt_16p
 
hi°
;

1329 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

1330 
≤g_byã
 
heuri°ic_mëhod
;

1331 
≤g_byã
 
num_¥ev_fûãrs
;

1332 
≤g_byãp
 
¥ev_fûãrs
;

1333 
≤g_uöt_16p
 
fûãr_weights
;

1334 
≤g_uöt_16p
 
öv_fûãr_weights
;

1335 
≤g_uöt_16p
 
fûãr_co°s
;

1336 
≤g_uöt_16p
 
öv_fûãr_co°s
;

1339 #i‡
deföed
(
PNG_TIME_RFC1123_SUPPORTED
)

1340 
≤g_ch¨p
 
time_buf„r
;

1345 #ifde‡
PNG_FREE_ME_SUPPORTED


1346 
≤g_uöt_32
 
‰ì_me
;

1349 #i‡
deföed
(
PNG_USER_CHUNKS_SUPPORTED
)

1350 
≤g_voidp
 
u£r_chunk_±r
;

1351 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
;

1354 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1355 
num_chunk_li°
;

1356 
≤g_byãp
 
chunk_li°
;

1360 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

1361 
≤g_byã
 
rgb_to_gøy_°©us
;

1363 
≤g_uöt_16
 
rgb_to_gøy_ªd_c€ff
;

1364 
≤g_uöt_16
 
rgb_to_gøy_gªí_c€ff
;

1365 
≤g_uöt_16
 
rgb_to_gøy_blue_c€ff
;

1369 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
) || \

1370 
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1371 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1373 #ifde‡
PNG_1_0_X


1374 
≤g_byã
 
mng_„©uªs_≥rmôãd
;

1376 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
;

1381 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1382 
≤g_fixed_poöt
 
öt_gamma
;

1386 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
)

1387 
≤g_byã
 
fûãr_ty≥
;

1390 #i‡
deföed
(
PNG_1_0_X
)

1392 
≤g_uöt_32
 
row_buf_size
;

1396 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

1397 #i‡!
deföed
(
PNG_1_0_X
)

1398 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

1399 
≤g_byã
 
mmx_bôdïth_thªshﬁd
;

1400 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
;

1402 
≤g_uöt_32
 
asm_Êags
;

1407 #ifde‡
PNG_USER_MEM_SUPPORTED


1408 
≤g_voidp
 
mem_±r
;

1409 
≤g_mÆloc_±r
 
mÆloc_‚
;

1410 
≤g_‰ì_±r
 
‰ì_‚
;

1414 
≤g_byãp
 
big_row_buf
;

1416 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1418 
≤g_byãp
 
dôhî_s‹t
;

1419 
≤g_byãp
 
ödex_to_∑Àâe
;

1421 
≤g_byãp
 
∑Àâe_to_ödex
;

1426 
≤g_byã
 
com¥essi⁄_ty≥
;

1428 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1429 
≤g_uöt_32
 
u£r_width_max
;

1430 
≤g_uöt_32
 
u£r_height_max
;

1434 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

1436 
≤g_unknown_chunk
 
unknown_chunk
;

1440 
≤g_uöt_32
 
ﬁd_big_row_buf_size
, 
ﬁd_¥ev_row_size
;

1447 
≤g_°ru˘p
 
	tvîsi⁄_1_2_27
;

1449 
≤g_°ru˘
 
	tFAR
 * FAR * 
	t≤g_°ru˘µ
;

1458 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_ac˚ss_vîsi⁄_numbî
Ë
PNGARG
(());

1463 
PNG_EXPORT
(,
≤g_£t_sig_byãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1464 
num_byãs
));

1471 
PNG_EXPORT
(,
≤g_sig_cmp
Ë
PNGARG
((
≤g_byãp
 
sig
, 
≤g_size_t
 
°¨t
,

1472 
≤g_size_t
 
num_to_check
));

1477 
PNG_EXPORT
(,
≤g_check_sig
Ë
PNGARG
((
≤g_byãp
 
sig
, 
num
));

1480 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘
)

1481 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1482 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
));

1485 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘
)

1486 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1487 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
));

1489 #ifde‡
PNG_WRITE_SUPPORTED


1490 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_com¥essi⁄_buf„r_size
)

1491 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1494 #ifde‡
PNG_WRITE_SUPPORTED


1495 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_buf„r_size
)

1496 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
size
));

1500 
PNG_EXPORT
(,
≤g_ª£t_z°ªam
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1503 #ifde‡
PNG_USER_MEM_SUPPORTED


1504 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘_2
)

1505 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1506 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1507 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1508 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘_2
)

1509 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1510 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1511 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1515 
PNG_EXPORT
(,
≤g_wrôe_chunk
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1516 
≤g_byãp
 
chunk_«me
,Öng_byã∞
d©a
, 
≤g_size_t
 
Àngth
));

1519 
PNG_EXPORT
(,
≤g_wrôe_chunk_°¨t
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1520 
≤g_byãp
 
chunk_«me
, 
≤g_uöt_32
 
Àngth
));

1523 
PNG_EXPORT
(,
≤g_wrôe_chunk_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1524 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

1527 
PNG_EXPORT
(,
≤g_wrôe_chunk_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1530 
PNG_EXPORT
(
≤g_öf›
,
≤g_¸óã_öfo_°ru˘
)

1531 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1533 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1535 
PNG_EXPORT
(,
≤g_öfo_öô
Ë
PNGARG
((
≤g_öf›
 
öfo_±r
));

1536 #unde‡
≤g_öfo_öô


1537 
	#≤g_öfo_öô
(
öfo_±r
Ë
	`≤g_öfo_öô_3
(&info_ptr,\

1538 
	`≤g_sizeof
(
≤g_öfo
));

	)

1541 
PNG_EXPORT
(,
≤g_öfo_öô_3
Ë
PNGARG
((
≤g_öf›p
 
öfo_±r
,

1542 
≤g_size_t
 
≤g_öfo_°ru˘_size
));

1545 
PNG_EXPORT
(,
≤g_wrôe_öfo_bef‹e_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1546 
≤g_öf›
 
öfo_±r
));

1547 
PNG_EXPORT
(,
≤g_wrôe_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1548 
≤g_öf›
 
öfo_±r
));

1550 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1552 
PNG_EXPORT
(,
≤g_ªad_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1553 
≤g_öf›
 
öfo_±r
));

1556 #i‡
deföed
(
PNG_TIME_RFC1123_SUPPORTED
)

1557 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_c⁄vît_to_rfc1123
)

1558 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_timï
 
±ime
));

1561 #i‡!
deföed
(
_WIN32_WCE
)

1563 #i‡
deföed
(
PNG_WRITE_tIME_SUPPORTED
)

1565 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_°ru˘_tm
Ë
PNGARG
((
≤g_timï
 
±ime
,

1566 
tm
 
FAR
 * 
âime
));

1569 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_time_t
Ë
PNGARG
((
≤g_timï
 
±ime
,

1570 
time_t
 
âime
));

1574 #i‡
deföed
(
PNG_READ_EXPAND_SUPPORTED
)

1576 
PNG_EXPORT
(,
≤g_£t_ex∑nd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1577 #i‡!
deföed
(
PNG_1_0_X
)

1578 
PNG_EXPORT
(,
≤g_£t_ex∑nd_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1579 
≤g_±r
));

1581 
PNG_EXPORT
(,
≤g_£t_∑Àâe_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1582 
PNG_EXPORT
(,
≤g_£t_tRNS_to_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1583 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1585 
PNG_EXPORT
(,
≤g_£t_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1589 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1591 
PNG_EXPORT
(,
≤g_£t_bgr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1594 #i‡
deföed
(
PNG_READ_GRAY_TO_RGB_SUPPORTED
)

1596 
PNG_EXPORT
(,
≤g_£t_gøy_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1599 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

1601 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1602 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1603 
îr‹_a˘i⁄
, 
ªd
, 
gªí
 ));

1605 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1606 
îr‹_a˘i⁄
, 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
 ));

1607 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_rgb_to_gøy_°©us
Ë
PNGARG
((
≤g_°ru˘p


1608 
≤g_±r
));

1611 
PNG_EXPORT
(,
≤g_buûd_gøysˇÀ_∑Àâe
Ë
PNGARG
((
bô_dïth
,

1612 
≤g_cﬁ‹p
 
∑Àâe
));

1614 #i‡
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

1615 
PNG_EXPORT
(,
≤g_£t_°rù_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1618 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

1619 
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

1620 
PNG_EXPORT
(,
≤g_£t_sw≠_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1623 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

1624 
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

1625 
PNG_EXPORT
(,
≤g_£t_övît_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1628 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1630 
PNG_EXPORT
(,
≤g_£t_fûÀr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1631 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1633 
	#PNG_FILLER_BEFORE
 0

	)

1634 
	#PNG_FILLER_AFTER
 1

	)

1636 #i‡!
deföed
(
PNG_1_0_X
)

1637 
PNG_EXPORT
(,
≤g_£t_add_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1638 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1642 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1644 
PNG_EXPORT
(,
≤g_£t_sw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1647 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

1649 
PNG_EXPORT
(,
≤g_£t_∑ckög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1652 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1654 
PNG_EXPORT
(,
≤g_£t_∑cksw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1657 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1659 
PNG_EXPORT
(,
≤g_£t_shi·
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1660 
≤g_cﬁ‹_8p
 
åue_bôs
));

1663 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

1664 
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1666 
PNG_EXPORT
(,
≤g_£t_öãæa˚_h™dlög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1669 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1671 
PNG_EXPORT
(,
≤g_£t_övît_m⁄o
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1674 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

1676 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1677 
PNG_EXPORT
(,
≤g_£t_background
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1678 
≤g_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1679 
√ed_ex∑nd
, 
background_gamma
));

1681 
	#PNG_BACKGROUND_GAMMA_UNKNOWN
 0

	)

1682 
	#PNG_BACKGROUND_GAMMA_SCREEN
 1

	)

1683 
	#PNG_BACKGROUND_GAMMA_FILE
 2

	)

1684 
	#PNG_BACKGROUND_GAMMA_UNIQUE
 3

	)

1687 #i‡
deföed
(
PNG_READ_16_TO_8_SUPPORTED
)

1689 
PNG_EXPORT
(,
≤g_£t_°rù_16
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1692 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

1694 
PNG_EXPORT
(,
≤g_£t_dôhî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1695 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
, 
maximum_cﬁ‹s
,

1696 
≤g_uöt_16p
 
hi°ogøm
, 
fuŒ_dôhî
));

1699 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

1701 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1702 
PNG_EXPORT
(,
≤g_£t_gamma
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1703 
s¸ìn_gamma
, 
deÁu…_fûe_gamma
));

1707 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1708 #i‡
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1709 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1712 
PNG_EXPORT
(,
≤g_≥rmô_em±y_∂ã
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1713 
em±y_∂ã_≥rmôãd
));

1717 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

1719 
PNG_EXPORT
(,
≤g_£t_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
ƒows
));

1721 
PNG_EXPORT
(,
≤g_wrôe_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1725 
PNG_EXPORT
(,
≤g_°¨t_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1728 
PNG_EXPORT
(,
≤g_ªad_upd©e_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1729 
≤g_öf›
 
öfo_±r
));

1731 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1733 
PNG_EXPORT
(,
≤g_ªad_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1734 
≤g_byãµ
 
row
,Öng_byãµ 
di•œy_row
, 
≤g_uöt_32
 
num_rows
));

1737 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1739 
PNG_EXPORT
(,
≤g_ªad_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1740 
≤g_byãp
 
row
,

1741 
≤g_byãp
 
di•œy_row
));

1744 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1746 
PNG_EXPORT
(,
≤g_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1747 
≤g_byãµ
 
image
));

1751 
PNG_EXPORT
(,
≤g_wrôe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1752 
≤g_byãp
 
row
));

1755 
PNG_EXPORT
(,
≤g_wrôe_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1756 
≤g_byãµ
 
row
, 
≤g_uöt_32
 
num_rows
));

1759 
PNG_EXPORT
(,
≤g_wrôe_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1760 
≤g_byãµ
 
image
));

1763 
PNG_EXPORT
(,
≤g_wrôe_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1764 
≤g_öf›
 
öfo_±r
));

1766 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1768 
PNG_EXPORT
(,
≤g_ªad_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1769 
≤g_öf›
 
öfo_±r
));

1773 
PNG_EXPORT
(,
≤g_de°roy_öfo_°ru˘
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1774 
≤g_öf›p
 
öfo_±r_±r
));

1777 
PNG_EXPORT
(,
≤g_de°roy_ªad_°ru˘
Ë
PNGARG
((
≤g_°ru˘µ


1778 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
,Öng_öf›∞
íd_öfo_±r_±r
));

1782 
PNG_EXPORT
(,
≤g_ªad_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

1783 
≤g_öf›
 
íd_öfo_±r
));

1786 
PNG_EXPORT
(,
≤g_de°roy_wrôe_°ru˘
)

1787 
PNGARG
((
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
));

1791 
PNG_EXPORT
(,
≤g_wrôe_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1794 
PNG_EXPORT
(,
≤g_£t_¸c_a˘i⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1795 
¸ô_a˘i⁄
, 
™cû_a˘i⁄
));

1806 
	#PNG_CRC_DEFAULT
 0

	)

1807 
	#PNG_CRC_ERROR_QUIT
 1

	)

1808 
	#PNG_CRC_WARN_DISCARD
 2

	)

1809 
	#PNG_CRC_WARN_USE
 3

	)

1810 
	#PNG_CRC_QUIET_USE
 4

	)

1811 
	#PNG_CRC_NO_CHANGE
 5

	)

1824 
PNG_EXPORT
(,
≤g_£t_fûãr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mëhod
,

1825 
fûãrs
));

1832 
	#PNG_NO_FILTERS
 0x00

	)

1833 
	#PNG_FILTER_NONE
 0x08

	)

1834 
	#PNG_FILTER_SUB
 0x10

	)

1835 
	#PNG_FILTER_UP
 0x20

	)

1836 
	#PNG_FILTER_AVG
 0x40

	)

1837 
	#PNG_FILTER_PAETH
 0x80

	)

1838 
	#PNG_ALL_FILTERS
 (
PNG_FILTER_NONE
 | 
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
 | \

1839 
PNG_FILTER_AVG
 | 
PNG_FILTER_PAETH
)

	)

1844 
	#PNG_FILTER_VALUE_NONE
 0

	)

1845 
	#PNG_FILTER_VALUE_SUB
 1

	)

1846 
	#PNG_FILTER_VALUE_UP
 2

	)

1847 
	#PNG_FILTER_VALUE_AVG
 3

	)

1848 
	#PNG_FILTER_VALUE_PAETH
 4

	)

1849 
	#PNG_FILTER_VALUE_LAST
 5

	)

1851 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

1880 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1881 
PNG_EXPORT
(,
≤g_£t_fûãr_heuri°ics
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1882 
heuri°ic_mëhod
, 
num_weights
, 
≤g_doubÀp
 
fûãr_weights
,

1883 
≤g_doubÀp
 
fûãr_co°s
));

1890 
	#PNG_FILTER_HEURISTIC_DEFAULT
 0

	)

1891 
	#PNG_FILTER_HEURISTIC_UNWEIGHTED
 1

	)

1892 
	#PNG_FILTER_HEURISTIC_WEIGHTED
 2

	)

1893 
	#PNG_FILTER_HEURISTIC_LAST
 3

	)

1902 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_Àvñ
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1903 
Àvñ
));

1905 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mem_Àvñ
)

1906 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mem_Àvñ
));

1908 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_°øãgy
)

1909 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
°øãgy
));

1911 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_wödow_bôs
)

1912 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
wödow_bôs
));

1914 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mëhod
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1915 
mëhod
));

1926 #i‡!
deföed
(
PNG_NO_STDIO
)

1928 
PNG_EXPORT
(,
≤g_öô_io
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_FILE_p
 
Â
));

1939 
PNG_EXPORT
(,
≤g_£t_îr‹_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1940 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
));

1943 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_îr‹_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1950 
PNG_EXPORT
(,
≤g_£t_wrôe_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1951 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
));

1954 
PNG_EXPORT
(,
≤g_£t_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1955 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
ªad_d©a_‚
));

1958 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_io_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1960 
PNG_EXPORT
(,
≤g_£t_ªad_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1961 
≤g_ªad_°©us_±r
 
ªad_row_‚
));

1963 
PNG_EXPORT
(,
≤g_£t_wrôe_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1964 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
));

1966 #ifde‡
PNG_USER_MEM_SUPPORTED


1968 
PNG_EXPORT
(,
≤g_£t_mem_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1969 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1971 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_mem_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1974 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1975 
deföed
(
PNG_LEGACY_SUPPORTED
)

1976 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


1977 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
));

1980 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1981 
deföed
(
PNG_LEGACY_SUPPORTED
)

1982 
PNG_EXPORT
(,
≤g_£t_wrôe_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


1983 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
));

1986 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1987 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1988 
deföed
(
PNG_LEGACY_SUPPORTED
)

1989 
PNG_EXPORT
(,
≤g_£t_u£r_å™sf‹m_öfo
Ë
PNGARG
((
≤g_°ru˘p


1990 
≤g_±r
, 
≤g_voidp
 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
,

1991 
u£r_å™sf‹m_ch™√ls
));

1993 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_å™sf‹m_±r
)

1994 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1997 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1998 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_chunk_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1999 
≤g_voidp
 
u£r_chunk_±r
, 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
));

2000 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_chunk_±r
Ë
PNGARG
((
≤g_°ru˘p


2001 
≤g_±r
));

2004 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2008 
PNG_EXPORT
(,
≤g_£t_¥ogªssive_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2009 
≤g_voidp
 
¥ogªssive_±r
,

2010 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
, 
≤g_¥ogªssive_row_±r
 
row_‚
,

2011 
≤g_¥ogªssive_íd_±r
 
íd_‚
));

2014 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_¥ogªssive_±r
)

2015 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2018 
PNG_EXPORT
(,
≤g_¥o˚ss_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2019 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_size
));

2024 
PNG_EXPORT
(,
≤g_¥ogªssive_comböe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2025 
≤g_byãp
 
ﬁd_row
,Öng_byã∞
√w_row
));

2028 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2029 
≤g_uöt_32
 
size
));

2031 #i‡
deföed
(
PNG_1_0_X
)

2032 
	#≤g_mÆloc_w¨n
 
≤g_mÆloc


	)

2035 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_w¨n
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2036 
≤g_uöt_32
 
size
));

2040 
PNG_EXPORT
(,
≤g_‰ì
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
));

2042 #i‡
deföed
(
PNG_1_0_X
)

2044 
PNG_EXPORT
(
voidpf
,
≤g_zÆloc
Ë
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

2045 
uI¡
 
size
));

2048 
PNG_EXPORT
(,
≤g_z‰ì
Ë
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2052 
PNG_EXPORT
(,
≤g_‰ì_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2053 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
‰ì_me
, 
num
));

2054 #ifde‡
PNG_FREE_ME_SUPPORTED


2057 
PNG_EXPORT
(,
≤g_d©a_‰ìr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2058 
≤g_öf›
 
öfo_±r
, 
‰ìr
, 
≤g_uöt_32
 
mask
));

2061 
	#PNG_DESTROY_WILL_FREE_DATA
 1

	)

2062 
	#PNG_SET_WILL_FREE_DATA
 1

	)

2063 
	#PNG_USER_WILL_FREE_DATA
 2

	)

2065 
	#PNG_FREE_HIST
 0x0008

	)

2066 
	#PNG_FREE_ICCP
 0x0010

	)

2067 
	#PNG_FREE_SPLT
 0x0020

	)

2068 
	#PNG_FREE_ROWS
 0x0040

	)

2069 
	#PNG_FREE_PCAL
 0x0080

	)

2070 
	#PNG_FREE_SCAL
 0x0100

	)

2071 
	#PNG_FREE_UNKN
 0x0200

	)

2072 
	#PNG_FREE_LIST
 0x0400

	)

2073 
	#PNG_FREE_PLTE
 0x1000

	)

2074 
	#PNG_FREE_TRNS
 0x2000

	)

2075 
	#PNG_FREE_TEXT
 0x4000

	)

2076 
	#PNG_FREE_ALL
 0x7fff

	)

2077 
	#PNG_FREE_MUL
 0x4220

	)

2079 #ifde‡
PNG_USER_MEM_SUPPORTED


2080 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2081 
≤g_uöt_32
 
size
));

2082 
PNG_EXPORT
(,
≤g_‰ì_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2083 
≤g_voidp
 
±r
));

2086 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem˝y_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2087 
≤g_voidp
 
s1
,Öng_void∞
s2
, 
≤g_uöt_32
 
size
));

2089 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem£t_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2090 
≤g_voidp
 
s1
, 
vÆue
, 
≤g_uöt_32
 
size
));

2092 #i‡
deföed
(
USE_FAR_KEYWORD
)

2093 *
≤g_Ár_to_√¨
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,
≤g_voidp
 
±r
,

2094 
check
));

2097 #i‚de‡
PNG_NO_ERROR_TEXT


2099 
PNG_EXPORT
(,
≤g_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2100 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
));

2103 
PNG_EXPORT
(,
≤g_chunk_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2104 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
));

2107 
PNG_EXPORT
(,
≤g_îr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2110 #i‚de‡
PNG_NO_WARNINGS


2112 
PNG_EXPORT
(,
≤g_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2113 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2115 #ifde‡
PNG_READ_SUPPORTED


2117 
PNG_EXPORT
(,
≤g_chunk_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2118 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2135 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_vÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2136 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Êag
));

2139 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_rowbyãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2140 
≤g_öf›
 
öfo_±r
));

2142 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

2145 
PNG_EXPORT
(
≤g_byãµ
,
≤g_gë_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2146 
≤g_öf›
 
öfo_±r
));

2149 
PNG_EXPORT
(,
≤g_£t_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2150 
≤g_öf›
 
öfo_±r
, 
≤g_byãµ
 
row_poöãrs
));

2154 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_ch™√ls
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2155 
≤g_öf›
 
öfo_±r
));

2157 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


2159 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_width
Ë
PNGARG
((
≤g_°ru˘p


2160 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2163 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_height
Ë
PNGARG
((
≤g_°ru˘p


2164 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2167 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_bô_dïth
Ë
PNGARG
((
≤g_°ru˘p


2168 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2171 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_cﬁ‹_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2172 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2175 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_fûãr_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2176 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2179 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_öãæa˚_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2180 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2183 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_com¥essi⁄_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2184 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2187 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2188 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2189 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2190 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2191 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2192 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2195 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2196 
PNG_EXPORT
(, 
≤g_gë_pixñ_a•e˘_øtio
Ë
PNGARG
((
≤g_°ru˘p


2197 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2201 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2202 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2203 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2204 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2205 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2206 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2207 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2208 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2213 
PNG_EXPORT
(
≤g_byãp
,
≤g_gë_sig«tuª
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2214 
≤g_öf›
 
öfo_±r
));

2216 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

2217 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2218 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 *
background
));

2221 #i‡
deföed
(
PNG_bKGD_SUPPORTED
)

2222 
PNG_EXPORT
(,
≤g_£t_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2223 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 
background
));

2226 #i‡
deföed
(
PNG_cHRM_SUPPORTED
)

2227 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2228 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2229 
≤g_öf›
 
öfo_±r
, *
whôe_x
, *
whôe_y
, *
ªd_x
,

2230 *
ªd_y
, *
gªí_x
, *
gªí_y
, *
blue_x
,

2231 *
blue_y
));

2233 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2234 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2235 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_whôe_x
,Öng_fixed_point

2236 *
öt_whôe_y
, 
≤g_fixed_poöt
 *
öt_ªd_x
,Öng_fixed_poöà*
öt_ªd_y
,

2237 
≤g_fixed_poöt
 *
öt_gªí_x
,Öng_fixed_poöà*
öt_gªí_y
,Öng_fixed_point

2238 *
öt_blue_x
, 
≤g_fixed_poöt
 *
öt_blue_y
));

2242 #i‡
deföed
(
PNG_cHRM_SUPPORTED
)

2243 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2244 
PNG_EXPORT
(,
≤g_£t_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2245 
≤g_öf›
 
öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

2246 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
));

2248 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2249 
PNG_EXPORT
(,
≤g_£t_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2250 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

2251 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

2252 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

2253 
≤g_fixed_poöt
 
öt_blue_y
));

2257 #i‡
deföed
(
PNG_gAMA_SUPPORTED
)

2258 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2259 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2260 
≤g_öf›
 
öfo_±r
, *
fûe_gamma
));

2262 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2263 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_fûe_gamma
));

2266 #i‡
deföed
(
PNG_gAMA_SUPPORTED
)

2267 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2268 
PNG_EXPORT
(,
≤g_£t_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2269 
≤g_öf›
 
öfo_±r
, 
fûe_gamma
));

2271 
PNG_EXPORT
(,
≤g_£t_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2272 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_fûe_gamma
));

2275 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

2276 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2277 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 *
hi°
));

2280 #i‡
deföed
(
PNG_hIST_SUPPORTED
)

2281 
PNG_EXPORT
(,
≤g_£t_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2282 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 
hi°
));

2285 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2286 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
,

2287 *
bô_dïth
, *
cﬁ‹_ty≥
, *
öãæa˚_mëhod
,

2288 *
com¥essi⁄_mëhod
, *
fûãr_mëhod
));

2290 
PNG_EXPORT
(,
≤g_£t_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2291 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2292 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
,

2293 
fûãr_mëhod
));

2295 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

2296 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2297 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
,

2298 *
unô_ty≥
));

2301 #i‡
deföed
(
PNG_oFFs_SUPPORTED
)

2302 
PNG_EXPORT
(,
≤g_£t_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2303 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
,

2304 
unô_ty≥
));

2307 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

2308 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2309 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,Öng_öt_32 *
X1
,

2310 *
ty≥
, *
≈¨ams
, 
≤g_ch¨p
 *
unôs
, 
≤g_ch¨µ
 *
∑øms
));

2313 #i‡
deföed
(
PNG_pCAL_SUPPORTED
)

2314 
PNG_EXPORT
(,
≤g_£t_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2315 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
,

2316 
ty≥
, 
≈¨ams
, 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

2319 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

2320 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2321 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

2324 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

2325 
PNG_EXPORT
(,
≤g_£t_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2326 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
));

2329 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2330 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
));

2332 
PNG_EXPORT
(,
≤g_£t_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2333 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

2335 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

2336 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2337 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 *
sig_bô
));

2340 #i‡
deföed
(
PNG_sBIT_SUPPORTED
)

2341 
PNG_EXPORT
(,
≤g_£t_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2342 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 
sig_bô
));

2345 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

2346 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2347 
≤g_öf›
 
öfo_±r
, *
öã¡
));

2350 #i‡
deföed
(
PNG_sRGB_SUPPORTED
)

2351 
PNG_EXPORT
(,
≤g_£t_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2352 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2353 
PNG_EXPORT
(,
≤g_£t_sRGB_gAMA_™d_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2354 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2357 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

2358 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2359 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

2360 
≤g_ch¨µ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
));

2364 #i‡
deföed
(
PNG_iCCP_SUPPORTED
)

2365 
PNG_EXPORT
(,
≤g_£t_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2366 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

2367 
≤g_ch¨p
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
));

2371 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

2372 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2373 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_çp
 
íåõs
));

2376 #i‡
deföed
(
PNG_sPLT_SUPPORTED
)

2377 
PNG_EXPORT
(,
≤g_£t_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2378 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_ç
 
íåõs
, 
√¡rõs
));

2381 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

2383 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2384 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
));

2395 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

2396 
PNG_EXPORT
(,
≤g_£t_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2397 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

2400 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

2401 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2402 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 *
mod_time
));

2405 #i‡
deföed
(
PNG_tIME_SUPPORTED
)

2406 
PNG_EXPORT
(,
≤g_£t_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2407 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 
mod_time
));

2410 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2411 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2412 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 *
å™s
, *
num_å™s
,

2413 
≤g_cﬁ‹_16p
 *
å™s_vÆues
));

2416 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2417 
PNG_EXPORT
(,
≤g_£t_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2418 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
å™s
, 
num_å™s
,

2419 
≤g_cﬁ‹_16p
 
å™s_vÆues
));

2422 #i‡
deföed
(
PNG_tRNS_SUPPORTED
)

2425 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

2426 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2427 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2428 
≤g_öf›
 
öfo_±r
, *
unô
, *
width
, *
height
));

2430 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2431 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2432 
≤g_öf›
 
öfo_±r
, *
unô
, 
≤g_ch¨µ
 
swidth
,Öng_ch¨µ 
sheight
));

2437 #i‡
deföed
(
PNG_sCAL_SUPPORTED
)

2438 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2439 
PNG_EXPORT
(,
≤g_£t_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2440 
≤g_öf›
 
öfo_±r
, 
unô
, 
width
, 
height
));

2442 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2443 
PNG_EXPORT
(,
≤g_£t_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2444 
≤g_öf›
 
öfo_±r
, 
unô
, 
≤g_ch¨p
 
swidth
,Öng_ch¨∞
sheight
));

2449 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
)

2459 
PNG_EXPORT
(, 
≤g_£t_kìp_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2460 
≤g_±r
, 
kìp
, 
≤g_byãp
 
chunk_li°
, 
num_chunks
));

2461 
PNG_EXPORT
(, 
≤g_£t_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2462 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkp
 
unknowns
, 
num_unknowns
));

2463 
PNG_EXPORT
(, 
≤g_£t_unknown_chunk_loˇti⁄
)

2464 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
chunk
, 
loˇti⁄
));

2465 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2466 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkµ
 
íåõs
));

2468 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2469 
PNG_EXPORT
(,
≤g_h™dÀ_as_unknown
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp


2470 
chunk_«me
));

2476 
PNG_EXPORT
(, 
≤g_£t_övÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2477 
≤g_öf›
 
öfo_±r
, 
mask
));

2479 #i‡
deföed
(
PNG_INFO_IMAGE_SUPPORTED
)

2481 
PNG_EXPORT
(, 
≤g_ªad_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2482 
≤g_öf›
 
öfo_±r
,

2483 
å™sf‹ms
,

2484 
≤g_voidp
 
∑øms
));

2485 
PNG_EXPORT
(, 
≤g_wrôe_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2486 
≤g_öf›
 
öfo_±r
,

2487 
å™sf‹ms
,

2488 
≤g_voidp
 
∑øms
));

2496 #ifde‡
PNG_DEBUG


2497 #i‡(
PNG_DEBUG
 > 0)

2498 #i‡!
deföed
(
PNG_DEBUG_FILE
Ë&& deföed(
_MSC_VER
)

2499 
	~<¸tdbg.h
>

2500 #i‡(
PNG_DEBUG
 > 1)

2501 
	#≤g_debug
(
l
,
m
Ë
	`_RPT0
(
_CRT_WARN
,m)

	)

2502 
	#≤g_debug1
(
l
,
m
,
p1
Ë
	`_RPT1
(
_CRT_WARN
,m,p1)

	)

2503 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
Ë
	`_RPT2
(
_CRT_WARN
,m,p1,p2)

	)

2506 #i‚de‡
PNG_DEBUG_FILE


2507 
	#PNG_DEBUG_FILE
 
°dîr


	)

2509 #i‡(
PNG_DEBUG
 > 1)

2510 
	#≤g_debug
(
l
,
m
) \

2512 
num_èbs
=
l
; \

2513 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2514 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":"")))); \

2515 }

	)

2516 
	#≤g_debug1
(
l
,
m
,
p1
) \

2518 
num_èbs
=
l
; \

2519 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2520 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
); \

2521 }

	)

2522 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2524 
num_èbs
=
l
; \

2525 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
,(
num_èbs
==1 ? "\t" : \

2526 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
,
p2
); \

2527 }

	)

2532 #i‚de‡
≤g_debug


2533 
	#≤g_debug
(
l
, 
m
)

	)

2535 #i‚de‡
≤g_debug1


2536 
	#≤g_debug1
(
l
, 
m
, 
p1
)

	)

2538 #i‚de‡
≤g_debug2


2539 
	#≤g_debug2
(
l
, 
m
, 
p1
, 
p2
)

	)

2542 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_c›yright
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2543 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2544 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vîsi⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2545 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_lib≤g_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2547 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2548 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_≥rmô_mng_„©uªs
Ë
PNGARG
((
≤g_°ru˘p


2549 
≤g_±r
, 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
));

2553 
	#PNG_HANDLE_CHUNK_AS_DEFAULT
 0

	)

2554 
	#PNG_HANDLE_CHUNK_NEVER
 1

	)

2555 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

2556 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

2559 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

2560 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

2561 
	#PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 0x01

	)

2562 
	#PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 0x02

	)

2563 
	#PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 0x04

	)

2564 
	#PNG_ASM_FLAG_MMX_READ_INTERLACE
 0x08

	)

2565 
	#PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 0x10

	)

2566 
	#PNG_ASM_FLAG_MMX_READ_FILTER_UP
 0x20

	)

2567 
	#PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 0x40

	)

2568 
	#PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 0x80

	)

2569 
	#PNG_ASM_FLAGS_INITIALIZED
 0x80000000

	)

2571 
	#PNG_MMX_READ_FLAGS
 ( 
PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 \

2572 | 
PNG_ASM_FLAG_MMX_READ_INTERLACE
 \

2573 | 
PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 \

2574 | 
PNG_ASM_FLAG_MMX_READ_FILTER_UP
 \

2575 | 
PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 \

2576 | 
PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 )

	)

2577 
	#PNG_MMX_WRITE_FLAGS
 ( 0 )

	)

2579 
	#PNG_MMX_FLAGS
 ( 
PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 \

2580 | 
PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 \

2581 | 
PNG_MMX_READ_FLAGS
 \

2582 | 
PNG_MMX_WRITE_FLAGS
 )

	)

2584 
	#PNG_SELECT_READ
 1

	)

2585 
	#PNG_SELECT_WRITE
 2

	)

2588 #i‡!
deföed
(
PNG_1_0_X
)

2590 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_Êagmask
)

2591 
PNGARG
((
Êag_£À˘
, *
compûîID
));

2594 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êagmask
)

2595 
PNGARG
((
Êag_£À˘
));

2598 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êags
)

2599 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2602 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_mmx_bôdïth_thªshﬁd
)

2603 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2606 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_rowbyãs_thªshﬁd
)

2607 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2610 
PNG_EXPORT
(,
≤g_£t_asm_Êags
)

2611 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
asm_Êags
));

2614 
PNG_EXPORT
(,
≤g_£t_mmx_thªshﬁds
)

2615 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byã
 
mmx_bôdïth_thªshﬁd
,

2616 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
));

2620 #i‡!
deföed
(
PNG_1_0_X
)

2622 
PNG_EXPORT
(,
≤g_mmx_suµ‹t
Ë
PNGARG
(());

2627 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


2628 
PNG_EXPORT
(,
≤g_£t_°rù_îr‹_numbîs
Ë
PNGARG
((
≤g_°ru˘p


2629 
≤g_±r
, 
≤g_uöt_32
 
°rù_mode
));

2635 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2636 
PNG_EXPORT
(,
≤g_£t_u£r_limôs
Ë
PNGARG
((
≤g_°ru˘p


2637 
≤g_±r
, 
≤g_uöt_32
 
u£r_width_max
,Öng_uöt_32 
u£r_height_max
));

2638 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_width_max
Ë
PNGARG
((
≤g_°ru˘p


2639 
≤g_±r
));

2640 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_height_max
Ë
PNGARG
((
≤g_°ru˘p


2641 
≤g_±r
));

2646 #ifde‡
PNG_READ_COMPOSITE_NODIV_SUPPORTED


2661 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2662 { 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(’ng_uöt_16)(
fg
Ë* (≤g_uöt_16)(
Æpha
) \

2663 + (
≤g_uöt_16
)(
bg
)*(png_uint_16)(255 - \

2664 (
≤g_uöt_16
)(
Æpha
)) + (png_uint_16)128); \

2665 (
composôe
Ë(
≤g_byã
)((
ãmp
 + (ãm∞>> 8)Ë>> 8); }

	)

2667 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2668 { 
≤g_uöt_32
 
ãmp
 = (≤g_uöt_32)(’ng_uöt_32)(
fg
Ë* (≤g_uöt_32)(
Æpha
) \

2669 + (
≤g_uöt_32
)(
bg
)*(png_uint_32)(65535L - \

2670 (
≤g_uöt_32
)(
Æpha
)) + (png_uint_32)32768L); \

2671 (
composôe
Ë(
≤g_uöt_16
)((
ãmp
 + (ãm∞>> 16)Ë>> 16); }

	)

2675 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2676 (
composôe
Ë(
≤g_byã
)(((
≤g_uöt_16
)(
fg
Ë* (≤g_uöt_16)(
Æpha
) + \

2677 (
≤g_uöt_16
)(
bg
Ë* (≤g_uöt_16)(255 - (≤g_uöt_16)(
Æpha
)) + \

2678 (
≤g_uöt_16
)127Ë/ 255)

	)

2680 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2681 (
composôe
Ë(
≤g_uöt_16
)(((
≤g_uöt_32
)(
fg
Ë* (≤g_uöt_32)(
Æpha
) + \

2682 (
≤g_uöt_32
)(
bg
)*’ng_uöt_32)(65535L - (≤g_uöt_32)(
Æpha
)) + \

2683 (
≤g_uöt_32
)32767Ë/ (≤g_uöt_32)65535L)

	)

2695 #i‡
deföed
(
PNG_READ_BIG_ENDIAN_SUPPORTED
)

2696 
	#≤g_gë_uöt_32
(
buf
Ë–*((
≤g_uöt_32p
Ë(buf)))

	)

2697 
	#≤g_gë_uöt_16
(
buf
Ë–*((
≤g_uöt_16p
Ë(buf)))

	)

2698 
	#≤g_gë_öt_32
(
buf
Ë–*((
≤g_öt_32p
Ë(buf)))

	)

2700 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2701 
PNG_EXPORT
(
≤g_uöt_16
,
≤g_gë_uöt_16
Ë
PNGARG
((
≤g_byãp
 
buf
));

2702 
PNG_EXPORT
(
≤g_öt_32
,
≤g_gë_öt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2704 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_31
)

2705 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
));

2710 
PNG_EXPORT
(,
≤g_ßve_uöt_32
)

2711 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
));

2712 
PNG_EXPORT
(,
≤g_ßve_öt_32
)

2713 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
));

2719 
PNG_EXPORT
(,
≤g_ßve_uöt_16
)

2720 
PNGARG
((
≤g_byãp
 
buf
, 
i
));

2735 
	#PNG_HAVE_IHDR
 0x01

	)

2736 
	#PNG_HAVE_PLTE
 0x02

	)

2737 
	#PNG_HAVE_IDAT
 0x04

	)

2738 
	#PNG_AFTER_IDAT
 0x08

	)

2739 
	#PNG_HAVE_IEND
 0x10

	)

2741 #i‡
deföed
(
PNG_INTERNAL
)

2746 
	#PNG_HAVE_gAMA
 0x20

	)

2747 
	#PNG_HAVE_cHRM
 0x40

	)

2748 
	#PNG_HAVE_sRGB
 0x80

	)

2749 
	#PNG_HAVE_CHUNK_HEADER
 0x100

	)

2750 
	#PNG_WROTE_tIME
 0x200

	)

2751 
	#PNG_WROTE_INFO_BEFORE_PLTE
 0x400

	)

2752 
	#PNG_BACKGROUND_IS_GRAY
 0x800

	)

2753 
	#PNG_HAVE_PNG_SIGNATURE
 0x1000

	)

2754 
	#PNG_HAVE_CHUNK_AFTER_IDAT
 0x2000

	)

2757 
	#PNG_BGR
 0x0001

	)

2758 
	#PNG_INTERLACE
 0x0002

	)

2759 
	#PNG_PACK
 0x0004

	)

2760 
	#PNG_SHIFT
 0x0008

	)

2761 
	#PNG_SWAP_BYTES
 0x0010

	)

2762 
	#PNG_INVERT_MONO
 0x0020

	)

2763 
	#PNG_DITHER
 0x0040

	)

2764 
	#PNG_BACKGROUND
 0x0080

	)

2765 
	#PNG_BACKGROUND_EXPAND
 0x0100

	)

2767 
	#PNG_16_TO_8
 0x0400

	)

2768 
	#PNG_RGBA
 0x0800

	)

2769 
	#PNG_EXPAND
 0x1000

	)

2770 
	#PNG_GAMMA
 0x2000

	)

2771 
	#PNG_GRAY_TO_RGB
 0x4000

	)

2772 
	#PNG_FILLER
 0x8000L

	)

2773 
	#PNG_PACKSWAP
 0x10000L

	)

2774 
	#PNG_SWAP_ALPHA
 0x20000L

	)

2775 
	#PNG_STRIP_ALPHA
 0x40000L

	)

2776 
	#PNG_INVERT_ALPHA
 0x80000L

	)

2777 
	#PNG_USER_TRANSFORM
 0x100000L

	)

2778 
	#PNG_RGB_TO_GRAY_ERR
 0x200000L

	)

2779 
	#PNG_RGB_TO_GRAY_WARN
 0x400000L

	)

2780 
	#PNG_RGB_TO_GRAY
 0x600000L

	)

2782 
	#PNG_ADD_ALPHA
 0x1000000L

	)

2783 
	#PNG_EXPAND_tRNS
 0x2000000L

	)

2791 
	#PNG_STRUCT_PNG
 0x0001

	)

2792 
	#PNG_STRUCT_INFO
 0x0002

	)

2795 
	#PNG_WEIGHT_SHIFT
 8

	)

2796 
	#PNG_WEIGHT_FACTOR
 (1<<(
PNG_WEIGHT_SHIFT
))

	)

2797 
	#PNG_COST_SHIFT
 3

	)

2798 
	#PNG_COST_FACTOR
 (1<<(
PNG_COST_SHIFT
))

	)

2801 
	#PNG_FLAG_ZLIB_CUSTOM_STRATEGY
 0x0001

	)

2802 
	#PNG_FLAG_ZLIB_CUSTOM_LEVEL
 0x0002

	)

2803 
	#PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL
 0x0004

	)

2804 
	#PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS
 0x0008

	)

2805 
	#PNG_FLAG_ZLIB_CUSTOM_METHOD
 0x0010

	)

2806 
	#PNG_FLAG_ZLIB_FINISHED
 0x0020

	)

2807 
	#PNG_FLAG_ROW_INIT
 0x0040

	)

2808 
	#PNG_FLAG_FILLER_AFTER
 0x0080

	)

2809 
	#PNG_FLAG_CRC_ANCILLARY_USE
 0x0100

	)

2810 
	#PNG_FLAG_CRC_ANCILLARY_NOWARN
 0x0200

	)

2811 
	#PNG_FLAG_CRC_CRITICAL_USE
 0x0400

	)

2812 
	#PNG_FLAG_CRC_CRITICAL_IGNORE
 0x0800

	)

2813 
	#PNG_FLAG_FREE_PLTE
 0x1000

	)

2814 
	#PNG_FLAG_FREE_TRNS
 0x2000

	)

2815 
	#PNG_FLAG_FREE_HIST
 0x4000

	)

2816 
	#PNG_FLAG_KEEP_UNKNOWN_CHUNKS
 0x8000L

	)

2817 
	#PNG_FLAG_KEEP_UNSAFE_CHUNKS
 0x10000L

	)

2818 
	#PNG_FLAG_LIBRARY_MISMATCH
 0x20000L

	)

2819 
	#PNG_FLAG_STRIP_ERROR_NUMBERS
 0x40000L

	)

2820 
	#PNG_FLAG_STRIP_ERROR_TEXT
 0x80000L

	)

2821 
	#PNG_FLAG_MALLOC_NULL_MEM_OK
 0x100000L

	)

2822 
	#PNG_FLAG_ADD_ALPHA
 0x200000L

	)

2823 
	#PNG_FLAG_STRIP_ALPHA
 0x400000L

	)

2833 
	#PNG_FLAG_CRC_ANCILLARY_MASK
 (
PNG_FLAG_CRC_ANCILLARY_USE
 | \

2834 
PNG_FLAG_CRC_ANCILLARY_NOWARN
)

	)

2836 
	#PNG_FLAG_CRC_CRITICAL_MASK
 (
PNG_FLAG_CRC_CRITICAL_USE
 | \

2837 
PNG_FLAG_CRC_CRITICAL_IGNORE
)

	)

2839 
	#PNG_FLAG_CRC_MASK
 (
PNG_FLAG_CRC_ANCILLARY_MASK
 | \

2840 
PNG_FLAG_CRC_CRITICAL_MASK
)

	)

2844 
	#PNG_COLOR_DIST
(
c1
, 
c2
Ë(
	`abs
(()((c1).
ªd
) - ()((c2).red)) + \

2845 
	`abs
(()((
c1
).
gªí
Ë- ()((
c2
).green)) + \

2846 
	`abs
(()((
c1
).
blue
Ë- ()((
c2
).blue)))

	)

2849 
	#PNG_ROWBYTES
(
pixñ_bôs
, 
width
) \

2850 ((
pixñ_bôs
) >= 8 ? \

2851 ((
width
Ë* (((
≤g_uöt_32
)(
pixñ_bôs
)) >> 3)) : \

2852 (–((
width
Ë* ((
≤g_uöt_32
)(
pixñ_bôs
))Ë+ 7Ë>> 3Ë)

	)

2858 
	#PNG_OUT_OF_RANGE
(
vÆue
, 
idól
, 
dñè
) \

2859 –(
vÆue
Ë< (
idól
)-(
dñè
Ë|| (vÆueË> (idól)+(dñèË)

	)

2862 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

2864 #ifde‡
PNG_USE_GLOBAL_ARRAYS


2865 
PNG_EXPORT_VAR
 (
PNG_CONST
 
≤g_byã
 
FARDATA
Ë
	g≤g_sig
[8];

2874 
	#PNG_IHDR
 
≤g_byã
 
≤g_IHDR
[5] = { 73, 72, 68, 82, '\0'}

	)

2875 
	#PNG_IDAT
 
≤g_byã
 
≤g_IDAT
[5] = { 73, 68, 65, 84, '\0'}

	)

2876 
	#PNG_IEND
 
≤g_byã
 
≤g_IEND
[5] = { 73, 69, 78, 68, '\0'}

	)

2877 
	#PNG_PLTE
 
≤g_byã
 
≤g_PLTE
[5] = { 80, 76, 84, 69, '\0'}

	)

2878 
	#PNG_bKGD
 
≤g_byã
 
≤g_bKGD
[5] = { 98, 75, 71, 68, '\0'}

	)

2879 
	#PNG_cHRM
 
≤g_byã
 
≤g_cHRM
[5] = { 99, 72, 82, 77, '\0'}

	)

2880 
	#PNG_gAMA
 
≤g_byã
 
≤g_gAMA
[5] = {103, 65, 77, 65, '\0'}

	)

2881 
	#PNG_hIST
 
≤g_byã
 
≤g_hIST
[5] = {104, 73, 83, 84, '\0'}

	)

2882 
	#PNG_iCCP
 
≤g_byã
 
≤g_iCCP
[5] = {105, 67, 67, 80, '\0'}

	)

2883 
	#PNG_iTXt
 
≤g_byã
 
≤g_iTXt
[5] = {105, 84, 88, 116, '\0'}

	)

2884 
	#PNG_oFFs
 
≤g_byã
 
≤g_oFFs
[5] = {111, 70, 70, 115, '\0'}

	)

2885 
	#PNG_pCAL
 
≤g_byã
 
≤g_pCAL
[5] = {112, 67, 65, 76, '\0'}

	)

2886 
	#PNG_sCAL
 
≤g_byã
 
≤g_sCAL
[5] = {115, 67, 65, 76, '\0'}

	)

2887 
	#PNG_pHYs
 
≤g_byã
 
≤g_pHYs
[5] = {112, 72, 89, 115, '\0'}

	)

2888 
	#PNG_sBIT
 
≤g_byã
 
≤g_sBIT
[5] = {115, 66, 73, 84, '\0'}

	)

2889 
	#PNG_sPLT
 
≤g_byã
 
≤g_sPLT
[5] = {115, 80, 76, 84, '\0'}

	)

2890 
	#PNG_sRGB
 
≤g_byã
 
≤g_sRGB
[5] = {115, 82, 71, 66, '\0'}

	)

2891 
	#PNG_tEXt
 
≤g_byã
 
≤g_tEXt
[5] = {116, 69, 88, 116, '\0'}

	)

2892 
	#PNG_tIME
 
≤g_byã
 
≤g_tIME
[5] = {116, 73, 77, 69, '\0'}

	)

2893 
	#PNG_tRNS
 
≤g_byã
 
≤g_tRNS
[5] = {116, 82, 78, 83, '\0'}

	)

2894 
	#PNG_zTXt
 
≤g_byã
 
≤g_zTXt
[5] = {122, 84, 88, 116, '\0'}

	)

2896 #ifde‡
PNG_USE_GLOBAL_ARRAYS


2897 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IHDR
[5];

2898 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IDAT
[5];

2899 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IEND
[5];

2900 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_PLTE
[5];

2901 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_bKGD
[5];

2902 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_cHRM
[5];

2903 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_gAMA
[5];

2904 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_hIST
[5];

2905 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iCCP
[5];

2906 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iTXt
[5];

2907 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_oFFs
[5];

2908 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pCAL
[5];

2909 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sCAL
[5];

2910 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pHYs
[5];

2911 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sBIT
[5];

2912 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sPLT
[5];

2913 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sRGB
[5];

2914 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tEXt
[5];

2915 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tIME
[5];

2916 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tRNS
[5];

2917 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_zTXt
[5];

2920 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2924 
PNG_EXPORT
(,
≤g_ªad_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2925 #unde‡
≤g_ªad_öô


2926 
	#≤g_ªad_öô
(
≤g_±r
Ë
	`≤g_ªad_öô_3
(&png_ptr, \

2927 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

2930 
PNG_EXPORT
(,
≤g_ªad_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

2931 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

2932 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2933 
PNG_EXPORT
(,
≤g_ªad_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2934 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

2935 
≤g_öfo_size
));

2938 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

2942 
PNG_EXPORT
(,
≤g_wrôe_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2943 #unde‡
≤g_wrôe_öô


2944 
	#≤g_wrôe_öô
(
≤g_±r
Ë
	`≤g_wrôe_öô_3
(&png_ptr, \

2945 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

2948 
PNG_EXPORT
(,
≤g_wrôe_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

2949 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

2950 
PNG_EXPORT
(,
≤g_wrôe_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2951 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

2952 
≤g_öfo_size
));

2955 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘
 
PNGARG
((
ty≥
));

2958 
PNG_EXTERN
 
≤g_de°roy_°ru˘
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
));

2960 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘_2
 
PNGARG
((
ty≥
, 
≤g_mÆloc_±r


2961 
mÆloc_‚
, 
≤g_voidp
 
mem_±r
));

2962 
PNG_EXTERN
 
≤g_de°roy_°ru˘_2
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
,

2963 
≤g_‰ì_±r
 
‰ì_‚
, 
≤g_voidp
 
mem_±r
));

2966 
PNG_EXTERN
 
≤g_öfo_de°roy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2967 
≤g_öf›
 
öfo_±r
));

2969 #i‚de‡
PNG_1_0_X


2971 
PNG_EXTERN
 
voidpf
 
≤g_zÆloc
 
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
, uI¡ 
size
));

2974 
PNG_EXTERN
 
≤g_z‰ì
 
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2976 #ifde‡
PNG_SIZE_T


2978 
PNG_EXTERN
 
≤g_size_t
 
PNGAPI
 
≤g_c⁄vît_size
 
PNGARG
((
size_t
 
size
));

2984 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2985 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

2987 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2988 
PNG_EXTERN
 
PNGAPI
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2989 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
));

2992 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2993 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

2995 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

2996 #i‡!
deföed
(
PNG_NO_STDIO
)

2997 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3001 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3002 
PNG_EXTERN
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3003 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
));

3008 
PNG_EXTERN
 
≤g_ª£t_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3011 
PNG_EXTERN
 
≤g_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3012 
≤g_size_t
 
Àngth
));

3015 
PNG_EXTERN
 
≤g_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3016 
≤g_size_t
 
Àngth
));

3019 
PNG_EXTERN
 
≤g_¸c_ªad
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
,

3020 
≤g_size_t
 
Àngth
));

3023 #i‡
deföed
(
PNG_zTXt_SUPPORTED
Ë|| deföed(
PNG_iTXt_SUPPORTED
) || \

3024 
deföed
(
PNG_iCCP_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
)

3025 
PNG_EXTERN
 
≤g_ch¨p
 
≤g_decom¥ess_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3026 
comp_ty≥
, 
≤g_ch¨p
 
chunkd©a
, 
≤g_size_t
 
chunkÀngth
,

3027 
≤g_size_t
 
¥efix_Àngth
,Öng_size_à*
d©a_Àngth
));

3031 
PNG_EXTERN
 
≤g_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
skù
));

3034 
PNG_EXTERN
 
≤g_¸c_îr‹
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3040 
PNG_EXTERN
 
≤g_ˇlcuœã_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
±r
,

3041 
≤g_size_t
 
Àngth
));

3043 #i‡
deföed
(
PNG_WRITE_FLUSH_SUPPORTED
)

3044 
PNG_EXTERN
 
≤g_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3048 
PNG_EXTERN
 
≤g_wrôe_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3055 
PNG_EXTERN
 
≤g_wrôe_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
width
,

3056 
≤g_uöt_32
 
height
,

3057 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_mëhod
, 
fûãr_mëhod
,

3058 
öãæa˚_mëhod
));

3060 
PNG_EXTERN
 
≤g_wrôe_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹p
 
∑Àâe
,

3061 
≤g_uöt_32
 
num_∑l
));

3063 
PNG_EXTERN
 
≤g_wrôe_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3064 
≤g_size_t
 
Àngth
));

3066 
PNG_EXTERN
 
≤g_wrôe_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3068 #i‡
deföed
(
PNG_WRITE_gAMA_SUPPORTED
)

3069 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3070 
PNG_EXTERN
 
≤g_wrôe_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
fûe_gamma
));

3072 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3073 
PNG_EXTERN
 
≤g_wrôe_gAMA_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_fixed_poöt


3074 
fûe_gamma
));

3078 #i‡
deföed
(
PNG_WRITE_sBIT_SUPPORTED
)

3079 
PNG_EXTERN
 
≤g_wrôe_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹_8p
 
sbô
,

3080 
cﬁ‹_ty≥
));

3083 #i‡
deföed
(
PNG_WRITE_cHRM_SUPPORTED
)

3084 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3085 
PNG_EXTERN
 
≤g_wrôe_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3086 
whôe_x
, 
whôe_y
,

3087 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
,

3088 
blue_x
, 
blue_y
));

3090 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3091 
PNG_EXTERN
 
≤g_wrôe_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3092 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3093 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3094 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3095 
≤g_fixed_poöt
 
öt_blue_y
));

3099 #i‡
deföed
(
PNG_WRITE_sRGB_SUPPORTED
)

3100 
PNG_EXTERN
 
≤g_wrôe_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3101 
öã¡
));

3104 #i‡
deföed
(
PNG_WRITE_iCCP_SUPPORTED
)

3105 
PNG_EXTERN
 
≤g_wrôe_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3106 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

3107 
≤g_ch¨p
 
¥ofûe
, 
¥oÊí
));

3111 #i‡
deföed
(
PNG_WRITE_sPLT_SUPPORTED
)

3112 
PNG_EXTERN
 
≤g_wrôe_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3113 
≤g_sPLT_ç
 
∑Àâe
));

3116 #i‡
deföed
(
PNG_WRITE_tRNS_SUPPORTED
)

3117 
PNG_EXTERN
 
≤g_wrôe_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
å™s
,

3118 
≤g_cﬁ‹_16p
 
vÆues
, 
numbî
, 
cﬁ‹_ty≥
));

3121 #i‡
deföed
(
PNG_WRITE_bKGD_SUPPORTED
)

3122 
PNG_EXTERN
 
≤g_wrôe_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3123 
≤g_cﬁ‹_16p
 
vÆues
, 
cﬁ‹_ty≥
));

3126 #i‡
deföed
(
PNG_WRITE_hIST_SUPPORTED
)

3127 
PNG_EXTERN
 
≤g_wrôe_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_16p
 
hi°
,

3128 
num_hi°
));

3131 #i‡
deföed
(
PNG_WRITE_TEXT_SUPPORTED
Ë|| deföed(
PNG_WRITE_pCAL_SUPPORTED
) || \

3132 
deföed
(
PNG_WRITE_iCCP_SUPPORTED
Ë|| deföed(
PNG_WRITE_sPLT_SUPPORTED
)

3133 
PNG_EXTERN
 
≤g_size_t
 
≤g_check_keyw‹d
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3134 
≤g_ch¨p
 
key
, 
≤g_ch¨µ
 
√w_key
));

3137 #i‡
deföed
(
PNG_WRITE_tEXt_SUPPORTED
)

3138 
PNG_EXTERN
 
≤g_wrôe_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3139 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
));

3142 #i‡
deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

3143 
PNG_EXTERN
 
≤g_wrôe_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3144 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
, 
com¥essi⁄
));

3147 #i‡
deföed
(
PNG_WRITE_iTXt_SUPPORTED
)

3148 
PNG_EXTERN
 
≤g_wrôe_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3149 
com¥essi⁄
, 
≤g_ch¨p
 
key
,Öng_ch¨∞
œng
,Öng_ch¨∞
œng_key
,

3150 
≤g_ch¨p
 
ãxt
));

3153 #i‡
deföed
(
PNG_TEXT_SUPPORTED
)

3154 
PNG_EXTERN
 
≤g_£t_ãxt_2
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3155 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

3158 #i‡
deföed
(
PNG_WRITE_oFFs_SUPPORTED
)

3159 
PNG_EXTERN
 
≤g_wrôe_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3160 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
, 
unô_ty≥
));

3163 #i‡
deföed
(
PNG_WRITE_pCAL_SUPPORTED
)

3164 
PNG_EXTERN
 
≤g_wrôe_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
puΩo£
,

3165 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
, 
≈¨ams
,

3166 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

3169 #i‡
deföed
(
PNG_WRITE_pHYs_SUPPORTED
)

3170 
PNG_EXTERN
 
≤g_wrôe_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3171 
≤g_uöt_32
 
x_pixñs_≥r_unô
,Öng_uöt_32 
y_pixñs_≥r_unô
,

3172 
unô_ty≥
));

3175 #i‡
deföed
(
PNG_WRITE_tIME_SUPPORTED
)

3176 
PNG_EXTERN
 
≤g_wrôe_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3177 
≤g_timï
 
mod_time
));

3180 #i‡
deföed
(
PNG_WRITE_sCAL_SUPPORTED
)

3181 #i‡
deföed
(
PNG_FLOATING_POINT_SUPPORTED
Ë&& !deföed(
PNG_NO_STDIO
)

3182 
PNG_EXTERN
 
≤g_wrôe_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3183 
unô
, 
width
, 
height
));

3185 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3186 
PNG_EXTERN
 
≤g_wrôe_sCAL_s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3187 
unô
, 
≤g_ch¨p
 
width
,Öng_ch¨∞
height
));

3193 
PNG_EXTERN
 
≤g_wrôe_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3196 
PNG_EXTERN
 
≤g_wrôe_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3198 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3199 
PNG_EXTERN
 
≤g_buûd_gamma_èbÀ
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3203 
PNG_EXTERN
 
≤g_comböe_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
,

3204 
mask
));

3206 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
)

3212 
PNG_EXTERN
 
≤g_do_ªad_öãæa˚
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3217 #i‡
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

3219 
PNG_EXTERN
 
≤g_do_wrôe_öãæa˚
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3220 
≤g_byãp
 
row
, 
∑ss
));

3224 
PNG_EXTERN
 
≤g_ªad_fûãr_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3225 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,Öng_byã∞
¥ev_row
, 
fûãr
));

3228 
PNG_EXTERN
 
≤g_wrôe_föd_fûãr
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3229 
≤g_row_öf›
 
row_öfo
));

3232 
PNG_EXTERN
 
≤g_wrôe_fûãªd_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3233 
≤g_byãp
 
fûãªd_row
));

3235 
PNG_EXTERN
 
≤g_ªad_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3238 
PNG_EXTERN
 
≤g_ªad_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3240 
PNG_EXTERN
 
≤g_ªad_å™sf‹m_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3241 
≤g_öf›
 
öfo_±r
));

3244 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
)

3245 
PNG_EXTERN
 
≤g_do_ªad_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3246 
≤g_byãp
 
row
, 
≤g_uöt_32
 
fûÀr
,Öng_uöt_32 
Êags
));

3249 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
)

3250 
PNG_EXTERN
 
≤g_do_ªad_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3251 
≤g_byãp
 
row
));

3254 #i‡
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

3255 
PNG_EXTERN
 
≤g_do_wrôe_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3256 
≤g_byãp
 
row
));

3259 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
)

3260 
PNG_EXTERN
 
≤g_do_ªad_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3261 
≤g_byãp
 
row
));

3264 #i‡
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

3265 
PNG_EXTERN
 
≤g_do_wrôe_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3266 
≤g_byãp
 
row
));

3269 #i‡
deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

3270 
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

3271 
PNG_EXTERN
 
≤g_do_°rù_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3272 
≤g_byãp
 
row
, 
≤g_uöt_32
 
Êags
));

3275 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

3276 
PNG_EXTERN
 
≤g_do_sw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3279 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

3280 
PNG_EXTERN
 
≤g_do_∑cksw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3283 #i‡
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

3284 
PNG_EXTERN
 
≤g_do_rgb_to_gøy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›


3285 
row_öfo
, 
≤g_byãp
 
row
));

3288 #i‡
deföed
(
PNG_READ_GRAY_TO_RGB_SUPPORTED
)

3289 
PNG_EXTERN
 
≤g_do_gøy_to_rgb
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3290 
≤g_byãp
 
row
));

3293 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
)

3294 
PNG_EXTERN
 
≤g_do_u≈ack
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3297 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
)

3298 
PNG_EXTERN
 
≤g_do_unshi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3299 
≤g_cﬁ‹_8p
 
sig_bôs
));

3302 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

3303 
PNG_EXTERN
 
≤g_do_övît
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3306 #i‡
deföed
(
PNG_READ_16_TO_8_SUPPORTED
)

3307 
PNG_EXTERN
 
≤g_do_ch›
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3310 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
)

3311 
PNG_EXTERN
 
≤g_do_dôhî
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3312 
≤g_byãp
 
row
,Öng_byã∞
∑Àâe_lookup
,Öng_byã∞
dôhî_lookup
));

3314 #i‡
deföed
(
PNG_CORRECT_PALETTE_SUPPORTED
)

3315 
PNG_EXTERN
 
≤g_c‹ª˘_∑Àâe
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3316 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

3320 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

3321 
PNG_EXTERN
 
≤g_do_bgr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
));

3324 #i‡
deföed
(
PNG_WRITE_PACK_SUPPORTED
)

3325 
PNG_EXTERN
 
≤g_do_∑ck
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3326 
≤g_byãp
 
row
, 
≤g_uöt_32
 
bô_dïth
));

3329 #i‡
deföed
(
PNG_WRITE_SHIFT_SUPPORTED
)

3330 
PNG_EXTERN
 
≤g_do_shi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3331 
≤g_cﬁ‹_8p
 
bô_dïth
));

3334 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

3335 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3336 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3337 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
,

3338 
≤g_cﬁ‹_16p
 
background_1
,

3339 
≤g_byãp
 
gamma_èbÀ
,Öng_byã∞
gamma_‰om_1
,Öng_byã∞
gamma_to_1
,

3340 
≤g_uöt_16µ
 
gamma_16
,Öng_uöt_16µ 
gamma_16_‰om_1
,

3341 
≤g_uöt_16µ
 
gamma_16_to_1
, 
gamma_shi·
));

3343 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3344 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
));

3348 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
)

3349 
PNG_EXTERN
 
≤g_do_gamma
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3350 
≤g_byãp
 
gamma_èbÀ
, 
≤g_uöt_16µ
 
gamma_16_èbÀ
,

3351 
gamma_shi·
));

3354 #i‡
deföed
(
PNG_READ_EXPAND_SUPPORTED
)

3355 
PNG_EXTERN
 
≤g_do_ex∑nd_∑Àâe
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3356 
≤g_byãp
 
row
, 
≤g_cﬁ‹p
 
∑Àâe
,Öng_byã∞
å™s
, 
num_å™s
));

3357 
PNG_EXTERN
 
≤g_do_ex∑nd
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3358 
≤g_byãp
 
row
, 
≤g_cﬁ‹_16p
 
å™s_vÆue
));

3366 
PNG_EXTERN
 
≤g_h™dÀ_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3367 
≤g_uöt_32
 
Àngth
));

3368 
PNG_EXTERN
 
≤g_h™dÀ_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3369 
≤g_uöt_32
 
Àngth
));

3370 
PNG_EXTERN
 
≤g_h™dÀ_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3371 
≤g_uöt_32
 
Àngth
));

3373 #i‡
deföed
(
PNG_READ_bKGD_SUPPORTED
)

3374 
PNG_EXTERN
 
≤g_h™dÀ_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3375 
≤g_uöt_32
 
Àngth
));

3378 #i‡
deföed
(
PNG_READ_cHRM_SUPPORTED
)

3379 
PNG_EXTERN
 
≤g_h™dÀ_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3380 
≤g_uöt_32
 
Àngth
));

3383 #i‡
deföed
(
PNG_READ_gAMA_SUPPORTED
)

3384 
PNG_EXTERN
 
≤g_h™dÀ_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3385 
≤g_uöt_32
 
Àngth
));

3388 #i‡
deföed
(
PNG_READ_hIST_SUPPORTED
)

3389 
PNG_EXTERN
 
≤g_h™dÀ_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3390 
≤g_uöt_32
 
Àngth
));

3393 #i‡
deföed
(
PNG_READ_iCCP_SUPPORTED
)

3394 
≤g_h™dÀ_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3395 
≤g_uöt_32
 
Àngth
));

3398 #i‡
deföed
(
PNG_READ_iTXt_SUPPORTED
)

3399 
PNG_EXTERN
 
≤g_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3400 
≤g_uöt_32
 
Àngth
));

3403 #i‡
deföed
(
PNG_READ_oFFs_SUPPORTED
)

3404 
PNG_EXTERN
 
≤g_h™dÀ_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3405 
≤g_uöt_32
 
Àngth
));

3408 #i‡
deföed
(
PNG_READ_pCAL_SUPPORTED
)

3409 
PNG_EXTERN
 
≤g_h™dÀ_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3410 
≤g_uöt_32
 
Àngth
));

3413 #i‡
deföed
(
PNG_READ_pHYs_SUPPORTED
)

3414 
PNG_EXTERN
 
≤g_h™dÀ_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3415 
≤g_uöt_32
 
Àngth
));

3418 #i‡
deföed
(
PNG_READ_sBIT_SUPPORTED
)

3419 
PNG_EXTERN
 
≤g_h™dÀ_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3420 
≤g_uöt_32
 
Àngth
));

3423 #i‡
deföed
(
PNG_READ_sCAL_SUPPORTED
)

3424 
PNG_EXTERN
 
≤g_h™dÀ_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3425 
≤g_uöt_32
 
Àngth
));

3428 #i‡
deföed
(
PNG_READ_sPLT_SUPPORTED
)

3429 
≤g_h™dÀ_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3430 
≤g_uöt_32
 
Àngth
));

3433 #i‡
deföed
(
PNG_READ_sRGB_SUPPORTED
)

3434 
PNG_EXTERN
 
≤g_h™dÀ_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3435 
≤g_uöt_32
 
Àngth
));

3438 #i‡
deföed
(
PNG_READ_tEXt_SUPPORTED
)

3439 
PNG_EXTERN
 
≤g_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3440 
≤g_uöt_32
 
Àngth
));

3443 #i‡
deföed
(
PNG_READ_tIME_SUPPORTED
)

3444 
PNG_EXTERN
 
≤g_h™dÀ_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3445 
≤g_uöt_32
 
Àngth
));

3448 #i‡
deföed
(
PNG_READ_tRNS_SUPPORTED
)

3449 
PNG_EXTERN
 
≤g_h™dÀ_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3450 
≤g_uöt_32
 
Àngth
));

3453 #i‡
deföed
(
PNG_READ_zTXt_SUPPORTED
)

3454 
PNG_EXTERN
 
≤g_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3455 
≤g_uöt_32
 
Àngth
));

3458 
PNG_EXTERN
 
≤g_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3459 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3461 
PNG_EXTERN
 
≤g_check_chunk_«me
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3462 
≤g_byãp
 
chunk_«me
));

3465 
PNG_EXTERN
 
≤g_do_ªad_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3466 
PNG_EXTERN
 
≤g_do_wrôe_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3468 
PNG_EXTERN
 
≤g_öô_ªad_å™sf‹m©i⁄s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3470 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3471 
PNG_EXTERN
 
≤g_push_ªad_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3472 
≤g_öf›
 
öfo_±r
));

3473 
PNG_EXTERN
 
≤g_push_ªad_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3474 
≤g_öf›
 
öfo_±r
));

3475 
PNG_EXTERN
 
≤g_push_check_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3476 
PNG_EXTERN
 
≤g_push_¸c_skù
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3477 
≤g_uöt_32
 
Àngth
));

3478 
PNG_EXTERN
 
≤g_push_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3479 
PNG_EXTERN
 
≤g_push_ßve_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3480 
PNG_EXTERN
 
≤g_push_ª°‹e_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3481 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
));

3482 
PNG_EXTERN
 
≤g_push_ªad_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3483 
PNG_EXTERN
 
≤g_¥o˚ss_IDAT_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3484 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
));

3485 
PNG_EXTERN
 
≤g_push_¥o˚ss_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3486 
PNG_EXTERN
 
≤g_push_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3487 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3488 
PNG_EXTERN
 
≤g_push_have_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3489 
≤g_öf›
 
öfo_±r
));

3490 
PNG_EXTERN
 
≤g_push_have_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3491 
≤g_öf›
 
öfo_±r
));

3492 
PNG_EXTERN
 
≤g_push_have_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
));

3493 
PNG_EXTERN
 
≤g_push_ªad_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3494 
≤g_öf›
 
öfo_±r
));

3495 
PNG_EXTERN
 
≤g_¥o˚ss_some_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3496 
≤g_öf›
 
öfo_±r
));

3497 
PNG_EXTERN
 
≤g_ªad_push_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3498 #i‡
deföed
(
PNG_READ_tEXt_SUPPORTED
)

3499 
PNG_EXTERN
 
≤g_push_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3500 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3501 
PNG_EXTERN
 
≤g_push_ªad_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3502 
≤g_öf›
 
öfo_±r
));

3504 #i‡
deföed
(
PNG_READ_zTXt_SUPPORTED
)

3505 
PNG_EXTERN
 
≤g_push_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3506 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3507 
PNG_EXTERN
 
≤g_push_ªad_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3508 
≤g_öf›
 
öfo_±r
));

3510 #i‡
deföed
(
PNG_READ_iTXt_SUPPORTED
)

3511 
PNG_EXTERN
 
≤g_push_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3512 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
));

3513 
PNG_EXTERN
 
≤g_push_ªad_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3514 
≤g_öf›
 
öfo_±r
));

3519 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


3520 
PNG_EXTERN
 
≤g_do_ªad_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3521 
≤g_byãp
 
row
));

3522 
PNG_EXTERN
 
≤g_do_wrôe_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3523 
≤g_byãp
 
row
));

3526 #i‡
deföed
(
PNG_ASSEMBLER_CODE_SUPPORTED
)

3527 #i‡
deföed
(
PNG_MMX_CODE_SUPPORTED
)

3529 
PNG_EXTERN
 
≤g_öô_mmx_Êags
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3533 #i‡
deföed
(
PNG_INCH_CONVERSIONS
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

3534 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3535 
≤g_öf›
 
öfo_±r
));

3537 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_x_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3538 
≤g_öf›
 
öfo_±r
));

3540 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_y_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3541 
≤g_öf›
 
öfo_±r
));

3543 
PNG_EXTERN
 
≤g_gë_x_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3544 
≤g_öf›
 
öfo_±r
));

3546 
PNG_EXTERN
 
≤g_gë_y_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3547 
≤g_öf›
 
öfo_±r
));

3549 #i‡
deföed
(
PNG_pHYs_SUPPORTED
)

3550 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pHYs_dpi
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3551 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

3559 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_GNU


70 
	mPTHREAD_MUTEX_STALLED_NP
,

71 
	mPTHREAD_MUTEX_ROBUST_NP


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_UNIX98


430 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

433 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

436 #ifde‡
__USE_GNU


441 
	$±hªad_yõld
 (Ë
__THROW
;

446 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

447 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3));

451 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

452 
˝u_£t_t
 *
__˝u£t
)

453 
__THROW
 
	`__n⁄nuŒ
 ((3));

466 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

467 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

478 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

482 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

485 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

490 
	`±hªad_ã°ˇn˚l
 ();

499 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

500 
__mask_was_ßved
;

501 } 
__ˇn˚l_jmp_buf
[1];

502 *
__∑d
[4];

503 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

506 #i‚de‡
__˛ónup_f˘_©åibuã


507 
	#__˛ónup_f˘_©åibuã


	)

512 
	s__±hªad_˛ónup_‰ame


514 (*
__ˇn˚l_routöe
) (*);

515 *
__ˇn˚l_¨g
;

516 
__do_ô
;

517 
__ˇn˚l_ty≥
;

520 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


521 #ifde‡
__˝lu•lus


523 ˛as†
	c__±hªad_˛ónup_˛ass


525 (*
__ˇn˚l_routöe
) (*);

526 *
__ˇn˚l_¨g
;

527 
__do_ô
;

528 
__ˇn˚l_ty≥
;

530 
public
:

531 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

532 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

533 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

534 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

535 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

536 &
__ˇn˚l_ty≥
); 
	}
}

537 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

547 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

549 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

553 
	#±hªad_˛ónup_p›
(
execuã
) \

554 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

555 } 0)

	)

557 #ifde‡
__USE_GNU


561 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

563 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

564 
__˛‰ame
.
	`__de„r
 ()

	)

569 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

570 
__˛‰ame
.
	`__ª°‹e
 (); \

571 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

572 } 0)

	)

579 
__exã∫_ölöe
 

580 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

582 i‡(
__‰ame
->
__do_ô
)

583 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

584 
	}
}

593 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

595 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

596 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

597 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

598 .
__do_ô
 = 1 };

	)

602 
	#±hªad_˛ónup_p›
(
execuã
) \

603 
__˛‰ame
.
__do_ô
 = (
execuã
); \

604 } 0)

	)

606 #ifde‡
__USE_GNU


610 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

612 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

613 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

614 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

615 .
__do_ô
 = 1 }; \

616 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

617 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

622 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

623 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

624 
__˛‰ame
.
__do_ô
 = (
execuã
); \

625 } 0)

	)

636 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

638 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

639 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

640 *
__ˇn˚l_¨g
 = (
¨g
); \

641 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

642 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

643 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

645 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

646 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

650 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

651 dÿ{

	)

652 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

653 
__˛ónup_f˘_©åibuã
;

657 
	#±hªad_˛ónup_p›
(
execuã
) \

660 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

661 i‡(
execuã
) \

662 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

663 } 0)

	)

664 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

667 #ifde‡
__USE_GNU


671 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

673 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

674 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

675 *
__ˇn˚l_¨g
 = (
¨g
); \

676 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

677 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

678 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

680 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

681 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

685 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

686 dÿ{

	)

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

688 
__˛ónup_f˘_©åibuã
;

693 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

696 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

697 i‡(
execuã
) \

698 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

699 
	}
} 0)

	)

700 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

701 
__˛ónup_f˘_©åibuã
;

705 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

706 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

707 #i‚de‡
SHARED


708 
	`__©åibuã__
 ((
__wók__
))

714 
__jmp_buf_èg
;

715 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

721 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

722 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

723 
__THROW
 
	`__n⁄nuŒ
 ((1));

726 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

737 #ifde‡
__USE_XOPEN2K


739 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

740 
__c⁄°
 
time•ec
 *
__ª°ri˘


741 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

745 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_UNIX98


751 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

752 
__ª°ri˘
 
__muãx
,

753 *
__ª°ri˘
 
__¥io˚ûög
)

754 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

758 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 
__¥io˚ûög
,

760 *
__ª°ri˘
 
__ﬁd_˚ûög
)

761 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

765 #ifde‡
__USE_GNU


767 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROW
 
	`__n⁄nuŒ
 ((1));

776 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

780 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

784 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

785 
__ª°ri˘
 
__©å
,

786 *
__ª°ri˘
 
__psh¨ed
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

790 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

791 
__psh¨ed
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_UNIX98


796 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


797 
__©å
, *
__ª°ri˘
 
__köd
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

808 
__ª°ri˘
 
__©å
,

809 *
__ª°ri˘
 
__¥Ÿocﬁ
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

819 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

820 
__ª°ri˘
 
__©å
,

821 *
__ª°ri˘
 
__¥io˚ûög
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

825 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

826 
__¥io˚ûög
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_GNU


832 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

833 *
__robu°√ss
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

837 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

838 
__robu°√ss
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


848 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

849 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


850 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

853 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

864 #ifde‡
__USE_XOPEN2K


866 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

867 
__c⁄°
 
time•ec
 *
__ª°ri˘


868 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

873 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

879 #ifde‡
__USE_XOPEN2K


881 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

882 
__c⁄°
 
time•ec
 *
__ª°ri˘


883 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

887 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

903 
__ª°ri˘
 
__©å
,

904 *
__ª°ri˘
 
__psh¨ed
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

908 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

909 
__psh¨ed
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1));

913 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

914 
__ª°ri˘
 
__©å
,

915 *
__ª°ri˘
 
__¥ef
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

919 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

920 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

929 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


930 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

950 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

951 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

961 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

962 
__c⁄°
 
time•ec
 *
__ª°ri˘


963 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

968 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

969 
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

977 
__ª°ri˘
 
__©å
,

978 *
__ª°ri˘
 
__psh¨ed
)

979 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

982 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

983 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

985 #ifde‡
__USE_XOPEN2K


987 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

988 
__ª°ri˘
 
__©å
,

989 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

990 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

993 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

994 
__˛ockid_t
 
__˛ock_id
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1));

999 #ifde‡
__USE_XOPEN2K


1004 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1005 
__THROW
 
	`__n⁄nuŒ
 ((1));

1008 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1017 
__THROW
 
	`__n⁄nuŒ
 ((1));

1020 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1029 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1030 
__©å
, 
__cou¡
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1));

1034 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1038 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1044 
__THROW
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1048 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1052 
__ª°ri˘
 
__©å
,

1053 *
__ª°ri˘
 
__psh¨ed
)

1054 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1057 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1058 
__psh¨ed
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1072 (*
__de°r_fun˘i⁄
) (*))

1073 
__THROW
 
	`__n⁄nuŒ
 ((1));

1076 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1079 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1082 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1083 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1086 #ifde‡
__USE_XOPEN2K


1088 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1089 
__˛ockid_t
 *
__˛ock_id
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((2));

1105 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1106 (*
__∑ª¡
) (),

1107 (*
__chûd
Ë()Ë
__THROW
;

1110 #ifde‡
__USE_EXTERN_INLINES


1112 
__exã∫_ölöe
 

1113 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1115  
__thªad1
 =
__thªad2
;

1116 
	}
}

1119 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


342 
	#__√ed_size_t


	)

343 
	~<°ddef.h
>

348 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

350 
	~<bôs/sig°ack.h
>

351 #ifde‡
__USE_XOPEN


353 
	~<sys/uc⁄ãxt.h
>

359 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

360 
__THROW
 
__©åibuã_dïªˇãd__
;

364 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

365 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

369 #ifde‡
__USE_XOPEN_EXTENDED


373 
	$sighﬁd
 (
__sig
Ë
__THROW
;

376 
	$sigªl£
 (
__sig
Ë
__THROW
;

379 
	$sigign‹e
 (
__sig
Ë
__THROW
;

382 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

385 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


388 
	~<bôs/±hªadty≥s.h
>

389 
	~<bôs/sigthªad.h
>

396 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

398 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

402 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

295 
__THROW
 
__wur
;

300 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
__BEGIN_NAMESPACE_STD


307 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

311 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

312 
__modes
, 
size_t
 
__n
Ë
__THROW
;

313 
__END_NAMESPACE_STD


315 #ifdef 
__USE_BSD


318 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

319 
size_t
 
__size
Ë
__THROW
;

322 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
__BEGIN_NAMESPACE_STD


331 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

332 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

337 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	$•rötf
 (*
__ª°ri˘
 
__s
,

340 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

346 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

347 
_G_va_li°
 
__¨g
);

352 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

354 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

355 
_G_va_li°
 
__¨g
Ë
__THROW
;

356 
__END_NAMESPACE_STD


358 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


359 
__BEGIN_NAMESPACE_C99


361 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

365 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

367 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

368 
__END_NAMESPACE_C99


371 #ifde‡
__USE_GNU


374 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

375 
_G_va_li°
 
__¨g
)

376 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

377 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

378 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

379 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

380 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

381 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

382 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

390 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

391 
_G_va_li°
 
__¨g
)

392 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

393 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

394 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

398 
__BEGIN_NAMESPACE_STD


403 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

404 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

409 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

411 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

412 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

414 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

415 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

416 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

417 #ifde‡
__REDIRECT


421 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

422 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

423 
__isoc99_fsˇnf
Ë
__wur
;

424 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

425 
__isoc99_sˇnf
Ë
__wur
;

426 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

427 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

428 
__isoc99_ssˇnf
Ë
__THROW
;

430 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

432 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

434 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

435 
	#fsˇnf
 
__isoc99_fsˇnf


	)

436 
	#sˇnf
 
__isoc99_sˇnf


	)

437 
	#ssˇnf
 
__isoc99_ssˇnf


	)

441 
__END_NAMESPACE_STD


443 #ifdef 
__USE_ISOC99


444 
__BEGIN_NAMESPACE_C99


449 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

450 
_G_va_li°
 
__¨g
)

451 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

457 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

461 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

463 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

465 #i‡!
deföed
 
__USE_GNU
 \

466 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

467 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

468 #ifde‡
__REDIRECT


472 
	`__REDIRECT
 (
vfsˇnf
,

473 (
FILE
 *
__ª°ri˘
 
__s
,

474 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

475 
__isoc99_vfsˇnf
)

476 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

477 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

478 
_G_va_li°
 
__¨g
), 
__isoc99_vfsˇnf
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

480 
	`__REDIRECT
 (
vssˇnf
,

481 (
__c⁄°
 *
__ª°ri˘
 
__s
,

482 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

483 
__isoc99_vssˇnf
)

484 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

486 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

487 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

488 
_G_va_li°
 
__¨g
Ë
__wur
;

489 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

490 
_G_va_li°
 
__¨g
Ë
__wur
;

491 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

492 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

493 
_G_va_li°
 
__¨g
Ë
__THROW
;

494 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

495 
	#vsˇnf
 
__isoc99_vsˇnf


	)

496 
	#vssˇnf
 
__isoc99_vssˇnf


	)

500 
__END_NAMESPACE_C99


504 
__BEGIN_NAMESPACE_STD


509 
	`fgëc
 (
FILE
 *
__°ªam
);

510 
	`gëc
 (
FILE
 *
__°ªam
);

516 
	`gëch¨
 ();

517 
__END_NAMESPACE_STD


521 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

523 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


528 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

529 
	`gëch¨_u∆ocked
 ();

532 #ifde‡
__USE_MISC


539 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

543 
__BEGIN_NAMESPACE_STD


551 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

558 
	`putch¨
 (
__c
);

559 
__END_NAMESPACE_STD


563 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

565 #ifde‡
__USE_MISC


572 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

575 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


580 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

581 
	`putch¨_u∆ocked
 (
__c
);

585 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

586 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

588 
	`gëw
 (
FILE
 *
__°ªam
);

591 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

595 
__BEGIN_NAMESPACE_STD


600 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

601 
__wur
;

608 *
	$gës
 (*
__s
Ë
__wur
;

609 
__END_NAMESPACE_STD


611 #ifde‡
__USE_GNU


618 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

619 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

623 #ifdef 
__USE_GNU


634 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

635 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

636 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

637 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

638 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

639 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

648 
size_t
 *
__ª°ri˘
 
__n
,

649 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 
__BEGIN_NAMESPACE_STD


658 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

664 
	`puts
 (
__c⁄°
 *
__s
);

671 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

678 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

685 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

686 
__END_NAMESPACE_STD


688 #ifde‡
__USE_GNU


695 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

696 
FILE
 *
__ª°ri˘
 
__°ªam
);

699 #ifde‡
__USE_MISC


706 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

713 
__BEGIN_NAMESPACE_STD


718 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

723 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

728 
	`ªwöd
 (
FILE
 *
__°ªam
);

729 
__END_NAMESPACE_STD


736 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


737 #i‚de‡
__USE_FILE_OFFSET64


742 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

747 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

749 #ifde‡
__REDIRECT


750 
	`__REDIRECT
 (
f£eko
,

751 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

752 
f£eko64
);

753 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

755 
	#f£eko
 
f£eko64


	)

756 
	#·ñlo
 
·ñlo64


	)

761 
__BEGIN_NAMESPACE_STD


762 #i‚de‡
__USE_FILE_OFFSET64


767 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

772 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

774 #ifde‡
__REDIRECT


775 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

776 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

777 
	`__REDIRECT
 (
f£ços
,

778 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

780 
	#fgëpos
 
fgëpos64


	)

781 
	#f£ços
 
f£ços64


	)

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_LARGEFILE64


787 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

788 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

789 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

790 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

793 
__BEGIN_NAMESPACE_STD


795 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

797 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

799 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

800 
__END_NAMESPACE_STD


802 #ifde‡
__USE_MISC


804 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

805 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
__BEGIN_NAMESPACE_STD


815 
	`≥º‹
 (
__c⁄°
 *
__s
);

816 
__END_NAMESPACE_STD


822 
	~<bôs/sys_îæi°.h
>

825 #ifdef 
__USE_POSIX


827 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 #ifde‡
__USE_MISC


832 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

837 
deföed
 
__USE_MISC
)

842 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

848 
	`p˛o£
 (
FILE
 *
__°ªam
);

852 #ifdef 
__USE_POSIX


854 *
	$˘îmid
 (*
__s
Ë
__THROW
;

858 #ifde‡
__USE_XOPEN


860 *
	`cu£rid
 (*
__s
);

864 #ifdef 
__USE_GNU


865 
ob°ack
;

868 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

869 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

870 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

871 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

872 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

873 
_G_va_li°
 
__¨gs
)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

878 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


882 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

886 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

889 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

892 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


896 
	#__√ed_gë›t


	)

897 
	~<gë›t.h
>

902 #ifde‡
__USE_EXTERN_INLINES


903 
	~<bôs/°dio.h
>

905 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


906 
	~<bôs/°dio2.h
>

908 #ifde‡
__LDBL_COMPAT


909 
	~<bôs/°dio-ldbl.h
>

912 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

518 
__END_NAMESPACE_STD


520 #ifdef 
__USE_MISC


523 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
__BEGIN_NAMESPACE_STD


531 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

532 
__END_NAMESPACE_STD


534 #ifde‡
__USE_ISOC99


535 
__BEGIN_NAMESPACE_C99


538 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

539 
__END_NAMESPACE_C99


543 
__BEGIN_NAMESPACE_STD


545 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

546 
__END_NAMESPACE_STD


550 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

551 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

553 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


557 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


563 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

564 
__THROW
 
	`__n⁄nuŒ
 ((2));

567 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

570 #ifdef 
__USE_MISC


574 
	$˛óªnv
 (Ë
__THROW
;

578 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

593 #i‚de‡
__USE_FILE_OFFSET64


594 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

596 #ifde‡
__REDIRECT


597 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

598 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

600 
	#mk°emp
 
mk°emp64


	)

603 #ifde‡
__USE_LARGEFILE64


604 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 #ifde‡
__USE_BSD


614 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_GNU


624 #i‚de‡
__USE_FILE_OFFSET64


625 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

627 #ifde‡
__REDIRECT


628 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

631 
	#mko°emp
 
mko°emp64


	)

634 #ifde‡
__USE_LARGEFILE64


635 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
__BEGIN_NAMESPACE_STD


645 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

646 
__END_NAMESPACE_STD


649 #ifdef 
__USE_GNU


652 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

653 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


662 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

663 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

668 #i‚de‡
__COMPAR_FN_T


669 
	#__COMPAR_FN_T


	)

670 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

672 #ifdef 
__USE_GNU


673 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

676 #ifde‡
__USE_GNU


677 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

680 
__BEGIN_NAMESPACE_STD


683 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

684 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

685 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

689 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

690 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

691 #ifde‡
__USE_GNU


692 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

693 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

694 
	`__n⁄nuŒ
 ((1, 4));

699 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

700 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

701 
__END_NAMESPACE_STD


703 #ifde‡
__USE_ISOC99


704 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

705 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

709 
__BEGIN_NAMESPACE_STD


713 
div_t
 
	$div
 (
__numî
, 
__díom
)

714 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

715 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

716 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_ISOC99


720 
__BEGIN_NAMESPACE_C99


721 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

722 
__díom
)

723 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

724 
__END_NAMESPACE_C99


728 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


735 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

736 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

741 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

742 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

747 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

748 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

751 #ifde‡
__USE_MISC


753 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

754 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

755 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

756 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

757 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

758 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

759 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

760 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

765 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

766 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

767 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

768 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

769 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

770 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

772 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

773 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

774 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

775 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

776 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

777 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

778 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

779 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

784 
__BEGIN_NAMESPACE_STD


787 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

790 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

791 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

794 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

798 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

799 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

801 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

802 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

803 
__THROW
;

804 
__END_NAMESPACE_STD


807 #ifde‡
__USE_SVID


812 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

816 #ifde‡
__USE_XOPEN_EXTENDED


823 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

824 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

825 **
__ª°ri˘
 
__vÆuï
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

830 #ifde‡
__USE_XOPEN


832 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 #ifde‡
__USE_XOPEN2K


840 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

843 #ifde‡
__USE_XOPEN


848 
	$gø¡±
 (
__fd
Ë
__THROW
;

852 
	$u∆ock±
 (
__fd
Ë
__THROW
;

857 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

860 #ifde‡
__USE_GNU


864 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

865 
__THROW
 
	`__n⁄nuŒ
 ((2));

868 
	`gë±
 ();

871 #ifde‡
__USE_BSD


875 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

876 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/°dlib.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/°dlib-ldbl.h
>

889 #unde‡
__√ed_mÆloc_™d_ˇŒoc


891 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

286 #ifde‡
__USE_GNU


288 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #ifde‡
__USE_BSD


298 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

306 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

310 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

313 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

318 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifdef 
__USE_GNU


323 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

324 #ifde‡
__GNUC__


325 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

326 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

331 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

332 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

336 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

339 #ifdef 
__USE_GNU


342 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

343 
__loˇÀ_t
 
__loc
)

344 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

346 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

347 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

348 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

351 #ifdef 
__USE_BSD


354 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

359 #ifdef 
__USE_GNU


361 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

362 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

368 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

370 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

376 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

379 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

383 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

386 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

388 #i‚de‡
ba£«me


393 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

399 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

400 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


420 
	~<bôs/°rög.h
>

423 
	~<bôs/°rög2.h
>

426 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


428 
	~<bôs/°rög3.h
>

432 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
__BEGIN_DECLS


34 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
;

38 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

41 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

45 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

48 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

51 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW
 
__©åibuã_puª__
;

54 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

55 
__THROW
 
__©åibuã_puª__
;

58 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

59 
__THROW
 
__©åibuã_puª__
;

61 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

36 
	~<bôs/sockë.h
>

38 #ifde‡
__USE_BSD


41 
	sosockaddr


43 
	mß_Ámûy
;

44 
	mß_d©a
[14];

52 
	mSHUT_RD
 = 0,

53 
	#SHUT_RD
 
SHUT_RD


	)

54 
	mSHUT_WR
,

55 
	#SHUT_WR
 
SHUT_WR


	)

56 
	mSHUT_RDWR


57 
	#SHUT_RDWR
 
SHUT_RDWR


	)

66 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


67 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

68 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

72 
	#__SOCKADDR_ALLTYPES
 \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

87 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

88 uni⁄ { 
	m__SOCKADDR_ALLTYPES


89 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

90 #unde‡
__SOCKADDR_ONETYPE


91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


101 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

107 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

108 
__fds
[2]Ë
__THROW
;

111 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

112 
__THROW
;

115 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

116 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

125 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

129 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

130 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

144 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

151 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

152 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

153 
sockÀn_t
 
__addr_Àn
);

162 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

163 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

164 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

172 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

173 
__Êags
);

180 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

186 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

187 *
__ª°ri˘
 
__›tvÆ
,

188 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

193 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

194 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

200 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

210 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

211 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

219 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

222 #ifde‡
__USE_XOPEN2K


224 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

228 #ifde‡
__USE_MISC


232 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

237 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


238 
	~<bôs/sockë2.h
>

241 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

257 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


258 #i‚de‡
__USE_FILE_OFFSET64


261 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

262 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
l°©
,

266 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

267 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

268 
	`__n⁄nuŒ
 ((1, 2));

270 
	#l°©
 
l°©64


	)

273 #ifde‡
__USE_LARGEFILE64


274 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

275 
°©64
 *
__ª°ri˘
 
__buf
)

276 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

282 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 #ifde‡
__USE_BSD


289 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


295 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

298 #ifde‡
__USE_ATFILE


301 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
mode
, 
__Êag
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

309 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

311 #ifdef 
__USE_GNU


314 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

318 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1));

321 #ifde‡
__USE_ATFILE


325 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

326 
__THROW
 
	`__n⁄nuŒ
 ((2));

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


333 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 #ifde‡
__USE_ATFILE


341 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

342 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

347 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1));

350 #ifde‡
__USE_ATFILE


354 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2));

358 #ifde‡
__USE_ATFILE


361 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

362 
__c⁄°
 
time•ec
 
__times
[2],

363 
__Êags
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

367 #ifde‡
__USE_GNU


370 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

388 #i‚de‡
_STAT_VER


389 
	#_STAT_VER
 0

	)

391 #i‚de‡
_MKNOD_VER


392 
	#_MKNOD_VER
 0

	)

396 #i‚de‡
__USE_FILE_OFFSET64


397 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

398 
__THROW
 
	`__n⁄nuŒ
 ((3));

399 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
, 
__Êag
)

405 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

407 #ifde‡
__REDIRECT_NTH


408 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

409 
°©
 *
__°©_buf
), 
__fx°©64
)

410 
	`__n⁄nuŒ
 ((3));

411 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

412 
°©
 *
__°©_buf
), 
__x°©64
)

413 
	`__n⁄nuŒ
 ((2, 3));

414 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__lx°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

418 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
, 
__Êag
),

420 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

423 
	#__fx°©
 
__fx°©64


	)

424 
	#__x°©
 
__x°©64


	)

425 
	#__lx°©
 
__lx°©64


	)

429 #ifde‡
__USE_LARGEFILE64


430 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

432 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
, 
__Êag
)

438 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

440 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

441 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

443 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

444 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

445 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

447 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


450 
__exã∫_ölöe
 

451 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

453  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

454 
	}
}

456 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


457 
__exã∫_ölöe
 

458 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

460  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

461 
	}
}

464 
__exã∫_ölöe
 

465 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

467  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

468 
	}
}

470 #ifde‡
__USE_ATFILE


471 
__exã∫_ölöe
 

472 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

473 
__Êag
))

475  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

476 
	}
}

479 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


480 
__exã∫_ölöe
 

481 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

483  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

484 
	}
}

487 #ifde‡
__USE_ATFILE


488 
__exã∫_ölöe
 

489 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

490 
__dev_t
 
__dev
))

492  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

493 
	}
}

496 #i‡
deföed
 
__USE_LARGEFILE64
 \

497 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

498 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

499 
__exã∫_ölöe
 

500 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

502  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

503 
	}
}

505 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


506 
__exã∫_ölöe
 

507 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

509  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

510 
	}
}

513 
__exã∫_ölöe
 

514 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

516  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

517 
	}
}

519 #ifde‡
__USE_GNU


520 
__exã∫_ölöe
 

521 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

522 
__Êag
))

524  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

525 
	}
}

532 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
‘ë, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
(sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_XOPEN2K


60 
	#_XOPEN_VERSION
 600

	)

61 #ñi‡
deföed
 
__USE_UNIX98


62 
	#_XOPEN_VERSION
 500

	)

64 
	#_XOPEN_VERSION
 4

	)

68 
	#_XOPEN_XCU_VERSION
 4

	)

71 
	#_XOPEN_XPG2
 1

	)

72 
	#_XOPEN_XPG3
 1

	)

73 
	#_XOPEN_XPG4
 1

	)

76 
	#_XOPEN_UNIX
 1

	)

79 
	#_XOPEN_CRYPT
 1

	)

83 
	#_XOPEN_ENH_I18N
 1

	)

86 
	#_XOPEN_LEGACY
 1

	)

173 
	~<bôs/posix_›t.h
>

176 #ifde‡
__USE_UNIX98


177 
	~<bôs/ívú⁄míts.h
>

181 
	#STDIN_FILENO
 0

	)

182 
	#STDOUT_FILENO
 1

	)

183 
	#STDERR_FILENO
 2

	)

188 
	~<bôs/ty≥s.h
>

190 #i‚def 
__ssize_t_deföed


191 
__ssize_t
 
	tssize_t
;

192 
	#__ssize_t_deföed


	)

195 
	#__√ed_size_t


	)

196 
	#__√ed_NULL


	)

197 
	~<°ddef.h
>

199 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


202 #i‚de‡
__gid_t_deföed


203 
__gid_t
 
	tgid_t
;

204 
	#__gid_t_deföed


	)

207 #i‚de‡
__uid_t_deföed


208 
__uid_t
 
	tuid_t
;

209 
	#__uid_t_deföed


	)

212 #i‚de‡
__off_t_deföed


213 #i‚de‡
__USE_FILE_OFFSET64


214 
__off_t
 
	toff_t
;

216 
__off64_t
 
	toff_t
;

218 
	#__off_t_deföed


	)

220 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


221 
__off64_t
 
	toff64_t
;

222 
	#__off64_t_deföed


	)

225 #i‚de‡
__u£c⁄ds_t_deföed


226 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

227 
	#__u£c⁄ds_t_deföed


	)

230 #i‚de‡
__pid_t_deföed


231 
__pid_t
 
	tpid_t
;

232 
	#__pid_t_deföed


	)

236 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


237 #i‚de‡
__öçå_t_deföed


238 
__öçå_t
 
	töçå_t
;

239 
	#__öçå_t_deföed


	)

243 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


244 #i‚de‡
__sockÀn_t_deföed


245 
__sockÀn_t
 
	tsockÀn_t
;

246 
	#__sockÀn_t_deföed


	)

252 
	#R_OK
 4

	)

253 
	#W_OK
 2

	)

254 
	#X_OK
 1

	)

255 
	#F_OK
 0

	)

258 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

260 #ifde‡
__USE_GNU


263 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

268 
__THROW
 
	`__n⁄nuŒ
 ((1));

271 #ifde‡
__USE_ATFILE


275 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

276 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

281 #i‚def 
_STDIO_H


282 
	#SEEK_SET
 0

	)

283 
	#SEEK_CUR
 1

	)

284 
	#SEEK_END
 2

	)

287 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


289 
	#L_SET
 
SEEK_SET


	)

290 
	#L_INCR
 
SEEK_CUR


	)

291 
	#L_XTND
 
SEEK_END


	)

300 #i‚de‡
__USE_FILE_OFFSET64


301 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

303 #ifde‡
__REDIRECT_NTH


304 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

305 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

306 
l£ek64
);

308 
	#l£ek
 
l£ek64


	)

311 #ifde‡
__USE_LARGEFILE64


312 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

313 
__THROW
;

320 
	`˛o£
 (
__fd
);

327 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

333 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

335 #ifde‡
__USE_UNIX98


336 #i‚de‡
__USE_FILE_OFFSET64


343 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

344 
__off_t
 
__off£t
Ë
__wur
;

351 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

352 
__off_t
 
__off£t
Ë
__wur
;

354 #ifde‡
__REDIRECT


355 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

356 
__off64_t
 
__off£t
),

357 
¥ód64
Ë
__wur
;

358 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

359 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

360 
pwrôe64
Ë
__wur
;

362 
	#¥ód
 
¥ód64


	)

363 
	#pwrôe
 
pwrôe64


	)

367 #ifde‡
__USE_LARGEFILE64


371 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

372 
__off64_t
 
__off£t
Ë
__wur
;

375 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

376 
__off64_t
 
__off£t
Ë
__wur
;

384 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

393 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

405 
	`¶ìp
 (
__£c⁄ds
);

407 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


412 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

413 
__THROW
;

420 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

429 
	`∑u£
 ();

433 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

434 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

443 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

448 #ifde‡
__USE_ATFILE


451 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

452 
__gid_t
 
__group
, 
__Êag
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

457 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

471 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

473 #ifdef 
__USE_GNU


477 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

480 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


484 *
	$gëwd
 (*
__buf
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

490 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

493 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

496 **
__ívú⁄
;

497 #ifde‡
__USE_GNU


498 **
ívú⁄
;

504 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

505 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 #ifde‡
__USE_GNU


510 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

511 
__THROW
;

516 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

517 
__THROW
 
	`__n⁄nuŒ
 ((1));

521 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

522 
__THROW
 
	`__n⁄nuŒ
 ((1));

526 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

527 
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

532 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

538 
__THROW
 
	`__n⁄nuŒ
 ((1));

541 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


543 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

548 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
	~<bôs/c⁄‚ame.h
>

557 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1));

561 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

564 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

566 #ifdef 
__USE_POSIX2


568 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

573 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

576 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

580 #i‚de‡
__FAVOR_BSD


581 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

583 #ifde‡
__REDIRECT_NTH


584 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

586 
	#gëpgΩ
 
__gëpgid


	)

591 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

592 #ifde‡
__USE_XOPEN_EXTENDED


593 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

600 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

602 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


613 #i‚de‡
__FAVOR_BSD


617 
	$£çgΩ
 (Ë
__THROW
;

622 #ifde‡
__REDIRECT_NTH


623 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

625 
	#£çgΩ
 
£çgid


	)

634 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

636 #ifde‡
__USE_XOPEN_EXTENDED


638 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

645 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

648 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

651 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

656 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

658 #ifdef 
__USE_GNU


660 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

667 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

669 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


677 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

684 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

686 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


689 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


694 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

697 #ifde‡
__USE_GNU


700 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

701 
__THROW
;

705 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

706 
__THROW
;

710 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

711 
__THROW
;

715 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

716 
__THROW
;

723 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


730 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

736 *
	$ây«me
 (
__fd
Ë
__THROW
;

740 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

741 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

745 
	$ißây
 (
__fd
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 \

748 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

751 
	$ây¶Ÿ
 (Ë
__THROW
;

756 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

759 #ifde‡
__USE_ATFILE


762 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

763 
__c⁄°
 *
__to
, 
__Êags
)

764 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

767 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


769 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

775 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

776 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

780 #ifde‡
__USE_ATFILE


782 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

783 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

786 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

787 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

788 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

792 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_ATFILE


796 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2));

801 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

808 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

815 *
	`gëlogö
 ();

816 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


823 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

826 #ifdef 
__USE_BSD


828 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

832 #ifdef 
__USE_POSIX2


836 
	#__√ed_gë›t


	)

837 
	~<gë›t.h
>

841 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


845 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

849 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

852 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

857 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

863 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

865 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

872 
	$vh™gup
 (Ë
__THROW
;

875 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

884 
size_t
 
__off£t
, 
__sˇÀ
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

895 *
	$gëu£rshñl
 (Ë
__THROW
;

896 
	$ídu£rshñl
 (Ë
__THROW
;

897 
	$£tu£rshñl
 (Ë
__THROW
;

903 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

907 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

910 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

918 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


923 
	`fsync
 (
__fd
);

927 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


930 
	`gëho°id
 ();

933 
	$sync
 (Ë
__THROW
;

938 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

943 
	$gëdèbÀsize
 (Ë
__THROW
;

947 #i‚de‡
__USE_FILE_OFFSET64


948 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #ifde‡
__REDIRECT_NTH


952 
	`__REDIRECT_NTH
 (
åunˇã
,

953 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

954 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

956 
	#åunˇã
 
åunˇã64


	)

959 #ifde‡
__USE_LARGEFILE64


960 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


969 #i‚de‡
__USE_FILE_OFFSET64


970 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

972 #ifde‡
__REDIRECT_NTH


973 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

974 
·runˇã64
Ë
__wur
;

976 
	#·runˇã
 
·runˇã64


	)

979 #ifde‡
__USE_LARGEFILE64


980 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

986 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


990 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

996 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1000 #ifde‡
__USE_MISC


1011 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1016 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1028 
	#F_ULOCK
 0

	)

1029 
	#F_LOCK
 1

	)

1030 
	#F_TLOCK
 2

	)

1031 
	#F_TEST
 3

	)

1033 #i‚de‡
__USE_FILE_OFFSET64


1034 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1036 #ifde‡
__REDIRECT


1037 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1038 
lockf64
Ë
__wur
;

1040 
	#lockf
 
lockf64


	)

1043 #ifde‡
__USE_LARGEFILE64


1044 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1049 #ifde‡
__USE_GNU


1054 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1055 (
__exãnsi⁄__
 \

1056 ({ 
__ªsu…
; \

1057 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1058 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1059 
__ªsu…
; 
	}
}))

	)

1062 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1065 
fd©async
 (
__fûdes
);

1071 #ifdef 
__USE_XOPEN


1073 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1078 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1086 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 #ifde‡
__USE_XOPEN


1094 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1099 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1100 
	~<bôs/uni°d.h
>

1103 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.3"

	)

41 
	#ZLIB_VERNUM
 0x1233

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

215 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

245 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

331 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

370 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

469 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

545 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

546 c⁄° 
Byãf
 *
di˘i⁄¨y
,

547 
uI¡
 
di˘Lígth
));

584 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

585 
z_°ªamp
 
sour˚
));

602 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

614 
Àvñ
,

615 
°øãgy
));

634 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

635 
good_Àngth
,

636 
max_œzy
,

637 
ni˚_Àngth
,

638 
max_chaö
));

651 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

652 
uL⁄g
 
sour˚Lí
));

661 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

662 
bôs
,

663 
vÆue
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

678 
gz_hódîp
 
hód
));

748 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

749 c⁄° 
Byãf
 *
di˘i⁄¨y
,

750 
uI¡
 
di˘Lígth
));

770 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

785 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

786 
z_°ªamp
 
sour˚
));

801 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

811 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

812 
bôs
,

813 
vÆue
));

827 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

828 
gz_hódîp
 
hód
));

889 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

890 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

893 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

894 
out_func
 
out
, 
FAR
 *
out_desc
));

961 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

969 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1021 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1022 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1036 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1037 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1038 
Àvñ
));

1052 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1059 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1060 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1078 
voidp
 
	tgzFûe
;

1098 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1111 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1119 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1127 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1128 
voidpc
 
buf
, 
Àn
));

1135 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1148 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1155 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1164 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1170 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1176 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1186 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1215 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1232 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1238 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1244 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1252 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1264 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1279 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1305 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1337 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1338 c⁄° *
vîsi⁄
, 
°ªam_size
));

1339 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1340 c⁄° *
vîsi⁄
, 
°ªam_size
));

1341 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1342 
wödowBôs
, 
memLevñ
,

1343 
°øãgy
, c⁄° *
vîsi⁄
,

1344 
°ªam_size
));

1345 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1346 c⁄° *
vîsi⁄
, 
°ªam_size
));

1347 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1348 
FAR
 *
wödow
,

1349 c⁄° *
vîsi⁄
,

1350 
°ªam_size
));

1351 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1352 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1353 
	#öÊ©eInô
(
°rm
) \

1354 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1355 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1356 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1357 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1358 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1359 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1360 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1361 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1362 
ZLIB_VERSION
, (
z_°ªam
))

	)

1364 #ifde‡
_LARGEFILE64_SOURCE


1365 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1366 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off64_t, ));

1367 
ZEXTERN
 
off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1368 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1369 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off64_t
));

1372 #i‡
_FILE_OFFSET_BITS
 == 64

1373 
	#gz›í
 
gz›í64


	)

1374 
	#gz£ek
 
gz£ek64


	)

1375 
	#gzãŒ
 
gzãŒ64


	)

1376 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1377 
	#¸c32_comböe
 
¸c32_comböe64


	)

1379 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1380 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1381 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1382 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1383 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1386 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1387 
	söã∫Æ_°©e
 {
dummy
;};

1390 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1391 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1392 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1393 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1395 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

513 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

515 
	m_CS_GNU_LIBC_VERSION
,

516 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

517 
	m_CS_GNU_LIBPTHREAD_VERSION
,

518 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

520 
	m_CS_LFS_CFLAGS
 = 1000,

521 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

522 
	m_CS_LFS_LDFLAGS
,

523 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

524 
	m_CS_LFS_LIBS
,

525 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

526 
	m_CS_LFS_LINTFLAGS
,

527 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

528 
	m_CS_LFS64_CFLAGS
,

529 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

530 
	m_CS_LFS64_LDFLAGS
,

531 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

532 
	m_CS_LFS64_LIBS
,

533 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

534 
	m_CS_LFS64_LINTFLAGS
,

535 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

537 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

538 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

539 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

540 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

541 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

542 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

543 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

544 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

545 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

546 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

547 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

548 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

549 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

550 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

551 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

552 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

553 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

554 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

555 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

556 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

557 
	m_CS_XBS5_LP64_OFF64_LIBS
,

558 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

559 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

560 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

561 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

562 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

563 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

564 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

565 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

566 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

567 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

568 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

570 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

571 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

572 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

573 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

574 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

575 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

576 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

577 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

578 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

579 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

580 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

581 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

582 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

583 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

584 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

585 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

586 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

587 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

588 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

589 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

590 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

591 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

592 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

593 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

594 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

595 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

596 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

597 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

598 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

599 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

600 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


601 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/dlfcn.h

20 #i‚de‡
_DLFCN_H


25 
	#RTLD_LAZY
 0x00001

	)

26 
	#RTLD_NOW
 0x00002

	)

27 
	#RTLD_BINDING_MASK
 0x3

	)

28 
	#RTLD_NOLOAD
 0x00004

	)

29 
	#RTLD_DEEPBIND
 0x00008

	)

34 
	#RTLD_GLOBAL
 0x00100

	)

39 
	#RTLD_LOCAL
 0

	)

42 
	#RTLD_NODELETE
 0x01000

	)

44 #ifde‡
__USE_GNU


55 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

56 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

58 
__BEGIN_DECLS


61 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

111 #ifde‡
__USE_GNU


112 
	#F_SETLEASE
 1024

	)

113 
	#F_GETLEASE
 1025

	)

114 
	#F_NOTIFY
 1026

	)

115 
	#F_DUPFD_CLOEXEC
 1030

	)

120 
	#FD_CLOEXEC
 1

	)

123 
	#F_RDLCK
 0

	)

124 
	#F_WRLCK
 1

	)

125 
	#F_UNLCK
 2

	)

128 
	#F_EXLCK
 4

	)

129 
	#F_SHLCK
 8

	)

131 #ifde‡
__USE_BSD


133 
	#LOCK_SH
 1

	)

134 
	#LOCK_EX
 2

	)

135 
	#LOCK_NB
 4

	)

137 
	#LOCK_UN
 8

	)

140 #ifde‡
__USE_GNU


141 
	#LOCK_MAND
 32

	)

142 
	#LOCK_READ
 64

	)

143 
	#LOCK_WRITE
 128

	)

144 
	#LOCK_RW
 192

	)

147 #ifde‡
__USE_GNU


149 
	#DN_ACCESS
 0x00000001

	)

150 
	#DN_MODIFY
 0x00000002

	)

151 
	#DN_CREATE
 0x00000004

	)

152 
	#DN_DELETE
 0x00000008

	)

153 
	#DN_RENAME
 0x00000010

	)

154 
	#DN_ATTRIB
 0x00000020

	)

155 
	#DN_MULTISHOT
 0x80000000

	)

158 
	sÊock


160 
	ml_ty≥
;

161 
	ml_whí˚
;

162 #i‚de‡
__USE_FILE_OFFSET64


163 
__off_t
 
	ml_°¨t
;

164 
__off_t
 
	ml_Àn
;

166 
__off64_t
 
	ml_°¨t
;

167 
__off64_t
 
	ml_Àn
;

169 
__pid_t
 
	ml_pid
;

172 #ifde‡
__USE_LARGEFILE64


173 
	sÊock64


175 
	ml_ty≥
;

176 
	ml_whí˚
;

177 
__off64_t
 
	ml_°¨t
;

178 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

185 #ifdef 
__USE_BSD


186 
	#FAPPEND
 
O_APPEND


	)

187 
	#FFSYNC
 
O_FSYNC


	)

188 
	#FASYNC
 
O_ASYNC


	)

189 
	#FNONBLOCK
 
O_NONBLOCK


	)

190 
	#FNDELAY
 
O_NDELAY


	)

194 #ifde‡
__USE_XOPEN2K


195 
	#POSIX_FADV_NORMAL
 0

	)

196 
	#POSIX_FADV_RANDOM
 1

	)

197 
	#POSIX_FADV_SEQUENTIAL
 2

	)

198 
	#POSIX_FADV_WILLNEED
 3

	)

199 
	#POSIX_FADV_DONTNEED
 4

	)

200 
	#POSIX_FADV_NOREUSE
 5

	)

204 #ifde‡
__USE_GNU


206 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

212 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

217 
	#SPLICE_F_MOVE
 1

	)

218 
	#SPLICE_F_NONBLOCK
 2

	)

221 
	#SPLICE_F_MORE
 4

	)

222 
	#SPLICE_F_GIFT
 8

	)

225 
	g__BEGIN_DECLS


227 #ifde‡
__USE_GNU


230 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

231 
__THROW
;

235 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

236 
__Êags
);

240 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

241 
size_t
 
__cou¡
, 
__Êags
);

244 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

245 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

246 
__Êags
);

249 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

250 
__Êags
);

254 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

75 
	#SOL_IP
 0

	)

77 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

78 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

79 
	#IP_MAX_MEMBERSHIPS
 20

	)

81 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


85 
	sù_›ts


87 
ö_addr
 
	mù_d°
;

88 
	mù_›ts
[40];

92 
	sù_mªqn


94 
ö_addr
 
	mimr_mu…üddr
;

95 
ö_addr
 
	mimr_addªss
;

96 
	mimr_ifödex
;

100 
	sö_pktöfo


102 
	mùi_ifödex
;

103 
ö_addr
 
	mùi_•ec_d°
;

104 
ö_addr
 
	mùi_addr
;

111 
	#IPV6_ADDRFORM
 1

	)

112 
	#IPV6_2292PKTINFO
 2

	)

113 
	#IPV6_2292HOPOPTS
 3

	)

114 
	#IPV6_2292DSTOPTS
 4

	)

115 
	#IPV6_2292RTHDR
 5

	)

116 
	#IPV6_2292PKTOPTIONS
 6

	)

117 
	#IPV6_CHECKSUM
 7

	)

118 
	#IPV6_2292HOPLIMIT
 8

	)

120 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

122 
	#IPV6_NEXTHOP
 9

	)

123 
	#IPV6_AUTHHDR
 10

	)

124 
	#IPV6_UNICAST_HOPS
 16

	)

125 
	#IPV6_MULTICAST_IF
 17

	)

126 
	#IPV6_MULTICAST_HOPS
 18

	)

127 
	#IPV6_MULTICAST_LOOP
 19

	)

128 
	#IPV6_JOIN_GROUP
 20

	)

129 
	#IPV6_LEAVE_GROUP
 21

	)

130 
	#IPV6_ROUTER_ALERT
 22

	)

131 
	#IPV6_MTU_DISCOVER
 23

	)

132 
	#IPV6_MTU
 24

	)

133 
	#IPV6_RECVERR
 25

	)

134 
	#IPV6_V6ONLY
 26

	)

135 
	#IPV6_JOIN_ANYCAST
 27

	)

136 
	#IPV6_LEAVE_ANYCAST
 28

	)

137 
	#IPV6_IPSEC_POLICY
 34

	)

138 
	#IPV6_XFRM_POLICY
 35

	)

140 
	#IPV6_RECVPKTINFO
 49

	)

141 
	#IPV6_PKTINFO
 50

	)

142 
	#IPV6_RECVHOPLIMIT
 51

	)

143 
	#IPV6_HOPLIMIT
 52

	)

144 
	#IPV6_RECVHOPOPTS
 53

	)

145 
	#IPV6_HOPOPTS
 54

	)

146 
	#IPV6_RTHDRDSTOPTS
 55

	)

147 
	#IPV6_RECVRTHDR
 56

	)

148 
	#IPV6_RTHDR
 57

	)

149 
	#IPV6_RECVDSTOPTS
 58

	)

150 
	#IPV6_DSTOPTS
 59

	)

152 
	#IPV6_RECVTCLASS
 66

	)

153 
	#IPV6_TCLASS
 67

	)

156 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

157 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

158 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

159 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

162 
	#IPV6_PMTUDISC_DONT
 0

	)

163 
	#IPV6_PMTUDISC_WANT
 1

	)

164 
	#IPV6_PMTUDISC_DO
 2

	)

167 
	#SOL_IPV6
 41

	)

168 
	#SOL_ICMPV6
 58

	)

171 
	#IPV6_RTHDR_LOOSE
 0

	)

172 
	#IPV6_RTHDR_STRICT
 1

	)

174 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 #i‚de‡
__exã∫_ölöe


26 
	#__MATH_INLINE
 
__ölöe


	)

28 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

32 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

35 
__MATH_INLINE
 

36 
__NTH
 (
	$__signbôf
 (
__x
))

38 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

39  
__u
.
__i
 < 0;

40 
	}
}

41 
__MATH_INLINE
 

42 
__NTH
 (
	$__signbô
 (
__x
))

44 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

45  
__u
.
__i
[1] < 0;

46 
	}
}

47 
__MATH_INLINE
 

48 
__NTH
 (
	$__signbôl
 (
__x
))

50 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

51  (
__u
.
__i
[2] & 0x8000) != 0;

52 
	}
}

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

70 
	#MS_ASYNC
 1

	)

71 
	#MS_SYNC
 4

	)

72 
	#MS_INVALIDATE
 2

	)

75 
	#MCL_CURRENT
 1

	)

76 
	#MCL_FUTURE
 2

	)

80 #ifde‡
__USE_GNU


81 
	#MREMAP_MAYMOVE
 1

	)

82 
	#MREMAP_FIXED
 2

	)

86 #ifde‡
__USE_BSD


87 
	#MADV_NORMAL
 0

	)

88 
	#MADV_RANDOM
 1

	)

89 
	#MADV_SEQUENTIAL
 2

	)

90 
	#MADV_WILLNEED
 3

	)

91 
	#MADV_DONTNEED
 4

	)

92 
	#MADV_REMOVE
 9

	)

93 
	#MADV_DONTFORK
 10

	)

94 
	#MADV_DOFORK
 11

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

93 
	#_POSIX_SEMAPHORES
 200112L

	)

96 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

99 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

100 
	#_POSIX_ASYNC_IO
 1

	)

102 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

104 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

107 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

110 
	#_LFS_LARGEFILE
 1

	)

111 
	#_LFS64_LARGEFILE
 1

	)

112 
	#_LFS64_STDIO
 1

	)

115 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

118 
	#_POSIX_CPUTIME
 0

	)

121 
	#_POSIX_THREAD_CPUTIME
 0

	)

124 
	#_POSIX_REGEXP
 1

	)

127 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

130 
	#_POSIX_SHELL
 1

	)

133 
	#_POSIX_TIMEOUTS
 200112L

	)

136 
	#_POSIX_SPIN_LOCKS
 200112L

	)

139 
	#_POSIX_SPAWN
 200112L

	)

142 
	#_POSIX_TIMERS
 200112L

	)

145 
	#_POSIX_BARRIERS
 200112L

	)

148 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

151 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

154 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

157 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

160 
	#_POSIX_ADVISORY_INFO
 200112L

	)

163 
	#_POSIX_IPV6
 200112L

	)

166 
	#_POSIX_RAW_SOCKETS
 200112L

	)

169 
	#_POSIX2_CHAR_TERM
 200112L

	)

172 
	#_POSIX_SPORADIC_SERVER
 -1

	)

173 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

176 
	#_POSIX_TRACE
 -1

	)

177 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

178 
	#_POSIX_TRACE_INHERIT
 -1

	)

179 
	#_POSIX_TRACE_LOG
 -1

	)

182 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__¨r
->
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] |
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

144 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 < 8 * (
£tsize
) \

148 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] &~
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

149 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] & 
	`__CPUMASK
 (__cpu))) != 0 \

154 : 0; }))

	)

156 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

157 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

159 #i‡
__GNUC_PREREQ
 (2, 91)

160 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

161 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

163 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

164 (
__exãnsi⁄__
 \

165 ({ 
˝u_£t_t
 *
__¨r1
 = (
˝u£ç1
); \

166 
˝u_£t_t
 *
__¨r2
 = (
˝u£ç2
); \

167 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

168 
size_t
 
__i
; \

169 
__i
 = 0; __ò< 
__imax
; ++__i) \

170 i‡(
__¨r1
->
__bôs
[
__i
] !
__¨r2
->__bits[__i]) \

172 
__i
 =
__imax
; }))

	)

175 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

176 (
__exãnsi⁄__
 \

177 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

178 
˝u_£t_t
 *
__¨r1
 = (
§c£t1
); \

179 
˝u_£t_t
 *
__¨r2
 = (
§c£t2
); \

180 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

181 
size_t
 
__i
; \

182 
__i
 = 0; __ò< 
__imax
; ++__i) \

183 
__de°
->
__bôs
[
__i
] = 
__¨r1
->__bôs[__i] 
›
 
__¨r2
->__bits[__i]; \

184 
__de°
; }))

	)

186 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

187 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË* 8)

	)

188 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

189 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

191 
__BEGIN_DECLS


193 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

194 
__THROW
;

195 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

196 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

198 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_PACKET
 = 10

58 
	#SOCK_PACKET
 
SOCK_PACKET


	)

62 
	#PF_UNSPEC
 0

	)

63 
	#PF_LOCAL
 1

	)

64 
	#PF_UNIX
 
PF_LOCAL


	)

65 
	#PF_FILE
 
PF_LOCAL


	)

66 
	#PF_INET
 2

	)

67 
	#PF_AX25
 3

	)

68 
	#PF_IPX
 4

	)

69 
	#PF_APPLETALK
 5

	)

70 
	#PF_NETROM
 6

	)

71 
	#PF_BRIDGE
 7

	)

72 
	#PF_ATMPVC
 8

	)

73 
	#PF_X25
 9

	)

74 
	#PF_INET6
 10

	)

75 
	#PF_ROSE
 11

	)

76 
	#PF_DEC√t
 12

	)

77 
	#PF_NETBEUI
 13

	)

78 
	#PF_SECURITY
 14

	)

79 
	#PF_KEY
 15

	)

80 
	#PF_NETLINK
 16

	)

81 
	#PF_ROUTE
 
PF_NETLINK


	)

82 
	#PF_PACKET
 17

	)

83 
	#PF_ASH
 18

	)

84 
	#PF_ECONET
 19

	)

85 
	#PF_ATMSVC
 20

	)

86 
	#PF_SNA
 22

	)

87 
	#PF_IRDA
 23

	)

88 
	#PF_PPPOX
 24

	)

89 
	#PF_WANPIPE
 25

	)

90 
	#PF_BLUETOOTH
 31

	)

91 
	#PF_IUCV
 32

	)

92 
	#PF_RXRPC
 33

	)

93 
	#PF_MAX
 34

	)

96 
	#AF_UNSPEC
 
PF_UNSPEC


	)

97 
	#AF_LOCAL
 
PF_LOCAL


	)

98 
	#AF_UNIX
 
PF_UNIX


	)

99 
	#AF_FILE
 
PF_FILE


	)

100 
	#AF_INET
 
PF_INET


	)

101 
	#AF_AX25
 
PF_AX25


	)

102 
	#AF_IPX
 
PF_IPX


	)

103 
	#AF_APPLETALK
 
PF_APPLETALK


	)

104 
	#AF_NETROM
 
PF_NETROM


	)

105 
	#AF_BRIDGE
 
PF_BRIDGE


	)

106 
	#AF_ATMPVC
 
PF_ATMPVC


	)

107 
	#AF_X25
 
PF_X25


	)

108 
	#AF_INET6
 
PF_INET6


	)

109 
	#AF_ROSE
 
PF_ROSE


	)

110 
	#AF_DEC√t
 
PF_DEC√t


	)

111 
	#AF_NETBEUI
 
PF_NETBEUI


	)

112 
	#AF_SECURITY
 
PF_SECURITY


	)

113 
	#AF_KEY
 
PF_KEY


	)

114 
	#AF_NETLINK
 
PF_NETLINK


	)

115 
	#AF_ROUTE
 
PF_ROUTE


	)

116 
	#AF_PACKET
 
PF_PACKET


	)

117 
	#AF_ASH
 
PF_ASH


	)

118 
	#AF_ECONET
 
PF_ECONET


	)

119 
	#AF_ATMSVC
 
PF_ATMSVC


	)

120 
	#AF_SNA
 
PF_SNA


	)

121 
	#AF_IRDA
 
PF_IRDA


	)

122 
	#AF_PPPOX
 
PF_PPPOX


	)

123 
	#AF_WANPIPE
 
PF_WANPIPE


	)

124 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

125 
	#AF_IUCV
 
PF_IUCV


	)

126 
	#AF_RXRPC
 
PF_RXRPC


	)

127 
	#AF_MAX
 
PF_MAX


	)

133 
	#SOL_RAW
 255

	)

134 
	#SOL_DECNET
 261

	)

135 
	#SOL_X25
 262

	)

136 
	#SOL_PACKET
 263

	)

137 
	#SOL_ATM
 264

	)

138 
	#SOL_AAL
 265

	)

139 
	#SOL_IRDA
 266

	)

142 
	#SOMAXCONN
 128

	)

145 
	~<bôs/sockaddr.h
>

148 
	ssockaddr


150 
__SOCKADDR_COMMON
 (
ß_
);

151 
	mß_d©a
[14];

157 
	#__ss_Æig¡y≥
 

	)

158 
	#_SS_SIZE
 128

	)

159 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

161 
	ssockaddr_°‹age


163 
__SOCKADDR_COMMON
 (
ss_
);

164 
__ss_Æig¡y≥
 
	m__ss_Æign
;

165 
	m__ss_∑ddög
[
_SS_PADSIZE
];

172 
	mMSG_OOB
 = 0x01,

173 
	#MSG_OOB
 
MSG_OOB


	)

174 
	mMSG_PEEK
 = 0x02,

175 
	#MSG_PEEK
 
MSG_PEEK


	)

176 
	mMSG_DONTROUTE
 = 0x04,

177 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

178 #ifde‡
__USE_GNU


180 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

181 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

183 
	mMSG_CTRUNC
 = 0x08,

184 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

185 
	mMSG_PROXY
 = 0x10,

186 
	#MSG_PROXY
 
MSG_PROXY


	)

187 
	mMSG_TRUNC
 = 0x20,

188 
	#MSG_TRUNC
 
MSG_TRUNC


	)

189 
	mMSG_DONTWAIT
 = 0x40,

190 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

191 
	mMSG_EOR
 = 0x80,

192 
	#MSG_EOR
 
MSG_EOR


	)

193 
	mMSG_WAITALL
 = 0x100,

194 
	#MSG_WAITALL
 
MSG_WAITALL


	)

195 
	mMSG_FIN
 = 0x200,

196 
	#MSG_FIN
 
MSG_FIN


	)

197 
	mMSG_SYN
 = 0x400,

198 
	#MSG_SYN
 
MSG_SYN


	)

199 
	mMSG_CONFIRM
 = 0x800,

200 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

201 
	mMSG_RST
 = 0x1000,

202 
	#MSG_RST
 
MSG_RST


	)

203 
	mMSG_ERRQUEUE
 = 0x2000,

204 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

205 
	mMSG_NOSIGNAL
 = 0x4000,

206 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

207 
	mMSG_MORE
 = 0x8000,

208 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

213 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

219 
	smsghdr


221 *
	mmsg_«me
;

222 
sockÀn_t
 
	mmsg_«mñí
;

224 
iovec
 *
	mmsg_iov
;

225 
size_t
 
	mmsg_iovÀn
;

227 *
	mmsg_c⁄åﬁ
;

228 
size_t
 
	mmsg_c⁄åﬁÀn
;

233 
	mmsg_Êags
;

237 
	scmsghdr


239 
size_t
 
	mcmsg_Àn
;

244 
	mcmsg_Àvñ
;

245 
	mcmsg_ty≥
;

246 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

247 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

252 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

253 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

255 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

257 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

258 
	#CMSG_FIRSTHDR
(
mhdr
) \

259 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

260 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

261 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

262 & (
size_t
Ë~( (size_tË- 1))

	)

263 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

264 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

265 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

267 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

268 
cmsghdr
 *
__cmsg
Ë
__THROW
;

269 #ifde‡
__USE_EXTERN_INLINES


270 #i‚de‡
_EXTERN_INLINE


271 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

273 
_EXTERN_INLINE
 
cmsghdr
 *

274 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

276 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

280 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

281 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

282 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


283 + 
__mhdr
->
msg_c⁄åﬁÀn
)

284 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

285 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

288  
__cmsg
;

289 
	}
}

296 
	mSCM_RIGHTS
 = 0x01

297 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

298 #ifde‡
__USE_BSD


299 , 
	mSCM_CREDENTIALS
 = 0x02

300 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

304 #ifde‡
__USE_GNU


306 
	su¸ed


308 
pid_t
 
	mpid
;

309 
uid_t
 
	muid
;

310 
gid_t
 
	mgid
;

315 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


316 #i‚de‡
FIOGETOWN


317 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

319 #i‚de‡
FIOSETOWN


320 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

322 #i‚de‡
SIOCATMARK


323 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

325 #i‚de‡
SIOCGPGRP


326 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

328 #i‚de‡
SIOCGSTAMP


329 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

331 #i‚de‡
SIOCGSTAMPNS


332 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

334 #i‚de‡
SIOCSPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

340 
	~<asm/sockë.h
>

342 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


343 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


344 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


345 #unde‡
FIOGETOWN


347 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


348 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


349 #unde‡
FIOSETOWN


351 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


352 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


353 #unde‡
SIOCATMARK


355 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


356 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


357 #unde‡
SIOCGPGRP


359 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


360 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


361 #unde‡
SIOCGSTAMP


363 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


364 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


365 #unde‡
SIOCGSTAMPNS


367 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


368 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


369 #unde‡
SIOCSPGRP


374 
	slögî


376 
	ml_⁄off
;

377 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #i‡
deföed
 
__USE_ATFILE
 || deföed 
__USE_GNU


207 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

208 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/curses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

50 
	#NCURSES_VERSION_MAJOR
 5

	)

51 
	#NCURSES_VERSION_MINOR
 6

	)

52 
	#NCURSES_VERSION_PATCH
 20071124

	)

55 #unde‡
NCURSES_VERSION


56 
	#NCURSES_VERSION
 "5.6"

	)

61 
	#NCURSES_MOUSE_VERSION
 1

	)

66 
	~<ncur£s_dŒ.h
>

71 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


72 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

79 #ifde‡
NCURSES_NOMACROS


80 #i‚de‡
NCURSES_ATTR_T


81 
	#NCURSES_ATTR_T
 
©å_t


	)

85 #i‚de‡
NCURSES_ATTR_T


86 
	#NCURSES_ATTR_T
 

	)

93 #unde‡
NCURSES_CONST


94 
	#NCURSES_CONST
 c⁄°

	)

96 #unde‡
NCURSES_INLINE


97 
	#NCURSES_INLINE
 
ölöe


	)

102 #unde‡
NCURSES_COLOR_T


103 
	#NCURSES_COLOR_T
 

	)

108 #i‚de‡
NCURSES_OPAQUE


109 
	#NCURSES_OPAQUE
 0

	)

115 #unde‡
NCURSES_SIZE_T


116 
	#NCURSES_SIZE_T
 

	)

121 #unde‡
NCURSES_TPARM_VARARGS


122 
	#NCURSES_TPARM_VARARGS
 1

	)

129 #unde‡
NCURSES_CH_T


130 
	#NCURSES_CH_T
 
chty≥


	)

132 #i‡0 && 
deföed
(
_LP64
)

133 
	tchty≥
;

134 
	tmmask_t
;

136 
	tchty≥
;

137 
	tmmask_t
;

140 
	~<°dio.h
>

141 
	~<un˘æ.h
>

142 
	~<°d¨g.h
>

143 #ifde‡
_XOPEN_SOURCE_EXTENDED


144 
	~<°ddef.h
>

159 #unde‡
TRUE


160 
	#TRUE
 1

	)

162 #unde‡
FALSE


163 
	#FALSE
 0

	)

165 
	tNCURSES_BOOL
;

167 #i‡
deföed
(
__˝lu•lus
)

170 
	#NCURSES_BOOL
 
boﬁ


	)

174 #i‡
NCURSES_ENABLE_STDBOOL_H


175 
	~<°dboﬁ.h
>

177 
	#NCURSES_BOOL
 
boﬁ


	)

180 #unde‡
boﬁ


181 
	#boﬁ
 
NCURSES_BOOL


	)

186 #ifde‡
__˝lu•lus


188 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

190 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

197 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

198 
	#WA_NORMAL
 
A_NORMAL


	)

199 
	#WA_STANDOUT
 
A_STANDOUT


	)

200 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

201 
	#WA_REVERSE
 
A_REVERSE


	)

202 
	#WA_BLINK
 
A_BLINK


	)

203 
	#WA_DIM
 
A_DIM


	)

204 
	#WA_BOLD
 
A_BOLD


	)

205 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

206 
	#WA_INVIS
 
A_INVIS


	)

207 
	#WA_PROTECT
 
A_PROTECT


	)

208 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

209 
	#WA_LEFT
 
A_LEFT


	)

210 
	#WA_LOW
 
A_LOW


	)

211 
	#WA_RIGHT
 
A_RIGHT


	)

212 
	#WA_TOP
 
A_TOP


	)

213 
	#WA_VERTICAL
 
A_VERTICAL


	)

216 
	#COLOR_BLACK
 0

	)

217 
	#COLOR_RED
 1

	)

218 
	#COLOR_GREEN
 2

	)

219 
	#COLOR_YELLOW
 3

	)

220 
	#COLOR_BLUE
 4

	)

221 
	#COLOR_MAGENTA
 5

	)

222 
	#COLOR_CYAN
 6

	)

223 
	#COLOR_WHITE
 7

	)

228 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

229 
	#acs_m≠
 (
	`_nc_acs_m≠
())

	)

231 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

234 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,c)])

	)

237 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

238 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

239 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

240 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

241 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

242 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

243 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

244 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

245 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

246 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

247 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

248 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

249 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

250 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

251 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

252 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

253 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

254 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

256 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

257 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

258 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

259 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

260 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

261 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

262 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

268 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

269 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

270 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

271 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

272 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

273 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

274 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

282 
	#ACS_BSSB
 
ACS_ULCORNER


	)

283 
	#ACS_SSBB
 
ACS_LLCORNER


	)

284 
	#ACS_BBSS
 
ACS_URCORNER


	)

285 
	#ACS_SBBS
 
ACS_LRCORNER


	)

286 
	#ACS_SBSS
 
ACS_RTEE


	)

287 
	#ACS_SSSB
 
ACS_LTEE


	)

288 
	#ACS_SSBS
 
ACS_BTEE


	)

289 
	#ACS_BSSS
 
ACS_TTEE


	)

290 
	#ACS_BSBS
 
ACS_HLINE


	)

291 
	#ACS_SBSB
 
ACS_VLINE


	)

292 
	#ACS_SSSS
 
ACS_PLUS


	)

294 #unde‡
ERR


295 
	#ERR
 (-1)

	)

297 #unde‡
OK


298 
	#OK
 (0)

	)

301 
	#_SUBWIN
 0x01

	)

302 
	#_ENDLINE
 0x02

	)

303 
	#_FULLWIN
 0x04

	)

304 
	#_SCROLLWIN
 0x08

	)

305 
	#_ISPAD
 0x10

	)

306 
	#_HASMOVED
 0x20

	)

307 
	#_WRAPPED
 0x40

	)

313 
	#_NOCHANGE
 -1

	)

319 
	#_NEWINDEX
 -1

	)

321 
s¸ìn
 
	tSCREEN
;

322 
_wö_°
 
	tWINDOW
;

324 
chty≥
 
	t©å_t
;

326 #ifde‡
_XOPEN_SOURCE_EXTENDED


329 #ifde‡
mbÀn


330 #unde‡
mbÀn


332 
	~<libutf8.h
>

336 
	~<wch¨.h
>

340 
	twch¨_t
;

344 
	twöt_t
;

347 
	#CCHARW_MAX
 5

	)

350 
©å_t
 
	g©å
;

351 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

353 #unde‡
NCURSES_EXT_COLORS


354 
	#NCURSES_EXT_COLORS
 20071124

	)

355 
	gext_cﬁ‹
;

358 
	tcch¨_t
;

362 #i‡!
NCURSES_OPAQUE


363 
	gld©
;

365 
	s_wö_°


367 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

370 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

371 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

373 
	g_Êags
;

376 
©å_t
 
	g_©ås
;

377 
chty≥
 
	g_bkgd
;

380 
boﬁ
 
	g_nŸimeout
;

381 
boﬁ
 
	g_˛ór
;

382 
boﬁ
 
	g_Àaveok
;

383 
boﬁ
 
	g_s¸ﬁl
;

384 
boﬁ
 
	g_idlok
;

385 
boﬁ
 
	g_idcok
;

386 
boﬁ
 
	g_immed
;

387 
boﬁ
 
	g_sync
;

388 
boﬁ
 
	g_u£_key∑d
;

389 
	g_dñay
;

391 
ld©
 *
	g_löe
;

394 
NCURSES_SIZE_T
 
	g_ªgt›
;

395 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

398 
	g_∑rx
;

399 
	g_∑ry
;

400 
WINDOW
 *
	g_∑ª¡
;

403 
	spd©


405 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

406 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

407 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

408 } 
	g_∑d
;

410 
NCURSES_SIZE_T
 
	g_yoff£t
;

412 #ifde‡
_XOPEN_SOURCE_EXTENDED


413 
cch¨_t
 
	g_bkg∫d
;

415 
	g_cﬁ‹
;

425 #ifde‡
NCURSES_WGETCH_EVENTS


426 #i‡!
deföed
(
__BEOS__
)

427 
	#NCURSES_EVENT_VERSION
 1

	)

433 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

434 
	#_NC_EVENT_FILE
 2

	)

435 
	#_NC_EVENT_FILE_READABLE
 2

	)

437 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

438 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

443 
	gty≥
;

446 
	gtimeout_m£c
;

449 
	gÊags
;

450 
	gfd
;

451 
	gªsu…
;

452 } 
	g„v
;

453 } 
	gd©a
;

454 } 
	t_nc_evít
;

458 
	gcou¡
;

459 
	gªsu…_Êags
;

460 
_nc_evít
 *
	gevíts
[1];

461 } 
	t_nc_evíéi°
;

463 
NCURSES_EXPORT
(Ë
wgëch_evíts
(
WINDOW
 *, 
_nc_evíéi°
 *);

464 
NCURSES_EXPORT
(Ë
wgën°r_evíts
(
WINDOW
 *,*,,
_nc_evíéi°
 *);

476 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

477 
	#__©åibuã__
(
p
Ë

	)

488 #i‚de‡
GCC_PRINTFLIKE


489 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

490 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

492 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

496 #i‚de‡
GCC_SCANFLIKE


497 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

498 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

500 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

504 #i‚def 
GCC_NORETURN


505 
	#GCC_NORETURN


	)

508 #i‚def 
GCC_UNUSED


509 
	#GCC_UNUSED


	)

519 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

520 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

521 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

522 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

523 
NCURSES_EXPORT
(Ë
add°r
 (const *);

524 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

525 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

526 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

527 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, *, *);

528 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

529 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

530 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, , *);

531 
NCURSES_EXPORT
(Ë
baudøã
 ();

532 
NCURSES_EXPORT
(Ë
bìp
 ();

533 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

534 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

535 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

536 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

537 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

538 
NCURSES_EXPORT
(Ë
cbªak
 ();

539 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, , const *);

540 
NCURSES_EXPORT
(Ë
˛ór
 ();

541 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

542 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

543 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

544 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (,*,*,*);

545 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (,*);

546 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

547 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

548 
NCURSES_EXPORT
(Ë
curs_£t
 ();

549 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

550 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

551 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

552 
NCURSES_EXPORT
(Ë
dñch
 ();

553 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

554 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

555 
NCURSES_EXPORT
(Ë
dñëñn
 ();

556 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

557 
NCURSES_EXPORT
(Ë
doupd©e
 ();

558 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

559 
NCURSES_EXPORT
(Ë
echo
 ();

560 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

561 
NCURSES_EXPORT
(Ë
îa£
 ();

562 
NCURSES_EXPORT
(Ë
ídwö
 ();

563 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

564 
NCURSES_EXPORT
(Ë
fûãr
 ();

565 
NCURSES_EXPORT
(Ë
Êash
 ();

566 
NCURSES_EXPORT
(Ë
Êushöp
 ();

567 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

568 
NCURSES_EXPORT
(Ë
gëch
 ();

569 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

570 
NCURSES_EXPORT
(Ë
gë°r
 (*);

571 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

572 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

573 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

574 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

575 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

576 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

577 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

578 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

579 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

580 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

581 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

582 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

583 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

584 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (,,,);

585 
NCURSES_EXPORT
(Ë
öô_∑ú
 (,,);

586 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

587 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

588 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

589 
NCURSES_EXPORT
(Ë
ö£π 
 ();

590 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

591 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

592 
NCURSES_EXPORT
(Ë
ö°r
 (*);

593 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

594 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

595 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

596 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

597 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

598 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

599 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

600 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

601 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

602 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

603 
NCURSES_EXPORT
(Ë
move
 (, );

604 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

605 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

606 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

607 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

608 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

609 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, , const *);

610 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

611 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

612 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

613 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

614 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

615 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

616 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

617 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

618 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

619 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

620 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

621 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

622 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

623 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

624 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

625 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

626 
GCC_PRINTFLIKE
(3,4);

627 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

628 
GCC_SCANFLIKE
(3,4);

629 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

630 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

631 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

632 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

633 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

634 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

635 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, , const *);

636 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

637 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

638 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

639 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

640 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

641 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

642 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

643 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

644 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

645 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

646 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

647 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

648 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

649 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

650 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

651 
GCC_PRINTFLIKE
(4,5);

652 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

653 
GCC_SCANFLIKE
(4,5);

654 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

655 
NCURSES_EXPORT
(Ë
«pms
 ();

656 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

657 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

658 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

659 
NCURSES_EXPORT
(Ë
∆
 ();

660 
NCURSES_EXPORT
(Ë
nocbªak
 ();

661 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

662 
NCURSES_EXPORT
(Ë
n€cho
 ();

663 
NCURSES_EXPORT
(Ë
n⁄l
 ();

664 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

665 
NCURSES_EXPORT
(Ë
n‹aw
 ();

666 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

667 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

668 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

669 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (,*,*);

670 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

671 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

672 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

673 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

674 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

675 
GCC_PRINTFLIKE
(1,2);

676 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

677 
NCURSES_EXPORT
(Ë
qiÊush
 ();

678 
NCURSES_EXPORT
(Ë
øw
 ();

679 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

680 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

681 
NCURSES_EXPORT
(Ë
ª£ây
 ();

682 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

683 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

684 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

685 
NCURSES_EXPORT
(Ë
ßvëty
 ();

686 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

687 
GCC_SCANFLIKE
(1,2);

688 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

689 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

690 
NCURSES_EXPORT
(Ë
s¸l
 ();

691 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

692 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

693 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

694 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

695 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

696 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

697 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

698 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

699 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

700 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

701 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

702 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

703 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,,*);

704 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

705 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 ();

706 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

707 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

708 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

709 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

710 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

711 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

712 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

713 
NCURSES_EXPORT
(Ë
°™dout
 ();

714 
NCURSES_EXPORT
(Ë
°™díd
 ();

715 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

716 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

717 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

718 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

719 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

720 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

721 
NCURSES_EXPORT
(Ë
timeout
 ();

722 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

723 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

724 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

725 
NCURSES_EXPORT
(Ë
ungëch
 ();

726 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

727 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

728 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

729 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, (*)());

730 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

731 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

732 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

733 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

734 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

735 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

736 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

737 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

738 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

739 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

740 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

741 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

742 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

743 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, *, *);

744 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

745 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

746 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, , *);

747 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

748 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

749 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

750 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, , const *);

751 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

752 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

753 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

754 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,,*);

755 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

756 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

757 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

758 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

759 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

760 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

761 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

762 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

763 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

764 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

765 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

766 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

767 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

768 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

769 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

770 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

771 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

772 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

773 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

774 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

775 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

776 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

777 
GCC_PRINTFLIKE
(2,3);

778 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

779 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

780 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

781 
GCC_SCANFLIKE
(2,3);

782 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

783 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

784 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

785 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

786 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

787 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

788 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

789 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

790 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

795 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

796 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

797 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

798 
NCURSES_EXPORT
(Ë
puç
 (const *);

800 #i‡
NCURSES_TPARM_VARARGS


801 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

803 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

804 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

810 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

811 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

812 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

813 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

814 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

815 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

816 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

817 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

818 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

823 #i‚de‡
_XOPEN_SOURCE_EXTENDED


824 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

830 #unde‡
NCURSES_EXT_FUNCS


832 #unde‡
NCURSES_EXT_FUNCS


833 
	#NCURSES_EXT_FUNCS
 20071124

	)

834 (*
	gNCURSES_CALLBACK
)(
	tWINDOW
 *, *);

835 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

836 
NCURSES_EXPORT
(*Ë
keybound
 (, );

837 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

838 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

839 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

840 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

841 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

842 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

843 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

844 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

845 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

846 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

847 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_CALLBACK
, *);

848 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_CALLBACK
, *);

849 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

850 
NCURSES_EXPORT
(Ë
nofûãr
();

856 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

857 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

858 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

859 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

860 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

861 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

862 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

863 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

864 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

865 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

866 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

867 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

870 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

875 
	#NCURSES_ATTR_SHIFT
 8

	)

876 
	#NCURSES_BITS
(
mask
,
shi·
Ë((maskË<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

878 
	#A_NORMAL
 (1UL - 1UL)

	)

879 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

880 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

881 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

882 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

883 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

884 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

885 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

886 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

887 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

888 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

889 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

890 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

891 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

892 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

893 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

894 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

895 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

896 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

908 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

909 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

910 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

911 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

913 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
	`is_Àaveok
(
√ws¸
)) \

914 (
y
Ë(
x
) = -1; \

916 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

917 } 0)

	)

919 
	#£tsyx
(
y
,
x
) do { if ((y) == -1 && (x) == -1) \

920 
	`Àaveok
(
√ws¸
, 
TRUE
); \

922 
	`Àaveok
(
√ws¸
, 
FALSE
); \

923 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

925 } 0)

	)

927 #i‚de‡
NCURSES_NOMACROS


933 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

934 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s,Ç)

	)

936 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

938 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

939 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

940 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

941 
	#¸mode
(Ë
	`cbªak
()

	)

942 
	#no¸mode
(Ë
	`nocbªak
()

	)

943 
	#gëtmode
()

	)

946 #i‡!
NCURSES_OPAQUE


947 
	#gë©ås
(
wö
Ë((wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

948 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

949 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

950 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

951 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

952 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

953 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

954 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

955 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

958 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

959 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

961 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

962 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

964 #i‡!
NCURSES_OPAQUE


965 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
) && 0

966 
	#w©å£t
(
wö
,
©
Ë((wö)->
_cﬁ‹
 = 
	`PAIR_NUMBER
(at), \

967 (
wö
)->
_©ås
 = (
©
))

	)

969 
	#w©å£t
(
wö
,
©
Ë((wö)->
_©ås
 = (©))

	)

973 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

975 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

976 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

977 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

979 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

980 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

981 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch,Ç)

	)

982 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch,Ç)

	)

984 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

985 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

986 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

988 #i‡!
NCURSES_OPAQUE


989 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, (wö)->
_maxy
+1)

	)

992 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

993 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

998 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
“, 0)

	)

999 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((◊Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1005 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,ch)

	)

1006 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,°r,n)

	)

1007 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,°r)

	)

1008 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,°r,n)

	)

1009 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,°r,-1)

	)

1010 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,©)

	)

1011 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,©)

	)

1012 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,©)

	)

1013 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,≠,˝,o)

	)

1014 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,a,o)

	)

1015 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,a,o)

	)

1016 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,a,c,o)

	)

1017 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,ch)

	)

1018 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,ch)

	)

1019 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,n,a,c,o)

	)

1020 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1021 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1022 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1023 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,c,o)

	)

1024 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1025 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1026 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,c)

	)

1027 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1028 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1029 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,°r)

	)

1030 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1031 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,s,n)

	)

1032 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,s)

	)

1033 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,s,n)

	)

1034 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,c)

	)

1035 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,n)

	)

1036 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1037 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,s,n)

	)

1038 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,s)

	)

1039 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,s)

	)

1040 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,y,x)

	)

1041 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1042 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,n)

	)

1043 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,t,b)

	)

1044 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1045 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1046 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,dñay)

	)

1047 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1048 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1054 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddch
(wö,ch))

	)

1055 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,n))

	)

1056 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,-1))

	)

1057 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,n))

	)

1058 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,-1))

	)

1059 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1060 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wchg©
(wö,n,a,c,o))

	)

1061 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1062 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgën°r
(wö,°r,n))

	)

1063 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgë°r
(wö,°r))

	)

1064 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`whlöe
(wö,c,n))

	)

1065 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1066 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöchn°r
(wö,s,n))

	)

1067 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöch°r
(wö,s))

	)

1068 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wön°r
(wö,s,n))

	)

1069 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wösch
(wö,c))

	)

1070 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö¢°r
(wö,s,n))

	)

1071 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wös°r
(wö,s))

	)

1072 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö°r
(wö,s))

	)

1073 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wvlöe
(wö,c,n))

	)

1075 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,y,x,ch)

	)

1076 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,y,x,°r,n)

	)

1077 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,y,x,°r)

	)

1078 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,y,x,°r,n)

	)

1079 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,y,x,°r)

	)

1080 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,y,x,n,a,c,o)

	)

1081 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,y,x)

	)

1082 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,y,x)

	)

1083 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,y,x,°r,n)

	)

1084 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,y,x,°r)

	)

1085 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,y,x,c,n)

	)

1086 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,y,x)

	)

1087 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,y,x,s,n)

	)

1088 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,y,x,s)

	)

1089 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,y,x,s,n)

	)

1090 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,y,x,c)

	)

1091 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,y,x,s,n)

	)

1092 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,y,x,s)

	)

1093 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,y,x,s)

	)

1094 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,y,x,c,n)

	)

1099 #i‡!
NCURSES_OPAQUE


1100 
	#gëbkgd
(
wö
Ë((wö)->
_bkgd
)

	)

1103 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1104 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1106 #i‡!
NCURSES_OPAQUE


1107 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
) && 0

1108 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = (◊Ë& ~
A_COLOR
), \

1109 (
wö
)->
_cﬁ‹
 = (
p
), \

1110 
OK
)

	)

1111 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!0 && (*◊Ë(wö)->
_©ås
)), \

1112 ()((
p
Ë!0 && (*’Ë(
wö
)->
_cﬁ‹
)), \

1113 
OK
)

	)

1115 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = ((◊Ë& ~
A_COLOR
Ë| 
	`COLOR_PAIR
’)), 
OK
)

	)

1116 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!0 && (*◊Ë(wö)->
_©ås
)), \

1117 ()((
p
Ë!0 && (*’Ë
	`PAIR_NUMBER
((
wö
)->
_©ås
))), \

1118 
OK
)

	)

1128 
	#vw_¥ötw
 
vw¥ötw


	)

1129 
	#vw_sˇnw
 
vwsˇnw


	)

1135 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1136 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1143 #i‡!
NCURSES_OPAQUE


1144 
	#is_˛óªd
(
wö
Ë((wö)->
_˛ór
)

	)

1145 
	#is_idcok
(
wö
Ë((wö)->
_idcok
)

	)

1146 
	#is_idlok
(
wö
Ë((wö)->
_idlok
)

	)

1147 
	#is_immedok
(
wö
Ë((wö)->
_immed
)

	)

1148 
	#is_key∑d
(
wö
Ë((wö)->
_u£_key∑d
)

	)

1149 
	#is_Àaveok
(
wö
Ë((wö)->
_Àaveok
)

	)

1150 
	#is_nodñay
(
wö
Ë((wö)->
_dñay
 =0)

	)

1151 
	#is_nŸimeout
(
wö
Ë((wö)->
_nŸimeout
)

	)

1152 
	#is_s¸ﬁlok
(
wö
Ë((wö)->
_s¸ﬁl
)

	)

1153 
	#is_syncok
(
wö
Ë((wö)->
_sync
)

	)

1154 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1155 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1171 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1172 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1173 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1174 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1175 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1176 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1177 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1178 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1179 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1180 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1182 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1183 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1184 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1185 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1186 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1187 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1188 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1189 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1190 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1191 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1195 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1196 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1197 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1198 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1199 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1200 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1201 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1202 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1203 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1204 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1220 
	#KEY_CODE_YES
 0400

	)

1221 
	#KEY_MIN
 0401

	)

1222 
	#KEY_BREAK
 0401

	)

1223 
	#KEY_SRESET
 0530

	)

1224 
	#KEY_RESET
 0531

	)

1228 
	#KEY_DOWN
 0402

	)

1229 
	#KEY_UP
 0403

	)

1230 
	#KEY_LEFT
 0404

	)

1231 
	#KEY_RIGHT
 0405

	)

1232 
	#KEY_HOME
 0406

	)

1233 
	#KEY_BACKSPACE
 0407

	)

1234 
	#KEY_F0
 0410

	)

1235 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1236 
	#KEY_DL
 0510

	)

1237 
	#KEY_IL
 0511

	)

1238 
	#KEY_DC
 0512

	)

1239 
	#KEY_IC
 0513

	)

1240 
	#KEY_EIC
 0514

	)

1241 
	#KEY_CLEAR
 0515

	)

1242 
	#KEY_EOS
 0516

	)

1243 
	#KEY_EOL
 0517

	)

1244 
	#KEY_SF
 0520

	)

1245 
	#KEY_SR
 0521

	)

1246 
	#KEY_NPAGE
 0522

	)

1247 
	#KEY_PPAGE
 0523

	)

1248 
	#KEY_STAB
 0524

	)

1249 
	#KEY_CTAB
 0525

	)

1250 
	#KEY_CATAB
 0526

	)

1251 
	#KEY_ENTER
 0527

	)

1252 
	#KEY_PRINT
 0532

	)

1253 
	#KEY_LL
 0533

	)

1254 
	#KEY_A1
 0534

	)

1255 
	#KEY_A3
 0535

	)

1256 
	#KEY_B2
 0536

	)

1257 
	#KEY_C1
 0537

	)

1258 
	#KEY_C3
 0540

	)

1259 
	#KEY_BTAB
 0541

	)

1260 
	#KEY_BEG
 0542

	)

1261 
	#KEY_CANCEL
 0543

	)

1262 
	#KEY_CLOSE
 0544

	)

1263 
	#KEY_COMMAND
 0545

	)

1264 
	#KEY_COPY
 0546

	)

1265 
	#KEY_CREATE
 0547

	)

1266 
	#KEY_END
 0550

	)

1267 
	#KEY_EXIT
 0551

	)

1268 
	#KEY_FIND
 0552

	)

1269 
	#KEY_HELP
 0553

	)

1270 
	#KEY_MARK
 0554

	)

1271 
	#KEY_MESSAGE
 0555

	)

1272 
	#KEY_MOVE
 0556

	)

1273 
	#KEY_NEXT
 0557

	)

1274 
	#KEY_OPEN
 0560

	)

1275 
	#KEY_OPTIONS
 0561

	)

1276 
	#KEY_PREVIOUS
 0562

	)

1277 
	#KEY_REDO
 0563

	)

1278 
	#KEY_REFERENCE
 0564

	)

1279 
	#KEY_REFRESH
 0565

	)

1280 
	#KEY_REPLACE
 0566

	)

1281 
	#KEY_RESTART
 0567

	)

1282 
	#KEY_RESUME
 0570

	)

1283 
	#KEY_SAVE
 0571

	)

1284 
	#KEY_SBEG
 0572

	)

1285 
	#KEY_SCANCEL
 0573

	)

1286 
	#KEY_SCOMMAND
 0574

	)

1287 
	#KEY_SCOPY
 0575

	)

1288 
	#KEY_SCREATE
 0576

	)

1289 
	#KEY_SDC
 0577

	)

1290 
	#KEY_SDL
 0600

	)

1291 
	#KEY_SELECT
 0601

	)

1292 
	#KEY_SEND
 0602

	)

1293 
	#KEY_SEOL
 0603

	)

1294 
	#KEY_SEXIT
 0604

	)

1295 
	#KEY_SFIND
 0605

	)

1296 
	#KEY_SHELP
 0606

	)

1297 
	#KEY_SHOME
 0607

	)

1298 
	#KEY_SIC
 0610

	)

1299 
	#KEY_SLEFT
 0611

	)

1300 
	#KEY_SMESSAGE
 0612

	)

1301 
	#KEY_SMOVE
 0613

	)

1302 
	#KEY_SNEXT
 0614

	)

1303 
	#KEY_SOPTIONS
 0615

	)

1304 
	#KEY_SPREVIOUS
 0616

	)

1305 
	#KEY_SPRINT
 0617

	)

1306 
	#KEY_SREDO
 0620

	)

1307 
	#KEY_SREPLACE
 0621

	)

1308 
	#KEY_SRIGHT
 0622

	)

1309 
	#KEY_SRSUME
 0623

	)

1310 
	#KEY_SSAVE
 0624

	)

1311 
	#KEY_SSUSPEND
 0625

	)

1312 
	#KEY_SUNDO
 0626

	)

1313 
	#KEY_SUSPEND
 0627

	)

1314 
	#KEY_UNDO
 0630

	)

1315 
	#KEY_MOUSE
 0631

	)

1316 
	#KEY_RESIZE
 0632

	)

1317 
	#KEY_EVENT
 0633

	)

1319 
	#KEY_MAX
 0777

	)

1329 #i‡
NCURSES_MOUSE_VERSION
 > 1

1330 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1332 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1335 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1336 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1337 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1338 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1339 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1340 
	#NCURSES_RESERVED_EVENT
 040L

	)

1343 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1344 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1345 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1346 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1347 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1349 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1350 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1351 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1352 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1353 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1355 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1356 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1357 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1358 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1359 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1361 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1362 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1363 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1364 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1365 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1371 #i‡
NCURSES_MOUSE_VERSION
 > 1

1373 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1374 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1375 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1376 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1377 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1379 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1380 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1381 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1382 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1386 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1387 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1388 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1389 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1391 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1392 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1393 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1394 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1398 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1401 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& (001 << (6 * ((xË- 1))))

	)

1402 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& (002 << (6 * ((xË- 1))))

	)

1403 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& (004 << (6 * ((xË- 1))))

	)

1404 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& (010 << (6 * ((xË- 1))))

	)

1405 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& (020 << (6 * ((xË- 1))))

	)

1406 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& (040 << (6 * ((xË- 1))))

	)

1410 
	gid
;

1411 
	gx
, 
	gy
, 
	gz
;

1412 
mmask_t
 
	gb°©e
;

1414 
	tMEVENT
;

1416 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1417 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1418 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1419 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1420 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1421 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1422 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1424 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1428 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1429 
NCURSES_EXPORT
(Ë
has_key
 ();

1433 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1434 
NCURSES_EXPORT
(Ë
_åa˚dump
 (c⁄° *, 
WINDOW
 *);

1435 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1436 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1437 
NCURSES_EXPORT
(*Ë
_nc_åa˚bôs
 ();

1438 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1439 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1440 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1441 #ifde‡
_XOPEN_SOURCE_EXTENDED


1442 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1443 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1444 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1445 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1447 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1448 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1450 
NCURSES_EXPORT
(*Ë
_åa˚mou£
 (c⁄° 
MEVENT
 *);

1451 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1454 
	#TRACE_DISABLE
 0x0000

	)

1455 
	#TRACE_TIMES
 0x0001

	)

1456 
	#TRACE_TPUTS
 0x0002

	)

1457 
	#TRACE_UPDATE
 0x0004

	)

1458 
	#TRACE_MOVE
 0x0008

	)

1459 
	#TRACE_CHARPUT
 0x0010

	)

1460 
	#TRACE_ORDINARY
 0x001F

	)

1461 
	#TRACE_CALLS
 0x0020

	)

1462 
	#TRACE_VIRTPUT
 0x0040

	)

1463 
	#TRACE_IEVENT
 0x0080

	)

1464 
	#TRACE_BITS
 0x0100

	)

1465 
	#TRACE_ICALLS
 0x0200

	)

1466 
	#TRACE_CCALLS
 0x0400

	)

1467 
	#TRACE_DATABASE
 0x0800

	)

1468 
	#TRACE_ATTRS
 0x1000

	)

1470 
	#TRACE_SHIFT
 13

	)

1471 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1473 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1474 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1475 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1476 
	#OPTIMIZE_MVCUR
 0x01

	)

1477 
	#OPTIMIZE_HASHMAP
 0x02

	)

1478 
	#OPTIMIZE_SCROLL
 0x04

	)

1479 
	#OPTIMIZE_ALL
 0xf‡

	)

1482 #ifde‡
__˝lu•lus


1484 #i‚de‡
NCURSES_NOMACROS


1487 #unde‡
box


1488 #unde‡
˛ór


1489 #unde‡
îa£


1490 #unde‡
move


1491 #unde‡
ª‰esh


	@/usr/include/eti.h

35 #i‚de‡
NCURSES_ETI_H_ö˛


36 
	#NCURSES_ETI_H_ö˛
 1

	)

38 
	#E_OK
 (0)

	)

39 
	#E_SYSTEM_ERROR
 (-1)

	)

40 
	#E_BAD_ARGUMENT
 (-2)

	)

41 
	#E_POSTED
 (-3)

	)

42 
	#E_CONNECTED
 (-4)

	)

43 
	#E_BAD_STATE
 (-5)

	)

44 
	#E_NO_ROOM
 (-6)

	)

45 
	#E_NOT_POSTED
 (-7)

	)

46 
	#E_UNKNOWN_COMMAND
 (-8)

	)

47 
	#E_NO_MATCH
 (-9)

	)

48 
	#E_NOT_SELECTABLE
 (-10)

	)

49 
	#E_NOT_CONNECTED
 (-11)

	)

50 
	#E_REQUEST_DENIED
 (-12)

	)

51 
	#E_INVALID_FIELD
 (-13)

	)

52 
	#E_CURRENT
 (-14)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 8

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/linux/input.h

1 #i‚de‡
_INPUT_H


2 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<asm/ty≥s.h
>

21 
	söput_evít
 {

22 
timevÆ
 
	mtime
;

23 
__u16
 
	mty≥
;

24 
__u16
 
	mcode
;

25 
__s32
 
	mvÆue
;

32 
	#EV_VERSION
 0x010000

	)

38 
	söput_id
 {

39 
__u16
 
	mbu°y≥
;

40 
__u16
 
	mvíd‹
;

41 
__u16
 
	m¥odu˘
;

42 
__u16
 
	mvîsi⁄
;

45 
	söput_absöfo
 {

46 
__s32
 
	mvÆue
;

47 
__s32
 
	mmöimum
;

48 
__s32
 
	mmaximum
;

49 
__s32
 
	mfuzz
;

50 
__s32
 
	mÊ©
;

53 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

54 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

55 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

56 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

57 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

58 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

60 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

61 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

62 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

64 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

65 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

66 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

67 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

69 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 +Év,ÜíË

	)

70 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 +ábs, 
öput_absöfo
Ë

	)

71 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 +ábs, 
öput_absöfo
Ë

	)

73 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
)Ë

	)

74 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

75 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

77 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

83 
	#EV_SYN
 0x00

	)

84 
	#EV_KEY
 0x01

	)

85 
	#EV_REL
 0x02

	)

86 
	#EV_ABS
 0x03

	)

87 
	#EV_MSC
 0x04

	)

88 
	#EV_SW
 0x05

	)

89 
	#EV_LED
 0x11

	)

90 
	#EV_SND
 0x12

	)

91 
	#EV_REP
 0x14

	)

92 
	#EV_FF
 0x15

	)

93 
	#EV_PWR
 0x16

	)

94 
	#EV_FF_STATUS
 0x17

	)

95 
	#EV_MAX
 0x1f

	)

96 
	#EV_CNT
 (
EV_MAX
+1)

	)

102 
	#SYN_REPORT
 0

	)

103 
	#SYN_CONFIG
 1

	)

116 
	#KEY_RESERVED
 0

	)

117 
	#KEY_ESC
 1

	)

118 
	#KEY_1
 2

	)

119 
	#KEY_2
 3

	)

120 
	#KEY_3
 4

	)

121 
	#KEY_4
 5

	)

122 
	#KEY_5
 6

	)

123 
	#KEY_6
 7

	)

124 
	#KEY_7
 8

	)

125 
	#KEY_8
 9

	)

126 
	#KEY_9
 10

	)

127 
	#KEY_0
 11

	)

128 
	#KEY_MINUS
 12

	)

129 
	#KEY_EQUAL
 13

	)

130 
	#KEY_BACKSPACE
 14

	)

131 
	#KEY_TAB
 15

	)

132 
	#KEY_Q
 16

	)

133 
	#KEY_W
 17

	)

134 
	#KEY_E
 18

	)

135 
	#KEY_R
 19

	)

136 
	#KEY_T
 20

	)

137 
	#KEY_Y
 21

	)

138 
	#KEY_U
 22

	)

139 
	#KEY_I
 23

	)

140 
	#KEY_O
 24

	)

141 
	#KEY_P
 25

	)

142 
	#KEY_LEFTBRACE
 26

	)

143 
	#KEY_RIGHTBRACE
 27

	)

144 
	#KEY_ENTER
 28

	)

145 
	#KEY_LEFTCTRL
 29

	)

146 
	#KEY_A
 30

	)

147 
	#KEY_S
 31

	)

148 
	#KEY_D
 32

	)

149 
	#KEY_F
 33

	)

150 
	#KEY_G
 34

	)

151 
	#KEY_H
 35

	)

152 
	#KEY_J
 36

	)

153 
	#KEY_K
 37

	)

154 
	#KEY_L
 38

	)

155 
	#KEY_SEMICOLON
 39

	)

156 
	#KEY_APOSTROPHE
 40

	)

157 
	#KEY_GRAVE
 41

	)

158 
	#KEY_LEFTSHIFT
 42

	)

159 
	#KEY_BACKSLASH
 43

	)

160 
	#KEY_Z
 44

	)

161 
	#KEY_X
 45

	)

162 
	#KEY_C
 46

	)

163 
	#KEY_V
 47

	)

164 
	#KEY_B
 48

	)

165 
	#KEY_N
 49

	)

166 
	#KEY_M
 50

	)

167 
	#KEY_COMMA
 51

	)

168 
	#KEY_DOT
 52

	)

169 
	#KEY_SLASH
 53

	)

170 
	#KEY_RIGHTSHIFT
 54

	)

171 
	#KEY_KPASTERISK
 55

	)

172 
	#KEY_LEFTALT
 56

	)

173 
	#KEY_SPACE
 57

	)

174 
	#KEY_CAPSLOCK
 58

	)

175 
	#KEY_F1
 59

	)

176 
	#KEY_F2
 60

	)

177 
	#KEY_F3
 61

	)

178 
	#KEY_F4
 62

	)

179 
	#KEY_F5
 63

	)

180 
	#KEY_F6
 64

	)

181 
	#KEY_F7
 65

	)

182 
	#KEY_F8
 66

	)

183 
	#KEY_F9
 67

	)

184 
	#KEY_F10
 68

	)

185 
	#KEY_NUMLOCK
 69

	)

186 
	#KEY_SCROLLLOCK
 70

	)

187 
	#KEY_KP7
 71

	)

188 
	#KEY_KP8
 72

	)

189 
	#KEY_KP9
 73

	)

190 
	#KEY_KPMINUS
 74

	)

191 
	#KEY_KP4
 75

	)

192 
	#KEY_KP5
 76

	)

193 
	#KEY_KP6
 77

	)

194 
	#KEY_KPPLUS
 78

	)

195 
	#KEY_KP1
 79

	)

196 
	#KEY_KP2
 80

	)

197 
	#KEY_KP3
 81

	)

198 
	#KEY_KP0
 82

	)

199 
	#KEY_KPDOT
 83

	)

201 
	#KEY_ZENKAKUHANKAKU
 85

	)

202 
	#KEY_102ND
 86

	)

203 
	#KEY_F11
 87

	)

204 
	#KEY_F12
 88

	)

205 
	#KEY_RO
 89

	)

206 
	#KEY_KATAKANA
 90

	)

207 
	#KEY_HIRAGANA
 91

	)

208 
	#KEY_HENKAN
 92

	)

209 
	#KEY_KATAKANAHIRAGANA
 93

	)

210 
	#KEY_MUHENKAN
 94

	)

211 
	#KEY_KPJPCOMMA
 95

	)

212 
	#KEY_KPENTER
 96

	)

213 
	#KEY_RIGHTCTRL
 97

	)

214 
	#KEY_KPSLASH
 98

	)

215 
	#KEY_SYSRQ
 99

	)

216 
	#KEY_RIGHTALT
 100

	)

217 
	#KEY_LINEFEED
 101

	)

218 
	#KEY_HOME
 102

	)

219 
	#KEY_UP
 103

	)

220 
	#KEY_PAGEUP
 104

	)

221 
	#KEY_LEFT
 105

	)

222 
	#KEY_RIGHT
 106

	)

223 
	#KEY_END
 107

	)

224 
	#KEY_DOWN
 108

	)

225 
	#KEY_PAGEDOWN
 109

	)

226 
	#KEY_INSERT
 110

	)

227 
	#KEY_DELETE
 111

	)

228 
	#KEY_MACRO
 112

	)

229 
	#KEY_MUTE
 113

	)

230 
	#KEY_VOLUMEDOWN
 114

	)

231 
	#KEY_VOLUMEUP
 115

	)

232 
	#KEY_POWER
 116

	)

233 
	#KEY_KPEQUAL
 117

	)

234 
	#KEY_KPPLUSMINUS
 118

	)

235 
	#KEY_PAUSE
 119

	)

237 
	#KEY_KPCOMMA
 121

	)

238 
	#KEY_HANGEUL
 122

	)

239 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

240 
	#KEY_HANJA
 123

	)

241 
	#KEY_YEN
 124

	)

242 
	#KEY_LEFTMETA
 125

	)

243 
	#KEY_RIGHTMETA
 126

	)

244 
	#KEY_COMPOSE
 127

	)

246 
	#KEY_STOP
 128

	)

247 
	#KEY_AGAIN
 129

	)

248 
	#KEY_PROPS
 130

	)

249 
	#KEY_UNDO
 131

	)

250 
	#KEY_FRONT
 132

	)

251 
	#KEY_COPY
 133

	)

252 
	#KEY_OPEN
 134

	)

253 
	#KEY_PASTE
 135

	)

254 
	#KEY_FIND
 136

	)

255 
	#KEY_CUT
 137

	)

256 
	#KEY_HELP
 138

	)

257 
	#KEY_MENU
 139

	)

258 
	#KEY_CALC
 140

	)

259 
	#KEY_SETUP
 141

	)

260 
	#KEY_SLEEP
 142

	)

261 
	#KEY_WAKEUP
 143

	)

262 
	#KEY_FILE
 144

	)

263 
	#KEY_SENDFILE
 145

	)

264 
	#KEY_DELETEFILE
 146

	)

265 
	#KEY_XFER
 147

	)

266 
	#KEY_PROG1
 148

	)

267 
	#KEY_PROG2
 149

	)

268 
	#KEY_WWW
 150

	)

269 
	#KEY_MSDOS
 151

	)

270 
	#KEY_COFFEE
 152

	)

271 
	#KEY_SCREENLOCK
 
KEY_COFFEE


	)

272 
	#KEY_DIRECTION
 153

	)

273 
	#KEY_CYCLEWINDOWS
 154

	)

274 
	#KEY_MAIL
 155

	)

275 
	#KEY_BOOKMARKS
 156

	)

276 
	#KEY_COMPUTER
 157

	)

277 
	#KEY_BACK
 158

	)

278 
	#KEY_FORWARD
 159

	)

279 
	#KEY_CLOSECD
 160

	)

280 
	#KEY_EJECTCD
 161

	)

281 
	#KEY_EJECTCLOSECD
 162

	)

282 
	#KEY_NEXTSONG
 163

	)

283 
	#KEY_PLAYPAUSE
 164

	)

284 
	#KEY_PREVIOUSSONG
 165

	)

285 
	#KEY_STOPCD
 166

	)

286 
	#KEY_RECORD
 167

	)

287 
	#KEY_REWIND
 168

	)

288 
	#KEY_PHONE
 169

	)

289 
	#KEY_ISO
 170

	)

290 
	#KEY_CONFIG
 171

	)

291 
	#KEY_HOMEPAGE
 172

	)

292 
	#KEY_REFRESH
 173

	)

293 
	#KEY_EXIT
 174

	)

294 
	#KEY_MOVE
 175

	)

295 
	#KEY_EDIT
 176

	)

296 
	#KEY_SCROLLUP
 177

	)

297 
	#KEY_SCROLLDOWN
 178

	)

298 
	#KEY_KPLEFTPAREN
 179

	)

299 
	#KEY_KPRIGHTPAREN
 180

	)

300 
	#KEY_NEW
 181

	)

301 
	#KEY_REDO
 182

	)

303 
	#KEY_F13
 183

	)

304 
	#KEY_F14
 184

	)

305 
	#KEY_F15
 185

	)

306 
	#KEY_F16
 186

	)

307 
	#KEY_F17
 187

	)

308 
	#KEY_F18
 188

	)

309 
	#KEY_F19
 189

	)

310 
	#KEY_F20
 190

	)

311 
	#KEY_F21
 191

	)

312 
	#KEY_F22
 192

	)

313 
	#KEY_F23
 193

	)

314 
	#KEY_F24
 194

	)

316 
	#KEY_PLAYCD
 200

	)

317 
	#KEY_PAUSECD
 201

	)

318 
	#KEY_PROG3
 202

	)

319 
	#KEY_PROG4
 203

	)

320 
	#KEY_SUSPEND
 205

	)

321 
	#KEY_CLOSE
 206

	)

322 
	#KEY_PLAY
 207

	)

323 
	#KEY_FASTFORWARD
 208

	)

324 
	#KEY_BASSBOOST
 209

	)

325 
	#KEY_PRINT
 210

	)

326 
	#KEY_HP
 211

	)

327 
	#KEY_CAMERA
 212

	)

328 
	#KEY_SOUND
 213

	)

329 
	#KEY_QUESTION
 214

	)

330 
	#KEY_EMAIL
 215

	)

331 
	#KEY_CHAT
 216

	)

332 
	#KEY_SEARCH
 217

	)

333 
	#KEY_CONNECT
 218

	)

334 
	#KEY_FINANCE
 219

	)

335 
	#KEY_SPORT
 220

	)

336 
	#KEY_SHOP
 221

	)

337 
	#KEY_ALTERASE
 222

	)

338 
	#KEY_CANCEL
 223

	)

339 
	#KEY_BRIGHTNESSDOWN
 224

	)

340 
	#KEY_BRIGHTNESSUP
 225

	)

341 
	#KEY_MEDIA
 226

	)

343 
	#KEY_SWITCHVIDEOMODE
 227

	)

345 
	#KEY_KBDILLUMTOGGLE
 228

	)

346 
	#KEY_KBDILLUMDOWN
 229

	)

347 
	#KEY_KBDILLUMUP
 230

	)

349 
	#KEY_SEND
 231

	)

350 
	#KEY_REPLY
 232

	)

351 
	#KEY_FORWARDMAIL
 233

	)

352 
	#KEY_SAVE
 234

	)

353 
	#KEY_DOCUMENTS
 235

	)

355 
	#KEY_BATTERY
 236

	)

357 
	#KEY_BLUETOOTH
 237

	)

358 
	#KEY_WLAN
 238

	)

359 
	#KEY_UWB
 239

	)

361 
	#KEY_UNKNOWN
 240

	)

363 
	#KEY_VIDEO_NEXT
 241

	)

364 
	#KEY_VIDEO_PREV
 242

	)

365 
	#KEY_BRIGHTNESS_CYCLE
 243

	)

366 
	#KEY_BRIGHTNESS_ZERO
 244

	)

367 
	#KEY_DISPLAY_OFF
 245

	)

369 
	#KEY_WIMAX
 246

	)

373 
	#BTN_MISC
 0x100

	)

374 
	#BTN_0
 0x100

	)

375 
	#BTN_1
 0x101

	)

376 
	#BTN_2
 0x102

	)

377 
	#BTN_3
 0x103

	)

378 
	#BTN_4
 0x104

	)

379 
	#BTN_5
 0x105

	)

380 
	#BTN_6
 0x106

	)

381 
	#BTN_7
 0x107

	)

382 
	#BTN_8
 0x108

	)

383 
	#BTN_9
 0x109

	)

385 
	#BTN_MOUSE
 0x110

	)

386 
	#BTN_LEFT
 0x110

	)

387 
	#BTN_RIGHT
 0x111

	)

388 
	#BTN_MIDDLE
 0x112

	)

389 
	#BTN_SIDE
 0x113

	)

390 
	#BTN_EXTRA
 0x114

	)

391 
	#BTN_FORWARD
 0x115

	)

392 
	#BTN_BACK
 0x116

	)

393 
	#BTN_TASK
 0x117

	)

395 
	#BTN_JOYSTICK
 0x120

	)

396 
	#BTN_TRIGGER
 0x120

	)

397 
	#BTN_THUMB
 0x121

	)

398 
	#BTN_THUMB2
 0x122

	)

399 
	#BTN_TOP
 0x123

	)

400 
	#BTN_TOP2
 0x124

	)

401 
	#BTN_PINKIE
 0x125

	)

402 
	#BTN_BASE
 0x126

	)

403 
	#BTN_BASE2
 0x127

	)

404 
	#BTN_BASE3
 0x128

	)

405 
	#BTN_BASE4
 0x129

	)

406 
	#BTN_BASE5
 0x12a

	)

407 
	#BTN_BASE6
 0x12b

	)

408 
	#BTN_DEAD
 0x12f

	)

410 
	#BTN_GAMEPAD
 0x130

	)

411 
	#BTN_A
 0x130

	)

412 
	#BTN_B
 0x131

	)

413 
	#BTN_C
 0x132

	)

414 
	#BTN_X
 0x133

	)

415 
	#BTN_Y
 0x134

	)

416 
	#BTN_Z
 0x135

	)

417 
	#BTN_TL
 0x136

	)

418 
	#BTN_TR
 0x137

	)

419 
	#BTN_TL2
 0x138

	)

420 
	#BTN_TR2
 0x139

	)

421 
	#BTN_SELECT
 0x13a

	)

422 
	#BTN_START
 0x13b

	)

423 
	#BTN_MODE
 0x13c

	)

424 
	#BTN_THUMBL
 0x13d

	)

425 
	#BTN_THUMBR
 0x13e

	)

427 
	#BTN_DIGI
 0x140

	)

428 
	#BTN_TOOL_PEN
 0x140

	)

429 
	#BTN_TOOL_RUBBER
 0x141

	)

430 
	#BTN_TOOL_BRUSH
 0x142

	)

431 
	#BTN_TOOL_PENCIL
 0x143

	)

432 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

433 
	#BTN_TOOL_FINGER
 0x145

	)

434 
	#BTN_TOOL_MOUSE
 0x146

	)

435 
	#BTN_TOOL_LENS
 0x147

	)

436 
	#BTN_TOUCH
 0x14a

	)

437 
	#BTN_STYLUS
 0x14b

	)

438 
	#BTN_STYLUS2
 0x14c

	)

439 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

440 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

442 
	#BTN_WHEEL
 0x150

	)

443 
	#BTN_GEAR_DOWN
 0x150

	)

444 
	#BTN_GEAR_UP
 0x151

	)

446 
	#KEY_OK
 0x160

	)

447 
	#KEY_SELECT
 0x161

	)

448 
	#KEY_GOTO
 0x162

	)

449 
	#KEY_CLEAR
 0x163

	)

450 
	#KEY_POWER2
 0x164

	)

451 
	#KEY_OPTION
 0x165

	)

452 
	#KEY_INFO
 0x166

	)

453 
	#KEY_TIME
 0x167

	)

454 
	#KEY_VENDOR
 0x168

	)

455 
	#KEY_ARCHIVE
 0x169

	)

456 
	#KEY_PROGRAM
 0x16®

	)

457 
	#KEY_CHANNEL
 0x16b

	)

458 
	#KEY_FAVORITES
 0x16c

	)

459 
	#KEY_EPG
 0x16d

	)

460 
	#KEY_PVR
 0x16ê

	)

461 
	#KEY_MHP
 0x16f

	)

462 
	#KEY_LANGUAGE
 0x170

	)

463 
	#KEY_TITLE
 0x171

	)

464 
	#KEY_SUBTITLE
 0x172

	)

465 
	#KEY_ANGLE
 0x173

	)

466 
	#KEY_ZOOM
 0x174

	)

467 
	#KEY_MODE
 0x175

	)

468 
	#KEY_KEYBOARD
 0x176

	)

469 
	#KEY_SCREEN
 0x177

	)

470 
	#KEY_PC
 0x178

	)

471 
	#KEY_TV
 0x179

	)

472 
	#KEY_TV2
 0x17®

	)

473 
	#KEY_VCR
 0x17b

	)

474 
	#KEY_VCR2
 0x17¯

	)

475 
	#KEY_SAT
 0x17d

	)

476 
	#KEY_SAT2
 0x17e

	)

477 
	#KEY_CD
 0x17‡

	)

478 
	#KEY_TAPE
 0x180

	)

479 
	#KEY_RADIO
 0x181

	)

480 
	#KEY_TUNER
 0x182

	)

481 
	#KEY_PLAYER
 0x183

	)

482 
	#KEY_TEXT
 0x184

	)

483 
	#KEY_DVD
 0x185

	)

484 
	#KEY_AUX
 0x186

	)

485 
	#KEY_MP3
 0x187

	)

486 
	#KEY_AUDIO
 0x188

	)

487 
	#KEY_VIDEO
 0x189

	)

488 
	#KEY_DIRECTORY
 0x18a

	)

489 
	#KEY_LIST
 0x18b

	)

490 
	#KEY_MEMO
 0x18¯

	)

491 
	#KEY_CALENDAR
 0x18d

	)

492 
	#KEY_RED
 0x18e

	)

493 
	#KEY_GREEN
 0x18f

	)

494 
	#KEY_YELLOW
 0x190

	)

495 
	#KEY_BLUE
 0x191

	)

496 
	#KEY_CHANNELUP
 0x192

	)

497 
	#KEY_CHANNELDOWN
 0x193

	)

498 
	#KEY_FIRST
 0x194

	)

499 
	#KEY_LAST
 0x195

	)

500 
	#KEY_AB
 0x196

	)

501 
	#KEY_NEXT
 0x197

	)

502 
	#KEY_RESTART
 0x198

	)

503 
	#KEY_SLOW
 0x199

	)

504 
	#KEY_SHUFFLE
 0x19a

	)

505 
	#KEY_BREAK
 0x19b

	)

506 
	#KEY_PREVIOUS
 0x19c

	)

507 
	#KEY_DIGITS
 0x19d

	)

508 
	#KEY_TEEN
 0x19e

	)

509 
	#KEY_TWEN
 0x19f

	)

510 
	#KEY_VIDEOPHONE
 0x1a0

	)

511 
	#KEY_GAMES
 0x1a1

	)

512 
	#KEY_ZOOMIN
 0x1a2

	)

513 
	#KEY_ZOOMOUT
 0x1a3

	)

514 
	#KEY_ZOOMRESET
 0x1a4

	)

515 
	#KEY_WORDPROCESSOR
 0x1a5

	)

516 
	#KEY_EDITOR
 0x1a6

	)

517 
	#KEY_SPREADSHEET
 0x1a7

	)

518 
	#KEY_GRAPHICSEDITOR
 0x1a8

	)

519 
	#KEY_PRESENTATION
 0x1a9

	)

520 
	#KEY_DATABASE
 0x1Ø

	)

521 
	#KEY_NEWS
 0x1ab

	)

522 
	#KEY_VOICEMAIL
 0x1a¯

	)

523 
	#KEY_ADDRESSBOOK
 0x1ad

	)

524 
	#KEY_MESSENGER
 0x1´

	)

525 
	#KEY_DISPLAYTOGGLE
 0x1a‡

	)

526 
	#KEY_SPELLCHECK
 0x1b0

	)

527 
	#KEY_LOGOFF
 0x1b1

	)

529 
	#KEY_DOLLAR
 0x1b2

	)

530 
	#KEY_EURO
 0x1b3

	)

532 
	#KEY_FRAMEBACK
 0x1b4

	)

533 
	#KEY_FRAMEFORWARD
 0x1b5

	)

534 
	#KEY_CONTEXT_MENU
 0x1b6

	)

535 
	#KEY_MEDIA_REPEAT
 0x1b7

	)

537 
	#KEY_DEL_EOL
 0x1c0

	)

538 
	#KEY_DEL_EOS
 0x1c1

	)

539 
	#KEY_INS_LINE
 0x1c2

	)

540 
	#KEY_DEL_LINE
 0x1c3

	)

542 
	#KEY_FN
 0x1d0

	)

543 
	#KEY_FN_ESC
 0x1d1

	)

544 
	#KEY_FN_F1
 0x1d2

	)

545 
	#KEY_FN_F2
 0x1d3

	)

546 
	#KEY_FN_F3
 0x1d4

	)

547 
	#KEY_FN_F4
 0x1d5

	)

548 
	#KEY_FN_F5
 0x1d6

	)

549 
	#KEY_FN_F6
 0x1d7

	)

550 
	#KEY_FN_F7
 0x1d8

	)

551 
	#KEY_FN_F8
 0x1d9

	)

552 
	#KEY_FN_F9
 0x1da

	)

553 
	#KEY_FN_F10
 0x1db

	)

554 
	#KEY_FN_F11
 0x1dc

	)

555 
	#KEY_FN_F12
 0x1dd

	)

556 
	#KEY_FN_1
 0x1de

	)

557 
	#KEY_FN_2
 0x1df

	)

558 
	#KEY_FN_D
 0x1e0

	)

559 
	#KEY_FN_E
 0x1e1

	)

560 
	#KEY_FN_F
 0x1e2

	)

561 
	#KEY_FN_S
 0x1e3

	)

562 
	#KEY_FN_B
 0x1e4

	)

564 
	#KEY_BRL_DOT1
 0x1f1

	)

565 
	#KEY_BRL_DOT2
 0x1f2

	)

566 
	#KEY_BRL_DOT3
 0x1f3

	)

567 
	#KEY_BRL_DOT4
 0x1f4

	)

568 
	#KEY_BRL_DOT5
 0x1f5

	)

569 
	#KEY_BRL_DOT6
 0x1f6

	)

570 
	#KEY_BRL_DOT7
 0x1f7

	)

571 
	#KEY_BRL_DOT8
 0x1f8

	)

572 
	#KEY_BRL_DOT9
 0x1f9

	)

573 
	#KEY_BRL_DOT10
 0x1Á

	)

576 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

577 
	#KEY_MAX
 0x1ff

	)

578 
	#KEY_CNT
 (
KEY_MAX
+1)

	)

584 
	#REL_X
 0x00

	)

585 
	#REL_Y
 0x01

	)

586 
	#REL_Z
 0x02

	)

587 
	#REL_RX
 0x03

	)

588 
	#REL_RY
 0x04

	)

589 
	#REL_RZ
 0x05

	)

590 
	#REL_HWHEEL
 0x06

	)

591 
	#REL_DIAL
 0x07

	)

592 
	#REL_WHEEL
 0x08

	)

593 
	#REL_MISC
 0x09

	)

594 
	#REL_MAX
 0x0f

	)

595 
	#REL_CNT
 (
REL_MAX
+1)

	)

601 
	#ABS_X
 0x00

	)

602 
	#ABS_Y
 0x01

	)

603 
	#ABS_Z
 0x02

	)

604 
	#ABS_RX
 0x03

	)

605 
	#ABS_RY
 0x04

	)

606 
	#ABS_RZ
 0x05

	)

607 
	#ABS_THROTTLE
 0x06

	)

608 
	#ABS_RUDDER
 0x07

	)

609 
	#ABS_WHEEL
 0x08

	)

610 
	#ABS_GAS
 0x09

	)

611 
	#ABS_BRAKE
 0x0a

	)

612 
	#ABS_HAT0X
 0x10

	)

613 
	#ABS_HAT0Y
 0x11

	)

614 
	#ABS_HAT1X
 0x12

	)

615 
	#ABS_HAT1Y
 0x13

	)

616 
	#ABS_HAT2X
 0x14

	)

617 
	#ABS_HAT2Y
 0x15

	)

618 
	#ABS_HAT3X
 0x16

	)

619 
	#ABS_HAT3Y
 0x17

	)

620 
	#ABS_PRESSURE
 0x18

	)

621 
	#ABS_DISTANCE
 0x19

	)

622 
	#ABS_TILT_X
 0x1a

	)

623 
	#ABS_TILT_Y
 0x1b

	)

624 
	#ABS_TOOL_WIDTH
 0x1c

	)

625 
	#ABS_VOLUME
 0x20

	)

626 
	#ABS_MISC
 0x28

	)

627 
	#ABS_MAX
 0x3f

	)

628 
	#ABS_CNT
 (
ABS_MAX
+1)

	)

634 
	#SW_LID
 0x00

	)

635 
	#SW_TABLET_MODE
 0x01

	)

636 
	#SW_HEADPHONE_INSERT
 0x02

	)

637 
	#SW_RFKILL_ALL
 0x03

	)

639 
	#SW_RADIO
 
SW_RFKILL_ALL


	)

640 
	#SW_MICROPHONE_INSERT
 0x04

	)

641 
	#SW_DOCK
 0x05

	)

642 
	#SW_MAX
 0x0f

	)

643 
	#SW_CNT
 (
SW_MAX
+1)

	)

649 
	#MSC_SERIAL
 0x00

	)

650 
	#MSC_PULSELED
 0x01

	)

651 
	#MSC_GESTURE
 0x02

	)

652 
	#MSC_RAW
 0x03

	)

653 
	#MSC_SCAN
 0x04

	)

654 
	#MSC_MAX
 0x07

	)

655 
	#MSC_CNT
 (
MSC_MAX
+1)

	)

661 
	#LED_NUML
 0x00

	)

662 
	#LED_CAPSL
 0x01

	)

663 
	#LED_SCROLLL
 0x02

	)

664 
	#LED_COMPOSE
 0x03

	)

665 
	#LED_KANA
 0x04

	)

666 
	#LED_SLEEP
 0x05

	)

667 
	#LED_SUSPEND
 0x06

	)

668 
	#LED_MUTE
 0x07

	)

669 
	#LED_MISC
 0x08

	)

670 
	#LED_MAIL
 0x09

	)

671 
	#LED_CHARGING
 0x0a

	)

672 
	#LED_MAX
 0x0f

	)

673 
	#LED_CNT
 (
LED_MAX
+1)

	)

679 
	#REP_DELAY
 0x00

	)

680 
	#REP_PERIOD
 0x01

	)

681 
	#REP_MAX
 0x01

	)

687 
	#SND_CLICK
 0x00

	)

688 
	#SND_BELL
 0x01

	)

689 
	#SND_TONE
 0x02

	)

690 
	#SND_MAX
 0x07

	)

691 
	#SND_CNT
 (
SND_MAX
+1)

	)

697 
	#ID_BUS
 0

	)

698 
	#ID_VENDOR
 1

	)

699 
	#ID_PRODUCT
 2

	)

700 
	#ID_VERSION
 3

	)

702 
	#BUS_PCI
 0x01

	)

703 
	#BUS_ISAPNP
 0x02

	)

704 
	#BUS_USB
 0x03

	)

705 
	#BUS_HIL
 0x04

	)

706 
	#BUS_BLUETOOTH
 0x05

	)

707 
	#BUS_VIRTUAL
 0x06

	)

709 
	#BUS_ISA
 0x10

	)

710 
	#BUS_I8042
 0x11

	)

711 
	#BUS_XTKBD
 0x12

	)

712 
	#BUS_RS232
 0x13

	)

713 
	#BUS_GAMEPORT
 0x14

	)

714 
	#BUS_PARPORT
 0x15

	)

715 
	#BUS_AMIGA
 0x16

	)

716 
	#BUS_ADB
 0x17

	)

717 
	#BUS_I2C
 0x18

	)

718 
	#BUS_HOST
 0x19

	)

719 
	#BUS_GSC
 0x1A

	)

720 
	#BUS_ATARI
 0x1B

	)

725 
	#FF_STATUS_STOPPED
 0x00

	)

726 
	#FF_STATUS_PLAYING
 0x01

	)

727 
	#FF_STATUS_MAX
 0x01

	)

744 
	sff_ª∂ay
 {

745 
__u16
 
	mÀngth
;

746 
__u16
 
	mdñay
;

754 
	sff_åiggî
 {

755 
__u16
 
	mbuâ⁄
;

756 
__u16
 
	möãrvÆ
;

771 
	sff_ívñ›e
 {

772 
__u16
 
	m©èck_Àngth
;

773 
__u16
 
	m©èck_Àvñ
;

774 
__u16
 
	mÁde_Àngth
;

775 
__u16
 
	mÁde_Àvñ
;

783 
	sff_c⁄°™t_ef„˘
 {

784 
__s16
 
	mÀvñ
;

785 
ff_ívñ›e
 
	mívñ›e
;

794 
	sff_ømp_ef„˘
 {

795 
__s16
 
	m°¨t_Àvñ
;

796 
__s16
 
	míd_Àvñ
;

797 
ff_ívñ›e
 
	mívñ›e
;

810 
	sff_c⁄dôi⁄_ef„˘
 {

811 
__u16
 
	mright_ßtuøti⁄
;

812 
__u16
 
	mÀ·_ßtuøti⁄
;

814 
__s16
 
	mright_c€ff
;

815 
__s16
 
	mÀ·_c€ff
;

817 
__u16
 
	mdódb™d
;

818 
__s16
 
	m˚¡î
;

839 
	sff_≥riodic_ef„˘
 {

840 
__u16
 
	mwavef‹m
;

841 
__u16
 
	m≥riod
;

842 
__s16
 
	mmagnôude
;

843 
__s16
 
	moff£t
;

844 
__u16
 
	mpha£
;

846 
ff_ívñ›e
 
	mívñ›e
;

848 
__u32
 
	mcu°om_Àn
;

849 
__s16
 *
	mcu°om_d©a
;

860 
	sff_rumbÀ_ef„˘
 {

861 
__u16
 
	m°r⁄g_magnôude
;

862 
__u16
 
	mwók_magnôude
;

888 
	sff_ef„˘
 {

889 
__u16
 
	mty≥
;

890 
__s16
 
	mid
;

891 
__u16
 
	mdúe˘i⁄
;

892 
ff_åiggî
 
	måiggî
;

893 
ff_ª∂ay
 
	mª∂ay
;

896 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

897 
ff_ømp_ef„˘
 
	mømp
;

898 
ff_≥riodic_ef„˘
 
	m≥riodic
;

899 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

900 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

901 } 
	mu
;

908 
	#FF_RUMBLE
 0x50

	)

909 
	#FF_PERIODIC
 0x51

	)

910 
	#FF_CONSTANT
 0x52

	)

911 
	#FF_SPRING
 0x53

	)

912 
	#FF_FRICTION
 0x54

	)

913 
	#FF_DAMPER
 0x55

	)

914 
	#FF_INERTIA
 0x56

	)

915 
	#FF_RAMP
 0x57

	)

917 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

918 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

924 
	#FF_SQUARE
 0x58

	)

925 
	#FF_TRIANGLE
 0x59

	)

926 
	#FF_SINE
 0x5a

	)

927 
	#FF_SAW_UP
 0x5b

	)

928 
	#FF_SAW_DOWN
 0x5c

	)

929 
	#FF_CUSTOM
 0x5d

	)

931 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

932 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

938 
	#FF_GAIN
 0x60

	)

939 
	#FF_AUTOCENTER
 0x61

	)

941 
	#FF_MAX
 0x7f

	)

942 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/linux/soundcard.h

1 #i‚de‡
SOUNDCARD_H


2 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡ 
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1036 #i‡(!
deföed
(
__KERNEL__
Ë&& !deföed(
KERNEL
Ë&& !deföed(
INKERNEL
Ë&& !deföed(
_KERNEL
)Ë|| deföed(
USE_SEQ_MACROS
)

1043 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1045 
£qbuf_dump
();

1047 
OSS_öô
(
£qfd
, 
buÊí
);

1048 
OSS_£qbuf_dump
(
fd
, *
buf
, 
buÊí
);

1049 
OSS_£q_advbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1050 
OSS_£q_√edbuf
(
Àn
, 
fd
, *
buf
, 
buÊí
);

1051 
OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
,

1052 
fd
, *
buf
, 
buÊí
);

1053 
OSS_drum_ˇchög
(
dev
, 
chn
, 
∑tch
,

1054 
fd
, *
buf
, 
buÊí
);

1055 
OSS_wrôe_∑tch
(
fd
, *
buf
, 
Àn
);

1056 
OSS_wrôe_∑tch2
(
fd
, *
buf
, 
Àn
);

1058 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1059 #ifde‡
OSSLIB


1060 
	#SEQ_USE_EXTBUF
() \

1061 *
_£qbuf
; \

1062 
_£qbuÊí
;
_£qbuÂå


	)

1063 
	#SEQ_DEFINEBUF
(
Àn
Ë
	`SEQ_USE_EXTBUF
();
_ªque°ed_£qbuÊí
=
	)
len

1064 
	#_SEQ_ADVBUF
(
Àn
Ë
	`OSS_£q_advbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1065 
	#_SEQ_NEEDBUF
(
Àn
Ë
	`OSS_£q_√edbuf
÷í, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1066 
	#SEQ_DUMPBUF
(Ë
	`OSS_£qbuf_dump
(
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1068 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
) \

1069 
	`OSS_∑tch_ˇchög
(
dev
, -1, 
ö°r
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1070 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
) \

1071 
	`OSS_drum_ˇchög
(
dev
, -1, 
drum
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
)

	)

1074 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1075 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1077 
	#SEQ_USE_EXTBUF
() \

1078 
_£qbuf
[]; \

1079 
_£qbuÊí
;
_£qbuÂå


	)

1081 #i‚de‡
USE_SIMPLE_MACROS


1101 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1102 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1103 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1104 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1120 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1124 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1130 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1131 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1139 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1140 {
	`_SEQ_NEEDBUF
(8);\

1141 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1142 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1143 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1144 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1145 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1146 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1147 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1148 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1149 
	`_SEQ_ADVBUF
(8);}

	)

1151 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1152 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1154 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1155 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1157 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1158 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1164 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1165 {
	`_SEQ_NEEDBUF
(8);\

1166 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1167 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1168 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1169 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1170 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1171 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1172 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1173 
	`_SEQ_ADVBUF
(8);}

	)

1189 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1190 {
ii
, 
Œ
=(
Àn
); \

1191 *
buÂ
=
buf
;\

1192 i‡(
Œ
>6)ll=6;\

1193 
	`_SEQ_NEEDBUF
(8);\

1194 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1195 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1196 
ii
=0;ii<
Œ
;ii++)\

1197 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1198 
ii
=
Œ
;ii<6;ii++)\

1199 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1200 
	`_SEQ_ADVBUF
(8);}

	)

1202 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1203 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1205 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1206 #ifde‡
OSSLIB


1207 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1208 {
	`OSS_∑tch_ˇchög
(
dev
, 
chn
, 
∑tch
, 
£qfd
, 
_£qbuf
, 
_£qbuÊí
); \

1209 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0);}

	)

1211 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1212 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1215 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1216 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1218 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1219 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1222 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1223 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1224 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1225 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1226 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1227 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1228 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1229 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1230 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1231 
	`_SEQ_ADVBUF
(8);}

	)

1236 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1237 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1238 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1239 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1240 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1246 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1255 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1256 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1257 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1258 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1259 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1260 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1261 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1262 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1268 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1269 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1270 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1271 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1272 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1273 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1274 
	`_SEQ_ADVBUF
(8);}

	)

1276 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1281 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1282 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1283 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1284 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1285 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1286 
	`_SEQ_ADVBUF
(4);}

	)

1291 #ifde‡
OSSLIB


1292 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1293 
	`OSS_wrôe_∑tch
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1294 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1295 
	`OSS_wrôe_∑tch2
(
£qfd
, (*)(
∑tchx
), 
Àn
)

	)

1297 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1298 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1299 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1300 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1301 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1302 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/pngconf.h

17 #i‚de‡
PNGCONF_H


18 
	#PNGCONF_H


	)

20 
	#PNG_1_2_X


	)

26 #ifde‡
PNG_USER_CONFIG


27 #i‚de‡
PNG_USER_PRIVATEBUILD


28 
	#PNG_USER_PRIVATEBUILD


	)

30 
	~"≤gu§.h
"

34 #ifde‡
PNG_CONFIGURE_LIBPNG


35 #ifde‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

61 #ifde‡
__STDC__


62 #ifde‡
SPECIALBUILD


63 #¥agm®
mesßge
("PNG_LIBPNG_SPECIALBUILD (and deprecated SPECIALBUILD)\
Çow LIBPNGÑeserved macros. Use PNG_USER_PRIVATEBUILD instead.")

67 #ifde‡
PRIVATEBUILD


68 #¥agm®
mesßge
("PRIVATEBUILD is deprecated.\
 PNG_USER_PRIVATEBUILD instead.")

70 
	#PNG_USER_PRIVATEBUILD
 
PRIVATEBUILD


	)

74 #i‚de‡
PNG_VERSION_INFO_ONLY


80 #i‡!
deföed
(
PNG_NO_WARN_UNINITIALIZED_ROW
) && \

81 !
	$deföed
(
PNG_WARN_UNINITIALIZED_ROW
)

82 
	#PNG_WARN_UNINITIALIZED_ROW
 1

	)

99 #i‚de‡
PNG_ZBUF_SIZE


100 
	#PNG_ZBUF_SIZE
 8192

	)

105 #i‚de‡
PNG_NO_READ_SUPPORTED


106 
	#PNG_READ_SUPPORTED


	)

111 #i‚de‡
PNG_NO_WRITE_SUPPORTED


112 
	#PNG_WRITE_SUPPORTED


	)

117 #i‡!
	`deföed
(
PNG_1_0_X
Ë&& !deföed(
PNG_NO_MNG_FEATURES
)

118 #i‚de‡
PNG_MNG_FEATURES_SUPPORTED


119 
	#PNG_MNG_FEATURES_SUPPORTED


	)

123 #i‚de‡
PNG_NO_FLOATING_POINT_SUPPORTED


124 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


125 
	#PNG_FLOATING_POINT_SUPPORTED


	)

137 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

138 
	#PNG_MAX_MALLOC_64K


	)

174 #i‡
	`deföed
(
__CYGWIN__
)

175 #i‡
	`deföed
(
ALL_STATIC
)

176 #i‡
	`deföed
(
PNG_BUILD_DLL
)

177 #unde‡
PNG_BUILD_DLL


179 #i‡
	`deföed
(
PNG_USE_DLL
)

180 #unde‡
PNG_USE_DLL


182 #i‡
	`deföed
(
PNG_DLL
)

183 #unde‡
PNG_DLL


185 #i‡!
	`deföed
(
PNG_STATIC
)

186 
	#PNG_STATIC


	)

189 #i‡
	`deföed
 (
PNG_BUILD_DLL
)

190 #i‡
	`deföed
(
PNG_STATIC
)

191 #unde‡
PNG_STATIC


193 #i‡
	`deföed
(
PNG_USE_DLL
)

194 #unde‡
PNG_USE_DLL


196 #i‡!
	`deföed
(
PNG_DLL
)

197 
	#PNG_DLL


	)

200 #i‡
	`deföed
(
PNG_STATIC
)

201 #i‡
	`deföed
(
PNG_USE_DLL
)

202 #unde‡
PNG_USE_DLL


204 #i‡
	`deföed
(
PNG_DLL
)

205 #unde‡
PNG_DLL


208 #i‡!
	`deföed
(
PNG_USE_DLL
)

209 
	#PNG_USE_DLL


	)

211 #i‡!
	`deföed
(
PNG_DLL
)

212 
	#PNG_DLL


	)

232 #i‡
	`deföed
(
_WIN32_WCE
)

233 
	~<wödows.h
>

235 
	#PNG_NO_CONSOLE_IO


	)

236 #ifde‡
PNG_DEBUG


237 #unde‡
PNG_DEBUG


241 #ifde‡
PNG_BUILD_DLL


242 #i‚de‡
PNG_CONSOLE_IO_SUPPORTED


243 #i‚de‡
PNG_NO_CONSOLE_IO


244 
	#PNG_NO_CONSOLE_IO


	)

249 #ifde‡
PNG_NO_STDIO


250 #i‚de‡
PNG_NO_CONSOLE_IO


251 
	#PNG_NO_CONSOLE_IO


	)

253 #ifde‡
PNG_DEBUG


254 #i‡(
PNG_DEBUG
 > 0)

255 
	~<°dio.h
>

259 #i‡!
	`deföed
(
_WIN32_WCE
)

261 
	~<°dio.h
>

272 #i‚de‡
PNGARG


274 #ifde‡
OF


275 
	#PNGARG
(
¨gli°
Ë
	`OF
◊rgli°)

	)

278 #ifde‡
_NO_PROTO


279 
	#PNGARG
(
¨gli°
Ë()

	)

280 #i‚de‡
PNG_TYPECAST_NULL


281 
	#PNG_TYPECAST_NULL


	)

284 
	#PNGARG
(
¨gli°
Ë
	)
arglist

296 #i‚de‡
MACOS


297 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
macötosh
)Ë|| deföed(
≠∂ec
) || \

298 
	`deföed
(
THINK_C
Ë|| deföed(
__SC__
Ë|| 
	$deföed
(
TARGET_OS_MAC
)

299 
	#MACOS


	)

304 #i‡!
	`deföed
(
MACOS
Ë&& !deföed(
RISCOS
Ë&& !deföed(
_WIN32_WCE
)

305 
	~<sys/ty≥s.h
>

308 #i‡!
	`deföed
(
PNG_SETJMP_NOT_SUPPORTED
Ë&& !deföed(
PNG_NO_SETJMP_SUPPORTED
)

309 
	#PNG_SETJMP_SUPPORTED


	)

312 #ifde‡
PNG_SETJMP_SUPPORTED


317 #ifde‡
__löux__


318 #ifde‡
_BSD_SOURCE


319 
	#PNG_SAVE_BSD_SOURCE


	)

320 #unde‡
_BSD_SOURCE


322 #ifde‡
_SETJMP_H


326 
__≤gc⁄f
.
h__
 
Æªady
 
ö˛udes
 
£tjmp
.
h
;

327 
__d⁄t__
 
ö˛ude
 
ô
 
agaö
.;

332 
	~<£tjmp.h
>

334 #ifde‡
__löux__


335 #ifde‡
PNG_SAVE_BSD_SOURCE


336 #i‚de‡
_BSD_SOURCE


337 
	#_BSD_SOURCE


	)

339 #unde‡
PNG_SAVE_BSD_SOURCE


344 #ifde‡
BSD


345 
	~<°rögs.h
>

347 
	~<°rög.h
>

351 #ifde‡
PNG_INTERNAL


353 
	~<°dlib.h
>

362 
	#PNG_EXTERN


	)

368 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

369 #i‡
	`deföed
(
MACOS
)

374 #i‡!
	`deföed
(
__MATH_H__
Ë&& !deföed(
__MATH_H
Ë&& !deföed(
__cm©h__
)

375 
	~<Â.h
>

378 
	~<m©h.h
>

380 #i‡
	`deföed
(
_AMIGA
Ë&& deföed(
__SASC
Ë&& deföed(
_M68881
)

384 
	~<m68881.h
>

389 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
WIN32
)Ë|| deföed(
__STDC__
)

390 
	#PNG_ALWAYS_EXTERN


	)

394 #i‡
	`deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

395 
	~<mem.h
>

396 
	~<Æloc.h
>

400 #i‡
	`deföed
(
_MSC_VER
Ë&& (deföed(
WIN32
Ë|| deföed(
_Wödows
) || \

401 
	`deföed
(
_WINDOWS
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
))

402 
	~<mÆloc.h
>

409 #i‚de‡
PNG_DITHER_RED_BITS


410 
	#PNG_DITHER_RED_BITS
 5

	)

412 #i‚de‡
PNG_DITHER_GREEN_BITS


413 
	#PNG_DITHER_GREEN_BITS
 5

	)

415 #i‚de‡
PNG_DITHER_BLUE_BITS


416 
	#PNG_DITHER_BLUE_BITS
 5

	)

426 #i‚de‡
PNG_MAX_GAMMA_8


427 
	#PNG_MAX_GAMMA_8
 11

	)

433 #i‚de‡
PNG_GAMMA_THRESHOLD


434 
	#PNG_GAMMA_THRESHOLD
 0.05

	)

444 #i‚de‡
PNG_NO_CONST


445 
	#PNG_CONST
 c⁄°

	)

447 
	#PNG_CONST


	)

483 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

484 #i‚de‡
PNG_NO_iTXt_SUPPORTED


485 
	#PNG_NO_iTXt_SUPPORTED


	)

487 #i‚de‡
PNG_NO_READ_iTXt


488 
	#PNG_NO_READ_iTXt


	)

490 #i‚de‡
PNG_NO_WRITE_iTXt


491 
	#PNG_NO_WRITE_iTXt


	)

495 #i‡!
	`deföed
(
PNG_NO_iTXt_SUPPORTED
)

496 #i‡!
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_READ_iTXt
)

497 
	#PNG_READ_iTXt


	)

499 #i‡!
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_WRITE_iTXt
)

500 
	#PNG_WRITE_iTXt


	)

510 #ifde‡
PNG_LEGACY_SUPPORTED


511 
	#PNG_NO_FREE_ME


	)

512 
	#PNG_NO_READ_UNKNOWN_CHUNKS


	)

513 
	#PNG_NO_WRITE_UNKNOWN_CHUNKS


	)

514 
	#PNG_NO_READ_USER_CHUNKS


	)

515 
	#PNG_NO_READ_iCCP


	)

516 
	#PNG_NO_WRITE_iCCP


	)

517 
	#PNG_NO_READ_iTXt


	)

518 
	#PNG_NO_WRITE_iTXt


	)

519 
	#PNG_NO_READ_sCAL


	)

520 
	#PNG_NO_WRITE_sCAL


	)

521 
	#PNG_NO_READ_sPLT


	)

522 
	#PNG_NO_WRITE_sPLT


	)

523 
	#PNG_NO_INFO_IMAGE


	)

524 
	#PNG_NO_READ_RGB_TO_GRAY


	)

525 
	#PNG_NO_READ_USER_TRANSFORM


	)

526 
	#PNG_NO_WRITE_USER_TRANSFORM


	)

527 
	#PNG_NO_USER_MEM


	)

528 
	#PNG_NO_READ_EMPTY_PLTE


	)

529 
	#PNG_NO_MNG_FEATURES


	)

530 
	#PNG_NO_FIXED_POINT_SUPPORTED


	)

534 #i‡!
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) || \

535 !
	$deföed
(
PNG_NO_FIXED_POINT_SUPPORTED
)

536 
	#PNG_FIXED_POINT_SUPPORTED


	)

539 #i‚de‡
PNG_NO_FREE_ME


540 
	#PNG_FREE_ME_SUPPORTED


	)

543 #i‡
	`deföed
(
PNG_READ_SUPPORTED
)

545 #i‡!
	`deföed
(
PNG_READ_TRANSFORMS_NOT_SUPPORTED
) && \

546 !
	$deföed
(
PNG_NO_READ_TRANSFORMS
)

547 
	#PNG_READ_TRANSFORMS_SUPPORTED


	)

550 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


551 #i‚de‡
PNG_NO_READ_EXPAND


552 
	#PNG_READ_EXPAND_SUPPORTED


	)

554 #i‚de‡
PNG_NO_READ_SHIFT


555 
	#PNG_READ_SHIFT_SUPPORTED


	)

557 #i‚de‡
PNG_NO_READ_PACK


558 
	#PNG_READ_PACK_SUPPORTED


	)

560 #i‚de‡
PNG_NO_READ_BGR


561 
	#PNG_READ_BGR_SUPPORTED


	)

563 #i‚de‡
PNG_NO_READ_SWAP


564 
	#PNG_READ_SWAP_SUPPORTED


	)

566 #i‚de‡
PNG_NO_READ_PACKSWAP


567 
	#PNG_READ_PACKSWAP_SUPPORTED


	)

569 #i‚de‡
PNG_NO_READ_INVERT


570 
	#PNG_READ_INVERT_SUPPORTED


	)

572 #i‚de‡
PNG_NO_READ_DITHER


573 
	#PNG_READ_DITHER_SUPPORTED


	)

575 #i‚de‡
PNG_NO_READ_BACKGROUND


576 
	#PNG_READ_BACKGROUND_SUPPORTED


	)

578 #i‚de‡
PNG_NO_READ_16_TO_8


579 
	#PNG_READ_16_TO_8_SUPPORTED


	)

581 #i‚de‡
PNG_NO_READ_FILLER


582 
	#PNG_READ_FILLER_SUPPORTED


	)

584 #i‚de‡
PNG_NO_READ_GAMMA


585 
	#PNG_READ_GAMMA_SUPPORTED


	)

587 #i‚de‡
PNG_NO_READ_GRAY_TO_RGB


588 
	#PNG_READ_GRAY_TO_RGB_SUPPORTED


	)

590 #i‚de‡
PNG_NO_READ_SWAP_ALPHA


591 
	#PNG_READ_SWAP_ALPHA_SUPPORTED


	)

593 #i‚de‡
PNG_NO_READ_INVERT_ALPHA


594 
	#PNG_READ_INVERT_ALPHA_SUPPORTED


	)

596 #i‚de‡
PNG_NO_READ_STRIP_ALPHA


597 
	#PNG_READ_STRIP_ALPHA_SUPPORTED


	)

599 #i‚de‡
PNG_NO_READ_USER_TRANSFORM


600 
	#PNG_READ_USER_TRANSFORM_SUPPORTED


	)

602 #i‚de‡
PNG_NO_READ_RGB_TO_GRAY


603 
	#PNG_READ_RGB_TO_GRAY_SUPPORTED


	)

607 #i‡!
	`deföed
(
PNG_NO_PROGRESSIVE_READ
) && \

608 !
	$deföed
(
PNG_PROGRESSIVE_READ_SUPPORTED
)

609 
	#PNG_PROGRESSIVE_READ_SUPPORTED


	)

613 
	#PNG_READ_INTERLACING_SUPPORTED


	)

615 #i‚de‡
PNG_NO_READ_COMPOSITE_NODIV


616 #i‚de‡
PNG_NO_READ_COMPOSITED_NODIV


617 
	#PNG_READ_COMPOSITE_NODIV_SUPPORTED


	)

621 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

624 #i‚de‡
PNG_NO_READ_EMPTY_PLTE


625 
	#PNG_READ_EMPTY_PLTE_SUPPORTED


	)

631 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
)

633 #i‡!
	`deföed
(
PNG_WRITE_TRANSFORMS_NOT_SUPPORTED
) && \

634 !
	$deföed
(
PNG_NO_WRITE_TRANSFORMS
)

635 
	#PNG_WRITE_TRANSFORMS_SUPPORTED


	)

638 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


639 #i‚de‡
PNG_NO_WRITE_SHIFT


640 
	#PNG_WRITE_SHIFT_SUPPORTED


	)

642 #i‚de‡
PNG_NO_WRITE_PACK


643 
	#PNG_WRITE_PACK_SUPPORTED


	)

645 #i‚de‡
PNG_NO_WRITE_BGR


646 
	#PNG_WRITE_BGR_SUPPORTED


	)

648 #i‚de‡
PNG_NO_WRITE_SWAP


649 
	#PNG_WRITE_SWAP_SUPPORTED


	)

651 #i‚de‡
PNG_NO_WRITE_PACKSWAP


652 
	#PNG_WRITE_PACKSWAP_SUPPORTED


	)

654 #i‚de‡
PNG_NO_WRITE_INVERT


655 
	#PNG_WRITE_INVERT_SUPPORTED


	)

657 #i‚de‡
PNG_NO_WRITE_FILLER


658 
	#PNG_WRITE_FILLER_SUPPORTED


	)

660 #i‚de‡
PNG_NO_WRITE_SWAP_ALPHA


661 
	#PNG_WRITE_SWAP_ALPHA_SUPPORTED


	)

663 #i‚de‡
PNG_NO_WRITE_INVERT_ALPHA


664 
	#PNG_WRITE_INVERT_ALPHA_SUPPORTED


	)

666 #i‚de‡
PNG_NO_WRITE_USER_TRANSFORM


667 
	#PNG_WRITE_USER_TRANSFORM_SUPPORTED


	)

671 #i‡!
	`deföed
(
PNG_NO_WRITE_INTERLACING_SUPPORTED
) && \

672 !
	$deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

673 
	#PNG_WRITE_INTERLACING_SUPPORTED


	)

678 #i‡!
	`deföed
(
PNG_NO_WRITE_WEIGHTED_FILTER
) && \

679 !
	`deföed
(
PNG_WRITE_WEIGHTED_FILTER
) && \

680 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

681 
	#PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


	)

684 #i‚de‡
PNG_NO_WRITE_FLUSH


685 
	#PNG_WRITE_FLUSH_SUPPORTED


	)

688 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

690 #i‚de‡
PNG_NO_WRITE_EMPTY_PLTE


691 
	#PNG_WRITE_EMPTY_PLTE_SUPPORTED


	)

697 #i‚de‡
PNG_1_0_X


698 #i‚de‡
PNG_NO_ERROR_NUMBERS


699 
	#PNG_ERROR_NUMBERS_SUPPORTED


	)

703 #i‡
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

704 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

705 #i‚de‡
PNG_NO_USER_TRANSFORM_PTR


706 
	#PNG_USER_TRANSFORM_PTR_SUPPORTED


	)

710 #i‚de‡
PNG_NO_STDIO


711 
	#PNG_TIME_RFC1123_SUPPORTED


	)

730 #i‡!
	`deföed
(
PNG_NO_EASY_ACCESS
Ë&& !deföed(
PNG_EASY_ACCESS_SUPPORTED
)

731 
	#PNG_EASY_ACCESS_SUPPORTED


	)

739 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_OPTIMIZED_CODE
)

740 #i‚de‡
PNG_OPTIMIZED_CODE_SUPPORTED


741 
	#PNG_OPTIMIZED_CODE_SUPPORTED


	)

745 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_ASSEMBLER_CODE
)

746 #i‚de‡
PNG_ASSEMBLER_CODE_SUPPORTED


747 
	#PNG_ASSEMBLER_CODE_SUPPORTED


	)

750 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
) && (__GNUC__ < 4)

752 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

753 
	#PNG_NO_MMX_CODE


	)

757 #i‡
	`deföed
(
__APPLE__
)

758 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

759 
	#PNG_NO_MMX_CODE


	)

763 #i‡(
	`deföed
(
__MWERKS__
Ë&& ((__MWERKS__ < 0x0900Ë|| 
macötosh
))

764 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

765 
	#PNG_NO_MMX_CODE


	)

769 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

770 
	#PNG_MMX_CODE_SUPPORTED


	)

776 #i‡!
	`deföed
(
PNG_1_0_X
)

777 #i‡!
	`deföed
(
PNG_NO_USER_MEM
Ë&& !deföed(
PNG_USER_MEM_SUPPORTED
)

778 
	#PNG_USER_MEM_SUPPORTED


	)

783 #i‡!
	`deföed
(
PNG_1_0_X
)

784 #i‚de‡
PNG_SET_USER_LIMITS_SUPPORTED


785 #i‡!
	`deföed
(
PNG_NO_SET_USER_LIMITS
Ë&& !deföed(
PNG_SET_USER_LIMITS_SUPPORTED
)

786 
	#PNG_SET_USER_LIMITS_SUPPORTED


	)

794 #i‚de‡
PNG_USER_WIDTH_MAX


795 
	#PNG_USER_WIDTH_MAX
 1000000L

	)

797 #i‚de‡
PNG_USER_HEIGHT_MAX


798 
	#PNG_USER_HEIGHT_MAX
 1000000L

	)

837 #i‡
	`deföed
(
PNG_READ_SUPPORTED
) && \

838 !
	`deföed
(
PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

839 !
	$deföed
(
PNG_NO_READ_ANCILLARY_CHUNKS
)

840 
	#PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


	)

843 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
) && \

844 !
	`deföed
(
PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

845 !
	$deföed
(
PNG_NO_WRITE_ANCILLARY_CHUNKS
)

846 
	#PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


	)

849 #ifde‡
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


851 #ifde‡
PNG_NO_READ_TEXT


852 
	#PNG_NO_READ_iTXt


	)

853 
	#PNG_NO_READ_tEXt


	)

854 
	#PNG_NO_READ_zTXt


	)

856 #i‚de‡
PNG_NO_READ_bKGD


857 
	#PNG_READ_bKGD_SUPPORTED


	)

858 
	#PNG_bKGD_SUPPORTED


	)

860 #i‚de‡
PNG_NO_READ_cHRM


861 
	#PNG_READ_cHRM_SUPPORTED


	)

862 
	#PNG_cHRM_SUPPORTED


	)

864 #i‚de‡
PNG_NO_READ_gAMA


865 
	#PNG_READ_gAMA_SUPPORTED


	)

866 
	#PNG_gAMA_SUPPORTED


	)

868 #i‚de‡
PNG_NO_READ_hIST


869 
	#PNG_READ_hIST_SUPPORTED


	)

870 
	#PNG_hIST_SUPPORTED


	)

872 #i‚de‡
PNG_NO_READ_iCCP


873 
	#PNG_READ_iCCP_SUPPORTED


	)

874 
	#PNG_iCCP_SUPPORTED


	)

876 #i‚de‡
PNG_NO_READ_iTXt


877 #i‚de‡
PNG_READ_iTXt_SUPPORTED


878 
	#PNG_READ_iTXt_SUPPORTED


	)

880 #i‚de‡
PNG_iTXt_SUPPORTED


881 
	#PNG_iTXt_SUPPORTED


	)

884 #i‚de‡
PNG_NO_READ_oFFs


885 
	#PNG_READ_oFFs_SUPPORTED


	)

886 
	#PNG_oFFs_SUPPORTED


	)

888 #i‚de‡
PNG_NO_READ_pCAL


889 
	#PNG_READ_pCAL_SUPPORTED


	)

890 
	#PNG_pCAL_SUPPORTED


	)

892 #i‚de‡
PNG_NO_READ_sCAL


893 
	#PNG_READ_sCAL_SUPPORTED


	)

894 
	#PNG_sCAL_SUPPORTED


	)

896 #i‚de‡
PNG_NO_READ_pHYs


897 
	#PNG_READ_pHYs_SUPPORTED


	)

898 
	#PNG_pHYs_SUPPORTED


	)

900 #i‚de‡
PNG_NO_READ_sBIT


901 
	#PNG_READ_sBIT_SUPPORTED


	)

902 
	#PNG_sBIT_SUPPORTED


	)

904 #i‚de‡
PNG_NO_READ_sPLT


905 
	#PNG_READ_sPLT_SUPPORTED


	)

906 
	#PNG_sPLT_SUPPORTED


	)

908 #i‚de‡
PNG_NO_READ_sRGB


909 
	#PNG_READ_sRGB_SUPPORTED


	)

910 
	#PNG_sRGB_SUPPORTED


	)

912 #i‚de‡
PNG_NO_READ_tEXt


913 
	#PNG_READ_tEXt_SUPPORTED


	)

914 
	#PNG_tEXt_SUPPORTED


	)

916 #i‚de‡
PNG_NO_READ_tIME


917 
	#PNG_READ_tIME_SUPPORTED


	)

918 
	#PNG_tIME_SUPPORTED


	)

920 #i‚de‡
PNG_NO_READ_tRNS


921 
	#PNG_READ_tRNS_SUPPORTED


	)

922 
	#PNG_tRNS_SUPPORTED


	)

924 #i‚de‡
PNG_NO_READ_zTXt


925 
	#PNG_READ_zTXt_SUPPORTED


	)

926 
	#PNG_zTXt_SUPPORTED


	)

928 #i‚de‡
PNG_NO_READ_UNKNOWN_CHUNKS


929 
	#PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


	)

930 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


931 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

933 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


934 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

937 #i‡!
	`deföed
(
PNG_NO_READ_USER_CHUNKS
) && \

938 
	$deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
)

939 
	#PNG_READ_USER_CHUNKS_SUPPORTED


	)

940 
	#PNG_USER_CHUNKS_SUPPORTED


	)

941 #ifde‡
PNG_NO_READ_UNKNOWN_CHUNKS


942 #unde‡
PNG_NO_READ_UNKNOWN_CHUNKS


944 #ifde‡
PNG_NO_HANDLE_AS_UNKNOWN


945 #unde‡
PNG_NO_HANDLE_AS_UNKNOWN


948 #i‚de‡
PNG_NO_READ_OPT_PLTE


949 
	#PNG_READ_OPT_PLTE_SUPPORTED


	)

951 #i‡
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë|| deföed(
PNG_READ_tEXt_SUPPORTED
) || \

952 
	$deföed
(
PNG_READ_zTXt_SUPPORTED
)

953 
	#PNG_READ_TEXT_SUPPORTED


	)

954 
	#PNG_TEXT_SUPPORTED


	)

959 #ifde‡
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


961 #ifde‡
PNG_NO_WRITE_TEXT


962 
	#PNG_NO_WRITE_iTXt


	)

963 
	#PNG_NO_WRITE_tEXt


	)

964 
	#PNG_NO_WRITE_zTXt


	)

966 #i‚de‡
PNG_NO_WRITE_bKGD


967 
	#PNG_WRITE_bKGD_SUPPORTED


	)

968 #i‚de‡
PNG_bKGD_SUPPORTED


969 
	#PNG_bKGD_SUPPORTED


	)

972 #i‚de‡
PNG_NO_WRITE_cHRM


973 
	#PNG_WRITE_cHRM_SUPPORTED


	)

974 #i‚de‡
PNG_cHRM_SUPPORTED


975 
	#PNG_cHRM_SUPPORTED


	)

978 #i‚de‡
PNG_NO_WRITE_gAMA


979 
	#PNG_WRITE_gAMA_SUPPORTED


	)

980 #i‚de‡
PNG_gAMA_SUPPORTED


981 
	#PNG_gAMA_SUPPORTED


	)

984 #i‚de‡
PNG_NO_WRITE_hIST


985 
	#PNG_WRITE_hIST_SUPPORTED


	)

986 #i‚de‡
PNG_hIST_SUPPORTED


987 
	#PNG_hIST_SUPPORTED


	)

990 #i‚de‡
PNG_NO_WRITE_iCCP


991 
	#PNG_WRITE_iCCP_SUPPORTED


	)

992 #i‚de‡
PNG_iCCP_SUPPORTED


993 
	#PNG_iCCP_SUPPORTED


	)

996 #i‚de‡
PNG_NO_WRITE_iTXt


997 #i‚de‡
PNG_WRITE_iTXt_SUPPORTED


998 
	#PNG_WRITE_iTXt_SUPPORTED


	)

1000 #i‚de‡
PNG_iTXt_SUPPORTED


1001 
	#PNG_iTXt_SUPPORTED


	)

1004 #i‚de‡
PNG_NO_WRITE_oFFs


1005 
	#PNG_WRITE_oFFs_SUPPORTED


	)

1006 #i‚de‡
PNG_oFFs_SUPPORTED


1007 
	#PNG_oFFs_SUPPORTED


	)

1010 #i‚de‡
PNG_NO_WRITE_pCAL


1011 
	#PNG_WRITE_pCAL_SUPPORTED


	)

1012 #i‚de‡
PNG_pCAL_SUPPORTED


1013 
	#PNG_pCAL_SUPPORTED


	)

1016 #i‚de‡
PNG_NO_WRITE_sCAL


1017 
	#PNG_WRITE_sCAL_SUPPORTED


	)

1018 #i‚de‡
PNG_sCAL_SUPPORTED


1019 
	#PNG_sCAL_SUPPORTED


	)

1022 #i‚de‡
PNG_NO_WRITE_pHYs


1023 
	#PNG_WRITE_pHYs_SUPPORTED


	)

1024 #i‚de‡
PNG_pHYs_SUPPORTED


1025 
	#PNG_pHYs_SUPPORTED


	)

1028 #i‚de‡
PNG_NO_WRITE_sBIT


1029 
	#PNG_WRITE_sBIT_SUPPORTED


	)

1030 #i‚de‡
PNG_sBIT_SUPPORTED


1031 
	#PNG_sBIT_SUPPORTED


	)

1034 #i‚de‡
PNG_NO_WRITE_sPLT


1035 
	#PNG_WRITE_sPLT_SUPPORTED


	)

1036 #i‚de‡
PNG_sPLT_SUPPORTED


1037 
	#PNG_sPLT_SUPPORTED


	)

1040 #i‚de‡
PNG_NO_WRITE_sRGB


1041 
	#PNG_WRITE_sRGB_SUPPORTED


	)

1042 #i‚de‡
PNG_sRGB_SUPPORTED


1043 
	#PNG_sRGB_SUPPORTED


	)

1046 #i‚de‡
PNG_NO_WRITE_tEXt


1047 
	#PNG_WRITE_tEXt_SUPPORTED


	)

1048 #i‚de‡
PNG_tEXt_SUPPORTED


1049 
	#PNG_tEXt_SUPPORTED


	)

1052 #i‚de‡
PNG_NO_WRITE_tIME


1053 
	#PNG_WRITE_tIME_SUPPORTED


	)

1054 #i‚de‡
PNG_tIME_SUPPORTED


1055 
	#PNG_tIME_SUPPORTED


	)

1058 #i‚de‡
PNG_NO_WRITE_tRNS


1059 
	#PNG_WRITE_tRNS_SUPPORTED


	)

1060 #i‚de‡
PNG_tRNS_SUPPORTED


1061 
	#PNG_tRNS_SUPPORTED


	)

1064 #i‚de‡
PNG_NO_WRITE_zTXt


1065 
	#PNG_WRITE_zTXt_SUPPORTED


	)

1066 #i‚de‡
PNG_zTXt_SUPPORTED


1067 
	#PNG_zTXt_SUPPORTED


	)

1070 #i‚de‡
PNG_NO_WRITE_UNKNOWN_CHUNKS


1071 
	#PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


	)

1072 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1073 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1075 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1076 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1077 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1081 #i‡
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë|| deföed(
PNG_WRITE_tEXt_SUPPORTED
) || \

1082 
	$deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

1083 
	#PNG_WRITE_TEXT_SUPPORTED


	)

1084 #i‚de‡
PNG_TEXT_SUPPORTED


1085 
	#PNG_TEXT_SUPPORTED


	)

1095 #i‚de‡
PNG_NO_INFO_IMAGE


1096 
	#PNG_INFO_IMAGE_SUPPORTED


	)

1100 #i‡
	`deföed
(
PNG_tIME_SUPPORTED
)

1101 #i‡!
	`deföed
(
_WIN32_WCE
)

1103 
	~<time.h
>

1116 
	t≤g_uöt_32
;

1117 
	t≤g_öt_32
;

1118 
	t≤g_uöt_16
;

1119 
	t≤g_öt_16
;

1120 
	t≤g_byã
;

1124 #ifde‡
PNG_SIZE_T


1125 
PNG_SIZE_T
 
	t≤g_size_t
;

1126 
	#≤g_sizeof
(
x
Ë
	`≤g_c⁄vît_size
( (x))

	)

1128 
size_t
 
	t≤g_size_t
;

1129 
	#≤g_sizeof
(
x
Ë (x)

	)

1143 #ifde‡
__BORLANDC__


1144 #i‡
	`deföed
(
__LARGE__
Ë|| deföed(
__HUGE__
Ë|| deföed(
__COMPACT__
)

1145 
	#LDATA
 1

	)

1147 
	#LDATA
 0

	)

1150 #i‡!
	`deföed
(
__WIN32__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__CYGWIN__
)

1151 
	#PNG_MAX_MALLOC_64K


	)

1152 #i‡(
LDATA
 != 1)

1153 #i‚de‡
FAR


1154 
	#FAR
 
__Ár


	)

1156 
	#USE_FAR_KEYWORD


	)

1173 #i‡
	`deföed
(
FAR
)

1174 #i‡
	`deföed
(
M_I86MM
)

1175 
	#USE_FAR_KEYWORD


	)

1176 
	#FARDATA
 
FAR


	)

1177 
	~<dos.h
>

1182 #i‚de‡
FAR


1183 
	#FAR


	)

1187 #i‚de‡
FARDATA


1188 
	#FARDATA


	)

1193 
≤g_öt_32
 
	t≤g_fixed_poöt
;

1196 
	tFAR
 * 
	t≤g_voidp
;

1197 
≤g_byã
 
	tFAR
 * 
	t≤g_byãp
;

1198 
≤g_uöt_32
 
	tFAR
 * 
	t≤g_uöt_32p
;

1199 
≤g_öt_32
 
	tFAR
 * 
	t≤g_öt_32p
;

1200 
≤g_uöt_16
 
	tFAR
 * 
	t≤g_uöt_16p
;

1201 
≤g_öt_16
 
	tFAR
 * 
	t≤g_öt_16p
;

1202 
PNG_CONST
 
	tFAR
 * 
	t≤g_c⁄°_ch¨p
;

1203 
	tFAR
 * 
	t≤g_ch¨p
;

1204 
≤g_fixed_poöt
 
	tFAR
 * 
	t≤g_fixed_poöt_p
;

1206 #i‚de‡
PNG_NO_STDIO


1207 #i‡
	`deföed
(
_WIN32_WCE
)

1208 
HANDLE
 
	t≤g_FILE_p
;

1210 
FILE
 * 
	t≤g_FILE_p
;

1214 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1215 
	tFAR
 * 
	t≤g_doubÀp
;

1219 
≤g_byã
 
	tFAR
 * FAR * 
	t≤g_byãµ
;

1220 
≤g_uöt_32
 
	tFAR
 * FAR * 
	t≤g_uöt_32µ
;

1221 
≤g_öt_32
 
	tFAR
 * FAR * 
	t≤g_öt_32µ
;

1222 
≤g_uöt_16
 
	tFAR
 * FAR * 
	t≤g_uöt_16µ
;

1223 
≤g_öt_16
 
	tFAR
 * FAR * 
	t≤g_öt_16µ
;

1224 
PNG_CONST
 
	tFAR
 * FAR * 
	t≤g_c⁄°_ch¨µ
;

1225 
	tFAR
 * FAR * 
	t≤g_ch¨µ
;

1226 
≤g_fixed_poöt
 
	tFAR
 * FAR * 
	t≤g_fixed_poöt_µ
;

1227 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1228 
	tFAR
 * FAR * 
	t≤g_doubÀµ
;

1232 
	tFAR
 * FAR * FAR * 
	t≤g_ch¨µp
;

1234 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed(
PNG_1_2_X
)

1241 
ch¨f
 * 
	t≤g_zch¨p
;

1242 
ch¨f
 * 
	tFAR
 * 
	t≤g_zch¨µ
;

1243 
z_°ªam
 
	tFAR
 * 
	t≤g_z°ªamp
;

1264 #i‡!
	`deföed
(
PNG_DLL
Ë&& (deföed(
PNG_BUILD_DLL
Ë|| deföed(
PNG_USE_DLL
))

1265 
	#PNG_DLL


	)

1271 #i‡
	`deföed
(
__CYGWIN__
)

1272 #i‡!
	`deföed
(
PNG_STATIC
)

1273 #i‡
	`deföed
(
PNG_USE_GLOBAL_ARRAYS
)

1274 #unde‡
PNG_USE_GLOBAL_ARRAYS


1276 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
)

1277 
	#PNG_USE_LOCAL_ARRAYS


	)

1280 #i‡
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë|| deföed(
PNG_NO_GLOBAL_ARRAYS
)

1281 #i‡
	`deföed
(
PNG_USE_GLOBAL_ARRAYS
)

1282 #unde‡
PNG_USE_GLOBAL_ARRAYS


1286 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1287 
	#PNG_USE_LOCAL_ARRAYS


	)

1295 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1296 #i‡
	`deföed
(
PNG_NO_GLOBAL_ARRAYS
) || \

1297 (
	`deföed
(
__GNUC__
Ë&& deföed(
PNG_DLL
)Ë|| 
	$deföed
(
_MSC_VER
)

1298 
	#PNG_USE_LOCAL_ARRAYS


	)

1300 
	#PNG_USE_GLOBAL_ARRAYS


	)

1304 #i‡
	`deföed
(
__CYGWIN__
)

1305 #unde‡
PNGAPI


1306 
	#PNGAPI
 
__cde˛


	)

1307 #unde‡
PNG_IMPEXP


1308 
	#PNG_IMPEXP


	)

1318 #i‡
	`deföed
(
__MINGW32__
Ë&& !deföed(
PNG_MODULEDEF
)

1319 #i‚de‡
PNG_NO_MODULEDEF


1320 
	#PNG_NO_MODULEDEF


	)

1324 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& deföed(
PNG_BUILD_DLL
Ë&& !deföed(
PNG_NO_MODULEDEF
)

1325 
	#PNG_IMPEXP


	)

1328 #i‡
	`deföed
(
PNG_DLL
Ë|| deföed(
_DLL
Ë|| deföed(
__DLL__
 ) || \

1329 (–
	`deföed
(
_Wödows
Ë|| deföed(
_WINDOWS
) || \

1330 
	`deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
) ))

1332 #i‚de‡
PNGAPI


1333 #i‡
	`deföed
(
__GNUC__
Ë|| (deföed (
_MSC_VER
) && (_MSC_VER >= 800))

1334 
	#PNGAPI
 
__cde˛


	)

1336 
	#PNGAPI
 
_cde˛


	)

1340 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& (!deföed(
PNG_DLL
) || \

1342 
	#PNG_IMPEXP


	)

1345 #i‡!
	`deföed
(
PNG_IMPEXP
)

1347 
	#PNG_EXPORT_TYPE1
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1348 
	#PNG_EXPORT_TYPE2
(
ty≥
,
symbﬁ
Ëty≥ 
PNG_IMPEXP
 
PNGAPI
 
	)
symbol

1351 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

1352 #i‡(
_MSC_VER
 >800Ë|| (
__BORLANDC__
 >= 0x500)

1353 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE1


	)

1355 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE2


	)

1356 #i‡
	`deföed
(
PNG_BUILD_DLL
)

1357 
	#PNG_IMPEXP
 
__exp‹t


	)

1359 
	#PNG_IMPEXP


	)

1362 
C
++ 
	`˛as£s
 (=
huge
) */

1366 #i‡!
	`deföed
(
PNG_IMPEXP
)

1367 #i‡
	`deföed
(
PNG_BUILD_DLL
)

1368 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

1370 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

1375 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& deföed(
__OS2__
)

1376 #i‚de‡
PNGAPI


1377 
	#PNGAPI
 
_Sy°em


	)

1385 #i‚de‡
PNGAPI


1386 
	#PNGAPI


	)

1388 #i‚de‡
PNG_IMPEXP


1389 
	#PNG_IMPEXP


	)

1392 #ifde‡
PNG_BUILDSYMS


1393 #i‚de‡
PNG_EXPORT


1394 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_FUNCTION_EXPORT
 symbﬁ 
END


	)

1396 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1397 #i‚de‡
PNG_EXPORT_VAR


1398 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_DATA_EXPORT


	)

1403 #i‚de‡
PNG_EXPORT


1404 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1407 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1408 #i‚de‡
PNG_EXPORT_VAR


1409 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_IMPEXP
 
	)
type

1417 #i‚de‡
PNG_ABORT


1418 
	#PNG_ABORT
(Ë
	`ab‹t
()

	)

1421 #ifde‡
PNG_SETJMP_SUPPORTED


1422 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
jmpbuf
)

	)

1424 
	#≤g_jmpbuf
(
≤g_±r
) \

1425 (
LIBPNG_WAS_COMPILED_WITH__PNG_SETJMP_NOT_SUPPORTED
)

	)

1428 #i‡
	`deföed
(
USE_FAR_KEYWORD
)

1430 
	#CHECK
 1

	)

1431 
	#NOCHECK
 0

	)

1432 
	#CVT_PTR
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
CHECK
))

	)

1433 
	#CVT_PTR_NOCHECK
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
NOCHECK
))

	)

1434 
	#≤g_¢¥ötf
 
_f¢¥ötf


	)

1435 
	#≤g_°æí
 
_f°æí


	)

1436 
	#≤g_memcmp
 
_fmemcmp


	)

1437 
	#≤g_mem˝y
 
_fmem˝y


	)

1438 
	#≤g_mem£t
 
_fmem£t


	)

1440 
	#CVT_PTR
(
±r
Ë’å)

	)

1441 
	#CVT_PTR_NOCHECK
(
±r
Ë’å)

	)

1442 #i‚de‡
PNG_NO_SNPRINTF


1443 #ifde‡
_MSC_VER


1444 
	#≤g_¢¥ötf
 
_¢¥ötf


	)

1445 
	#≤g_¢¥ötf2
 
_¢¥ötf


	)

1446 
	#≤g_¢¥ötf6
 
_¢¥ötf


	)

1448 
	#≤g_¢¥ötf
 
¢¥ötf


	)

1449 
	#≤g_¢¥ötf2
 
¢¥ötf


	)

1450 
	#≤g_¢¥ötf6
 
¢¥ötf


	)

1458 
	#≤g_¢¥ötf
(
s1
,
n
,
fmt
,
x1
Ë
	`•rötf
(s1,fmt,x1)

	)

1459 
	#≤g_¢¥ötf2
(
s1
,
n
,
fmt
,
x1
,
x2
Ë
	`•rötf
(s1,fmt,x1,x2)

	)

1460 
	#≤g_¢¥ötf6
(
s1
,
n
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
) \

1461 
	`•rötf
(
s1
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
)

	)

1463 
	#≤g_°æí
 
°æí


	)

1464 
	#≤g_memcmp
 
memcmp


	)

1465 
	#≤g_mem˝y
 
mem˝y


	)

1466 
	#≤g_mem£t
 
mem£t


	)

1473 #i‡(
PNG_ZBUF_SIZE
 > 65536LË&& 
	`deföed
(
PNG_MAX_MALLOC_64K
)

1474 #unde‡
PNG_ZBUF_SIZE


1475 
	#PNG_ZBUF_SIZE
 65536L

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 #i‚de‡
__ASSEMBLY__


17 
__sig√d__
 
	t__s8
;

18 
	t__u8
;

20 
__sig√d__
 
	t__s16
;

21 
	t__u16
;

23 
__sig√d__
 
	t__s32
;

24 
	t__u32
;

26 #ifde‡
__GNUC__


27 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

28 
__exãnsi⁄__
 
	t__u64
;

30 
__sig√d__
 
	t__s64
;

31 
	t__u64
;

	@/usr/include/asm/ioctls.h

1 #i‚de‡
_ASM_X86_IOCTLS_H


2 
	#_ASM_X86_IOCTLS_H


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

51 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

52 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

53 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

54 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, )

	)

56 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

58 
	#FIONCLEX
 0x5450

	)

59 
	#FIOCLEX
 0x5451

	)

60 
	#FIOASYNC
 0x5452

	)

61 
	#TIOCSERCONFIG
 0x5453

	)

62 
	#TIOCSERGWILD
 0x5454

	)

63 
	#TIOCSERSWILD
 0x5455

	)

64 
	#TIOCGLCKTRMIOS
 0x5456

	)

65 
	#TIOCSLCKTRMIOS
 0x5457

	)

66 
	#TIOCSERGSTRUCT
 0x5458

	)

67 
	#TIOCSERGETLSR
 0x5459

	)

68 
	#TIOCSERGETMULTI
 0x545A

	)

69 
	#TIOCSERSETMULTI
 0x545B

	)

71 
	#TIOCMIWAIT
 0x545C

	)

72 
	#TIOCGICOUNT
 0x545D

	)

73 
	#TIOCGHAYESESP
 0x545E

	)

74 
	#TIOCSHAYESESP
 0x545F

	)

75 
	#FIOQSIZE
 0x5460

	)

78 
	#TIOCPKT_DATA
 0

	)

79 
	#TIOCPKT_FLUSHREAD
 1

	)

80 
	#TIOCPKT_FLUSHWRITE
 2

	)

81 
	#TIOCPKT_STOP
 4

	)

82 
	#TIOCPKT_START
 8

	)

83 
	#TIOCPKT_NOSTOP
 16

	)

84 
	#TIOCPKT_DOSTOP
 32

	)

86 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

52 
	#SO_TIMESTAMPNS
 35

	)

53 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

55 
	#SO_MARK
 36

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1,

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


166 
	mRUSAGE_THREAD
 = 1

167 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

169 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

173 
	#__√ed_timevÆ


	)

174 
	~<bôs/time.h
>

177 
	srußge


180 
timevÆ
 
	mru_utime
;

182 
timevÆ
 
	mru_°ime
;

184 
	mru_maxrss
;

187 
	mru_ixrss
;

189 
	mru_idrss
;

191 
	mru_i§ss
;

194 
	mru_möÊt
;

196 
	mru_majÊt
;

198 
	mru_nsw≠
;

201 
	mru_öblock
;

203 
	mru_oublock
;

205 
	mru_msg¢d
;

207 
	mru_msgrcv
;

209 
	mru_nsig«ls
;

213 
	mru_nvcsw
;

216 
	mru_nivcsw
;

220 
	#PRIO_MIN
 -20

	)

221 
	#PRIO_MAX
 20

	)

225 
	e__¥i‹ôy_which


227 
	mPRIO_PROCESS
 = 0,

228 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

229 
	mPRIO_PGRP
 = 1,

230 
	#PRIO_PGRP
 
PRIO_PGRP


	)

231 
	mPRIO_USER
 = 2

232 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡ 
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	#__mÆloc_±r_t
 *

	)

29 
	#__mÆloc_size_t
 
size_t


	)

30 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

32 #ifde‡
__GNUC__


34 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

37 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

41 
	#__MALLOC_P
(
¨gs
Ë
	)
args

42 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

47 
__BEGIN_DECLS


50 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

53 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

54 
__©åibuã_mÆloc__
 
__wur
;

61 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

62 
__©åibuã_w¨n_unu£d_ªsu…__
;

65 
‰ì
 
__MALLOC_P
 ((*
__±r
));

68 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

71 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

72 
__©åibuã_mÆloc__
 
__wur
;

75 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

76 
__©åibuã_mÆloc__
 
__wur
;

80 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

81 
__©åibuã_mÆloc__
 
__wur
;

85 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

88 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

89 
__©åibuã_mÆloc__
;

93 
	smÆlöfo
 {

94 
	m¨ía
;

95 
	m‹dblks
;

96 
	msmblks
;

97 
	mhblks
;

98 
	mhblkhd
;

99 
	musmblks
;

100 
	mfsmblks
;

101 
	mu‹dblks
;

102 
	mf‹dblks
;

103 
	mkìpco°
;

107 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

110 #i‚de‡
M_MXFAST


111 
	#M_MXFAST
 1

	)

113 #i‚de‡
M_NLBLKS


114 
	#M_NLBLKS
 2

	)

116 #i‚de‡
M_GRAIN


117 
	#M_GRAIN
 3

	)

119 #i‚de‡
M_KEEP


120 
	#M_KEEP
 4

	)

124 
	#M_TRIM_THRESHOLD
 -1

	)

125 
	#M_TOP_PAD
 -2

	)

126 
	#M_MMAP_THRESHOLD
 -3

	)

127 
	#M_MMAP_MAX
 -4

	)

128 
	#M_CHECK_ACTION
 -5

	)

129 
	#M_PERTURB
 -6

	)

132 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

136 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

140 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

143 
mÆloc_°©s
 
__MALLOC_P
 (());

146 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

150 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

155 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

157 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

158 
__c⁄°
 
__mÆloc_±r_t
));

159 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

160 
__c⁄°
 
__mÆloc_±r_t
));

161 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

162 
__c⁄°
 
__mÆloc_±r_t
));

163 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

164 
size_t
 
__size
,

165 
__c⁄°
 
__mÆloc_±r_t
));

166 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

169 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

172 
__END_DECLS


	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #unde‡
NCURSES_DLL


38 
	#NCURSES_STATIC


	)

40 #i‡
deföed
(
__CYGWIN__
)

41 #i‡
deföed
(
NCURSES_DLL
)

42 #i‡
deföed
(
NCURSES_STATIC
)

43 #unde‡
NCURSES_STATIC


46 #unde‡
NCURSES_IMPEXP


47 #unde‡
NCURSES_API


48 #unde‡
NCURSES_EXPORT


49 #unde‡
NCURSES_EXPORT_VAR


50 #i‡
deföed
(
NCURSES_DLL
)

52 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

53 #ñi‡
deföed
(
NCURSES_STATIC
)

55 
	#NCURSES_IMPEXP


	)

58 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#NCURSES_API
 
__cde˛


	)

61 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

62 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

66 #i‡!
deföed
(
NCURSES_IMPEXP
)

67 
	#NCURSES_IMPEXP


	)

69 #i‡!
deföed
(
NCURSES_API
)

70 
	#NCURSES_API


	)

72 #i‡!
deföed
(
NCURSES_EXPORT
)

73 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

75 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

76 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

83 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

84 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

114 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/unctrl.h

44 #i‚de‡
NCURSES_UNCTRL_H_ö˛


45 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

47 #unde‡
NCURSES_VERSION


48 
	#NCURSES_VERSION
 "5.6"

	)

50 #ifde‡
__˝lu•lus


54 
	~<cur£s.h
>

56 #unde‡
un˘æ


57 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

59 #ifde‡
__˝lu•lus


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


76 
	#__mb°©e_t_deföed
 1

	)

80 
	m__cou¡
;

83 #ifde‡
__WINT_TYPE__


84 
__WINT_TYPE__
 
	m__wch
;

86 
wöt_t
 
	m__wch
;

88 
	m__wchb
[4];

89 } 
	m__vÆue
;

90 } 
	t__mb°©e_t
;

92 #unde‡
__√ed_mb°©e_t


97 #ifde‡
_WCHAR_H


99 
__BEGIN_NAMESPACE_C99


101 
__mb°©e_t
 
	tmb°©e_t
;

102 
	g__END_NAMESPACE_C99


103 #ifde‡
__USE_GNU


104 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

107 #i‚de‡
WCHAR_MIN


109 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

110 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

113 #i‚de‡
WEOF


114 
	#WEOF
 (0xffffffffu)

	)

119 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


120 
	~<w˘y≥.h
>

124 
__BEGIN_DECLS


126 
__BEGIN_NAMESPACE_STD


129 
tm
;

130 
__END_NAMESPACE_STD


134 
	$__USING_NAMESPACE_STD
(
tm
)

137 
__BEGIN_NAMESPACE_STD


139 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

142 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

143 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

144 
__THROW
;

147 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

156 
__THROW
 
__©åibuã_puª__
;

158 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

159 
__THROW
 
__©åibuã_puª__
;

160 
__END_NAMESPACE_STD


162 #ifde‡
__USE_GNU


164 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

167 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

168 
size_t
 
__n
Ë
__THROW
;

172 
	~<xloˇÀ.h
>

174 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

175 
__loˇÀ_t
 
__loc
Ë
__THROW
;

177 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

178 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

181 
__BEGIN_NAMESPACE_STD


184 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

188 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

189 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_GNU


198 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

199 
__loˇÀ_t
 
__loc
Ë
__THROW
;

204 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

205 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

208 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

211 
__BEGIN_NAMESPACE_STD


213 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

214 
__THROW
 
__©åibuã_puª__
;

216 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

217 
__THROW
 
__©åibuã_puª__
;

218 
__END_NAMESPACE_STD


220 #ifde‡
__USE_GNU


223 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

224 
__THROW
 
__©åibuã_puª__
;

227 
__BEGIN_NAMESPACE_STD


230 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

231 
__THROW
 
__©åibuã_puª__
;

234 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

235 
__THROW
 
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

238 
__THROW
 
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

241 
__THROW
 
__©åibuã_puª__
;

244 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

245 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

246 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

249 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

250 
__END_NAMESPACE_STD


252 #ifde‡
__USE_XOPEN


254 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

255 
__THROW
 
__©åibuã_puª__
;

258 #ifde‡
__USE_GNU


260 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

261 
__THROW
 
__©åibuã_puª__
;

265 
__BEGIN_NAMESPACE_STD


267 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

268 
__THROW
 
__©åibuã_puª__
;

271 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

272 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

273 
__THROW
 
__©åibuã_puª__
;

276 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

281 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

282 
__THROW
;

285 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

286 
__END_NAMESPACE_STD


288 #ifde‡
__USE_GNU


291 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

292 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

293 
__THROW
;

297 
__BEGIN_NAMESPACE_STD


300 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

304 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

308 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

312 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

313 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

314 
mb°©e_t
 *
__p
Ë
__THROW
;

317 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

321 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

322 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

323 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

324 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

325 
__END_NAMESPACE_STD


327 #ifde‡
__USE_EXTERN_INLINES


333 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

334 
__exã∫_ölöe
 
wöt_t


335 
	`__NTH
 (
	$btowc
 (
__c
))

336 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

337 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

339 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

340 
__exã∫_ölöe
 

341 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

342 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

343 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

345 
__exã∫_ölöe
 
size_t


346 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

347 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

348 {  (
__ps
 !
NULL


349 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

352 
__BEGIN_NAMESPACE_STD


355 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

356 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

361 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

362 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

363 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

364 
__END_NAMESPACE_STD


367 #ifdef 
__USE_GNU


370 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

371 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

372 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

377 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

378 
size_t
 
__nwc
, size_à
__Àn
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

384 #ifde‡
__USE_XOPEN


386 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

390 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

394 
__BEGIN_NAMESPACE_STD


397 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

399 
__END_NAMESPACE_STD


401 #ifde‡
__USE_ISOC99


402 
__BEGIN_NAMESPACE_C99


404 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

405 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

408 
__END_NAMESPACE_C99


412 
__BEGIN_NAMESPACE_STD


415 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

416 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

420 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

423 
__END_NAMESPACE_STD


425 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

426 
__BEGIN_NAMESPACE_C99


429 
__exãnsi⁄__


430 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

431 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

432 
__THROW
;

436 
__exãnsi⁄__


437 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

439 
__ba£
Ë
__THROW
;

440 
__END_NAMESPACE_C99


443 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


446 
__exãnsi⁄__


447 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

449 
__THROW
;

453 
__exãnsi⁄__


454 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

456 
__ba£
Ë
__THROW
;

459 #ifde‡
__USE_GNU


473 
	~<xloˇÀ.h
>

477 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

479 
__loˇÀ_t
 
__loc
Ë
__THROW
;

481 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

485 
__exãnsi⁄__


486 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

488 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

490 
__exãnsi⁄__


491 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

492 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

493 
__ba£
, 
__loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

502 
__THROW
;

504 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__loˇÀ_t
 
__loc
Ë
__THROW
;

510 #ifdef 
__USE_GNU


513 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

517 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

518 
__THROW
;

524 #ifdef 
__USE_GNU


527 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

530 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


531 
__BEGIN_NAMESPACE_STD


534 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

541 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

542 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

548 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

551 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

552 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

553 
__THROW
 ;

559 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

560 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

561 
__gnuc_va_li°
 
__¨g
)

567 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

568 
__gnuc_va_li°
 
__¨g
)

572 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

573 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

574 
__gnuc_va_li°
 
__¨g
)

575 
__THROW
 ;

582 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

583 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

589 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

594 
__THROW
 ;

596 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

597 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

598 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

599 #ifde‡
__REDIRECT


603 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

604 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

605 
__isoc99_fwsˇnf
)

607 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

608 
__isoc99_wsˇnf
)

610 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

612 
__isoc99_swsˇnf
)

613 
__THROW
 ;

615 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

616 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

617 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

618 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

619 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

620 
__THROW
;

621 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

622 
	#wsˇnf
 
__isoc99_wsˇnf


	)

623 
	#swsˇnf
 
__isoc99_swsˇnf


	)

627 
__END_NAMESPACE_STD


630 #ifde‡
__USE_ISOC99


631 
__BEGIN_NAMESPACE_C99


636 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

637 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

638 
__gnuc_va_li°
 
__¨g
)

644 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

645 
__gnuc_va_li°
 
__¨g
)

648 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

650 
__gnuc_va_li°
 
__¨g
)

651 
__THROW
 ;

653 #i‡!
deföed
 
__USE_GNU
 \

654 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

655 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

661 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

664 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

667 
__THROW
 ;

669 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
);

672 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

673 
__gnuc_va_li°
 
__¨g
);

674 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

676 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

677 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

678 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

679 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

683 
__END_NAMESPACE_C99


687 
__BEGIN_NAMESPACE_STD


692 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

693 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

699 
wöt_t
 
	`gëwch¨
 ();

706 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

707 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

721 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

722 
__FILE
 *
__ª°ri˘
 
__°ªam
);

728 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

729 
__FILE
 *
__ª°ri˘
 
__°ªam
);

736 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

737 
__END_NAMESPACE_STD


740 #ifde‡
__USE_GNU


748 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

757 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

774 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

775 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

784 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

793 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

794 
__FILE
 *
__ª°ri˘
 
__°ªam
);

798 
__BEGIN_NAMESPACE_C99


802 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

803 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

804 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

805 
__END_NAMESPACE_C99


807 #ifde‡
__USE_GNU


808 
	~<xloˇÀ.h
>

812 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

813 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

814 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

815 
__loˇÀ_t
 
__loc
Ë
__THROW
;

824 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


825 
	#__√ed_iswxxx


	)

826 
	~<w˘y≥.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


831 
	~<bôs/wch¨2.h
>

834 #ifde‡
__LDBL_COMPAT


835 
	~<bôs/wch¨-ldbl.h
>

838 
__END_DECLS


844 #unde‡
__√ed_mb°©e_t


845 #unde‡
__√ed_wöt_t


	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/sockios.h

1 #i‚de‡
_ASM_X86_SOCKIOS_H


2 
	#_ASM_X86_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

156 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

160 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

170 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_öô
(
NAME
) \

173 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


178 
	#__libc_rwlock_öô
(
NAME
) \

179 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_öô
(
NAME
) \

182 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

186 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

187 
	#__libc_lock_öô_ªcursive
(
NAME
) \

188 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_öô_ªcursive
(
NAME
) \

192 i‡(
__±hªad_muãx_öô
 !
NULL
) \

194 
±hªad_muãx©å_t
 
__©å
; \

195 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

196 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

198 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

200 } 0)

	)

203 
	#__πld_lock_öô_ªcursive
(
NAME
) \

205 i‡(
__±hªad_muãx_öô
 !
NULL
) \

207 
±hªad_muãx©å_t
 
__©å
; \

208 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

209 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

211 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

213 } 0)

	)

218 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

219 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

221 
	#__libc_lock_föi
(
NAME
) \

222 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

224 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


225 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

227 
	#__libc_rwlock_föi
(
NAME
) \

228 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

233 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

235 
	#__libc_lock_föi_ªcursive
(
NAME
) \

236 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

240 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wæock
(
NAME
) \

250 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

253 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

254 
	#__libc_lock_lock_ªcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 i‡((
NAME
).
ow√r
 !
£lf
) \

259 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
˙t
; \

263 } 0)

	)

265 
	#__libc_lock_lock_ªcursive
(
NAME
) \

266 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

270 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

271 
	#__libc_lock_åylock
(
NAME
) \

272 
	`Œl_åylock
 (
NAME
)

	)

274 
	#__libc_lock_åylock
(
NAME
) \

275 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_åyrdlock
(
NAME
) \

278 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_åywæock
(
NAME
) \

280 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

283 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

284 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

286 
ªsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 i‡((
NAME
).
ow√r
 !
£lf
) \

290 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
˙t
 = 1; \

296 
ªsu…
 = 
EBUSY
; \

299 ++(
NAME
).
˙t
; \

300 
ªsu…
; \

301 })

	)

303 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

304 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

307 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

308 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

311 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

324 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

326 i‡(--(
NAME
).
˙t
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

334 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

337 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


338 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

339 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

341 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

342 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

344 
	#__πld_lock_lock_ªcursive
(
NAME
) \

345 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

347 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

348 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

350 
	#__πld_lock_lock_ªcursive
(
NAME
) \

351 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

353 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

358 #i‡
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

364 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

372 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

386 (*
routöe
Ë(*), *
¨g
);

387 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

388 
execuã
);

389 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

390 (*
routöe
Ë(*), *
¨g
);

391 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

392 
execuã
);

395 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

397 
_avaû
; \

398 i‡(
DOIT
) { \

399 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

400 i‡(
_avaû
) { \

401 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

402 
ARG
)); \

404 
_buf„r
.
__routöe
 = (
FCT
); \

405 
_buf„r
.
__¨g
 = (
ARG
); \

408 
_avaû
 = 0; \

409 }

	)

412 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

413 i‡(
_avaû
) { \

414 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

415 } i‡(
DOIT
) \

416 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

417 
	}

	)
}

420 
	#__libc_˛ónup_íd
(
DOIT
) \

421 i‡(
_avaû
) { \

422 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

423 } i‡(
DOIT
) \

424 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

428 
__exã∫_ölöe
 

429 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

431 i‡(
f
->
__do_ô
)

432 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

433 
	}
}

435 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

437 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

438 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

439 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

440 .
__do_ô
 = 1 };

	)

442 
	#__libc_˛ónup_p›
(
execuã
) \

443 
__˛‰ame
.
__do_ô
 = (
execuã
); \

444 } 0)

	)

448 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gë•ecific
(
KEY
) \

453 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

466 (*
__∑ª¡
) (),

467 (*
__chûd
) (),

468 *
__dso_h™dÀ
);

473 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

474 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

476 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

478 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

480 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

482 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

484 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

486 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

488 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

489 
__köd
);

491 #ifde‡
__USE_UNIX98


492 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

493 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

495 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

497 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

499 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

501 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

503 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

505 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

508 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

509 (*
__de°r_fun˘i⁄
) (*));

511 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

512 
__c⁄°
 *
__poöãr
);

514 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

516 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

517 (*
__öô_routöe
) ());

519 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

520 (*
__∑ª¡
) (),

521 (*
__chûd
) ());

527 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


528 #ifde‡
wók_exã∫


529 #i‡
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
Ë
	)
sym

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

536 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

537 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

538 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

541 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

542 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

543 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

544 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

545 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

546 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

547 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

548 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

549 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

550 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

551 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

552 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

553 
	$wók_exã∫
 (
__±hªad_öôülize
)

554 
	$wók_exã∫
 (
__±hªad_©f‹k
)

555 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

556 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

557 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

559 #¥agm®
wók
 
__±hªad_muãx_öô


560 #¥agm®
wók
 
__±hªad_muãx_de°roy


561 #¥agm®
wók
 
__±hªad_muãx_lock


562 #¥agm®
wók
 
__±hªad_muãx_åylock


563 #¥agm®
wók
 
__±hªad_muãx_u∆ock


564 #¥agm®
wók
 
__±hªad_muãx©å_öô


565 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


566 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


567 #¥agm®
wók
 
__±hªad_rwlock_de°roy


568 #¥agm®
wók
 
__±hªad_rwlock_rdlock


569 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


570 #¥agm®
wók
 
__±hªad_rwlock_wæock


571 #¥agm®
wók
 
__±hªad_rwlock_åywæock


572 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


573 #¥agm®
wók
 
__±hªad_key_¸óã


574 #¥agm®
wók
 
__±hªad_£t•ecific


575 #¥agm®
wók
 
__±hªad_gë•ecific


576 #¥agm®
wók
 
__±hªad_⁄˚


577 #¥agm®
wók
 
__±hªad_öôülize


578 #¥agm®
wók
 
__±hªad_©f‹k


579 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


580 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


581 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_GNU


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
427
8026
banksw.h
boards/112.c
boards/117.c
boards/164.c
boards/183.c
boards/185.c
boards/186.c
boards/187.c
boards/189.c
boards/208.c
boards/222.c
boards/235.c
boards/57.c
boards/8157.c
boards/8237.c
boards/88.c
boards/90.c
boards/95.c
boards/__dummy_mapper.c
boards/bmc13in1jy110.c
boards/bmc42in1r.c
boards/bmc64in1nr.c
boards/bmc70in1.c
boards/bmcgk192.c
boards/bonza.c
boards/cc21.c
boards/datalatch.c
boards/deirom.c
boards/dream.c
boards/fk23c.c
boards/h2288.c
boards/karaoke.c
boards/kof97.c
boards/konami-qtai.c
boards/malee.c
boards/mapinc.h
boards/mmc1.c
boards/mmc3.c
boards/mmc3.h
boards/mmc5.c
boards/n106.c
boards/novel.c
boards/sachen.c
boards/sheroes.c
boards/sl1632.c
boards/sonic5.c
boards/subor.c
boards/super24.c
boards/supervision.c
boards/t-262.c
boards/tengen.c
cart.c
cart.h
cheat.c
cheat.h
crc32.c
crc32.h
debug.c
debug.h
dprintf.h
drawing.h
driver.h
drivers/android/debug.c
drivers/android/emulator.cpp
drivers/android/file.c
drivers/android/input.cpp
drivers/android/input.h
drivers/android/main.cpp
drivers/android/netplay.c
drivers/android/sound.cpp
drivers/android/sound.h
drivers/android/ticks.c
drivers/android/ticks.h
drivers/android/video.cpp
drivers/android/video.h
drivers/common/args.c
drivers/common/args.h
drivers/common/cheat.c
drivers/common/cheat.h
drivers/common/config.c
drivers/common/config.h
drivers/common/unixdsp.c
drivers/common/unixdsp.h
drivers/common/vidblit.c
drivers/common/vidblit.h
drivers/gp2x/asmutils.h
drivers/gp2x/cpuctrl.c
drivers/gp2x/cpuctrl.h
drivers/gp2x/dface.h
drivers/gp2x/fonts.c
drivers/gp2x/fonts.h
drivers/gp2x/gp2x-sound.c
drivers/gp2x/gp2x-video.c
drivers/gp2x/gp2x-video.h
drivers/gp2x/gp2x.c
drivers/gp2x/gp2x.h
drivers/gp2x/input.c
drivers/gp2x/main.c
drivers/gp2x/main.h
drivers/gp2x/menu.c
drivers/gp2x/menu.h
drivers/gp2x/minimal.c
drivers/gp2x/minimal.h
drivers/gp2x/mmuhack.c
drivers/gp2x/readpng.c
drivers/gp2x/readpng.h
drivers/gp2x/squidgehack.c
drivers/gp2x/squidgehack.h
drivers/gp2x/throttle.c
drivers/gp2x/throttle.h
drivers/gp2x/unix-netplay.c
drivers/gp2x/unix-netplay.h
drivers/gp2x/usage.h
drivers/gp2x/usbjoy.c
drivers/gp2x/usbjoy.h
drivers/gp2x_test/minimal.c
drivers/gp2x_test/throttle.c
endian.c
endian.h
fce.c
fce.h
fceline.h
fceu098.c
fceu098.h
fds.c
fds.h
file.c
file.h
general.c
general.h
git.h
ines-bad.h
ines-correct.h
ines.c
ines.h
input.c
input.h
input/arkanoid.c
input/bworld.c
input/cursor.c
input/fkb.c
input/fkb.h
input/ftrainer.c
input/hypershot.c
input/mahjong.c
input/oekakids.c
input/powerpad.c
input/quiz.c
input/shadow.c
input/share.h
input/suborkb.c
input/suborkb.h
input/toprider.c
input/zapper.c
mappers/113.c
mappers/15.c
mappers/151.c
mappers/16.c
mappers/17.c
mappers/18.c
mappers/180.c
mappers/183.c
mappers/184.c
mappers/193.c
mappers/200.c
mappers/201.c
mappers/202.c
mappers/203.c
mappers/204.c
mappers/21.c
mappers/212.c
mappers/213.c
mappers/214.c
mappers/215.c
mappers/217.c
mappers/22.c
mappers/225.c
mappers/226.c
mappers/227.c
mappers/228.c
mappers/229.c
mappers/23.c
mappers/230.c
mappers/231.c
mappers/232.c
mappers/234.c
mappers/240.c
mappers/241.c
mappers/242.c
mappers/244.c
mappers/246.c
mappers/24and26.c
mappers/25.c
mappers/255.c
mappers/27.c
mappers/32.c
mappers/33.c
mappers/40.c
mappers/41.c
mappers/42.c
mappers/43.c
mappers/46.c
mappers/50.c
mappers/51.c
mappers/59.c
mappers/6.c
mappers/60.c
mappers/61.c
mappers/62.c
mappers/65.c
mappers/67.c
mappers/68.c
mappers/69.c
mappers/71.c
mappers/72.c
mappers/73.c
mappers/75.c
mappers/76.c
mappers/77.c
mappers/79.c
mappers/8.c
mappers/80.c
mappers/82.c
mappers/83.c
mappers/85.c
mappers/86.c
mappers/89.c
mappers/91.c
mappers/92.c
mappers/97.c
mappers/99.c
mappers/emu2413.c
mappers/emu2413.h
mappers/emutypes.h
mappers/mapinc.h
mappers/mmc2and4.c
mappers/simple.c
mappers/vrc7tone.h
md5.c
md5.h
memory.c
memory.h
movie.c
movie.h
ncpu.h
ncpu_debug.c
netplay.c
netplay.h
nsf.c
nsf.h
ops.h
palette.c
palette.h
palettes/conv.c
palettes/palettes.h
palettes/rp2c04001.h
palettes/rp2c04002.h
palettes/rp2c04003.h
palettes/rp2c05004.h
ppu.c
ppu.h
ppu098.c
ppu098.h
pputile098.h
sound.c
sound.h
state.c
state.h
svga.c
svga.h
types.h
unif.c
unif.h
version.h
video.c
video.h
vsuni.c
vsuni.h
x6502.c
x6502.h
zlib/unzip.c
zlib/unzip.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/joystick.h
/usr/include/linux/kernel.h
/usr/include/linux/version.h
/usr/include/math.h
/usr/include/menu.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/png.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/soundcard.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/curses.h
/usr/include/eti.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/input.h
/usr/include/linux/soundcard.h
/usr/include/pngconf.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/patchkey.h
/usr/include/malloc.h
/usr/include/ncurses_dll.h
/usr/include/setjmp.h
/usr/include/sys/cdefs.h
/usr/include/unctrl.h
/usr/include/wchar.h
/usr/include/zlibdefs.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/bits/libc-lock.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/limits.h
/usr/include/wctype.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/errno-base.h
